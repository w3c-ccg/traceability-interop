{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dac2be82-9430-4776-9d19-4ebde41bfdb5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "28eaf9d6-f459-4c83-855e-076388a2d411",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5c98d69-aad3-4a8c-83e9-8d5ba858d416",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2e03b908-9296-4172-8b38-dea2e777859c"
                }
              }
            ]
          },
          {
            "id": "af560533-0643-4204-80e0-737b41c449ef",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad3d9815-c0ad-4f9f-888b-c4606698c856",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4343fb3b-059f-40e4-838f-7d4fb8b88ccb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c38455db-434e-4367-98d3-6abf915202db",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dcf0147a-eb11-46c8-81f9-fcebf99d8b91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "908c5fbf-6aec-48b2-831c-1270cc14ead6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbfbbbde-7f27-4e33-88fe-315752a624cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "739e3c42-71f6-48fb-8558-9626c5b625bf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "518686ab-3659-46dd-a353-66f0bb4ad163",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11e7432f-446c-4174-aa59-a77583c0ced2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fca54e64-1e8e-4095-b94b-dddfa976c61e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc1828fc-ee61-49be-b969-cb032308fb15"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "feb4bf2e-29b3-4350-b51e-4030b8aa3387",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dbe7e096-1239-4f51-b9fd-c8c47204a760"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5dba968-bfde-4150-990f-043bcb959794",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3965cf5e-9487-4694-9f55-95ada7d35b02"
            }
          }
        ]
      },
      {
        "id": "381c0be0-0ca9-4625-a8ef-3774d4c41844",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d770cd19-7f03-40a0-8d18-fde051457643",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db85d72f-f789-47cb-bebe-4f2286c79e89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47545b05-7625-4f56-aeda-df532dc90cc5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea36cee6-64e9-4f2b-87fc-0b98fe5d96e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b87014aa-f61c-4683-a132-456c3b483725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10262ea2-3e77-4a6d-9afa-aacd978d091f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f881e0-e1fa-4df2-8d9e-556ae69b5db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec50ffe3-06f4-43cb-a5e7-3dc101731134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6c9fb3-ce8a-4441-abb8-d5dc6c0c5401",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77acb3b-4fe9-4dd7-9f5a-5b6a72c0c749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e4605d4-24b4-44bb-81fe-990f82d86895"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61499661-8db6-4a2b-a2de-91a309c4ef26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3315b992-4b45-4485-9047-3bb8def1ab6f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87965017-04a2-4c8f-b7b4-0ead50e274e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e64a490-2b94-4d33-8d9f-d4af5dec1a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ae66e2-e43f-4bff-a8b8-41cef9a701e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503f72cd-b43e-4f16-84b0-892bdd52f8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0026ec2b-5f8d-4c0f-b0f2-6d4607373bdf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40626139-8087-4db1-b585-00a17a9d8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc663369-ff25-4e28-b2be-56a6b0a7b191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b46930-9bf4-4c95-90e2-c77164386feb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8399568c-2160-461e-bb17-9c7ec522fdfe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7755d743-1328-427c-8817-4d54607dae8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85284faa-a468-433d-b100-fb3340c6a6e0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f4549e3-08db-4020-b7ac-ddd6e3b81c81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "25fd57d6-7b95-4e57-b840-67f56d7e1dc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b03ad26-ded9-4386-ac35-36b0dbc46c76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c0f70e67-6950-4e95-a2ce-15d1dca8260c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81c9e280-539c-48f9-9aba-12b10550ea77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ae6ea07-4601-4824-aa90-fc8242897650"
            }
          }
        ]
      },
      {
        "id": "5802f06d-4811-4e3b-bf30-e900b5c11b94",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c8dc85c5-a18d-4183-a959-62b1f3c02f62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "373a94bc-c150-4aa4-ae1d-2254f75005da",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "be350305-8714-4633-a09a-248772dd4b30",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968b7341-25bc-4beb-82f0-6d103e5a6942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dd3cd8-2c07-4a54-894b-f440685d9351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af9297b-9ce2-4257-815a-c488b0ddb210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "355b1c0a-24c2-47f2-afa7-71877933d671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f975210-f3ae-4826-8440-08a6f28f378b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f56dcca-a4d8-41e6-8318-ccf8c71fdee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df705273-9d45-4d02-a376-8f7d53fbc80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf742a4-602d-4693-9f25-da1afa60c1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e77b0707-c77f-48f0-bc52-1c1b59ce9d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783e4251-5ff0-4cdc-93bc-207a2e34f46a",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9af0f89-f596-4a04-9fa9-63e269611e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8ccb5e-4c3e-4070-b49d-1760b2169d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33aa929b-fa6b-41bb-8382-17d3b6c7f738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f50fd4da-fcd0-4d64-8894-ab4d40fafa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87bd879-b3d4-457b-aa3c-5a7acac4fb78",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeac75f-d483-42fe-9fca-47d61ecaf481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0020b6ed-79cf-4c69-abe0-77e52b0bb510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acff800-27cb-4866-8c9c-c1c01c59f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b472ea20-8900-492c-974a-d550ada0cb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f410cb1a-1927-48da-ad4c-9c5e4420d32a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12ac13c-9a4b-403b-8cd6-b48c5b8a431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163c7a5f-d0f3-40c9-ae48-106b68f5a7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8e72b9-7954-4476-a1e6-3481540ffa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afb5e10a-d7d5-4ca8-bc7a-1fe91484a2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3d5bcb-cec2-4815-bb94-0d851d41f4f1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4706b2e-8e4d-42a1-b998-bce776f8a8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf9a532-4923-4d9b-9309-47a06b9d7390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995bde1b-db9c-408f-9e28-a016c9402c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "709deb9c-bc53-46a2-8cc1-4efd97506b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464460bf-8e9a-4ce3-b079-d111031204fe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5708a36a-eb17-4338-9b79-70d8d8b60fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a789f1b-fae4-4e5e-b17f-f8845a9d1bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01000c16-6acc-461a-ab5c-e9e47a13c68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7666ca5c-bd46-4b92-b65c-e0c137b0e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effe4ab6-f818-4700-87ca-c841059ef08c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2ae2e9-93af-460c-ac27-e8c9f3bd33a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf567a98-8009-4d7b-84fa-d033ff64f2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065c3d59-8647-4fd7-b24a-acbc813c5e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e2e234-a592-4818-b451-6e4c822bc799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2ed732-1396-4834-9e35-8cb7018e16db",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd193cc-45c0-487e-89cf-740119796462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed14b82b-b897-4aee-858e-826ceee51340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7da1550-1dbd-4028-ae3b-6a1ea0fce0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "164e11b8-6b1e-429f-b569-6c81e03b98fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d41173f-a58a-42b1-adf0-d4daf16cab37",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3b6d2a-85fd-4c90-a194-53a33a9ece47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1708cd1b-3850-431e-b4fe-592dfeca0a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3846d945-94ea-40a4-9d48-62846abbf50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7fa23f2-d6d0-4173-97dc-6be62ee1c670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb2da98-66a0-4611-b733-c5b2da6e315b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760a77cc-533e-4e9d-85a8-0ec10576ad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd5244f-0a6c-4696-ae5f-f9a839c4982d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd336bf8-60ad-4de0-92c0-9c90b8e1b68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "966ad481-0c73-4d0c-b9f1-6dc6161ba91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb4f608-8151-4e27-ac5b-cae9eec0d550",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd8e1a2-b02a-4a0d-b244-bebfe615ce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845ac01f-5e6f-4d49-9960-65f60198b538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f21a81-32bb-4a53-b620-e435b44d4f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0282d9aa-53e7-4177-9a2e-4bda27ea6cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d02cb9-7a9a-4339-bd7d-831c323e20b4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d700594a-cfe6-4b4e-8023-e5c0e2b6fd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b9ac6c-3065-4413-8628-8993c1d9a55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c6cdd7-360c-46d4-9f32-824d0e6d3b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9922eb2-2af8-40e4-bb93-ea93a13d4795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b94716a-ea8f-4581-89c0-9f1ea410fe32",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eed73cf-5185-41c7-8bda-3ef9d8628a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee46b74-6284-44a8-8f4a-39151e0cba77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11eb8195-1d25-4573-871c-dbc7150edf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11eb26b-99f6-4b75-b788-bb4f7c6353d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1562463-9676-498b-9d3e-39102d1ef1c3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c405a1-1947-4852-bd5c-cb176db271df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a521e586-8fc9-458a-af0e-7c38a23f9ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d32b4e6-ed25-4a67-9784-576480fcb139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a0a5b02-74c0-4ebb-be7a-dc790d3139e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bfa0a6-6ca1-43dc-accb-39c8c582869a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f9ea2b-06b0-4526-81aa-10555e716bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47b1b8f-e94d-424e-9a91-0c284bcd403f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ae2de6-5f02-48e9-a1ac-533105f1cd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbff93e3-6708-4384-90f6-f281aab0bf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff77389-192f-4e5e-b20a-b7ac4c531af4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5267aace-ee03-4d55-adee-f30a7c2a6af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04dc10e5-a8ac-4b01-9a38-146bbee16afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e14187-d3e6-48a5-932d-1d8fe3f00c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1385276d-8a3a-409e-95ce-7f23e9eec193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9da1002-3034-4314-ab31-4888dca2e4fa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3441dee5-d5a4-43d5-8c88-6e5f4162d73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c9b558-edc0-4ab3-9f36-3d031409014f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f33772-9853-4931-a3fd-b85f5bc71246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aeaa8935-2132-4bfc-a531-afce70bd40ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fe847c-b8d1-4ed3-be69-e93ecba9e943",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba78afaf-5b61-4d06-8d9e-62cd8a69fdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33f83d1-e860-45d9-a667-8daf9579a0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10303ffe-6f21-4c61-81f2-8b69c4306cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01d8c4d1-adc1-473a-b1a2-0b204b02cece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e88e16b-4ca1-47b3-8305-ff30d6890fc3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ef50f9-b988-4201-8dbc-527032397213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dead527-0f61-4c59-9e8a-f6f6542425fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b49b50c-5f8f-477e-a2b8-f3f25b52653e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d4da7b-458d-4e57-b62d-22573099a6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d6a68d-0d67-4d0a-8d96-5dd397377924",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49870241-27c7-4e87-bc25-89d1d6748a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d6de23-487e-47d1-933f-b6d96203bc63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad5b001-ee72-4adf-9b78-3c1878e1c536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f990778-bb7f-4485-afc2-f9197dec65d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacb27b0-b8f8-4ac4-b213-2b23ef8337a2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8a454d-991d-4717-90ed-6621603858de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8727645b-d416-439c-b234-5f2c60cb9d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9e4b78-67a6-4478-bb86-067bf87f117b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f0b7cb-a0c6-435d-9d80-0c0215ee5598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1ac6b2-12d3-47b6-9062-c5f405e5db2b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1ee086-03ef-4bfb-b034-41260a274774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5083365b-fd42-416d-8bd2-c5cae6321ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e2ac58-4907-450e-b58d-bc88deb254b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "866350fc-e7e8-498d-937b-30e6ca1b84f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17415e04-7a11-48d4-9edf-0932f313d718",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5b03f8-9167-4ca7-8a37-003f64f0dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b41798-3833-4c62-99f2-b572a19f6308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3111d398-bd03-4959-b97b-3b42813f16c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbc543d-d775-45f3-a1b0-eb65f98ca895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e24c0ab-1b0a-437f-b04f-88935fa6181b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4246a040-371d-47a1-8347-3661ec944d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f044d9-5b6b-4489-9134-3293b9690405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2386839e-56b4-4391-a403-8edafcd38ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8a882a-fcd4-4a7d-99b1-5f23dfd62243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8c9dc6-1fa0-4a29-8481-f001b2a8999f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0d1229-25a8-4c00-9afa-d7b7f69f0558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b443bdf-502f-4a72-8a7a-4934b6ecb535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fd558b-32c1-42b6-bf07-e2820830e174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d91ff1-3b8f-4e6d-84f4-7c37a1136918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db9d64d-6e59-404c-8a9b-c71c2d5919bc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d28db5a-428a-42e6-bb94-cd5b4a56447c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d8227c-f93c-470c-9096-54d774df2742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcf3d39-ec7b-4bc6-bd36-b921ebe475a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1bf7fb-8234-48f0-95d2-3d5630da0373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cd7133-9328-407c-969c-c9ae7c3e1e40",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c016ceaa-dde5-452d-9edd-595dab1b9855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032813a6-a0f6-4053-8f32-a2cc3c6f7241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80c96a5-dd8c-4974-a75d-8b8254c4dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc48a328-c6c1-449f-a042-caeaaf6008c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec42bf7c-3484-4506-a36f-9594fcfb9005",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9990e9-8c24-4592-b95a-a1146fa7377a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdb6acc-f46b-44a7-b5f7-bb398a7071a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56098655-3193-431e-bba2-74a7611d0b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b78aa92-7de7-47ba-b419-734495cb902b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bcaa4b-4839-45a4-821e-401033be5825",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21544792-fbab-44aa-8708-4397d1c7c714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1539afe3-1fce-4966-af36-6dfdf983923b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3691fdf5-90bb-4907-af1b-eb1e371b0790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50b2c0f4-e0db-448b-9029-a89ee366da93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e75e688-4c12-4765-825f-2cfc6c664fc5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1ff345-7096-4864-bf3e-b40be8b97449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94315d92-0326-4c09-b93e-21ee90afbe4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c03936f-24bf-4610-961a-919948e9318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "623606d5-78c1-4b5b-abe9-869c6cf0f259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6736399a-8de6-469c-9efb-04ec790d186f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e935b9f-0f3f-4efc-8ae5-21f268b86292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbcd662-6ccc-4c4a-9bb6-40ba12071189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23e7bce-8265-449b-8007-b225c88793a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7332b44b-983b-444a-b9dd-79c86bc89ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e21f4df-6d02-4e90-8e12-f0c00c669c2f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a6b9c4-2f2e-4091-b0e3-eb848cfa385d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc867b9-6c39-496d-82c1-998e3729b99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6934d8-cedf-4c4b-839a-380749be2c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea8ade4-8e90-47b2-bdfd-9197dcb35da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8ecc3f-fe3c-424c-b80a-a38d722212e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff6caeb-55a9-4832-bc43-80a6bfec64b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0192076-f7b5-4133-9b2d-557633f395ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea48f48-5c65-4c0c-8394-e1a3bcf5fe58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2d0ad7-a4c0-414b-a8ef-1ae61a3adbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746d46d8-cd4e-458b-948a-9f766856b4de",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d0fd7-260b-4de1-b496-898bb45486c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6049df-6f96-4996-9d5d-5ad84188e3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec9921-f56b-4f74-a26d-15deb0287fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbd049f-6ae8-466c-92a9-b222e9c89caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0245b1-6119-4b43-95fe-65fac0f0458a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69425a0-38e8-455b-b730-5585a313de56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64aa7d9e-1a35-479b-be17-109a96803c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7011dfb3-4e2e-4864-9bfd-9b4a3a22ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d71e04c-a002-46a5-9c0d-630ddcc96d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f8b56f-c3dc-44dc-9e4a-525ac98c3253",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68232603-b449-42e6-a0a2-ea546d2365f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75483a63-df2f-48e1-bfa7-a6850eabb7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c48175-d197-457f-940d-95daf555a3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1a3476-cb83-4fd0-a060-fcb861c17ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56eeed5f-ceeb-48e2-b76d-9b7d35ed3208",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641fcb4e-3d9f-4b60-b36f-f182b1a56ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0c28177-5ede-45e6-ae06-88916af9e7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2da2c1-c246-41c3-9d04-0d12b0c0b5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0915104-e59b-4448-83db-571188780dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3668703-938c-4ca6-adce-e476abce2097",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1ae3cb-e304-42d3-a990-881c07012d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1faa703b-b0ae-4c97-af41-db8585b7de06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaf9042-638d-413e-ae38-f72238bd6383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9129a0-ce7a-4f08-b69b-09f33100f6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f3e0c0-0045-4fda-941f-12ffc3f8860c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7248616a-abdd-4412-93c6-02cb6b2b111f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e44534-821e-4f70-b624-036c1d4cfd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdb0bf5-1a9f-489c-a865-bc4ee30fbccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2140008-d56b-4c2f-87dd-8f7920af7a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df383b4-12d0-4d88-8015-ec7027c3f383",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555f6ccd-67f5-4a60-8ad2-1365e4f74cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3011b4-504b-4271-a4d5-115934126944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f85acbf-ba26-48a5-89d0-db483175d5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7eaeea-e47d-41d2-aa37-827ddf880656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b99d5fb-7475-4a5e-87f4-050803741e06",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eabb098-cadd-4fd2-bb89-49ea704416f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8ae57e-4618-41c8-8228-e91faed70c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1402b5-9431-46cf-81a3-c6389991ced4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07794a06-2c49-4a51-9d76-5899c7a7f5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa855653-53a6-483c-8718-04d08ef3ebbf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e849ff-a58c-4f71-be5d-dd4b863a2979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5724abc-030e-46cb-a393-1bd94d7610b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bef577e-fdac-437e-91c4-07ac3d337a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3578f9-0e16-4f30-98ee-10716ac94176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da945a0-e0e7-4108-bed2-3a988a6b4a6e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69274d6a-1ea6-4ea1-9d39-3792521ddaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e895a575-5395-4c89-b46a-0b66f1e800ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3799e9-de74-45da-8abe-8322c7ddedd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b732fea7-f147-4f73-961c-866e4060cde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ad02a4-d4e9-4d18-a187-0c2169dac4a0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f882ddce-98eb-4359-80af-5f63f4cd4b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19a6dd4-1448-415b-ab60-e5e11d0ff722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9209cb52-e69c-4514-a141-64a643779bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "851bf612-c3d9-4ce3-9b58-ad77705a3742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f38909a-a39a-4fc8-bad3-f2dbb938c97c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4965f3-ebeb-4f5d-9fad-a73d4d8d9b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feda69a3-b3a8-4525-812e-80478bd00ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7959a79-efe8-4cf8-a3d0-620c9d412c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "333b4e1a-098c-4a2f-a892-a83bd8b35edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91cfb8f-1ca5-43df-bec0-f0fc6db4e1e3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc9df02-0ad3-42b2-badd-6b48b39e3dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54960da0-97b3-4645-b24a-0585cb578def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caf4714-7a73-4209-8990-f56cad8be28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26a67fe0-430c-45c9-8ba4-bf7d22c2f7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0159a9-94fa-4302-ac60-b0236365e0bb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606a41e1-05b2-4082-b7ba-9123685e49cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71613502-e88a-4a86-9043-e91bcb83ec26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbad5df-d261-4a37-80f3-64d629973a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cefd42f4-962b-45b0-b753-620961d72e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5be6ea-728e-4981-b432-d2c85443e1c7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fefe20-74f4-4b33-967d-4b42d6d91e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81699c1c-178a-4878-99b9-d2bfeed09871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde69ec6-a10d-4f12-915e-ffc84226ace5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61f80f6c-3407-4960-9007-6cff3753301a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00396847-6584-4b69-b78f-de1d290a18d7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3100c18c-b8ce-4639-bbe5-6b26bfecd368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b004f89-c607-4b15-9916-7ae3e706077a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6a16f6-7abe-4784-8f8d-963d27481f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee6d7bc-6737-451f-9475-0a8756931875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa11d78b-9670-40b1-888b-13219dd5aa24",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7caae0-e26e-4f83-8ff1-999770bb1819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741ab719-9481-4906-87d9-b1af27e7f696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d20559a-cd2d-4668-b508-8400dd997d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baddf01c-72c0-4652-b9cc-359b5a56d2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289b4d47-350b-462f-81c0-e74636a114c2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a000e3-b687-4681-98a7-94f5fd26044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e73242-8fb2-4ba7-a89e-ab458f9f812d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8675bd48-aabe-4a8b-ba38-e91c24143c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd608895-a809-4e29-9080-0a7651e31ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeee90f4-15b6-49ee-93e1-fd0dce65bb1e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa596b8-6227-4107-85cc-dff010f524df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c21b7cb-734a-46fd-9bf0-bdda789d4b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06435a61-bc14-449d-affa-c0e089f29663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "40065c46-c009-4c0b-97eb-c28466296d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044a6b85-6c6e-4f69-b3f4-1a5782d3be37",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64563f16-5b3a-4000-aa99-31acd884becc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1ddd01-e12b-4c6c-95cb-6946f1ccb22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41699d30-dd6f-4b3d-9020-a5e5e0391d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08eedd52-388b-474a-a1d7-3be84013e2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f04bab-75d5-41bf-93c9-1fdb845ccd18",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd9f8dd-42b4-4bcc-a523-a3822de416cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb5b2c8-a9d3-4a93-b6be-08ef717df936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e4c13b-83b3-4ddc-916f-c0b77dc6224b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "630853b0-d321-4ece-ad2e-b3d4d6daf567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4604c8-66a2-43d3-b151-2309ca21dfab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5d16de-dc08-4328-8012-7f261a4eff20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d7d364-7726-4ea3-981f-ae4d3f930682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bc1d40-b817-44c2-a9e8-dfea6bf9a93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6350eb3-977a-47c6-946c-db36c9a19d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c846c8-7f5b-4337-b493-ef65ca3fbdc7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90437edc-6c03-4a4d-a96c-c34aa0e4edd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea2a57f-9283-4888-8102-c0d2161dbcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4a4026-8539-43f8-ae63-7ac01a893849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e34ca5f6-2ceb-4a74-85d1-1c4e58ba3a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486c4b2-1c75-4279-9dd9-4c70e812bc71",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9111b693-75ec-431f-908b-86fff70c3488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb164451-cc2d-4163-b2de-4dfc2b3c97e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321be390-45b7-4079-bb9b-477d2f7763f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a608c5ab-8864-414d-b7c1-4c40d1b8de8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763aa426-1ff4-4e2e-b2ac-e72b668225eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e85fa44-b592-4820-bdd9-b5d0e1b0bb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22485a67-5195-47b1-92c7-87ea13a8cda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18594f92-cd72-47e1-9383-8ab171ffd333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba69b16-f454-4a64-9a50-c46bcbaf2631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6a3b83-33f2-4e08-8dfa-0987b1bfe56e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dbf113-c540-4284-9476-8b0e2388f79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6895e301-4771-41a0-97d8-6ce7177fce4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8880da3-7db6-4e70-a9a1-951781ea582f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "65d884e9-431d-4ba0-9f63-4416fcf0fda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6f6d0d-f7b6-4273-8789-d6cb2fb95b76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbc6a97-9e5d-469b-888e-6e8b7913bf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f20fe1-da56-4189-a348-2de09e4faa71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cffbfde-18f4-4bcc-9707-09636cdc86ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8dff33-7d55-4cb5-bb31-5c491434cbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e243b9-9e5a-438b-9e93-8903a5c92219",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f47081-6f7a-4ab1-82e8-95418f9a10f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee65dbf-1ba8-43c5-af70-7df81520d5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb59c7e-ff34-481b-a407-cd3edbc40a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b746b33-3be2-4353-8e90-4ac87929bff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370124d3-5fc9-44b8-9001-75d0b9ee8250",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74cf31d-b5d8-4e4b-b266-0b8f54691b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bec3737-f226-4687-95b9-1bf4036fa2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caff6a3a-1c3c-443b-8fad-8308644511fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d05f13-fc85-420b-933c-1c3e0946bce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e85013-0447-41d4-88f2-befe0a9096fc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c188cf78-6ac0-4a38-b5f1-79bb42a34e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37cc2af9-1b1e-4490-bce7-3b0e817643ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c814aab-73cf-49e7-8307-b15accc9d46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fd790e-a9e0-4186-a522-6bef86628d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c3fd01-87e7-4944-9299-39e3dfe181f4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecf59da-60e4-40f7-b5f7-f9e4ea37a231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135d8d28-c6d6-460d-8a18-b90342f70d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6c3dfe-fa88-4274-bbf6-112d46699e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e1c7c7-c42e-4e78-bb8b-f34e4f9704c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46b0c80-8147-4247-a6fd-1a6b7f5a7cc6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa7615b-d738-4785-b5c4-c9a64004260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b856f7-0573-4175-8ba0-1c7dcff022c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9068c55-c1a3-4f2f-89d7-1f1581e485b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "347b9458-affe-4c8d-8a92-b42cbd860924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532403cb-d035-4de7-9b02-ba9e7b83b41c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c897c02-fde0-426a-8290-5138085e0ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f80159-c134-433a-a2a8-855434efa06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0ba9d6-409e-449e-87c2-30b548a528ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c811bd00-a63e-4b12-bbce-4bcf616576fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb347840-4cb6-4cac-a5ef-6da0dadac3a6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ae9398-e9c3-47d1-92f2-b819f2563785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327d37f7-8e3e-4a37-8356-bf063d652542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa7e493-6653-41d7-995e-5bfdcbda9956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bc06a4-e967-4aa0-99a5-2ad8a469150e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08afaa24-7b86-4c7d-b15f-ff1e345c3baf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dcff03-4268-4a19-a288-89ca9cf8afb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa140113-77ee-41e4-aa15-4145b945e95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df69ee5-71a8-4604-be3b-1a2543f83893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e28bc72a-d3a7-4f89-8da5-391ee5270841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beb76ea-9858-4c67-92aa-92f6e6a9d1d9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92fe5a0-d64c-443a-8874-5ad6bda9697e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a74df80-2c0e-4e14-a1a7-96d199c50caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be323a92-388e-4550-88fb-146c42f92da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c515195d-5106-40d4-869a-6206be803d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e2deea-a19a-446f-8f90-b6561f4902e2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab653c5-79c4-4f09-81a0-ad95d2822871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c34e15-b975-44e5-9a47-77d505250946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c6cf59-b48c-49f8-8437-8c9d9311970d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf1465c-ff2c-4c64-a8e5-bcb21fcf7c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d58df6-69fd-4429-b449-870531a9a6a4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23573fb-a357-4ab6-b6a0-95f07a4f8935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5901079b-c729-40f0-bcc2-8281cea7d188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb0041c-448a-4b76-b22d-d541f8b0b715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf201fc1-61e6-4a6b-a70a-17de4064c14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebd2410-477c-405b-a131-431d38a0aeec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c10cae-a025-4b25-9e30-ed7b7a96b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fc9861-51d7-41ee-b4a2-e33e977ae860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23802fd-0f97-4a05-ad49-8eee4e4fc07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "143b8d01-5cff-4fa0-a08c-9299bdd34472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494fb2d8-16fc-4022-903c-d95679ffa496",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde343df-6e6b-4a9a-94d4-54ea714fb086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6f1bac-3b36-41ae-b9c6-272058e4c3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e377ca13-89cc-4600-ace4-c329f6c0013b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e38ab0e-8d59-4217-b943-d08ab9b83be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07db71a0-6376-4826-9767-526e91fd4cf9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a229f247-62dc-4157-b6cf-bb71b3af1069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393918f4-17a0-44d4-9930-577e0b0024e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45992076-b64b-4547-8adb-40aba433d047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "835dc203-cd19-4250-94d0-d28659c26463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01845ac7-67ff-4102-ae43-414bb2d38370",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7944416-4b79-4d41-a75d-6e28570fd921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d5c326-a82e-40b7-a4c2-ba01bfad6fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85167aa-65a5-4574-adc6-7a210e663a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f79bbf-84c6-4c20-97ee-d30946dc0fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc87b44-a484-4ae0-b57b-8d8ab56e688c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038756a3-db3a-40d7-954d-16245cb7727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8eb339-b165-4ef4-a11b-52dc7cdf52c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01f098a-f921-461f-83be-4bbb6c5d4493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7e01c7-5018-4e98-9295-020f9b285136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d7f4bf-a443-4861-a38f-e40c160c15d5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fb6132-b201-4a8c-b2e9-07389e661a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38f7d0f-a608-496c-9462-eb615e2fee66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5faccf9-308f-40a8-a4b2-753dce19d7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4d7fdc-c362-44b5-aa3b-b5031e939a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea538bb6-3e5f-48f2-aacc-de21aefc1cf1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71be461b-95f6-453b-9eab-bb01ede68d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1917e858-94cf-4f49-bec9-6ab8fa6772da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9bfa66-55af-4f71-a803-608b294b88c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31a8b266-663a-4d4a-b6ae-30ea8b67f478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2374fd-23de-4c68-bf79-2d2e104cd326",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1469109-2cf2-4c1b-b441-8bbc5c1ddd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0081d489-30a5-40d9-9e1f-15785f9f4ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cd0a00-1c25-45cf-94c1-0a9d6ef9ef47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6c25c4-0b44-4bfa-a86f-792427c41ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea1e923-2cac-4397-b18b-c683216223d7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a987936-0ea0-4105-bcf4-d5134a52e649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e820504a-8e2f-4cd0-9f24-0b1c57c73147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb924c9c-3732-42d7-a049-2f87ffbd2339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed4f3a3-8c02-46da-ac7e-95e5f1f93828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccd9a9a-2b04-463e-abc5-29e0ba800de4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3739433b-35f6-48cc-90d7-8f132260d9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58301a73-53ef-447c-a758-324efd1b0931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5445d098-face-405f-a243-400e2466b5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf560434-9c0f-4d0b-a071-4f150f737eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cf430d-56e7-4de1-81bd-3939be9043a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f25b956-1a04-4a12-a7b2-ed50cdc7c3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8572203d-a62f-48ef-b9fa-5b89814ec27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4544185c-d606-4038-ba7a-8871ce35885c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c47b98-e391-4720-b647-b87147e7b213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6794651d-9e0d-4c18-adfe-15ab9de58367",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef8114e-faff-4f7c-8eb7-af041ad28805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54edc6fe-f428-4085-b341-f86fd12a5758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c55597a-fa79-4a2f-b783-4aeb0755e8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9240ff1-58bd-40f6-afd6-428a4e3223d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096c31fb-41a4-4244-9f44-bc377565c3ba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a99d55e-fcba-48ba-aaa4-3dbadd609808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9bcba3-877d-45a5-bac7-c51d53c63b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e947e9-460c-49e0-898b-6b9f4a109eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a9e85c-0cf4-4513-8ca3-1d80b64dbb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22f42e2-e060-4156-915f-d9ecbe1ff47d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294b3ac5-a98a-4f3f-9ab3-71b6305f5830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211a525a-9e68-42c9-8ff1-2625f5af24e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0fddd4-c5d8-4205-978b-51181790d95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "992d6af7-b7a7-4ddb-99be-6d1ecaf5bcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa12cd28-ad20-4dc9-8806-219512c39a66",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763bc351-18a7-4c1f-a4ce-c6a861695fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b53a634-6a1b-44d9-bc46-a8f19ac3c373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9e3da5-37b0-4234-9e1d-703626ded296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "135e8aee-d0a2-436e-9dc7-7a2d94d8fddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c96cddd-b00e-4c9f-9e1c-248975da976a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab7a627-7dd9-46ab-9672-343d83cf218e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a775e16-103b-438a-ba38-fa0fceb6b7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c92a1b-78cd-4ad2-b9dc-7009a18470c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cab09696-91e4-4311-a01e-3d10e590fdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a0efb5-998f-4d47-bb4a-1f6dc32d69a1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b6ad63-5b2e-4aa3-aa2c-f98aacbde69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021ee2a0-b24b-4bd9-94ef-ded2197553e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dea4c2d-5569-4591-92a8-41b4a2318e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c24bf1-c992-4b83-8f06-b40189ac4057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cf32e3-3b07-4cc9-b995-a9737616f3c1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5cbf2a-610c-4bfe-a1bb-d62cb35f1c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb4c93f-9327-4783-afec-58bcc4eee8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef8f941-679c-4487-a980-37cf3e0bbda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0d929f-3c18-49a6-af5e-48fce6ccff84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bc7a6b-e69d-43ef-9265-d7e4c8999d66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8895c67-231f-4a0e-a202-896784b3222c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ef4ab3-c1d4-4993-8e66-45cc7c5f16c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3c6b7e-4df0-4334-978b-c947ff35d895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d39810-208c-4f4f-b2b9-cc0202c09e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4601ce7e-f861-487a-9da2-be5c52957bc5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743eaafe-64d8-4c3b-aec4-81c2cc185581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5f3e09-404b-49b4-8064-115f50b698bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1d5074-32ad-44b4-ba55-136d55619baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1677e5-599c-41b0-9927-a90582117476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3127ff-75e9-46bf-81a1-a689f9f5a6d2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b377dd7c-b09e-4dd9-96d6-f7d6a710c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4707bbd-dea9-4c7c-8acb-dc8811e7217c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1aba9f3-765a-4924-9889-b481fbc1c406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c20aae08-c1f7-41f9-971a-ab6cca0f4ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fe6df2-78ec-401f-a246-a2556c44ee58",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe397f0-3e92-49fa-9211-0bc0b0fa0547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "14ec5fbc-1cb2-40df-a9f9-3df2ba92ba5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb70923-e791-4235-89ed-f658e5d3087d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "98a0094a-257c-4ccb-a58a-7a48c4edde34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92440dec-a742-4813-ba00-918ea5465a0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f47cbfe3-2e2f-44a2-8ecf-41f53d2f88f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819384d0-9486-41aa-8cc3-d9fd08e00248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe564165-a301-45c6-aa55-cf5723719423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f8fe78-ea1c-424e-ac5e-76fc4d63a58c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "820a84d2-438d-42d6-9b64-52115fc625aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c978cb6-1a23-4649-a24b-3811e1e15d37",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb22054-73c6-47eb-9dde-9a0fad00a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91e33bb3-4057-4aae-993e-d723c7ccead2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56206c4d-059f-4376-b4de-76536bdd8c53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f5a6434a-d9a5-44e1-9153-e581a1044e49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5849e6ac-eec0-4880-a456-87f3c1adffd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8008a34-4da2-4c6f-9c5c-e6ee3025bb03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9468eb14-5d45-462a-b207-5cb1397ab991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e1d3c3f-bf32-48a4-af49-7899e534dd36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3dbc3618-66ec-4240-8ef1-6e7f6eaa319f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49feebe4-2660-4ce9-9fa0-3bffda8f80b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bdef0978-fca5-448f-96e4-d0cde7aef906",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a58ea2c-16f9-44c0-be31-d9bb54df026e"
                }
              }
            ]
          },
          {
            "id": "aa7b9c84-b961-4af9-9a24-9d9adf29dd8b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f82364ec-d908-4345-af35-66456b9d4b47",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8459e6b6-ba83-46b0-b048-0f0bb0afdb8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eebffdf3-bdb1-44bc-a94f-ad93499ea530"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b67254a3-1ff9-43eb-a868-80c605ae1a7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e8b3388d-b74b-4234-a2a1-2c35f75dce21"
                    }
                  }
                ]
              },
              {
                "id": "85221881-f052-4e68-a955-bfbb13e7a74d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "514f1e16-206a-4e55-91a2-36fed54b0a76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a72dc63f-b864-4abe-9483-6b050757e8e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2d2af43-6c0b-4177-addc-864d0a1647eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a784151b-1a38-495c-9bb7-c063defee003"
                    }
                  }
                ]
              },
              {
                "id": "f56745c6-8c4e-44ca-b9b3-bde1bccdd6e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3c4f31d-a4fd-4b0c-88b9-eda5e8fbbcc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72f8dd46-ceae-48cf-894d-720954be9cc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "909f407d-10e6-4937-ab03-735018f06f12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "01326d82-a55f-4bd0-94ce-d7b42a00d019"
                    }
                  }
                ]
              },
              {
                "id": "e8455fe9-fa0d-4277-85b8-6a41320e3ead",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8db96b44-6b91-415c-bb3e-0b1369e8134a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64608bf0-6e27-42a0-bf5a-ce48a7fcd553"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03caa382-5772-45f7-a0e8-0765ec8a15cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6d51527b-8ace-4180-890f-88912177e099"
                    }
                  }
                ]
              },
              {
                "id": "54bb5d21-d8b3-4671-a504-0e2f2c465ab6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a30c9fa7-68fe-44ca-adc8-ee362fe0e54a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abf627e9-739c-42a6-9ad6-611db0121d44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beb15996-53b4-4764-a9b4-84b58d8e0fee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f5e1c933-26ae-4547-9683-797ad4c324e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf8b9617-5c58-43c9-9b93-7efafa433f40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8bb139d-fa10-4e39-a560-2102fe8ab2fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60719ad0-433e-42ef-8c66-319549ea0b64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d51c9cf3-7426-4866-bdab-a8926df3c55e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "494db8f6-6e28-4a08-9cfe-d60428043992",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "068e0a9a-9650-43b1-9743-5a8203ca8bfe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12be002b-6c5c-4cdf-bec5-661cd14181b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a78c70f8-fbd6-4bcb-ad1f-7c2debf09595"
            }
          }
        ]
      },
      {
        "id": "15ee804d-eba5-431a-84b6-bfe05c8b1906",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b3f40099-8977-42e5-9cd8-c7fdf6980ce5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9a19c16-fc9d-4861-8731-3efd2c31d163",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d346145-0205-4895-9382-a143fff4564b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad75536b-3703-4d50-b841-8672ccd36916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6888e0f-48ae-4fd4-b36c-61bd33d47ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df5727d-b8b4-44ef-81bf-06f2de93d8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaaabaab-da07-436b-98e5-e32877852921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bad7a7c-ac44-4214-9f4f-c0d466ece709",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854bbc18-7b31-490d-be52-9f5737ec5e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b166b3-8aa6-415d-bd05-a8ff645f163a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ed6d76-2eb3-4e96-a3eb-c339af6fc392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a094451-4841-4d29-8660-1d42694249b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80c4d55-58ff-40f7-b86d-8185586dbcf6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a23f5b-6a3b-4237-a113-62f510de367e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04601404-b881-45e5-82fb-26c6557de951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad22ee8a-66e6-4f71-93d6-257b2542eed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d715664-a208-482d-922a-37d12851ca57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad88a71-3505-4f8c-8dea-7b0e4306cfcc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc58753-8a9e-4e1c-8621-a6967a6a0c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c15f26-127a-4911-93ca-e11da74cff41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc49d16-544b-44cb-97a2-8e9d207361ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "906693cb-c417-4a47-898b-231e59bb29bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c3249d-1c23-4f43-8490-d784ecda78fa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee87753-6d95-409e-bcac-dbd36c4a1883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e986f176-6a49-4f4b-927e-a004d5fe202c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efe0b68-4cb9-407e-b61d-44e34d6df293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48ac49c8-acfa-4e26-b4da-60fa9a8092d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf16b03-ef7f-49c0-a007-e3ed46caab41",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b28d266-6c4e-4777-8815-64ed921409f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3c32e9-3e02-4b68-9446-4e76cdfd1330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a137803-c5a5-427f-a2ee-c99fbabb9b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7c2a85-ecc4-45da-903a-d323bc04060b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20648b41-7c6e-4886-b530-4830ee969bb3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c547a74-7efc-427c-b079-ab1a8aa87d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dfc5ec-4b8a-483b-82fa-139e97edd99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e228a744-7b2f-4782-a9d1-373251fa5561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc6ec2f-fe79-4b8b-960d-f9a647b30344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b171cdb-559a-41ae-b973-9f519a50ac5f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbf4cb9-e624-4521-bfd6-a59755b2fc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca213b7d-1d00-4a6e-8960-daa88e6d76c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691c3708-011d-46c3-b4dd-cb132f321bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b82d76bc-cb7e-41e6-8894-813838cb9672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481b7808-f34a-499c-8020-0e968c78f57a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e804f3a5-557b-4598-8577-d56e490ca71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ec6240-649e-4035-b013-f450f45c4609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837a327a-1393-4bd1-b4e2-52e8b08b4168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2c48b2-485b-4b51-a27a-0e0d34632f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ce83dd-cafa-4600-a2dd-89ecaa3a82c4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4941c4-9d38-4e53-a611-24740adc34ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59c2adb-4b42-4ea2-8f1c-c89f679cc287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce54a806-625c-4f22-857d-ee58a96a0ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf914c43-6f85-4280-b454-62880382620f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728dd9d8-a991-43dd-a8e2-53d67ead771c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12b0a28-bf5e-4f85-ab0b-912702701cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb90fa1-90c5-4108-985b-520d7e1dca44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1723fd85-b42f-4f21-b4a5-b62d54ba7a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "55c00ab4-f282-473b-9640-7b59bdeb680d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37bb0f-95f4-4c45-94e4-17e856488c6b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9250a69a-acac-452a-855b-580ef8a3ff50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56decfac-73a3-4613-941f-0b53b4df8686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6f5581-134c-4180-8894-4717668a5fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9060fa7-5631-47ca-805b-dfe5a78a1da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9c1889-51c0-461b-aabf-1195fa0ed0ef",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bde9608-17c5-4a21-b6a7-7abd6d7d59df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d27732-4750-432d-89a7-b3cc25c35c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8502f3-2693-4e96-ad53-476453986c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd58069c-bf69-4a76-8539-cac80ccb7f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acf3bbe-5f8b-4c03-91a3-2f9bfa3675fe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab84beb-8b7f-473e-9f21-896bc0b2c581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66318c6d-fa67-4d63-8e42-65d4c2f1c695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa82a105-bc46-44fd-a7ed-123251c8ba9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7682208-1665-473c-ba7d-fe65bb9eddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77eb405a-a4d2-4949-9796-66435b89e649",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ebab9d-4148-4b19-a8d2-0af59b6b4775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0aab24-d9cc-4919-9ae1-1ef50ac071c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b200cabd-2ea2-47df-ba7f-57a232f4299c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c55455-7cb0-49a8-b2f4-6518b0ed6ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375844b-03d9-4797-ad34-b4b9ced5b307",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bf269a-422a-4a69-b34a-798a581c6724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434cbaf2-2850-4800-9beb-ff40979a04d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f92f323-e663-4686-8e15-addd8bf8353c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "357e488a-cd14-4448-91f9-f252419533d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9138b1-8c5b-4773-95bf-5b170d731b49",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dc29e0-7856-4f86-b7e7-ff1f53e3b822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e019cf-42a6-4809-8558-cc659a57d902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdc384c-4d5f-4d60-98be-4cff72c97542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d9aab2-dc08-49e3-9aa8-5b8968ec2d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c43bd3-3510-44ca-9921-c458f0900587",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1ef774-e3dd-4cbe-b5fb-249ce0fe6bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2760340-3352-4040-a890-43f47010816c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea80b6ac-38a7-4a0f-beee-28e6b77e4de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "318f4dc0-2de8-4b6b-93b5-f322c9c0e54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d0bfc1-c409-4aad-b597-80ff069be38e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e365c3-8278-423e-974d-f22fa676f781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4c130d-84ff-490b-a6d1-22e6f01f47e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb963d5d-f315-4dff-bad3-bc4a5e3af780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b06a93-0a55-4bfa-9fd1-3a55692d19e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975b4a1e-2984-4887-806e-9e31dbd062a3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b257d3-8a5a-4476-9149-9761cb6587e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aaf1f70-14ad-488b-9356-84718fd3105f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d724d3-be37-4453-a167-ea14d856e4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9282a0ce-25eb-484d-b2e9-c51acd0d439d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7bf1cd-e14d-44d3-a8db-c3e512fafce5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf6cdfe-0c11-446b-ba0a-a24e6289e9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c902ba9-b31c-41e7-bed8-5d5f498a9ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef1a179-443d-48d2-a51c-bdd7b4ed00de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b23dca-5f8b-4b1b-ab5d-e22106446b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21859c20-f241-4545-a1a2-c31534ac0a17",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c25844-527d-43dd-bce4-f8a6be1df1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78170f70-51bf-4750-bdd6-3aa10338cef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e079b9d4-ce00-4368-848a-58f8777659c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4b9c0e-4cfa-4762-a668-26515a9e5037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece2a4bd-e1b9-484e-86e7-4e3c12cf419c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a832786-a7df-44cd-92e9-5365bd971a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df7b36c-876c-4bc9-a60e-7c1ae41fd534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3691df2a-590b-42b4-88a4-23fff244db25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cddc9e2d-8973-4f50-abc1-f0284944e6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0913d5e8-6340-4003-8aa3-f7c9a56d439d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e67c01-1f61-4074-bdfe-73dc800809a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaacacc5-32d2-4638-908a-ca713721ea62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dc88e1-7a46-4899-95f3-244aee7a4d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa008a0f-b61a-40d5-a54f-0d571035baac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9638d8-bc6a-42a7-8a1b-20094a320cf7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edc4a11-a02a-443d-8193-e21c0a4f5910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4865e4-5dd9-41aa-a20b-fa894d25ea02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008a4cd7-7206-4240-ac50-b9434ca60e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1faa8b5-3dd0-4734-9142-95d4dcf3281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7ee69c-4a2a-4fae-9e27-83bbd634b4c8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2337044-5fca-43e6-957d-a1c1c7875205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6476e4-b247-495d-a57b-a75d4f70226a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4570cc-dcb3-41d0-8405-07e3c2f15cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8ccf0a-60d9-40af-a881-b0ffd43b345b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331b24ab-e30a-4a18-9903-72a0444cb6ef",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad1cadb-cf61-4b50-86d6-361529bb76c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8699a7ef-56aa-4356-b1f7-ce2b62ef8c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbcafee-1481-4acb-ae1b-9856044ff5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a281c5d0-b530-4d01-b863-8630debe8584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6454f7b0-dd38-4271-9a26-ffd32a6ce75f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077e1e1a-c63c-4e32-8f17-2a5a1376622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da24c97-fb73-4f12-ba98-de73d0c43b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc13c56-9baf-4dc7-859b-a78c6d05436e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c88d228-f11b-448a-8927-a60217a0db9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edbacf6-29f8-4263-8d18-efdfbe7782e7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23b2830-65d8-4a37-af4d-2d35f32d7143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa0452c-2842-4898-9879-a6adb71769cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5635fc5e-832a-45fa-86ec-09698d5a6de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3bcfea5-a2b3-4213-a1a2-bbd2b780ef83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a7c0a6-4bf0-4730-9146-da5f98de22ea",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61383b96-c740-4b83-ba9e-3e71cfb81ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75fc95a-86cf-45d4-a8df-fc07d2e69eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253ba6ac-86d0-4b0a-bec8-5329645286ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8598aa48-e14f-4601-8a1e-330c71b80869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacf81cb-8bac-4135-9bf1-248a743f4c64",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a930687-f5fe-4890-ab18-f2bd12742419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d987e0a2-cc8a-4b1a-afac-c4f8557c42a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8f15ef-ef27-4bec-9b54-cc9580d371aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbc7480-98b8-4b8e-899a-ff0548cfd01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919dbb23-3ca3-4f70-b49f-72d6174ace2c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67fd9f-be75-487a-b6c0-3b91205afb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d79c538-78b5-4315-9122-3d470c613472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d28df5-feda-412c-9542-6035594255d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa96bba-1705-4352-b43b-3b52a9a25416"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8bba0021-1250-429d-8c86-a461df885c59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6416b25a-a39e-4b98-b1c9-b3be9c66b180",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7363e9d7-ade7-4721-88b6-59f2305ebfe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72de883-34e7-47a5-8b1a-12c60a280227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f9833e-45fc-44ea-beb1-9adf711adea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe8e7079-2a67-454a-aaa7-5f2d0cd0a906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12008348-bb8c-40ea-a979-7e38cec7cd38",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7944850-4130-45ea-8312-df790a4ecb10",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b92e5b88-9429-45e9-acbc-01caa8363a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b0e91d-32ad-4258-80d4-e841ac5192f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d491a75c-f8be-456b-8805-1e1188dc5e9d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "774f39da-f447-4883-986b-f3f38cf56861",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68c17899-f8c6-459e-8168-d253ed5e4432"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "731d2c46-3e1f-4f34-91e9-64307616760f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c103afe1-59bf-4435-8644-8cf9d7f32ecc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad7fc6a8-ea44-473c-b1f0-4080f49997a2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1f05b98-f419-415b-a81c-78c76546fbf7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a8db4fd-c866-404d-a135-e9baaa3f490f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c760133-2c38-4a97-b1a5-1aecb8429eef"
            }
          }
        ]
      },
      {
        "id": "0b014c96-1499-4d02-9791-02f302803c4f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c5f7edda-995e-4666-ad3f-c27cf57e86cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa3b3715-3644-4669-a082-e70996929848",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba5e07b6-d158-4f40-ab9c-e1ea36d016b8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf54fb2-0fbe-4d8e-854f-da709cd90115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb9d966-bc50-48fc-a802-73801c78ab6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7622a5a1-1de3-41bb-8f30-35eb74ddaab4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d73aec-0ef6-4ad6-abcc-8269eb2febc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca2c418-5827-4d70-91dc-47d87f069db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e9c49d-06ad-4137-a5e3-c7be4dea1b05",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372af3b3-76d5-4f89-97ca-d6d09b1a7e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68df97ad-c7af-4a97-a189-37655b94f32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fafb5f0-83e5-441c-a989-86d3a8f66e05",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9c6c60-5c46-4bf0-bc58-41f2444846dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3dd2b9c-e3af-4b71-9db6-0630078c31ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740d7e23-8745-433e-b195-65d660e00010",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f944f3a-a575-4d46-9c1d-d7869bf52bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6308d221-bf04-4884-b013-35294361b430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fde063-05d8-4d6f-8dfa-8c98fdbc2a18",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a434e7d2-a642-4625-90b7-c0d877edf72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0817738c-5cb3-4448-8d89-54e8a135b8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e258b1-45f9-4db7-b935-42fe709c435f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e249f6-f724-43cd-82af-ca2db7138d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a189a6-032f-4000-90ad-1b0344f8f510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa211839-65f6-4df7-837f-1b32b261c8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2787181c-2b07-4990-9b79-4756a2ad7001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8f2b45-b852-4d25-a53b-208589288709",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7741c29-b180-45e5-b09f-6bf2d6bd39a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e04eccb-0ce1-4969-a061-90a46d3732c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621c8ab2-a524-4508-821f-5f5c216f63c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309de894-d009-4504-8a81-fbed5804472f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095a6c39-1214-4333-a99d-40e4618ec107",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353db288-ffa1-4d07-b12b-9b6ee470af3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df9747a-254c-4c34-935d-169cb0d4a875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c046d38a-6057-4e60-a07c-7d5ff5f90742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e364d2-f415-4b15-acae-99052904c78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec38b9f-c12d-4575-a63a-4d01128f99c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7732a5c-7427-480d-9b5d-8c66708b6c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc6d68e-1b5f-4a61-8935-b03bac579fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb241fe-d4b1-4068-b9db-b3cf1076edbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce29c73-e2fb-4023-b948-9f851f3fbfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc0c976-1203-4968-a802-a135429759c5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7af6982-37d1-4757-b7dd-469617e784c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ae03d4-928d-44a1-8afc-0de3388baeba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec62aaec-5d3c-4a93-9693-0b7932033b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc457b9-7f0d-456a-bad9-4f96654a80f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b014ff2d-81c0-4182-a73f-b7c45699076d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab5f5c3-b873-4fba-94ec-f948a9767761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece51bc6-43b8-48f5-96ab-dccc942b5739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d29da3-3a5d-4d20-86ed-c82fc174ac87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b225901-0654-4083-b610-640f6e88195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf25097-4bd8-4a51-aead-08715eb8725f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbffb609-6314-4f50-9c9f-33f5a4121654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb9ea416-fc7b-4b67-a634-712ef8cf48aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1042cb4e-3e4e-4f95-90f0-4cedd650a48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984a7dc6-4c63-480e-bbea-a65a1d4fe403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be68672e-f171-46c1-a6aa-5af464b6a264",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d2608f-8b58-406f-9f14-15d2868cbc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf2a23d-dded-4d2d-84d2-13d8dd5cec49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4741d5-4399-4dfc-9d4c-491000f8815e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95be502e-406d-46a4-b574-f33db27ccbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9317f3d3-adac-4fff-9c18-615f78c23e63",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d363cbb-d0c1-4b2b-9b31-ffa0eeaf9c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff73a883-948a-4203-8662-27b9e0fc4cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c92398d-7a99-4e68-b79e-357e0f01a6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30bdef2-5f1b-4f91-9fa7-bc870b662c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7d0402-1317-4a65-8eee-6c99fe6e055d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcc60e5-d821-4682-bdf4-0c0571e07720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b15405-dcbc-486d-8ed6-0b556df89e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c79f95f-81e5-434b-a74d-21f9f16570b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f5c075-5c46-4c34-95ef-c68284d7f791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173f4cb1-b724-46e7-ac04-ed5e02f7c8ce",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51eefba0-957d-4af2-8e45-377f324261a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaec6e7-f95c-48de-9fa9-09494bd98ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916bfcf3-8842-4f19-915b-790a1ada6270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb434837-644d-4807-9463-d511fdfc82f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f68464a-d32f-4006-a501-d61da9ff0a78",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee36777d-3e2b-4660-aa6f-00e22a54f11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb075674-0b4a-4b1e-b58b-a447178c95b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa9e025-0c02-40df-976a-0598c0c6c6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef71ee0-95ee-4c1a-ae06-1c81341d40d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cbc552-02f0-4443-91bb-ef17b3b3bfb8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f2f653-42b7-4ef0-a911-a44e15f83ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9f49d3-948e-433f-aae0-a1fa9842631f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd83e304-c72d-42c0-953b-49ffa09ac601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fe27ff-88b8-4e34-9b33-4385c7e266c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810ce52d-6af3-4a78-a8f5-8226959e5e5c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e7dc34-bf44-4462-9f19-2e04bcb5cf87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb85f1ae-5c88-47d9-9bb7-93278fd78e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5ab96c-574a-46a0-9fc6-243ec1f1d550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d001e232-6a13-40be-9bb6-383a1e95f55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe96a9b-b959-4aeb-87b8-754657b45db2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42df7d08-9cf6-4a82-afae-4869544f7525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd92657e-8267-4a87-b054-25a70969335d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5014cd0d-141b-4e55-a04e-99d6ab74510a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf74afb6-e97d-4120-8f78-0e28eafb6c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f386bb2b-8d68-4942-86ff-49cc7a56ecb3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd4d27f-4ebb-457d-8bc5-422faa4a45e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05e5756-9e9e-474c-aac5-3f49d4c2c1bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4d7ec9-bfbf-435a-adc4-bd6eae1732a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51410170-9fe9-4eba-9bae-474fd0659612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9616c60-e0a2-4cac-aded-eebf19fe7c3f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f7cd0f-3e18-4ac5-83f1-9b5bb09448e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf0b2c1-4458-477f-9bdf-f498afc37c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec95302-d4cc-4d0d-81ef-42c13e51bef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eea4522-b862-45d8-9115-433b9ad1bdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2d7e42-b2b8-40c8-83b2-06b20aee71ec",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995339cf-28a1-4beb-b12d-82f5a5b3ddb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999daada-f16f-4e46-95aa-a9ac4a96a88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafb78f6-3a3e-4f17-a37d-d1d069aa2a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e11676-c9a1-42b5-b455-02ac8421a32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046c3978-bad3-4526-b64e-a5517ff03076",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32419a3f-8faa-4f52-8b67-efa428c4c96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62809b61-584a-47c4-b9b1-d23c258c8f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eaf182-142f-463a-a4a0-6f26cb7aa14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b749b0c5-99a6-48af-9576-dd4df0900b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34991e2-ad0d-4587-b7ae-340dffe87948",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b766fe-01f0-421c-941d-05f73e9fcc56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba318ea-b188-4548-af71-49e8f2498e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6810a8fc-0794-477c-be28-24109500accc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ac3c73-f6f7-4126-b165-87ac9ef1694c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad439aa-bea7-464b-be1a-b549d6146e37",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed72278-96ec-4073-9d91-b94aa1cd21e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e86061-3ea6-4504-8e40-e4442d131c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6f8261-86ee-4918-a357-6d23ec87c5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0364f6ac-4e55-4b25-b45f-62903afa9062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e97af78-c61a-4e4c-9392-4df849df0419",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2429fa6a-03f3-472f-b0c0-0c260a46ee9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd585d8e-f8ed-4888-bf0a-e25e3a5deb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd226a44-5135-4837-b893-d3826529af58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e0aac1-0506-47a3-9129-1aa28995b917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b312a874-4357-4e48-8f2b-ba01aef7e3b8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a20403-211f-4125-a8e6-309fb6637a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19a6655-d003-43d1-9d85-13d7a5e6fc5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff1ce3f-bd63-4178-8485-3e8192b264a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f7edaa-3eee-4120-9566-398ca0ba1610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5e0d9e-dc5f-4a8a-bb80-54ade1c28474",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47864c5f-c38c-4708-8ac1-d147d5e7b51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c71065-3f86-421f-9afc-827e0e04086a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f81eb82-cb37-4f1a-8933-a1e69700fef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e70993a-0847-44cd-8f48-9f7fbbde5812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1513d1d4-2da2-4c26-8123-57991bdfe3c3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de64a24-a76e-44e7-a66e-ba0f4fcc7c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0809469a-92fe-40c9-8f77-f13166c2f1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638f239f-ab34-4470-8f57-39e6014040ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ca7abb-42a7-4032-a810-b7f711b84b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fda949-2c98-415e-af7d-3e2ffbd3951a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bae4de-829d-438d-ab7b-c7fe1061edef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22930097-7f85-4d47-ae03-b6fc64444dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abc50e4-1832-4c59-b15f-6343d5f1dbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0c4852-4b41-433b-a8f6-1d72bf4c0822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17715357-4dc6-4d58-925c-d2322eafdf38",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130542cc-f011-4496-bbe5-f74c06a6f786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e13f971-5df5-4382-bff6-5d62c39e3196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fd8a6a-61f0-461b-b200-49dd39de1b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffed200-697c-4d9a-887f-20d558923af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce089ff-11ed-4824-9b84-7f3bbbee1882",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fd7ac3-84a4-4418-a08c-9989306d4b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7271146-40a7-4299-afe9-b41b618d68ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fdeab4-834b-4c6c-b44e-8605a36a212f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141eb805-27d6-477e-86a4-08aa05d69061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1b10cf-2615-4a4d-91bb-1ed5c3dc472a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690ec4de-2af7-4b6e-b538-2ec419011ccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0c850d7-9d75-432f-9754-ba165e8cef00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5cff45-5e46-4627-b086-101b2a1c0b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cd4952-d4f9-45bf-819c-7fdd00c9f4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20002a4-8e25-4e33-8ad9-bc3333a61f0a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b501543c-5e83-45d1-9fc9-2fb8d7c6b197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3575a2e-dba3-428f-b59c-778ae2d39340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25fefc8-46e8-41f7-90e5-03214c75f36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd7035e-6991-4ad0-a88e-3b55cc64ea38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628ea68a-d03f-4f27-ac07-b357df97276d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816eb2eb-f3a5-4c62-9983-fa06319b90a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee528edc-07b2-4c62-adb8-7f484fffab1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b3a76c-6edd-4dbd-8c2d-f2d7a664c71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9142f01-8a58-4ea2-a845-d31445f835ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02593432-fcb2-43eb-8a9b-e98c683407a2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab9f759-8bc3-4508-9bce-e3dfbc7fb279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a11f65e-6e04-4a70-b08b-28c4e864b2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96701486-b754-43b7-95cc-b9a50c3c893e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315b5fc5-3a5c-46f8-9ad0-d099b5a11e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3957dfc-c517-4511-9777-7549c675d1c3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b50d43d-a67e-46c4-8d7d-8e018e8f1ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afafee25-1f46-47c7-b025-40602ae78c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa6e171-e1a8-4541-8c86-8911852bb518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70816094-e5ec-45e1-80b6-914a85d54a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b048906-75ab-45db-bc04-5a9f70fc7d28",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f79066f-9cad-4689-ade4-6d253257cca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5494fb-24a1-465f-88ba-d078ad7d4daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f349c241-4ec2-4033-8431-9d9fd18a2652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36c1409-dad5-4944-bb05-287fc668ad70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb5d6a7-a855-4d5e-aa4e-164f57a373a9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835291b9-bb88-4b56-94d3-21762ced4f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb8eb63-eee7-461c-be76-af3bbd067d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40335fa2-84b5-4f07-9e02-8d3c11730b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4729f959-ee82-4ce2-a0a0-4b59dbadeed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804f8ad8-6967-4b74-90e1-5fc9e81ab0b1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87efaee8-16d8-457c-8fa5-1ba21e957cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85e5aad-263c-405e-a488-addb7fb4645d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b87e95-4534-407a-bfc4-f313f9c38076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c29769c-cf62-4c50-87ca-8f344849ebf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da02cfe6-4aba-477b-8a3c-494d70c60069",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93f5ba3-1e74-41a7-b079-94d383b32c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c4ce61-cbe3-4fe8-b3cb-b7235beda5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2376ff7f-2699-4ad4-afd6-21fb07154cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c90644-5131-4945-a48f-47db2eb73ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbe2a7e-30aa-473a-9f63-6a79f08dac83",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14daa562-137f-442f-915a-75e09795fca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6332a53c-f3e2-4ae1-a5a9-e99eaddc2782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe99044-33d1-4688-a8d6-f171ba4f0098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de4625a-a061-4629-87bd-6d137dfae2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a180b2ca-1036-4ab7-9ef3-4df843e5f019",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60410224-6f7a-480b-bd23-f1f0c59096d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f76e8c6-0430-4986-8be4-1967e994420c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fff4ab7-88f6-435f-b935-6f4a14a0e3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d09ebe-7cfa-4511-a9bf-59efaf2a60c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5d94be-6765-44e3-8b98-4eea7c554ca8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f02a89-bf8e-42ae-8ada-80eed6991a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc166800-c63c-4874-a135-a12767a5a71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0643bb9e-b7a5-4b20-8d07-1b720b4d67ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db7814d-0473-49fc-a238-0de47a0040ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded99987-73c8-4a34-b641-0fcd789c3793",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ec3c7c-5a37-4441-a351-7eb2a4eeefab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a3007d-2543-4adc-9302-f92f65d844f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1777de3-fcfa-4dde-89cf-b40e701e5956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204a9196-3447-4de5-ad32-cb4d7494a478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acf4ff8-d829-4d2c-9e4f-04b4b2af0416",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae00b9f-8e3b-4874-aed6-d32ad431e14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a091d3-9293-4312-9ce5-c5aa6e24472e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d812c0c-6612-45e5-ab3c-a3214f3aaa0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e083a6e-11aa-43f9-85e7-5b6efa3889ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2953674a-08cb-4978-aa4b-3ee1aaffee31",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe2bd72-c7f4-4d26-bc57-ebf477328cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02288518-e179-4355-98c8-c5a7b025ff4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322ee914-c1e4-4c62-91f3-299d5b9e6e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0eab7a-30d0-4d8d-907f-8802a5e44c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31764bc-5e87-4525-9ef6-e36e5de27bea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96800e26-9a32-4ba6-a184-65cd7a38b6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813c433d-d47b-4679-ae1f-d66334ed8e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74516fed-27cc-4e0b-bb6d-cb0f818ac049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9732956-62f9-4736-9cd9-89f21d68bcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48805f7-e147-4061-b5aa-9ac9582b4d13",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b391a470-3a7f-4984-a7cc-c9579b982905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77de2f96-71c4-4684-8ebc-7c421ef50bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0117e23-0684-44aa-81ec-92b3c6e2abf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11f3bbd-0317-4735-b422-427fcb2d2dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bb76ae-c2b3-4bd7-9181-1da0cdf13137",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cf19f4-59f1-4400-ae40-cbc30fe6d4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9daeb61d-1cea-4a55-a539-f359fedac0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ea0e95-c7e2-41d8-9673-4b9f3870e225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ac09ab-32dd-4ade-aae1-b321a7de07ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb90dcdc-7f38-4e21-b79f-8557ae65e17e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9603913e-28fc-4f7c-a676-07f569e7a5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6691fdd8-ad5a-468e-900d-4ae0235f5b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b81d5db-50fe-4b94-a03c-3c2db46a332b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2012b4-4e8e-40fa-8172-64587a9d9599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87e7aff-7676-4150-af13-336fddb68563",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfef28b7-5793-4974-9c38-9a2bcea17394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5946bd5-4037-42ee-9854-67e4b079198d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da027ac-89a9-4123-92c9-c4799a99e71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb48a1c5-8eeb-4836-8c83-3108783d1dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01923e30-19da-4be6-ac22-370bf2ba78b9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1772b6d-7b3d-4e5d-8a37-a6326033c21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43156d77-75ca-4b67-9045-5d7d87d33230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5c5769-5b89-4354-ba2f-bf002ec497e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a447cc-af6b-4ac7-b8a5-d78ef7889091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b957a904-65c7-4774-ae15-71fe589ab8ac",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678757aa-053b-4138-9388-399e77c3e14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70baa91f-c937-463d-b179-44dc96645073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246fcc6d-b293-419f-b064-b828da72423b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07f9040-c6bc-4b46-b85f-39d6d36d980b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5f81ef-d081-41a9-82f2-d6876231f30a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c03940-d1ae-4852-9dce-75be91e1d0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5caeab-362a-430c-85c1-7eb767125c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fd1657-1065-407b-9aaf-8dfe6a9236fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0cc73c-cce1-43ce-9e0a-32781c8daa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a45016b-a66a-4c5b-9e32-bdb3b38de2ac",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d654789-13fa-43b0-b7c8-fc3be668131e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe719771-33cb-4c7a-a561-56650e21f787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d245a8ba-b713-4c48-9329-28bd1d1793b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84360fa1-0598-45cd-bfbd-ff4ed2f1f6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646672a7-6e67-42f4-b246-1c36a5e00fb9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7ec82c-062f-4973-af7b-8c8b962aa626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f3ac01-ead9-481c-8306-2b75751c795b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dda409-2f50-4911-afcd-484d1caa8d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03974d01-1762-4cb4-8441-50e7b1d4c991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9601b22-bffc-44a5-8f97-c951b21f2fa7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2086551-b1b3-4ee1-ba33-e05e74d44651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b60833-dca6-40a1-bd0f-34aeb37f8106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbd652d-24b2-4375-b1c7-8fe05085c8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b05056d-d7ca-48cd-9613-ec5f97496a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78841a24-00b8-4770-b410-b8c3e74f1c55",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd06ffd-cc6c-43cb-8f2d-711d2ab4554f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f8d13a-5dde-446a-b207-e412e96a9568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32489aab-83e7-44e4-aee6-99f9fdf1eb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842b3dcf-523d-4cbc-b58b-1b16e7633375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec8ac40-6ec9-4ce1-998e-424e471f4903",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267fbe43-0111-421f-b984-02c2d8ac6164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ec8d2c-fb77-414f-a29a-8cbe1c16caf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "226079fb-98ad-49d8-89ff-5f8b3ca627c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d5decd-e3fe-4593-ae10-05fa80cbcee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94dbfe4-d8b4-4aac-b3e6-7ea137833195",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb20db44-3c6b-4eec-9d61-37117639da6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d33937-080e-4366-b372-90e036b034c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a341b660-7f2b-4bdf-836c-86d31342897f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b25ac6-a331-4038-a1e1-1cc21221fadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ec485-b153-40a8-b70c-a1334f8d9eb3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff014f9-9cf6-492f-9ec6-66c6d9de48fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0086d7c-b190-421f-ac20-facecdc27a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e880a2d-da16-4c6c-a16a-724c39764968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ce790f-f246-42be-acc2-09f7e5bafb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8762edc-6432-428c-95f9-2b0cdb310a48",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f16ebc-a516-4d6a-b476-2b322c778992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2392b719-f281-4184-8bf3-b2529276c2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb71755f-3dea-4a17-a6b1-f124ae44d794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d298ac1-3e2c-49e3-a89f-022e99c0f257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af99f0f5-334b-461f-bc46-8586e7e2d5f5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c56612-ec49-41d4-901a-e8e793e5595f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323a45ce-83e3-436a-9dd1-f56ca61e994b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3e9464-1542-4f39-a4aa-fd45506191a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c557080e-40dd-407d-8f1e-2d46dfe82ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe12176-42a0-4a3b-a396-77ba70d049f5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39673cc-0c1d-4906-a3d0-1ac85cd4a3f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba77a36-39b3-4978-a5dd-f06a745b78a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8293a616-ac62-4944-8968-1d1c7fd3a8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce9ce64-2bd7-443c-ad26-6784d5fc9f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efb6db3-fb47-4127-858f-b0e21d3955c8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8d209d-3ea6-4f53-8b56-693d90d43eed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08b2a5c-698b-425c-a2bb-422440b2fd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7b864d-dcd0-4a6c-9608-eb68d4284170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b657b0-caf9-4367-8034-690030b32fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592da5e7-b408-4471-a3e4-0e68a47e67e2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce0da70-e2d0-4606-b669-20b07ae98378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab6af74-ad64-4adc-afdd-0942119675dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4939a30a-391d-4554-9aa0-2b7aeeac0e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4790b3a5-4c8a-4e6c-9638-bab64b0d3ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecbc024-8877-45ae-bfea-6fb7c097748c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731e1f55-2f84-493c-995e-fcd39b94fcfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f5fde4-7d77-429d-8102-d024bad359f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c76522-23ac-46c7-9de0-eab86638aca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65000e9c-a1d6-45f8-91c6-45b8ad0f300e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385c800-ec7a-42cb-932d-7ff92282c715",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f78ff9-109c-4556-9f20-1459b4f859ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f341f3e3-5282-43b7-9e60-cad1d90bf559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da693fff-373e-450d-a229-7352b8a5c8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e328a2-831b-42c7-b830-3f76d5de00d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f55b0a-37ab-4b83-ae55-2d083d327efa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4508b9-694a-4d56-97c4-ea4a4002d045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78044418-0022-4284-90cd-cdf89a0a049f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294b1698-9118-4f44-b87e-9ebb4c8174f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685df7d6-0ffe-4fa3-a918-9b524ce860df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2b05ff-2fcb-454e-8533-0cc42f825f7a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cba8a3-30fa-4b6e-ab28-08147725d0ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e0fdf6-1587-43a7-a8ab-14f1f538bc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f289f2-8fbe-421c-8263-f9761d780509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac46e544-3df3-4002-97fc-04fe7913ae38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f3e545-5541-40e3-af15-20c581418556",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa341085-e5e7-4339-a88e-4720b3d220f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34da51f-1c37-4238-890c-5c92716db25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d45d3d9-36a8-40a6-a8bf-a7279d77af54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf7f903-da9a-480e-8ef7-24647c147bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce26af6b-d431-4269-924f-a901413a36a8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b7fbed-61c6-45d0-a09c-0963ee6e883a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c591907c-a8ba-4647-b4d0-4a3d46ac55f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10422a2c-fb57-479d-9801-c4ba39abf6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b210d9-e9ab-44d6-9316-c587dc5414a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2938bd5-ae77-44aa-b69a-f25f28ee5ae4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c8d21a-3322-4e75-ac3e-9a8ca20506e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "649f6d33-6e1d-4976-9cb1-9622946ceede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a32540-ca8e-402e-aa85-1078f31798ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3235992-3f3a-43f0-90fe-c89ad9159692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f698f9-6ced-4698-9303-4d1bce968228",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c8f843-b1f5-4b32-8850-cfd0e260b320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31790927-a6a2-467b-ab3f-df0ef643970a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d040bb5-63ac-4616-952f-389c1de2018c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883760e6-e4a9-4600-96b3-f4e0b7d5be5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ca3279-a345-4d48-8e17-cfdc15d3df51",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f46636-ea73-476a-b0ed-8b50701fdc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ec3ddbd-ca6a-4263-b4dd-5adaa415cefc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079ab32b-9e6f-4029-b7ea-6b8e9daba92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1116ae45-163b-4beb-a6bd-3a9a542f6222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca42253-6e56-4749-9cb1-eface37d56ae",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de12982-9f10-4ece-bcba-78cfc8b7528f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069c317d-7027-413a-aa52-4c530829e4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc588d3-e57f-4380-b4d1-59bb24b063d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fb7ee7-d22c-46c3-b619-31596e21131a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2edcc8-7c6c-4e45-9a07-d23c51733459",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e606c639-f318-41f5-97aa-afd03b6c25e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca702f46-80b3-4282-8252-08539f6108b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74214ba4-10a9-4024-b859-043ac91a81aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09480643-2308-4e28-8815-78fc597298c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4383f32-de36-4b5d-b8ad-5674ce802e9c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473715e7-73ee-48f9-a79b-5c5f4ed223a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684de4b4-e7ba-486f-b969-eb770d3ef56d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797f143c-798e-4345-8152-5365e325ef45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d389c8ae-0ab0-4889-af84-5895c651aefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502d1af6-c35a-46b5-99d3-1dceff741eb8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5c2782-4e1b-4068-9865-197dc62b6c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87489e4a-ac29-40c7-9007-0a3a3d198e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5357019c-e727-47fe-b25d-534b9b4698b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8688a0af-541a-4a5a-8f0e-7a9af94691b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18fdbd5-1983-4899-9cf2-01b8bd711d99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76ac0fb-2f72-49a2-aed5-af3f8a8741fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cba2d68-35ab-4ce1-b775-d2fdcbc7d621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7f2a8a-280a-4b01-8c61-2e4c0be54f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b1881d-4653-4193-9355-db051692f965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc8a1d2-82c3-46ff-b89e-ac1266011ae6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0360786-73e5-4de0-9e88-2857d69b0798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01d6165-03b0-4047-8870-7a2c724c9670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ee1c72-0db1-4b53-8413-307469f22fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcfa017-98d1-436a-8094-083f1b93369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807835d3-ea80-4029-bd59-d7b586479f07",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a170cd-838e-4abc-a2b5-2126f829c14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d65913-8e99-4b57-b10f-fab47e83a37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcbd32c-6d51-4648-b894-3466e7aaf263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651ad0b7-ae82-407a-8d4a-e1f6ccf4c121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21688494-18c1-4927-8283-33bd0c28b8ee",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9fe8ce-a0f6-4f0a-b42b-b9291ff73f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f632b6bc-86b1-4f26-b6d2-c5241620f0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a140ede1-c1d6-450f-aebd-57c7475c66ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ead88fc-f977-4e98-8b0a-d0628fe2bd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90e567d-5b1c-4942-9677-807dd5827314",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a051f00c-e42b-42b7-b3c9-8114d49727eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec631ab7-58d3-4c08-abdc-3c4a25832038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da9dcb-2764-43b1-8993-8726502bd418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2586d8fd-283c-45c6-86b6-5146b8d5a438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e73bcc-d8cf-404e-a877-5cc7d28cce12",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe89dfa0-d08c-4234-95d8-8e7b91780a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0d3fbd-bd2a-446e-8fbf-61ba208d486b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6521d19-3172-4180-b9b5-2b7fde7be2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087509f0-056b-455b-aa41-1409884ada71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3a7f4c-90c6-4ace-a1c0-6d6c0cf9cdf8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3756f8-e1e8-46d4-88ab-cf359b27d801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f64849a-ca92-41a1-a539-27bb4ee31eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fec7804-d87e-4b71-9000-0323a271b581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae829824-dbc3-4ba6-8d03-64e6182b2738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0691fdc7-f198-45ba-8cc3-7087914078a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f46e99c-5d18-4f6c-ba08-69fa369048db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ee3300-ae65-4e75-9b1d-5f75569b43ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed4df26-91a9-4a0a-85c9-fd2afac52d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f03709b-ef0e-49e0-bf31-e7e0cc740583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b27ca3-9d4a-40a4-a02e-b421d370d290",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05a4f08-8c30-4a08-b41d-a60a81e43201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6290f216-d544-4ceb-81a5-bf59c0e60722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585a4d3c-5ec2-4b46-b418-7ae29ecd3b21",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b6b51d4-85ad-4f61-9c80-2673a0372006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1950766f-16c3-4ebd-9ef7-aef49a1009f2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93704bce-9fad-4e9b-9640-e3153a4fb9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c62ba814-416b-4b73-b125-bd2e1b0f7cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d79475-82c8-4489-bb72-509a5999e12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef02ddc3-85fb-4f62-864a-71d6d67f076d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c769a1-59bf-48e0-a6e3-140aa408f94c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b328db2c-8a59-4d4c-9f15-b53beeaa3a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e37b44-d208-4be8-906e-727694de9585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda6d7f4-d73d-454c-bb20-7506f4555152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee36fc69-7562-4ef7-b2c3-9579b9a9ed76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72098d9d-8ea9-4b02-ab9e-6724a34219de",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1e985-b8d5-4935-a079-9943105546f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bad2a98-803c-4135-93da-1facaee0e355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474ae34a-2d20-483b-b7e0-8c53e54e3e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea30da3-ed30-431b-87e8-7bfa5501016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9adbb82-a8f8-41fe-831d-30f1d4786d6c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e1b341-7a8d-4095-bca3-33c26123d96f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e969274-ed6d-4641-af92-fc7e1819f2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3034fe8-e563-4b52-a1c1-db9e7af55b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09b0bd2-91fa-4e60-8347-070f3d90af94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd94940-85e9-4f84-beb2-33ff95455012",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c13b8f1-a996-4317-b6d4-a237bdedbe66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b126dc4-7604-49e6-b0b3-061730e6c580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d5be1c-bddf-47f9-a65d-90960db155c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8a6e5f-42b0-4c76-865a-fdb7761fc270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6344fca-3057-473b-ae75-240b6acfb5a2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d949d6-7f93-4b5e-a767-da6bd65a908b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54ce459-e54c-4a0f-b3e1-979c8206e439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c111e239-6c3b-449b-8c5a-34c6fe4928b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e0fa3a-7705-4904-906c-9c65cbc0fb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d04fa4-602b-45c4-a708-217c893d6b54",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abeb9c57-ffd0-4971-b9d3-2e27c51af022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a5df24-4f4a-42b6-a03d-e7254ccfd13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abae4650-537e-4a0b-a3ee-4c9700b58830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d22d8b8-2cfb-41ff-bcfb-41dd1df9d3e5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fde3209-a007-4ca0-8b4b-11d90e67a54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a526e397-d122-4400-b110-36f18e2f642e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cbe8f9c-c0cd-4540-aa5d-3f37f287643d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04e5cd69-94dc-4cc0-a26d-7b3b63572cc3"
                    }
                  }
                ]
              },
              {
                "id": "7cf9f159-dd54-456d-bf7b-56f8ce0dca0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e28b5579-f21b-43a7-9b2e-e5a6372e315c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8939ef-94bd-45c9-b825-5e2716ee55e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b5d9de43-9999-45dc-a366-55795f116a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53051b04-1a0e-4a62-82b2-1f14e7c8c9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "252bf192-d0a5-49ac-ad56-3843bc57ce88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa774045-38ed-43f7-9dac-6a83d1c28d26",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ee7356-bb0d-4420-9ee5-b6888d18a4f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3090d91a-52af-460e-a256-1376514aae1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dc9945-814c-4efa-9f19-8b8c82858d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7c23a60-660c-40d4-b74b-9e7776743442"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b756cc2-eaec-4e79-8cfb-8c19bd07a0b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d29e0c6-03cf-4a3c-b7fb-f9eaf1de6d17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f655199-66f8-4875-bfe1-e0cabd24292a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "870d90bd-c44e-4317-bff5-b6519f64d87a"
                    }
                  }
                ]
              },
              {
                "id": "8d857d02-266a-4f99-bdf2-b2bf741d4e74",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "66794f88-4b24-4080-b9cd-92032751ef88",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dffbc71-06f9-4601-a56d-8ca2f1b82de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ab3128b4-20b9-4d47-8ed2-8a8a619da7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310f8327-cedd-4744-a383-87662630b192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e31b443-e868-4bcb-b4ec-a2b3b597cf9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fe564607-a859-40b2-b6e6-5a73d7ea5928",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18f3fe5d-0c8c-462d-95be-3fb0a0836e8c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "317ae894-a2af-4885-972f-2141ac3ac0c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "27b3c1fa-7b5f-496d-b66f-142f77cadd85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b31b3343-6af2-4aa9-909d-2b05b87e2e74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ead81889-68e9-4313-a5ef-f5cb873de332"
                    }
                  }
                ]
              },
              {
                "id": "b40d1a2c-c544-4a0d-9d65-ac52b640b999",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0901ce0-65aa-417f-ba56-472f577c856f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a26a5ee0-19db-4262-b60b-51344716dbc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2aa2c6a-c442-47e4-81ca-b88d896cca6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fb28ce6-345f-4971-9c1a-9fca3e5d4639"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb632eb7-1a47-4bce-9268-5d1c847ee3e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bb2d551c-e9d1-459a-a7a7-b52308c027ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17145abb-9fb6-4da6-9464-e8af81d4d0cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8998431e-d2d2-46f9-9217-01cefaf0ce8d"
            }
          }
        ]
      },
      {
        "id": "40efdce8-b2f3-48ec-a468-552976104914",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1c63586a-4aea-41e1-984f-1b886571f6b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f23837a3-1a61-4089-be76-ff6a41693000",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c386337d-de14-4318-a34c-d80eab66ad60",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5876352-1d37-49b5-810d-52a70b370174",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a72c1634-1317-4f0d-8398-4a47deab2ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c245ea94-a9de-4583-80ee-9b09c50ed93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f8ad518-b2db-459c-8791-a58181c0a1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d84fe0-57cd-4a78-8ce3-4973a5d42b7e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36eca6c5-5e5f-447d-812e-d1e36205c77a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "602294f0-9e4d-48e5-9382-de491f148445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7f0383-ae92-4ce7-8e5c-ccbe0b31a906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2b80d29-37b3-4a05-9315-53c2c86be8a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310f8d70-3a46-4711-8ec6-98c12a40b0d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "668c4b4f-1646-4124-8133-5080616fd604"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17095205-343b-4b5a-a7d6-29ec95ed1a25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69d3c532-ff9d-46c7-818a-7c3645aeb158"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08b7ff98-c364-4e94-b9df-0b1173a339b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ec4289bb-b7d6-4b10-9901-87b5786749b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c088779f-e950-4a90-89d0-f7ff51d5e89d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d791c7c2-bce4-441e-900b-b91f8e54a0f9"
            }
          }
        ]
      },
      {
        "id": "91990e23-23c4-4cbb-8261-0bdf19b9bde8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3303c5a6-0a02-46b7-9d05-533fe2f6bdd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2de330d7-beb8-4cbe-82c5-88828801aeec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abbe4830-224e-4326-97d3-8c3f1b91ea4b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32caf1f3-a6c4-4b8c-829b-30f37b0a43b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "034315a5-8f96-440b-9216-3580b2186fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78be0015-fc3c-49ae-beb1-1399dd7af29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cf6522b-f6cc-406b-8595-691b6247265c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516ddcfa-0336-4f7b-8ff3-0a8a84cc0955",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454997e5-f3e7-4efa-941b-b01404040d89",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bfd91342-5b57-4bde-a6d9-c874d6145835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e31e078-8c78-4912-b974-d80015a369d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9fd7f6a-0c9f-460a-9e2b-16d91c330f77"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c5de692-f17f-4613-8912-9b1cfdce9846",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cfb0152-0521-4ca3-9413-9b893b8795e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf501766-9c0b-4628-984a-fea9cbd26930",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9d7d19b-5c7f-46ad-bf0f-6eff65984226"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3159e48-39b8-41cf-95c1-9be2ebf22bf6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7904b6b9-db28-4a7b-a132-72551bba9d90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d995631e-d86c-415c-9f85-58c10552951a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a130f53f-aadb-472a-8586-2b5b05d2b6d1"
            }
          }
        ]
      },
      {
        "id": "a39a13b5-e1f5-4216-b255-e1528fdb212e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "37133998-fc4b-4827-9e87-f30fbb96db49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20465c35-77f8-4101-9e16-e63a82e1da47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "221bc4bd-2845-4a3d-8968-82e29db9f163",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58008d1-8758-4052-b1ba-76daaabc1c51",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9ef9041a-bd0a-4fc1-8c74-6c986e8fd5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e961444b-9798-4fa0-beab-bc6742c3c455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ad0ce32-6ae4-4c84-b9e5-a1dc4a731329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97b22fe-d381-4e82-ade0-7f3ba5f9366f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce167e0-432e-4af9-8577-1474a5e46201",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "33f66348-e697-4325-b5e3-f8cc7fc5fb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab15236a-9703-4200-b8a4-95d4e1ca5c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00f74cdf-d99a-4bdb-8ca2-7283e2acf9f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5d2a7e2-05c7-4817-be4b-acee3493e66c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44822985-6821-4a48-b325-33b494ba97ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47a5160a-9094-4bfb-8ca9-cad4deb13b56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68653bec-42c9-4c8f-b089-3b47e1accc4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cec44f4c-bf78-4d2c-96b9-3baa72d0e051",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "abc5ab2d-30df-4e83-a1c5-faff7069d2c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3acf94c8-f9d4-45ed-9061-695e9fa0dfae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef7c581d-4f87-44b5-a933-d605ca20969d"
            }
          }
        ]
      },
      {
        "id": "a9bbb072-24a2-4ac7-a95f-525fb33d390d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1652818e-5823-462e-b6ff-1e75e59b63c6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c61859a-8a11-4865-9048-47839a4ff4e0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "762a2e19-7728-4844-9ebe-13d4a8b1aa1e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65a63a78-5393-40b6-87d4-8a38039a6fca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c0fff75-26a0-4a59-b74d-804cea268258",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 78.75197062504274,
      "responseMin": 7,
      "responseMax": 465,
      "responseSd": 49.14839020694238,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675471063082,
      "completed": 1675471097881
    },
    "executions": [
      {
        "id": "28eaf9d6-f459-4c83-855e-076388a2d411",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4fd05a00-a00e-4466-9395-fff0e429a8ce",
          "httpRequestId": "f4b31f25-836a-416c-bda5-57991cb78ecc"
        },
        "item": {
          "id": "28eaf9d6-f459-4c83-855e-076388a2d411",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "836ecf9c-3ef6-4a5e-b430-deaa950ce63e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "af560533-0643-4204-80e0-737b41c449ef",
        "cursor": {
          "ref": "e8453aec-c213-4add-b403-01475598b71a",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0f231b14-ea1f-485a-9787-c8cf90c3cb2b"
        },
        "item": {
          "id": "af560533-0643-4204-80e0-737b41c449ef",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "41a1a6ea-add0-4ae8-8c2e-4611d50bac44",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "908c5fbf-6aec-48b2-831c-1270cc14ead6",
        "cursor": {
          "ref": "63125684-bb7c-4dd4-b033-c0055fc3bd08",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d637e3b8-a170-432a-bd78-f46cfa26cddc"
        },
        "item": {
          "id": "908c5fbf-6aec-48b2-831c-1270cc14ead6",
          "name": "did_json"
        },
        "response": {
          "id": "7d70d41a-fe36-4cf0-b545-2f795ed72848",
          "status": "OK",
          "code": 200,
          "responseTime": 314,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47545b05-7625-4f56-aeda-df532dc90cc5",
        "cursor": {
          "ref": "2f5fd38e-d6f9-47cd-bd99-d6f3315ad511",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "796b92ff-99fc-4ac9-8790-0a615a774a66"
        },
        "item": {
          "id": "47545b05-7625-4f56-aeda-df532dc90cc5",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec02ca46-e268-4414-a874-e336c3582087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "47545b05-7625-4f56-aeda-df532dc90cc5",
        "cursor": {
          "ref": "2f5fd38e-d6f9-47cd-bd99-d6f3315ad511",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "796b92ff-99fc-4ac9-8790-0a615a774a66"
        },
        "item": {
          "id": "47545b05-7625-4f56-aeda-df532dc90cc5",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec02ca46-e268-4414-a874-e336c3582087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "10262ea2-3e77-4a6d-9afa-aacd978d091f",
        "cursor": {
          "ref": "2eb6f77b-9ff1-4ebc-b57e-68a5fdba9bdf",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ba904ad3-7cd4-484a-853d-54c4bf1ff66f"
        },
        "item": {
          "id": "10262ea2-3e77-4a6d-9afa-aacd978d091f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ad297688-0f44-42c0-8f7c-d5bc80cb4c3d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6c9fb3-ce8a-4441-abb8-d5dc6c0c5401",
        "cursor": {
          "ref": "241737ce-fec0-48ba-bbd2-b3f9ca5b98df",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6332182c-b26a-4a23-82f5-7e3294170ec7"
        },
        "item": {
          "id": "5c6c9fb3-ce8a-4441-abb8-d5dc6c0c5401",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "419b7f92-974c-47b6-a7ec-117c62e213bd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3315b992-4b45-4485-9047-3bb8def1ab6f",
        "cursor": {
          "ref": "ce0f80c8-2cc7-4b2e-8796-9b13ae8d9f2c",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7461f22a-d4ff-4d60-b506-7742bc95074f"
        },
        "item": {
          "id": "3315b992-4b45-4485-9047-3bb8def1ab6f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "132fe559-8cb4-4c30-b654-3f3ea4e7c3c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0026ec2b-5f8d-4c0f-b0f2-6d4607373bdf",
        "cursor": {
          "ref": "82686323-1ebf-47f1-99cd-35a4e931bf3b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6ba93fb-da86-420b-b746-a8725bcecbc9"
        },
        "item": {
          "id": "0026ec2b-5f8d-4c0f-b0f2-6d4607373bdf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4ba8411c-fe41-452e-9de7-3b1f9c43d03f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0026ec2b-5f8d-4c0f-b0f2-6d4607373bdf",
        "cursor": {
          "ref": "82686323-1ebf-47f1-99cd-35a4e931bf3b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6ba93fb-da86-420b-b746-a8725bcecbc9"
        },
        "item": {
          "id": "0026ec2b-5f8d-4c0f-b0f2-6d4607373bdf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4ba8411c-fe41-452e-9de7-3b1f9c43d03f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85284faa-a468-433d-b100-fb3340c6a6e0",
        "cursor": {
          "ref": "e9cb60e1-c463-4d90-b1bf-b806d86222df",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "12463d33-fc9e-40e8-a0da-df06a5016c59"
        },
        "item": {
          "id": "85284faa-a468-433d-b100-fb3340c6a6e0",
          "name": "identifiers"
        },
        "response": {
          "id": "8b283c9f-6b61-41b0-adcf-4bbfafb8769c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "be350305-8714-4633-a09a-248772dd4b30",
        "cursor": {
          "ref": "e67d4724-de5d-4763-af5e-45e81e819f31",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f3ef751-1c05-4cfe-889d-43b0c21ec234"
        },
        "item": {
          "id": "be350305-8714-4633-a09a-248772dd4b30",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "194bf911-7094-424c-985f-e2fdccd6a9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be350305-8714-4633-a09a-248772dd4b30",
        "cursor": {
          "ref": "e67d4724-de5d-4763-af5e-45e81e819f31",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f3ef751-1c05-4cfe-889d-43b0c21ec234"
        },
        "item": {
          "id": "be350305-8714-4633-a09a-248772dd4b30",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "194bf911-7094-424c-985f-e2fdccd6a9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f975210-f3ae-4826-8440-08a6f28f378b",
        "cursor": {
          "ref": "954ddb67-0364-43a7-8608-943074fe5296",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dfe1d508-4e91-4f76-87dd-5ef6fa8c5ff2"
        },
        "item": {
          "id": "5f975210-f3ae-4826-8440-08a6f28f378b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0079bf60-6ac8-4b99-b259-9847b584e333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783e4251-5ff0-4cdc-93bc-207a2e34f46a",
        "cursor": {
          "ref": "b40b6178-3164-4463-a749-d80a0bf9e37b",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4adf57aa-78b6-4e8e-912c-fc39d6a35a59"
        },
        "item": {
          "id": "783e4251-5ff0-4cdc-93bc-207a2e34f46a",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "70ebcc16-1810-42a1-a3ff-eabee8379364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87bd879-b3d4-457b-aa3c-5a7acac4fb78",
        "cursor": {
          "ref": "3d253ade-9d35-4a6b-a16c-c74563a4d1f2",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b3ffbdbc-d626-4d8d-9a24-134b64344fff"
        },
        "item": {
          "id": "e87bd879-b3d4-457b-aa3c-5a7acac4fb78",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7f50a152-c7f4-4300-a74e-2b39a61f4766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f410cb1a-1927-48da-ad4c-9c5e4420d32a",
        "cursor": {
          "ref": "3e86e760-e2e3-442c-b080-0b58e48efc9c",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9906052f-7533-42b6-adfd-3ec14f36a69b"
        },
        "item": {
          "id": "f410cb1a-1927-48da-ad4c-9c5e4420d32a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c2eb8f70-b1db-45d8-98b6-70adc832487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3d5bcb-cec2-4815-bb94-0d851d41f4f1",
        "cursor": {
          "ref": "3f302b5c-5007-4726-8128-b730b812c1c4",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "702fce69-fb93-4f3a-bc74-1cc37e737ee8"
        },
        "item": {
          "id": "6f3d5bcb-cec2-4815-bb94-0d851d41f4f1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5d3426c9-9b49-46a3-ab1f-471e0fd86635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464460bf-8e9a-4ce3-b079-d111031204fe",
        "cursor": {
          "ref": "48396638-b594-4340-b2dc-132ba5d49c2f",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6bf098af-0358-4a0c-b9a2-c788bfff59de"
        },
        "item": {
          "id": "464460bf-8e9a-4ce3-b079-d111031204fe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "80b8ee62-6c33-41c3-a1d5-899a5a1f75ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effe4ab6-f818-4700-87ca-c841059ef08c",
        "cursor": {
          "ref": "292c83d1-bffb-4e67-b245-b827f156a4df",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "744a87b4-50f1-47d5-ab35-5059bcc9980b"
        },
        "item": {
          "id": "effe4ab6-f818-4700-87ca-c841059ef08c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e2f81083-5489-497f-8121-392d2ba35ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2ed732-1396-4834-9e35-8cb7018e16db",
        "cursor": {
          "ref": "939387d8-2424-4a00-a657-09b4c103644e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9d679adb-e659-460d-8a9f-29d3d6b0f36c"
        },
        "item": {
          "id": "1b2ed732-1396-4834-9e35-8cb7018e16db",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4302fb54-5d25-4bf7-9045-d06aebc96a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d41173f-a58a-42b1-adf0-d4daf16cab37",
        "cursor": {
          "ref": "15049b5c-4191-41ca-97f8-282298c5edec",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "79a1c87f-48f2-47d8-a071-3cc409da4182"
        },
        "item": {
          "id": "9d41173f-a58a-42b1-adf0-d4daf16cab37",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7d654af4-9f9b-4386-b964-ce4dee6232c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb2da98-66a0-4611-b733-c5b2da6e315b",
        "cursor": {
          "ref": "54be7c45-ecda-4f8e-826f-74ce94713234",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f821eae0-5264-4c19-8725-b43829a7b857"
        },
        "item": {
          "id": "ffb2da98-66a0-4611-b733-c5b2da6e315b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3c14a437-d30c-4d9f-bc46-12459e53b100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb4f608-8151-4e27-ac5b-cae9eec0d550",
        "cursor": {
          "ref": "aa1cec91-938e-4d1c-b9c1-f09483c269a6",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "043551ef-d54c-4fab-91f9-4ff387e4b012"
        },
        "item": {
          "id": "6eb4f608-8151-4e27-ac5b-cae9eec0d550",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8421732d-3ce3-4e34-8bbb-2c71069aee8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d02cb9-7a9a-4339-bd7d-831c323e20b4",
        "cursor": {
          "ref": "4b2a84b5-ed99-43fa-ab79-4e49099d4f74",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e4ca5e2-a2f4-4ff6-8e32-70dcc6886b8c"
        },
        "item": {
          "id": "42d02cb9-7a9a-4339-bd7d-831c323e20b4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "96af95c9-535e-4ec4-b0e0-46974b6ea678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b94716a-ea8f-4581-89c0-9f1ea410fe32",
        "cursor": {
          "ref": "4bb620f2-1de0-4ff6-9ca8-d5bbf7f6426d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ae67446-9f74-4efd-9f50-a4b430e22494"
        },
        "item": {
          "id": "9b94716a-ea8f-4581-89c0-9f1ea410fe32",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "66c6a90c-f712-4443-8a45-f3a82db5b0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1562463-9676-498b-9d3e-39102d1ef1c3",
        "cursor": {
          "ref": "123e2a17-61b8-4ccf-8942-4e24ae5eb8cd",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "34de0d1a-52ed-461d-95cc-4cd3e14d9e68"
        },
        "item": {
          "id": "d1562463-9676-498b-9d3e-39102d1ef1c3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "978b7370-f30d-407a-897b-3fdcc407a46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bfa0a6-6ca1-43dc-accb-39c8c582869a",
        "cursor": {
          "ref": "1281c51e-21ef-4c5d-a7dc-f372ab855ad3",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "04efec84-fe0f-4ccb-b33d-70a79674904b"
        },
        "item": {
          "id": "b4bfa0a6-6ca1-43dc-accb-39c8c582869a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e3c97791-96b6-4236-9b5f-68a07e3106de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff77389-192f-4e5e-b20a-b7ac4c531af4",
        "cursor": {
          "ref": "ceac5fa0-eca6-4a16-bb4a-bda0ccc1a3a8",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2ba4e59c-c99b-4a83-9123-7a5f60301aaa"
        },
        "item": {
          "id": "8ff77389-192f-4e5e-b20a-b7ac4c531af4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ade63948-944a-4ef7-826f-0b93a6ae3f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9da1002-3034-4314-ab31-4888dca2e4fa",
        "cursor": {
          "ref": "40208cde-9f24-4cdf-a88c-d6a7bc26225f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1fb972e-97b9-4ff5-a6af-24e7c3986c04"
        },
        "item": {
          "id": "f9da1002-3034-4314-ab31-4888dca2e4fa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e1586157-7a39-482f-aaaf-c5a66137cc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fe847c-b8d1-4ed3-be69-e93ecba9e943",
        "cursor": {
          "ref": "9015ee02-cb20-4a6f-8089-72c5810a1088",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b0f6d69a-f7de-425c-8f8a-36305275f149"
        },
        "item": {
          "id": "c1fe847c-b8d1-4ed3-be69-e93ecba9e943",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "695c17e1-d532-4f89-a0ad-e048ac33bd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e88e16b-4ca1-47b3-8305-ff30d6890fc3",
        "cursor": {
          "ref": "10d2f2d8-2f4c-4bc1-b1a2-14481053d082",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "24943a7e-17c2-4307-96cb-6424a1b007d1"
        },
        "item": {
          "id": "3e88e16b-4ca1-47b3-8305-ff30d6890fc3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "743c0fc0-64f9-4808-9a02-96572dae2073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d6a68d-0d67-4d0a-8d96-5dd397377924",
        "cursor": {
          "ref": "01ca4347-bde3-465f-bde7-c598ce9c0c66",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5af0022-9f3f-468a-b984-f40d8a29bdb5"
        },
        "item": {
          "id": "77d6a68d-0d67-4d0a-8d96-5dd397377924",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5961ee93-d8f5-4f78-9a97-a76d8c174581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacb27b0-b8f8-4ac4-b213-2b23ef8337a2",
        "cursor": {
          "ref": "c3c7805f-d8b3-44f3-b11b-99c5f986f7da",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "62f49648-253d-44fc-a210-dbd0aa7fffaf"
        },
        "item": {
          "id": "dacb27b0-b8f8-4ac4-b213-2b23ef8337a2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2478d728-7207-4d33-8dd0-595492b94795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1ac6b2-12d3-47b6-9062-c5f405e5db2b",
        "cursor": {
          "ref": "5b9e3d2b-1424-42ce-94a6-4293ca87a53c",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "794692c2-ac81-4b42-8bcb-9c56c576dd1b"
        },
        "item": {
          "id": "0f1ac6b2-12d3-47b6-9062-c5f405e5db2b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5c90218d-fb17-4624-bfdc-e1e02f382914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17415e04-7a11-48d4-9edf-0932f313d718",
        "cursor": {
          "ref": "a7f48d08-c40f-4ba4-b1e7-c9e401f31cf8",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9e28e3fb-536d-4a53-935e-678b5014f486"
        },
        "item": {
          "id": "17415e04-7a11-48d4-9edf-0932f313d718",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "af13de59-0d3b-4c41-958e-368b6251aaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e24c0ab-1b0a-437f-b04f-88935fa6181b",
        "cursor": {
          "ref": "9e299359-8cfb-4e5b-b9ef-42a86adf3786",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ba8651f3-9bb0-447d-8c5c-4a67f65fdd0f"
        },
        "item": {
          "id": "0e24c0ab-1b0a-437f-b04f-88935fa6181b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8b86b9aa-9af0-46d3-946f-efeef05233ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8c9dc6-1fa0-4a29-8481-f001b2a8999f",
        "cursor": {
          "ref": "e38667b8-f31a-4a0c-a3ca-18d0d2fa8aba",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3d0e644c-97cd-4eed-b857-26dd5291805c"
        },
        "item": {
          "id": "8a8c9dc6-1fa0-4a29-8481-f001b2a8999f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2648e32e-f4ea-4269-8990-24c6c178e04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db9d64d-6e59-404c-8a9b-c71c2d5919bc",
        "cursor": {
          "ref": "53726fc2-69b0-43cc-97bc-7d32a7a4363b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e46a2835-6d97-4bd2-af18-c31dc2627b44"
        },
        "item": {
          "id": "8db9d64d-6e59-404c-8a9b-c71c2d5919bc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5953e3c7-bcbf-4398-b0d7-715b33886226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cd7133-9328-407c-969c-c9ae7c3e1e40",
        "cursor": {
          "ref": "4d693e71-f182-450b-8b09-a1b45d588a4c",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c39748a9-25d9-480d-b284-446bf49def6c"
        },
        "item": {
          "id": "b6cd7133-9328-407c-969c-c9ae7c3e1e40",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "52b2225c-7b5d-4417-b74c-866d61d3b1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec42bf7c-3484-4506-a36f-9594fcfb9005",
        "cursor": {
          "ref": "b39366ef-a100-489d-802a-2995b8053319",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6598f424-79a6-4215-9e66-dab8bd455be1"
        },
        "item": {
          "id": "ec42bf7c-3484-4506-a36f-9594fcfb9005",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d545c4bb-d185-4550-afa2-4e6636a14883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bcaa4b-4839-45a4-821e-401033be5825",
        "cursor": {
          "ref": "dba86292-aa9b-43b0-a19c-0b206611cf9e",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c4dd982c-61da-46e0-af68-12642b721a7d"
        },
        "item": {
          "id": "e8bcaa4b-4839-45a4-821e-401033be5825",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f352bd89-8572-4fe3-a757-e924b1106ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e75e688-4c12-4765-825f-2cfc6c664fc5",
        "cursor": {
          "ref": "6b1686f4-5624-4d88-ad47-f094ed780e1f",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f4a63c42-2e2e-4206-9ec1-6cba199e68a0"
        },
        "item": {
          "id": "1e75e688-4c12-4765-825f-2cfc6c664fc5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "021dada7-2707-4c8c-a69e-ea0622a16227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6736399a-8de6-469c-9efb-04ec790d186f",
        "cursor": {
          "ref": "0a52d3d3-b548-40b3-809a-411a1e5dc8aa",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b29f92c9-7b19-4fe6-97a6-1a0d28c85660"
        },
        "item": {
          "id": "6736399a-8de6-469c-9efb-04ec790d186f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "44fa85a4-61ab-4f5f-83f9-9f5081b81742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e21f4df-6d02-4e90-8e12-f0c00c669c2f",
        "cursor": {
          "ref": "b26a7a7f-22ab-41a1-a6bd-c656c775dcef",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b5a0cd6-3c86-4dfa-a0be-9e9700f6713a"
        },
        "item": {
          "id": "0e21f4df-6d02-4e90-8e12-f0c00c669c2f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c0acb351-3026-4edf-b8a3-761434c84c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8ecc3f-fe3c-424c-b80a-a38d722212e3",
        "cursor": {
          "ref": "4a7aa6ac-b670-42f8-90a0-504b7f412661",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6abef9de-11b5-4e47-a3d8-ee115f243270"
        },
        "item": {
          "id": "0f8ecc3f-fe3c-424c-b80a-a38d722212e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5ac0ed86-ca69-48f4-848e-47dc9cfc8e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746d46d8-cd4e-458b-948a-9f766856b4de",
        "cursor": {
          "ref": "e40cc93d-9d23-4f41-a49b-274b6fb661f8",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "989bc62c-90ba-4b2b-bb6e-9719485bfc17"
        },
        "item": {
          "id": "746d46d8-cd4e-458b-948a-9f766856b4de",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e89b518c-de9d-4117-9bc7-2a75b87fa2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0245b1-6119-4b43-95fe-65fac0f0458a",
        "cursor": {
          "ref": "72aa1573-d94f-4b86-812e-7f19d49b3753",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "71edc422-e1a7-4d8e-9597-96be0e028754"
        },
        "item": {
          "id": "7d0245b1-6119-4b43-95fe-65fac0f0458a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5ca5da3f-eac3-49cf-bfb5-3cca11ea9797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f8b56f-c3dc-44dc-9e4a-525ac98c3253",
        "cursor": {
          "ref": "7c8c4836-d9c4-46be-81e3-d3f40d4d3044",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e8934732-0f22-449d-ae6c-cc097784f62e"
        },
        "item": {
          "id": "80f8b56f-c3dc-44dc-9e4a-525ac98c3253",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "de1a71a3-646e-41d1-8652-dc8f3aaddca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56eeed5f-ceeb-48e2-b76d-9b7d35ed3208",
        "cursor": {
          "ref": "aa933799-61fc-490b-826c-92cbbd82f266",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ef6fc93b-aa7a-4642-b085-364bb9043a6b"
        },
        "item": {
          "id": "56eeed5f-ceeb-48e2-b76d-9b7d35ed3208",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d94bf7a5-14f4-4497-96ae-1d80c2cb80fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d3668703-938c-4ca6-adce-e476abce2097",
        "cursor": {
          "ref": "d86e5126-2fd0-430b-830f-2e5d8b71fa25",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7f46c09d-a95c-45bc-842b-a59de2426ab5"
        },
        "item": {
          "id": "d3668703-938c-4ca6-adce-e476abce2097",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "999e9e4d-e888-4b4d-94ad-cc417f15bc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f3e0c0-0045-4fda-941f-12ffc3f8860c",
        "cursor": {
          "ref": "fe5ed075-dc50-4589-9ee4-a24a45867ef7",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "97a725e5-ae96-48a2-b04d-712836cbec1a"
        },
        "item": {
          "id": "94f3e0c0-0045-4fda-941f-12ffc3f8860c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "573e11af-d102-4841-bef2-c0c0e68ab43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df383b4-12d0-4d88-8015-ec7027c3f383",
        "cursor": {
          "ref": "f190b72d-3b01-44c6-ac60-cbb6e998fc01",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "51d52176-ab29-47e8-a9f5-573b0a2dc52e"
        },
        "item": {
          "id": "8df383b4-12d0-4d88-8015-ec7027c3f383",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1a50904c-3591-43e0-8b33-c32fb9eec837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b99d5fb-7475-4a5e-87f4-050803741e06",
        "cursor": {
          "ref": "b3768bae-7a20-4288-84f1-f65d7cec4906",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7554e7fc-45ea-4551-9de4-f354dde8ceb5"
        },
        "item": {
          "id": "1b99d5fb-7475-4a5e-87f4-050803741e06",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "592796bc-8440-47b5-9832-a3758b34d8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa855653-53a6-483c-8718-04d08ef3ebbf",
        "cursor": {
          "ref": "ae5a26a0-ce12-4817-9dbe-615ba7bf0974",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0f44c505-b656-40d3-b007-f22ed3473ebc"
        },
        "item": {
          "id": "fa855653-53a6-483c-8718-04d08ef3ebbf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "229fe667-4038-45b0-8670-591d6f9c2862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da945a0-e0e7-4108-bed2-3a988a6b4a6e",
        "cursor": {
          "ref": "2e525713-0a2e-410c-9a42-927834771a7f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "93c16391-b70c-4f2f-b132-dc7e86c2c1c2"
        },
        "item": {
          "id": "5da945a0-e0e7-4108-bed2-3a988a6b4a6e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cbfb1538-f171-4fb2-86d9-65687c6b616e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ad02a4-d4e9-4d18-a187-0c2169dac4a0",
        "cursor": {
          "ref": "97d9f399-5235-42cc-80d7-ae42c6bad41e",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a997295b-9523-4788-a7b3-79909cbb5ed8"
        },
        "item": {
          "id": "46ad02a4-d4e9-4d18-a187-0c2169dac4a0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d6db63ef-7f6d-413a-9876-5d5bd2bf1115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7f38909a-a39a-4fc8-bad3-f2dbb938c97c",
        "cursor": {
          "ref": "19a199b0-f37d-41fa-bd58-14472a356c78",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8fdf09e5-a354-4739-9692-d16d7e3622b6"
        },
        "item": {
          "id": "7f38909a-a39a-4fc8-bad3-f2dbb938c97c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c99a2db9-eecd-43f3-a2f4-f6afadcb6751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91cfb8f-1ca5-43df-bec0-f0fc6db4e1e3",
        "cursor": {
          "ref": "376d9d4a-f6bd-41ff-a9ae-ca5503a0cad9",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "82da069e-0bd8-46ad-b1fe-4b37fc46575a"
        },
        "item": {
          "id": "a91cfb8f-1ca5-43df-bec0-f0fc6db4e1e3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "79b44120-0f1a-4413-acc5-71650a2e3ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0159a9-94fa-4302-ac60-b0236365e0bb",
        "cursor": {
          "ref": "96ee8b0d-58db-4ebd-acf6-a1dc0c3e91cc",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "df768edf-83e8-45fb-ac57-eba65f7b12cf"
        },
        "item": {
          "id": "2e0159a9-94fa-4302-ac60-b0236365e0bb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5a3abebc-5206-48cd-b88f-eb7bc9cb205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5be6ea-728e-4981-b432-d2c85443e1c7",
        "cursor": {
          "ref": "33112c5f-0bfe-4b8c-9725-0c5667c7b6e0",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f559d755-ec89-4a6f-ae1f-2198db61dd11"
        },
        "item": {
          "id": "6f5be6ea-728e-4981-b432-d2c85443e1c7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4b61d31a-76de-4ce8-a618-97dddc7a38c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00396847-6584-4b69-b78f-de1d290a18d7",
        "cursor": {
          "ref": "7aff07a1-0de4-4b06-9eb5-2a6dae568fb0",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6f89c882-ab37-4e8b-bbf7-335d0ed5adab"
        },
        "item": {
          "id": "00396847-6584-4b69-b78f-de1d290a18d7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9dcc20fa-9afb-45c8-8a70-80905bdd52bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa11d78b-9670-40b1-888b-13219dd5aa24",
        "cursor": {
          "ref": "ec274a66-3bf8-4956-af29-1945c32a07f0",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8f47f293-23f2-4adf-9f00-245df963ef8d"
        },
        "item": {
          "id": "fa11d78b-9670-40b1-888b-13219dd5aa24",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bb1f1422-be93-45a4-92b1-3260ba33386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289b4d47-350b-462f-81c0-e74636a114c2",
        "cursor": {
          "ref": "fbdfc51d-1208-4be1-9c15-3c3aa2c3ec66",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f42c2f05-3f84-4ca1-af5d-c649fe2437ca"
        },
        "item": {
          "id": "289b4d47-350b-462f-81c0-e74636a114c2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "edc7ea2a-b71d-4d83-be51-0b892f864415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeee90f4-15b6-49ee-93e1-fd0dce65bb1e",
        "cursor": {
          "ref": "d51e592c-0526-4902-a347-b2a873b8c3bb",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8045697d-3cb6-4da1-9974-36b4c69a1d76"
        },
        "item": {
          "id": "aeee90f4-15b6-49ee-93e1-fd0dce65bb1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d46489a8-8898-4454-b892-e42c9ae9e70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044a6b85-6c6e-4f69-b3f4-1a5782d3be37",
        "cursor": {
          "ref": "a6403b69-278c-4441-a019-a5771f057809",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0ae1972e-34b0-4d7d-aec3-120bb5ffbf46"
        },
        "item": {
          "id": "044a6b85-6c6e-4f69-b3f4-1a5782d3be37",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "886d378b-77b0-4c2b-bb6e-2961b1001287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f04bab-75d5-41bf-93c9-1fdb845ccd18",
        "cursor": {
          "ref": "e5646b52-c0f1-4ff5-916a-70e9cfadf5a7",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c520ad25-957e-4f26-a130-7d493229bb8a"
        },
        "item": {
          "id": "84f04bab-75d5-41bf-93c9-1fdb845ccd18",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ee07acf1-c6a7-4fe8-9b04-dde3fd5ca4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4604c8-66a2-43d3-b151-2309ca21dfab",
        "cursor": {
          "ref": "e4c2551c-d1dd-4ec0-ba31-4e42cee2d50c",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9448a5d7-7822-42aa-8b4d-b06fc4d061cb"
        },
        "item": {
          "id": "8d4604c8-66a2-43d3-b151-2309ca21dfab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "38ce37d3-b199-4b60-89fd-924318143f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c846c8-7f5b-4337-b493-ef65ca3fbdc7",
        "cursor": {
          "ref": "b74e840f-adf3-45f1-b59d-7476c44ad398",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b0edaf55-fc31-4d30-8e7c-61812c2908ee"
        },
        "item": {
          "id": "22c846c8-7f5b-4337-b493-ef65ca3fbdc7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "267175a6-a624-4b3e-8b32-253c5d4e11ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a486c4b2-1c75-4279-9dd9-4c70e812bc71",
        "cursor": {
          "ref": "4c263ad0-ece5-4bb1-8bd6-d499bbd1725c",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2fb1bab4-0b4a-4a78-97f5-cebd1c8f9322"
        },
        "item": {
          "id": "a486c4b2-1c75-4279-9dd9-4c70e812bc71",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "65771b6c-7a8c-4eb7-a265-4ff78f12284f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763aa426-1ff4-4e2e-b2ac-e72b668225eb",
        "cursor": {
          "ref": "88442256-b13b-4d06-9953-75337cba3108",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d36c931f-ca6e-4275-b49f-d0282ceef06b"
        },
        "item": {
          "id": "763aa426-1ff4-4e2e-b2ac-e72b668225eb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b7f948b9-c81d-480f-9a18-dd7b9271c184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6a3b83-33f2-4e08-8dfa-0987b1bfe56e",
        "cursor": {
          "ref": "d819cc9b-1be7-4613-b21b-fe5df78ce0d9",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "217c7fde-b37f-4acd-92f3-4edb9be2c18f"
        },
        "item": {
          "id": "ac6a3b83-33f2-4e08-8dfa-0987b1bfe56e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b8d1cd71-ad4a-4f6a-9fdf-2b8c6d3a2ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6f6d0d-f7b6-4273-8789-d6cb2fb95b76",
        "cursor": {
          "ref": "6bef4085-c3ec-4d24-8df8-dfaa8cbd69f8",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4f1b05f0-a0ae-46a0-b36e-a97304fe9949"
        },
        "item": {
          "id": "6c6f6d0d-f7b6-4273-8789-d6cb2fb95b76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1b826db2-c4af-44d4-bfd9-f67b5df3fa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e243b9-9e5a-438b-9e93-8903a5c92219",
        "cursor": {
          "ref": "11210260-2a1f-4552-8fbe-4da4fa0648da",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bd47aea5-6126-4427-ac81-ead1273e82c4"
        },
        "item": {
          "id": "29e243b9-9e5a-438b-9e93-8903a5c92219",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "99681704-cc34-4f1e-9527-2f99a0a9b6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370124d3-5fc9-44b8-9001-75d0b9ee8250",
        "cursor": {
          "ref": "17e8c057-d5a1-4ea0-84fe-e9e2b30b343d",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "91ea5a94-ef3a-4adf-b206-8659977853fd"
        },
        "item": {
          "id": "370124d3-5fc9-44b8-9001-75d0b9ee8250",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c2a03853-fc6e-4a29-bf9c-d7da46fdbf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e85013-0447-41d4-88f2-befe0a9096fc",
        "cursor": {
          "ref": "b9e477dc-b980-4eb7-a1e6-c45edc371405",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "955f1422-c891-4f9f-9ca8-b721241c3102"
        },
        "item": {
          "id": "01e85013-0447-41d4-88f2-befe0a9096fc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "af8ab015-4f75-4254-90e7-55bab2e3a559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c3fd01-87e7-4944-9299-39e3dfe181f4",
        "cursor": {
          "ref": "25f00263-1506-445d-81d0-f3714cbbbdbe",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1c42e008-04a6-4a3f-9315-bf900a0fbbb9"
        },
        "item": {
          "id": "99c3fd01-87e7-4944-9299-39e3dfe181f4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6a60942d-e816-41db-aadf-e13d966976e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46b0c80-8147-4247-a6fd-1a6b7f5a7cc6",
        "cursor": {
          "ref": "02051d2c-71ae-418c-a775-d595867eb158",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "27c959fa-3ae0-4e1a-acba-10fde89359a7"
        },
        "item": {
          "id": "f46b0c80-8147-4247-a6fd-1a6b7f5a7cc6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4716b871-0210-4a23-86d3-b9bb356f7744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532403cb-d035-4de7-9b02-ba9e7b83b41c",
        "cursor": {
          "ref": "28f25c11-0f51-4f46-8ee6-9f19c81f9ac7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "af21e1cd-9668-489e-ad44-d8f210b2e50e"
        },
        "item": {
          "id": "532403cb-d035-4de7-9b02-ba9e7b83b41c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "17f6f3e3-3ddc-4342-80bc-66404d3fc8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb347840-4cb6-4cac-a5ef-6da0dadac3a6",
        "cursor": {
          "ref": "cedb619f-1add-4183-9df5-ce73883852c7",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bd5696b3-c245-49ab-bf4f-4ae9d80d1908"
        },
        "item": {
          "id": "cb347840-4cb6-4cac-a5ef-6da0dadac3a6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d035ab8f-d8d6-495e-836e-6a61a46a8b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08afaa24-7b86-4c7d-b15f-ff1e345c3baf",
        "cursor": {
          "ref": "eb538be8-2602-4bec-8544-1141cee8b462",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "03442f8c-c567-4d50-acd5-f49727350967"
        },
        "item": {
          "id": "08afaa24-7b86-4c7d-b15f-ff1e345c3baf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4bdd9821-c15a-460c-8d92-331a429c7913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8beb76ea-9858-4c67-92aa-92f6e6a9d1d9",
        "cursor": {
          "ref": "568579c9-b2ad-4b3b-b060-2b8a12beb0c4",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "242cfa51-46c8-4706-a37a-fc6b81b48273"
        },
        "item": {
          "id": "8beb76ea-9858-4c67-92aa-92f6e6a9d1d9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "facee902-a97e-4dbb-9e51-7b8decf96709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e2deea-a19a-446f-8f90-b6561f4902e2",
        "cursor": {
          "ref": "80f3d84e-f4b1-4f97-8adc-93b5c658c3ee",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3803f016-7cf6-4304-a793-97f3a0e4068e"
        },
        "item": {
          "id": "40e2deea-a19a-446f-8f90-b6561f4902e2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9707d70e-9e58-43cf-8313-9a70cfb234d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d58df6-69fd-4429-b449-870531a9a6a4",
        "cursor": {
          "ref": "1f85226e-963f-4872-a8c1-d94f47fb5930",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "da8c979b-337d-47ec-bc62-70524e0cc510"
        },
        "item": {
          "id": "b4d58df6-69fd-4429-b449-870531a9a6a4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2abf38b2-11ac-4482-9ae6-b4c5897fed2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebd2410-477c-405b-a131-431d38a0aeec",
        "cursor": {
          "ref": "5802b132-7477-4cf1-8187-560462a5aac2",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3afe5e19-3f44-4407-81a4-c005955c7782"
        },
        "item": {
          "id": "2ebd2410-477c-405b-a131-431d38a0aeec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0a8b7421-c810-4907-a402-2391016cde21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494fb2d8-16fc-4022-903c-d95679ffa496",
        "cursor": {
          "ref": "375abfe4-2e44-4034-90d9-4768ad31c304",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9d5f3ac2-3f46-405b-b04e-87e9fbc9549c"
        },
        "item": {
          "id": "494fb2d8-16fc-4022-903c-d95679ffa496",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0e7c9df5-ce49-4ada-befa-9b1737c788dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07db71a0-6376-4826-9767-526e91fd4cf9",
        "cursor": {
          "ref": "4ad23fe0-c6f0-4889-a0e3-d3f4d53569c3",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "999ddfff-edcd-431a-a038-f506deed73f3"
        },
        "item": {
          "id": "07db71a0-6376-4826-9767-526e91fd4cf9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1babbcb5-a0a8-4738-8eab-3d0159bdd9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01845ac7-67ff-4102-ae43-414bb2d38370",
        "cursor": {
          "ref": "c7fa359d-f3d3-4879-be4b-10241ccae267",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "92c65a3a-04d3-4c24-9c34-52c46aa078e9"
        },
        "item": {
          "id": "01845ac7-67ff-4102-ae43-414bb2d38370",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "873052f1-3b2e-4bdc-889f-96d9e18e854f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc87b44-a484-4ae0-b57b-8d8ab56e688c",
        "cursor": {
          "ref": "b0a092e8-b385-46aa-88e1-9858a5a6ae05",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "347eac6c-8cc6-43b8-8693-2e4372a34adc"
        },
        "item": {
          "id": "fbc87b44-a484-4ae0-b57b-8d8ab56e688c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "db099335-db5f-486d-b0d0-50b5f8e77113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d7f4bf-a443-4861-a38f-e40c160c15d5",
        "cursor": {
          "ref": "357578ff-c1ef-45df-ae34-34b02df4323b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e723b8a7-e116-42fb-8e95-d19b94ba01a9"
        },
        "item": {
          "id": "60d7f4bf-a443-4861-a38f-e40c160c15d5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "71757504-84dd-49e6-aaa1-c6b0092db6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea538bb6-3e5f-48f2-aacc-de21aefc1cf1",
        "cursor": {
          "ref": "d723feef-5cf8-4b6a-97bc-a5f2cc5aca79",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e02fa60c-8867-42da-8277-dc0f5139626f"
        },
        "item": {
          "id": "ea538bb6-3e5f-48f2-aacc-de21aefc1cf1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "afbd9bbb-c511-4e76-9899-31b4492ba6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2374fd-23de-4c68-bf79-2d2e104cd326",
        "cursor": {
          "ref": "e7d04c8a-2490-4dca-b0b8-4e0a9a203ac3",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6cc97d2-1aa4-452c-983e-04dbd0116fcc"
        },
        "item": {
          "id": "8b2374fd-23de-4c68-bf79-2d2e104cd326",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b9fd7b49-a908-4bd5-8344-12659d7d1053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea1e923-2cac-4397-b18b-c683216223d7",
        "cursor": {
          "ref": "34627a3d-1b8b-423e-a941-e3828ae48518",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "145954b5-0748-48fa-878f-4021c8adf93c"
        },
        "item": {
          "id": "7ea1e923-2cac-4397-b18b-c683216223d7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2d7e99f5-4f47-4b29-83c3-067167bb380d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccd9a9a-2b04-463e-abc5-29e0ba800de4",
        "cursor": {
          "ref": "409a31d5-88a2-4f89-b5c9-588bcd0a6fb6",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a3015aa8-0af3-4563-aee0-ceb31949e31c"
        },
        "item": {
          "id": "eccd9a9a-2b04-463e-abc5-29e0ba800de4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e7372bfd-11a8-43c6-a0b8-dd15cd685fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cf430d-56e7-4de1-81bd-3939be9043a5",
        "cursor": {
          "ref": "70d5bc61-9a5b-4974-b295-2ea543e7afea",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b00bbb74-7e36-49d3-917a-2280b5a409ff"
        },
        "item": {
          "id": "e9cf430d-56e7-4de1-81bd-3939be9043a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e3ac3955-841a-47af-b489-f4709e964313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6794651d-9e0d-4c18-adfe-15ab9de58367",
        "cursor": {
          "ref": "d63cd5d1-1e8e-417c-a208-510f79ec964b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d6780028-8531-4514-9444-0276346d6455"
        },
        "item": {
          "id": "6794651d-9e0d-4c18-adfe-15ab9de58367",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d8edab5c-e3f9-465d-bf25-c98a0e3020ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096c31fb-41a4-4244-9f44-bc377565c3ba",
        "cursor": {
          "ref": "3eb981a2-8114-4a01-a2e2-73e336b488bb",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ca2d7868-d6ba-4b0f-ab37-c0f26a104c4c"
        },
        "item": {
          "id": "096c31fb-41a4-4244-9f44-bc377565c3ba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "44f28953-cf09-4bc4-8aa4-e4448b6d3066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22f42e2-e060-4156-915f-d9ecbe1ff47d",
        "cursor": {
          "ref": "4a6b8bc8-ba91-4bf6-981b-887d550f4b75",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "795d924c-bdc9-4cc9-92e6-4c19c7dfea88"
        },
        "item": {
          "id": "c22f42e2-e060-4156-915f-d9ecbe1ff47d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e9d68a06-e4f9-4b87-870e-5ad46ee9a6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa12cd28-ad20-4dc9-8806-219512c39a66",
        "cursor": {
          "ref": "2bbb5b78-863b-4031-ae79-d1ce17b7341d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7c1322cf-6c29-4c08-82f7-8a84ded3e705"
        },
        "item": {
          "id": "aa12cd28-ad20-4dc9-8806-219512c39a66",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ef9de2fc-cdbc-4439-ba66-e064cc20f172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c96cddd-b00e-4c9f-9e1c-248975da976a",
        "cursor": {
          "ref": "77072323-aa2c-4f96-abcb-e4bf9bff3af1",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cd656b75-5d9c-4c9f-bb23-4eb7047d6e59"
        },
        "item": {
          "id": "6c96cddd-b00e-4c9f-9e1c-248975da976a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4f650bd4-b12a-406b-8d08-95906b455393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a0efb5-998f-4d47-bb4a-1f6dc32d69a1",
        "cursor": {
          "ref": "795fed5e-c902-4ba3-b7fa-91e402339b10",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "75d27bf0-f041-4c45-9f03-5453f3b32b5a"
        },
        "item": {
          "id": "75a0efb5-998f-4d47-bb4a-1f6dc32d69a1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "79a87e62-2d55-4d4f-9630-2d875fd8fd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cf32e3-3b07-4cc9-b995-a9737616f3c1",
        "cursor": {
          "ref": "cf33216f-b7e8-4426-b721-8503f82eef4d",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "709c1e14-00a5-4312-8d3a-9efacddcca90"
        },
        "item": {
          "id": "92cf32e3-3b07-4cc9-b995-a9737616f3c1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "81726a62-9b32-4999-9e03-faadd8d28282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bc7a6b-e69d-43ef-9265-d7e4c8999d66",
        "cursor": {
          "ref": "0733dbb3-2fa7-4183-8d3a-e22180592a5c",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6d3374e5-02d7-40cb-a800-22797b619f19"
        },
        "item": {
          "id": "66bc7a6b-e69d-43ef-9265-d7e4c8999d66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7ba3cf25-c3e5-4617-b149-bc09b3c746f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4601ce7e-f861-487a-9da2-be5c52957bc5",
        "cursor": {
          "ref": "895f4281-b8d9-410b-a463-795444226f48",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c399ce6b-ce09-41f3-a1a7-e1d1171009e0"
        },
        "item": {
          "id": "4601ce7e-f861-487a-9da2-be5c52957bc5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "31718bc3-1376-4407-9e0d-67ea329340b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3127ff-75e9-46bf-81a1-a689f9f5a6d2",
        "cursor": {
          "ref": "4a15bbff-0149-492f-8577-291c0e592e31",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be57813e-5a75-404c-9350-b198842816b2"
        },
        "item": {
          "id": "da3127ff-75e9-46bf-81a1-a689f9f5a6d2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6c29ee45-cb09-41a0-a5f8-f6a020b6c826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fe6df2-78ec-401f-a246-a2556c44ee58",
        "cursor": {
          "ref": "7eea941d-11c7-445c-9b2f-93bf84954ee7",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "08b51592-cbe2-42ae-a32d-3ac837500218"
        },
        "item": {
          "id": "51fe6df2-78ec-401f-a246-a2556c44ee58",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "28949a8c-b723-478e-9226-0953071dfc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47cbfe3-2e2f-44a2-8ecf-41f53d2f88f7",
        "cursor": {
          "ref": "80c9db73-fcd6-454c-a1f2-fd5c1e8b11fa",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1242dcd3-e4f2-49c1-bdc5-e68a4ce91a20"
        },
        "item": {
          "id": "f47cbfe3-2e2f-44a2-8ecf-41f53d2f88f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "010d36a8-2897-441a-b3ef-b110376052ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "5c978cb6-1a23-4649-a24b-3811e1e15d37",
        "cursor": {
          "ref": "97c4441b-43a1-4778-89c6-af8652162406",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "41bcde10-a246-43a1-9ddf-b603e2f838eb"
        },
        "item": {
          "id": "5c978cb6-1a23-4649-a24b-3811e1e15d37",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1a931fb1-39f7-4f40-81df-d5b392a67334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f82364ec-d908-4345-af35-66456b9d4b47",
        "cursor": {
          "ref": "48a93e55-c3cc-47b5-90b8-8414a86b271e",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f72a5f26-e994-4f44-9ad1-67e922991ac7"
        },
        "item": {
          "id": "f82364ec-d908-4345-af35-66456b9d4b47",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0d8c3fdb-98ba-498a-9bb7-456e5ae23dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "85221881-f052-4e68-a955-bfbb13e7a74d",
        "cursor": {
          "ref": "b4aece57-28b0-472a-b985-87a306710c8d",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "21c6e583-cdac-4bc4-a809-2161ff055126"
        },
        "item": {
          "id": "85221881-f052-4e68-a955-bfbb13e7a74d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "400ba5d4-8eb6-401b-be64-bbb2b395221d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "f56745c6-8c4e-44ca-b9b3-bde1bccdd6e3",
        "cursor": {
          "ref": "0678d2bf-0929-42cd-a5ac-30e0b1a2c3c1",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e77dd24-fdac-4c20-8213-c8fc847193b4"
        },
        "item": {
          "id": "f56745c6-8c4e-44ca-b9b3-bde1bccdd6e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "714f146a-46e6-4aed-a7d6-dfe829e87d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "e8455fe9-fa0d-4277-85b8-6a41320e3ead",
        "cursor": {
          "ref": "a50b6918-7d98-4d09-bb2d-c0fda743d39d",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "410fcf29-520f-4394-a865-5fc9ba517a5f"
        },
        "item": {
          "id": "e8455fe9-fa0d-4277-85b8-6a41320e3ead",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fa48c017-d5df-47ac-97f0-a5b9025fd82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "54bb5d21-d8b3-4671-a504-0e2f2c465ab6",
        "cursor": {
          "ref": "6af15ca9-7b4c-44bb-be9e-7956faaa5d3e",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b25e2e2a-8155-426c-b84e-5a547157a64b"
        },
        "item": {
          "id": "54bb5d21-d8b3-4671-a504-0e2f2c465ab6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "78f53da0-1d7c-4719-936b-b3f307aa49f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "6d346145-0205-4895-9382-a143fff4564b",
        "cursor": {
          "ref": "1172ce1c-0e98-4a93-a44f-8352b60aa606",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "27fd2d6e-d88d-440d-86d4-7f8bc47574ee"
        },
        "item": {
          "id": "6d346145-0205-4895-9382-a143fff4564b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5831267-8ae0-4000-bb6a-e6dc2d06f172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d346145-0205-4895-9382-a143fff4564b",
        "cursor": {
          "ref": "1172ce1c-0e98-4a93-a44f-8352b60aa606",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "27fd2d6e-d88d-440d-86d4-7f8bc47574ee"
        },
        "item": {
          "id": "6d346145-0205-4895-9382-a143fff4564b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5831267-8ae0-4000-bb6a-e6dc2d06f172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bad7a7c-ac44-4214-9f4f-c0d466ece709",
        "cursor": {
          "ref": "5701b8d0-dd48-4847-aa11-934cfa3beaad",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "204de32b-dfd2-4c64-aba9-f16773437743"
        },
        "item": {
          "id": "1bad7a7c-ac44-4214-9f4f-c0d466ece709",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "06b06b7c-6827-4dbb-b0fb-3f93e8757bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80c4d55-58ff-40f7-b86d-8185586dbcf6",
        "cursor": {
          "ref": "1996c405-7daa-44f9-a68e-075d1075777f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "21e8c0ac-c40c-4649-9c70-9e34cb5cfc4c"
        },
        "item": {
          "id": "d80c4d55-58ff-40f7-b86d-8185586dbcf6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e5b42fde-baae-4cd0-9f38-5d56b5f9fac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad88a71-3505-4f8c-8dea-7b0e4306cfcc",
        "cursor": {
          "ref": "bac6aaf9-0860-40c2-9b24-f21bfea02e8a",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "573f6b80-053a-4e63-8640-6caca5ad51e2"
        },
        "item": {
          "id": "5ad88a71-3505-4f8c-8dea-7b0e4306cfcc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fb227d9c-2888-4aea-8073-8556f51076c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c3249d-1c23-4f43-8490-d784ecda78fa",
        "cursor": {
          "ref": "1348f9d2-85ec-425c-8d50-e32b11b1bb7f",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a0960ef1-5437-44ab-9ac6-c8b09f9d1264"
        },
        "item": {
          "id": "84c3249d-1c23-4f43-8490-d784ecda78fa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d206d9be-d098-4610-93a0-ab158f097add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf16b03-ef7f-49c0-a007-e3ed46caab41",
        "cursor": {
          "ref": "ceaa2018-a02c-4e7c-931b-af0582804aad",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "16a19e99-1e3f-4d55-a1fd-efa10ccd0ff0"
        },
        "item": {
          "id": "dcf16b03-ef7f-49c0-a007-e3ed46caab41",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0b130ddf-e25e-436a-9669-75df918957e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20648b41-7c6e-4886-b530-4830ee969bb3",
        "cursor": {
          "ref": "5f9d6afa-f8e1-4ecd-b8b4-fa4cb1641715",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ea9e0edf-0a4a-4cda-a96c-80d59ca3c229"
        },
        "item": {
          "id": "20648b41-7c6e-4886-b530-4830ee969bb3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "10b2f741-bc59-4d87-b1aa-7b63b8ef8d10",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2b171cdb-559a-41ae-b973-9f519a50ac5f",
        "cursor": {
          "ref": "39e36460-7351-4d81-b6b0-8fe88ab882d8",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe596f3e-fe27-4571-ab60-c553fb7cde64"
        },
        "item": {
          "id": "2b171cdb-559a-41ae-b973-9f519a50ac5f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "204d2145-cbac-433e-80a6-7805cacb42a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481b7808-f34a-499c-8020-0e968c78f57a",
        "cursor": {
          "ref": "6236257a-2230-4ed1-b170-51541c36c152",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59278539-fc38-4f98-823e-aaf6b7d215a2"
        },
        "item": {
          "id": "481b7808-f34a-499c-8020-0e968c78f57a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0af81e24-bceb-4343-85fe-72cd7d7f86ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ce83dd-cafa-4600-a2dd-89ecaa3a82c4",
        "cursor": {
          "ref": "2fb8f4df-3bc7-4363-8bd3-6b82bf5fa667",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e8535ece-79d9-45bd-aaf6-c527b8505c4b"
        },
        "item": {
          "id": "81ce83dd-cafa-4600-a2dd-89ecaa3a82c4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8a8cef61-886a-47e1-ad7d-43d30db42f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728dd9d8-a991-43dd-a8e2-53d67ead771c",
        "cursor": {
          "ref": "6afe9c5d-28a0-486a-a9d5-7242b2db6c91",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2a70aabc-ba76-4ba1-9118-3cde392efb77"
        },
        "item": {
          "id": "728dd9d8-a991-43dd-a8e2-53d67ead771c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d9e0f09d-5c7b-429c-918c-7199d92d5eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f37bb0f-95f4-4c45-94e4-17e856488c6b",
        "cursor": {
          "ref": "b378b1e4-517e-4a3f-aa11-ee6dd26f2fb7",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8976a895-0ab8-400f-a7e3-b051497ac189"
        },
        "item": {
          "id": "5f37bb0f-95f4-4c45-94e4-17e856488c6b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "34cdccda-5b46-4b07-8283-60f8423dcf13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9c1889-51c0-461b-aabf-1195fa0ed0ef",
        "cursor": {
          "ref": "b5a0e0a1-10fe-4e87-aafb-08a844f912aa",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "72868f48-b460-4fd7-90af-3ee69c4cc3df"
        },
        "item": {
          "id": "1f9c1889-51c0-461b-aabf-1195fa0ed0ef",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b5feff4b-385e-4ced-b731-4dae6e2dbf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acf3bbe-5f8b-4c03-91a3-2f9bfa3675fe",
        "cursor": {
          "ref": "7354f7f1-9126-40d4-ad3b-58b1e93d0cc0",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "96a39dcd-a822-4a91-8c8b-85005a43facc"
        },
        "item": {
          "id": "6acf3bbe-5f8b-4c03-91a3-2f9bfa3675fe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ca5e5e5d-be6b-4357-ad4e-a420f46c3da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77eb405a-a4d2-4949-9796-66435b89e649",
        "cursor": {
          "ref": "50434e76-85c2-4a4f-9dd2-967f4a76ac8c",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0f305f6d-7bac-4544-83a8-8b2c36e71d1e"
        },
        "item": {
          "id": "77eb405a-a4d2-4949-9796-66435b89e649",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5f24f720-b991-42f1-bd04-65478d849dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375844b-03d9-4797-ad34-b4b9ced5b307",
        "cursor": {
          "ref": "bbf8e1b7-dd58-442e-88e8-41f5bfe04d55",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9663aca5-cad1-43f2-97c3-0e8276f588fe"
        },
        "item": {
          "id": "c375844b-03d9-4797-ad34-b4b9ced5b307",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f15435bd-22df-42c5-9fe6-02ed20073111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9138b1-8c5b-4773-95bf-5b170d731b49",
        "cursor": {
          "ref": "9612afb1-bcea-4230-86c8-df317a13a867",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "63be5956-3505-4c38-a30c-eb44c25009fe"
        },
        "item": {
          "id": "5a9138b1-8c5b-4773-95bf-5b170d731b49",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c8799ba7-f37b-4554-b757-b6e1d1de4cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c43bd3-3510-44ca-9921-c458f0900587",
        "cursor": {
          "ref": "51fddb43-f365-4f5b-b251-d6201c371c7b",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ae7e38b8-8203-4a6e-b6fd-5f1f63bdba52"
        },
        "item": {
          "id": "13c43bd3-3510-44ca-9921-c458f0900587",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "870e6092-bc8c-4ae4-8f2e-3c6ecf6ca50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d0bfc1-c409-4aad-b597-80ff069be38e",
        "cursor": {
          "ref": "6355fc40-7afb-4711-b28f-d64f6a5eea00",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4c99ca7c-3370-4540-8c72-58a186703ee0"
        },
        "item": {
          "id": "99d0bfc1-c409-4aad-b597-80ff069be38e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67c2f517-2a43-4d9a-b487-aee576d52335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975b4a1e-2984-4887-806e-9e31dbd062a3",
        "cursor": {
          "ref": "631209a5-c3a2-402e-a9bc-c9fa67965f9c",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ccb06898-f739-4824-8f81-bc754491a438"
        },
        "item": {
          "id": "975b4a1e-2984-4887-806e-9e31dbd062a3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "77d2f093-d887-4543-b3eb-c5e92b1db681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7bf1cd-e14d-44d3-a8db-c3e512fafce5",
        "cursor": {
          "ref": "e28201ba-8dcc-40c9-9be8-84f10f3558fc",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "59ecc4da-6952-489e-9601-3bacf7c15c7c"
        },
        "item": {
          "id": "9f7bf1cd-e14d-44d3-a8db-c3e512fafce5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6ff6215e-7966-41cc-9fbc-d2f78f97a0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21859c20-f241-4545-a1a2-c31534ac0a17",
        "cursor": {
          "ref": "f48884ad-0ba3-4f1c-907d-b33e3f56f8c9",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6451d45c-448e-4e44-bdcb-663fdf8c196a"
        },
        "item": {
          "id": "21859c20-f241-4545-a1a2-c31534ac0a17",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c780925d-7dc0-4e20-90a7-0d0a9b6c99aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece2a4bd-e1b9-484e-86e7-4e3c12cf419c",
        "cursor": {
          "ref": "8444f879-2511-4183-9c27-baaa16603079",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "15a1bf77-81ae-4342-846b-93008d0db7ab"
        },
        "item": {
          "id": "ece2a4bd-e1b9-484e-86e7-4e3c12cf419c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "47c04f69-49ef-4769-8a47-65e5824f9d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0913d5e8-6340-4003-8aa3-f7c9a56d439d",
        "cursor": {
          "ref": "e0454a72-3217-4fee-a9f5-e0541b39d48d",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "be68128b-9716-4488-87b3-a2771180cd36"
        },
        "item": {
          "id": "0913d5e8-6340-4003-8aa3-f7c9a56d439d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cf9e1a2d-550f-4f79-b810-7928ac8507cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9638d8-bc6a-42a7-8a1b-20094a320cf7",
        "cursor": {
          "ref": "e3e7bf61-2019-4d51-9acb-03c949c99536",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "37335359-5664-47e9-b17a-213bc555d0b1"
        },
        "item": {
          "id": "cb9638d8-bc6a-42a7-8a1b-20094a320cf7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c71b8ca0-f89e-47f2-a432-bcc717e3a175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7ee69c-4a2a-4fae-9e27-83bbd634b4c8",
        "cursor": {
          "ref": "e6652c82-8d48-4646-a085-7261774a39da",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b1c67af9-f3fd-420e-9e19-840ad820301e"
        },
        "item": {
          "id": "4c7ee69c-4a2a-4fae-9e27-83bbd634b4c8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a234e4b3-845e-461e-9508-0d300fe1ddd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331b24ab-e30a-4a18-9903-72a0444cb6ef",
        "cursor": {
          "ref": "472ce05a-a150-4c03-ae20-17668055d924",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f2da5ecd-f79f-45ba-9670-0b57fa0fa8f8"
        },
        "item": {
          "id": "331b24ab-e30a-4a18-9903-72a0444cb6ef",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5ef75a15-e9c8-48ed-bdec-1dcbcc44a716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6454f7b0-dd38-4271-9a26-ffd32a6ce75f",
        "cursor": {
          "ref": "05e06e4a-9e8a-46a3-968d-11b50ad06dcd",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "927a2576-7559-4a2f-a032-cf3533998010"
        },
        "item": {
          "id": "6454f7b0-dd38-4271-9a26-ffd32a6ce75f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ee1ffa4b-92d6-4eaf-964d-d8270d3d591a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edbacf6-29f8-4263-8d18-efdfbe7782e7",
        "cursor": {
          "ref": "8bcb5057-cbd8-469c-aa08-01170036b97c",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8fb112ae-96f6-424c-b4b5-462477cf126b"
        },
        "item": {
          "id": "5edbacf6-29f8-4263-8d18-efdfbe7782e7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e0eb64c5-4760-44eb-83ad-52b05c8e6a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a7c0a6-4bf0-4730-9146-da5f98de22ea",
        "cursor": {
          "ref": "22c2821a-a9df-4d04-b8f4-7a588b87ba78",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "18f167a6-f511-4deb-ba45-91d950997405"
        },
        "item": {
          "id": "c9a7c0a6-4bf0-4730-9146-da5f98de22ea",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a36e9517-1c96-4cbc-babd-90a289eca4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacf81cb-8bac-4135-9bf1-248a743f4c64",
        "cursor": {
          "ref": "802977b5-447c-4728-af54-b9954695d7fe",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e580933c-aa2a-41cb-a835-794bf181b8f0"
        },
        "item": {
          "id": "dacf81cb-8bac-4135-9bf1-248a743f4c64",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9132b785-034c-4a91-93c1-38d4a6111522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919dbb23-3ca3-4f70-b49f-72d6174ace2c",
        "cursor": {
          "ref": "e32c697a-9433-47f7-b85e-aadf96f3a85b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7e9e13e3-adeb-445f-b227-fdcd2588f577"
        },
        "item": {
          "id": "919dbb23-3ca3-4f70-b49f-72d6174ace2c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aaf18719-ebc1-47f6-9c3e-8021e1d55795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6416b25a-a39e-4b98-b1c9-b3be9c66b180",
        "cursor": {
          "ref": "63c96db7-1945-4cb1-922e-2dd5416da17b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4781fedb-6b5e-49a3-8420-f42ea28156c2"
        },
        "item": {
          "id": "6416b25a-a39e-4b98-b1c9-b3be9c66b180",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c5674caa-a985-4d92-804b-bcc224f17bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "12008348-bb8c-40ea-a979-7e38cec7cd38",
        "cursor": {
          "ref": "7cc28a31-d707-452e-b39b-bb7779d2b82e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fa28f53b-d374-47e5-8681-de73c9f8f119"
        },
        "item": {
          "id": "12008348-bb8c-40ea-a979-7e38cec7cd38",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "402e240e-74c9-4e37-bda0-6a2c79f59e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "ba5e07b6-d158-4f40-ab9c-e1ea36d016b8",
        "cursor": {
          "ref": "8bd1fd7a-985d-4f4f-bea7-dbf206913d2f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0d5c4644-7fee-4cab-a722-e46a20f7d103"
        },
        "item": {
          "id": "ba5e07b6-d158-4f40-ab9c-e1ea36d016b8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "914bf943-bad9-4106-a3cb-836d6b73280c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5e07b6-d158-4f40-ab9c-e1ea36d016b8",
        "cursor": {
          "ref": "8bd1fd7a-985d-4f4f-bea7-dbf206913d2f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0d5c4644-7fee-4cab-a722-e46a20f7d103"
        },
        "item": {
          "id": "ba5e07b6-d158-4f40-ab9c-e1ea36d016b8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "914bf943-bad9-4106-a3cb-836d6b73280c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7622a5a1-1de3-41bb-8f30-35eb74ddaab4",
        "cursor": {
          "ref": "3979eff8-d6d8-4d41-ac29-7c01e6e5d34c",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "50847862-ac7c-440f-a600-b3c2161a9d86"
        },
        "item": {
          "id": "7622a5a1-1de3-41bb-8f30-35eb74ddaab4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2d672233-f9ed-45e9-babc-920869fed00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e9c49d-06ad-4137-a5e3-c7be4dea1b05",
        "cursor": {
          "ref": "9b076766-6331-47e0-bbd5-1f98f51119c4",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5d9184ae-4735-404a-b733-d3207db3f5ad"
        },
        "item": {
          "id": "28e9c49d-06ad-4137-a5e3-c7be4dea1b05",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5531ac63-5dcb-4ead-a36a-bde1ce12e32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fafb5f0-83e5-441c-a989-86d3a8f66e05",
        "cursor": {
          "ref": "033b2458-e316-420e-ae66-476b674f9f83",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1e9f4d48-cb34-45bb-86a3-26605fe4d6f7"
        },
        "item": {
          "id": "2fafb5f0-83e5-441c-a989-86d3a8f66e05",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "eede85fd-30e3-4dd8-a265-f9569e28b4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740d7e23-8745-433e-b195-65d660e00010",
        "cursor": {
          "ref": "637d9d4a-3a2f-434b-8191-cf82d9abe6ea",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c072501e-b3ad-4602-a7bb-ea9faf452ad2"
        },
        "item": {
          "id": "740d7e23-8745-433e-b195-65d660e00010",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b64838c7-8499-4463-99e1-b4b3ce407ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fde063-05d8-4d6f-8dfa-8c98fdbc2a18",
        "cursor": {
          "ref": "ca26b596-e783-4fb4-8d8e-efd63e58bb48",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d85c3231-69dd-4e14-994d-67935ce47c47"
        },
        "item": {
          "id": "d3fde063-05d8-4d6f-8dfa-8c98fdbc2a18",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "de91e780-e8ee-4e84-ae52-4af0a42b110c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e258b1-45f9-4db7-b935-42fe709c435f",
        "cursor": {
          "ref": "c4e18ec6-0e2f-4c59-9d03-d3c0a1bd911f",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "161128c2-756f-4e47-ab96-cb08a750b2cb"
        },
        "item": {
          "id": "37e258b1-45f9-4db7-b935-42fe709c435f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "66d8776e-8fc6-4a19-b8e2-e6ef399bc1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8f2b45-b852-4d25-a53b-208589288709",
        "cursor": {
          "ref": "6a268959-d77a-480d-876d-c48de2622ca3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acc85020-8f78-4fd5-9d0a-5a24eb5dadf1"
        },
        "item": {
          "id": "dd8f2b45-b852-4d25-a53b-208589288709",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8342f15b-f753-40c0-98ea-cd6ecdba1bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095a6c39-1214-4333-a99d-40e4618ec107",
        "cursor": {
          "ref": "9061fea5-2bfb-4a4e-ae4f-8113c95ca9b7",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1d3a3374-6b4d-43c9-b3dc-3208cea8fd6f"
        },
        "item": {
          "id": "095a6c39-1214-4333-a99d-40e4618ec107",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "23ba8fa4-feeb-4743-b032-8395056b1289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec38b9f-c12d-4575-a63a-4d01128f99c5",
        "cursor": {
          "ref": "b003e120-afcd-4a73-a405-10b0b6e54a43",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9c457304-45ea-4a9a-a75d-2ed684348ff6"
        },
        "item": {
          "id": "5ec38b9f-c12d-4575-a63a-4d01128f99c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "56ce95ee-ce5d-45ab-ab41-f4a29aadaf56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc0c976-1203-4968-a802-a135429759c5",
        "cursor": {
          "ref": "00031df7-4885-44ca-9479-fc0c1c7fa26a",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ee828fc-1af3-44c0-9aa1-5e6b06301bc1"
        },
        "item": {
          "id": "fbc0c976-1203-4968-a802-a135429759c5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fe89f2c6-ef9c-4245-bdcb-41662cd1ece9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b014ff2d-81c0-4182-a73f-b7c45699076d",
        "cursor": {
          "ref": "0cbc7a94-2ac2-4314-b0c8-927103cd2395",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5e98d044-cd56-4172-834d-a13941d5d6e9"
        },
        "item": {
          "id": "b014ff2d-81c0-4182-a73f-b7c45699076d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7e994fdf-8559-4b0a-940d-c745b1a0fee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf25097-4bd8-4a51-aead-08715eb8725f",
        "cursor": {
          "ref": "92912cf6-02ab-4c5e-adc6-cf262acd0f96",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1b53e3ca-bcd0-4749-9a0f-e07193eb99ba"
        },
        "item": {
          "id": "8bf25097-4bd8-4a51-aead-08715eb8725f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f4a6d550-830f-435c-92da-d413c08030af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be68672e-f171-46c1-a6aa-5af464b6a264",
        "cursor": {
          "ref": "70b18aba-77b1-49db-a85b-eb5ccde6d620",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b9245341-0845-4fc2-9d45-9a892b2966b4"
        },
        "item": {
          "id": "be68672e-f171-46c1-a6aa-5af464b6a264",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0c64c56d-d05c-4e25-8620-a6f02b1f1dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9317f3d3-adac-4fff-9c18-615f78c23e63",
        "cursor": {
          "ref": "d21b046b-8ed7-45f8-929f-e4ffc171ec33",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9d2ea1d3-91c0-4fe0-989c-1009ee62738e"
        },
        "item": {
          "id": "9317f3d3-adac-4fff-9c18-615f78c23e63",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5356d618-1df3-41ac-bb5c-de52c7589484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7d0402-1317-4a65-8eee-6c99fe6e055d",
        "cursor": {
          "ref": "4ec65228-c03f-409b-b4a8-d1aeb6aa9df1",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1078b29d-05c4-415e-9b71-d77ff5887c7d"
        },
        "item": {
          "id": "ae7d0402-1317-4a65-8eee-6c99fe6e055d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ae296a14-aab0-4f1b-9a34-935f291ada49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173f4cb1-b724-46e7-ac04-ed5e02f7c8ce",
        "cursor": {
          "ref": "50aa2373-5abc-460c-b99e-53ebd6d6b452",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3ba7d10e-d448-4c9c-836b-5aefece03413"
        },
        "item": {
          "id": "173f4cb1-b724-46e7-ac04-ed5e02f7c8ce",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "126bbe09-15f7-4842-8ece-b041d58d8991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f68464a-d32f-4006-a501-d61da9ff0a78",
        "cursor": {
          "ref": "54a561b4-a430-443c-adfe-ddeef9bf358d",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "426a35b0-3564-4e48-8007-ce1cdf49128d"
        },
        "item": {
          "id": "7f68464a-d32f-4006-a501-d61da9ff0a78",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "7c09d043-1a6a-4cdb-8e52-52629f54d54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cbc552-02f0-4443-91bb-ef17b3b3bfb8",
        "cursor": {
          "ref": "95d02cc5-9978-4243-b1ac-7abe8d069363",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "27056926-a13f-44b1-8883-e15966c62c9a"
        },
        "item": {
          "id": "01cbc552-02f0-4443-91bb-ef17b3b3bfb8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "68304cbc-bd4b-45ba-b02a-8a4926830180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810ce52d-6af3-4a78-a8f5-8226959e5e5c",
        "cursor": {
          "ref": "5e72abff-28b2-4ded-b58c-cc1518197c9f",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a5450e10-2907-42f3-883c-d944941d207e"
        },
        "item": {
          "id": "810ce52d-6af3-4a78-a8f5-8226959e5e5c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "59c9f6fc-b4c8-4041-81fe-6d3491d89c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe96a9b-b959-4aeb-87b8-754657b45db2",
        "cursor": {
          "ref": "04d6c1ea-152c-481e-9d98-ebb3fbe13e56",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "36f7b575-42ef-4c94-b2e0-d09563ed15cf"
        },
        "item": {
          "id": "dbe96a9b-b959-4aeb-87b8-754657b45db2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "faa9ba79-2ecf-49a6-9f38-d778e552f74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f386bb2b-8d68-4942-86ff-49cc7a56ecb3",
        "cursor": {
          "ref": "d08dd0d4-db00-4895-9531-3aab9dfd3ca5",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "40949955-3da4-4954-8d29-19d1cc518d78"
        },
        "item": {
          "id": "f386bb2b-8d68-4942-86ff-49cc7a56ecb3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ae43854c-4cb2-43c8-b62e-6a9c4ab44448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9616c60-e0a2-4cac-aded-eebf19fe7c3f",
        "cursor": {
          "ref": "fad2dc1a-6894-45ef-ab38-9763bbc52b51",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9c51a393-d076-45d9-a28a-32adde5f2fe9"
        },
        "item": {
          "id": "b9616c60-e0a2-4cac-aded-eebf19fe7c3f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2cedd249-4519-4571-9c16-572a4fb53d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2d7e42-b2b8-40c8-83b2-06b20aee71ec",
        "cursor": {
          "ref": "e9aaf9ec-f12e-4afa-9507-621a4d1fb41e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "43e88e40-e154-4cba-abda-439197553017"
        },
        "item": {
          "id": "3d2d7e42-b2b8-40c8-83b2-06b20aee71ec",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f832487c-49bf-4d7f-b84a-81b2b4e7a4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046c3978-bad3-4526-b64e-a5517ff03076",
        "cursor": {
          "ref": "9619e147-2679-4476-b989-21aeb63830c6",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ce593496-cfbd-49e7-baf1-442ea0c55150"
        },
        "item": {
          "id": "046c3978-bad3-4526-b64e-a5517ff03076",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1a790584-f164-4144-8701-ba0d1efba849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34991e2-ad0d-4587-b7ae-340dffe87948",
        "cursor": {
          "ref": "4638faa3-be27-48a9-b4e1-2381ee99bcae",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0be41517-3070-4eef-a120-ecb2c5d4f942"
        },
        "item": {
          "id": "f34991e2-ad0d-4587-b7ae-340dffe87948",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "29d06e5c-0329-4bcf-bbe8-7250b0069739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad439aa-bea7-464b-be1a-b549d6146e37",
        "cursor": {
          "ref": "543b009b-d3ee-4bd4-9c18-360d312c642a",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14d1b578-5859-49fa-a441-52683d23c68c"
        },
        "item": {
          "id": "4ad439aa-bea7-464b-be1a-b549d6146e37",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f89f2f8d-5626-477e-8e69-a09fccad423b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e97af78-c61a-4e4c-9392-4df849df0419",
        "cursor": {
          "ref": "1285965e-1135-4f6a-8c90-21e62cee5314",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5fa67679-9b80-4db7-b078-9f89b183ee65"
        },
        "item": {
          "id": "3e97af78-c61a-4e4c-9392-4df849df0419",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d4717b5a-9120-4ee2-93f0-fb8a06ebd272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b312a874-4357-4e48-8f2b-ba01aef7e3b8",
        "cursor": {
          "ref": "fc1711f8-8e11-44d9-ab0a-700e27f387a2",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f7a0e948-d3ce-4922-8512-43b7b9591f17"
        },
        "item": {
          "id": "b312a874-4357-4e48-8f2b-ba01aef7e3b8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0f86cc39-799f-4397-8a9d-6aa98ed0411c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5e0d9e-dc5f-4a8a-bb80-54ade1c28474",
        "cursor": {
          "ref": "57793495-e403-4593-95e6-3bafb7a1fc47",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "81dbf954-d17d-482d-ba1b-f4b8f248d527"
        },
        "item": {
          "id": "9f5e0d9e-dc5f-4a8a-bb80-54ade1c28474",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "324dfb44-c202-4980-a5cf-92e4abc05d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1513d1d4-2da2-4c26-8123-57991bdfe3c3",
        "cursor": {
          "ref": "a583c390-4be8-4517-9917-bbaf026fb840",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6ecba977-3acc-44b4-a7c5-ed6470713b8d"
        },
        "item": {
          "id": "1513d1d4-2da2-4c26-8123-57991bdfe3c3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "600fe4ae-7751-4fd2-849b-e3742ea859ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fda949-2c98-415e-af7d-3e2ffbd3951a",
        "cursor": {
          "ref": "779da228-6047-4f71-b625-fc7b91199b9c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a19e626a-af60-4872-9512-e80d772a60e3"
        },
        "item": {
          "id": "48fda949-2c98-415e-af7d-3e2ffbd3951a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b09a2366-b5f2-4cb0-a0d2-ebc58a935ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17715357-4dc6-4d58-925c-d2322eafdf38",
        "cursor": {
          "ref": "57250f6d-8af2-41f0-819c-7392513313d5",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "903c66a6-25c2-4377-9dcf-46eca45aa911"
        },
        "item": {
          "id": "17715357-4dc6-4d58-925c-d2322eafdf38",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2e5b3660-3fca-4a36-b2e8-a7576844dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce089ff-11ed-4824-9b84-7f3bbbee1882",
        "cursor": {
          "ref": "cd410bd1-3f7f-4b6f-a492-5bb064d7bb93",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4ec47167-82ed-4f17-a21a-414c9c567a7c"
        },
        "item": {
          "id": "7ce089ff-11ed-4824-9b84-7f3bbbee1882",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "80fddced-98f4-48fe-96f0-f37ee406ea39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1b10cf-2615-4a4d-91bb-1ed5c3dc472a",
        "cursor": {
          "ref": "bc0d26e2-03c0-48c8-87c5-6092a3c8e600",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "555ace68-caa7-47a4-b968-425c0bebb96c"
        },
        "item": {
          "id": "5b1b10cf-2615-4a4d-91bb-1ed5c3dc472a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e34b933-4ded-4c2f-ba42-26e934406f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20002a4-8e25-4e33-8ad9-bc3333a61f0a",
        "cursor": {
          "ref": "3e65d23d-6cdd-436e-b275-0fa155140784",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "da9ca301-98b7-4172-b20b-567fa8d5461c"
        },
        "item": {
          "id": "a20002a4-8e25-4e33-8ad9-bc3333a61f0a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c7222c4b-8b21-4e28-b48f-a7c1308892fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628ea68a-d03f-4f27-ac07-b357df97276d",
        "cursor": {
          "ref": "79d08830-f749-413a-9897-5b8d50e71b5d",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "139f23b0-f9ca-452a-85b5-dad24143e4b3"
        },
        "item": {
          "id": "628ea68a-d03f-4f27-ac07-b357df97276d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "63dd49af-54cb-4b94-9ff1-d13438d6915f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02593432-fcb2-43eb-8a9b-e98c683407a2",
        "cursor": {
          "ref": "138db838-5611-4d41-b196-16ae815fae22",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ad3013f2-fe8a-4ed4-af6b-f01138ed5cec"
        },
        "item": {
          "id": "02593432-fcb2-43eb-8a9b-e98c683407a2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "59e1cccb-7a34-43c1-a464-1786abd0a5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3957dfc-c517-4511-9777-7549c675d1c3",
        "cursor": {
          "ref": "4a7d39fa-bc7f-422f-9e17-dc8584c796a6",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "75f42f07-33a9-4876-92e0-bc88de2b4eb6"
        },
        "item": {
          "id": "a3957dfc-c517-4511-9777-7549c675d1c3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "af6445fa-4c8c-4f42-9b25-ea8ae35fbf49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b048906-75ab-45db-bc04-5a9f70fc7d28",
        "cursor": {
          "ref": "f20169a3-1ef9-431d-bf31-ac6044391b6a",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b7ff8167-aea8-42c1-9d0b-d6baa712a50c"
        },
        "item": {
          "id": "0b048906-75ab-45db-bc04-5a9f70fc7d28",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "06b8571e-e2e2-424c-9c0b-265bbddca7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb5d6a7-a855-4d5e-aa4e-164f57a373a9",
        "cursor": {
          "ref": "17b91428-286f-46a2-8ee3-7ea04648701a",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "931f314a-9f41-4e79-9f19-d8d00b5fc01d"
        },
        "item": {
          "id": "dfb5d6a7-a855-4d5e-aa4e-164f57a373a9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b3438cbe-bfd7-4d19-9f09-996cb67adaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804f8ad8-6967-4b74-90e1-5fc9e81ab0b1",
        "cursor": {
          "ref": "b205cc02-e212-45f7-a3e4-020d493f067a",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2f4d3855-6b08-400b-83bf-339c19c0e77d"
        },
        "item": {
          "id": "804f8ad8-6967-4b74-90e1-5fc9e81ab0b1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "22c7f61b-db02-4213-8c53-bbff604decae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da02cfe6-4aba-477b-8a3c-494d70c60069",
        "cursor": {
          "ref": "63cf9f75-a04c-4bc5-b363-7f1a2d1a1ede",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "39f243d3-826a-4801-abec-53579a13fbce"
        },
        "item": {
          "id": "da02cfe6-4aba-477b-8a3c-494d70c60069",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "05621e52-8eab-4305-acb1-c34eac10c5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbe2a7e-30aa-473a-9f63-6a79f08dac83",
        "cursor": {
          "ref": "fe8e9e9d-e697-44ff-ae2e-ee77d8825862",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1ca3caab-c675-46c7-a06e-f50a27c40808"
        },
        "item": {
          "id": "7fbe2a7e-30aa-473a-9f63-6a79f08dac83",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4c77ddad-e66d-4110-aea7-05df0b219a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a180b2ca-1036-4ab7-9ef3-4df843e5f019",
        "cursor": {
          "ref": "77a527fb-d3c5-48ea-aefb-f8f666e9f09b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dddf69f6-a5bc-4879-b1fa-93c7ff66d1fe"
        },
        "item": {
          "id": "a180b2ca-1036-4ab7-9ef3-4df843e5f019",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "674b2d9f-a2bc-40e9-9c13-67f5959b7302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5d94be-6765-44e3-8b98-4eea7c554ca8",
        "cursor": {
          "ref": "5a5a3428-c846-4ce7-b9e5-c6207b088439",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "06411aa3-3f91-4b22-8b4e-c44725489272"
        },
        "item": {
          "id": "aa5d94be-6765-44e3-8b98-4eea7c554ca8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "93a0849f-067c-4412-a34e-90541678bfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded99987-73c8-4a34-b641-0fcd789c3793",
        "cursor": {
          "ref": "73be8338-73f9-4c0d-83ae-5237352f2058",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a05ef30f-c65b-4e4a-b727-155d67414022"
        },
        "item": {
          "id": "ded99987-73c8-4a34-b641-0fcd789c3793",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "21332659-9d43-48ef-930c-12eebeef519e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acf4ff8-d829-4d2c-9e4f-04b4b2af0416",
        "cursor": {
          "ref": "f2cd0de3-d435-42c8-815c-0526fabe7bc2",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fbfb4300-42d7-4d44-88b7-5bb67c7d4b5c"
        },
        "item": {
          "id": "3acf4ff8-d829-4d2c-9e4f-04b4b2af0416",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5d52292b-626d-4b35-9d00-91073fc44b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2953674a-08cb-4978-aa4b-3ee1aaffee31",
        "cursor": {
          "ref": "ada81a8d-e596-4d51-acb6-522e3719ef83",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cd94a349-9c15-4287-a45c-307d71b4cc4b"
        },
        "item": {
          "id": "2953674a-08cb-4978-aa4b-3ee1aaffee31",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d99869fc-7d5b-4b93-9d96-e7a8982556da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31764bc-5e87-4525-9ef6-e36e5de27bea",
        "cursor": {
          "ref": "161bd54b-c9b0-45f5-8d4e-6fed122b5bab",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9010af33-4898-4361-a268-d83a63bc87ec"
        },
        "item": {
          "id": "b31764bc-5e87-4525-9ef6-e36e5de27bea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d7adc36-569f-4072-80a3-2382aed0d386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48805f7-e147-4061-b5aa-9ac9582b4d13",
        "cursor": {
          "ref": "474d7d8f-0d88-4ae4-96df-5f81f362f81e",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eecd4927-4872-40d9-af48-8703c99a194e"
        },
        "item": {
          "id": "b48805f7-e147-4061-b5aa-9ac9582b4d13",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5e9e4809-0851-4037-9767-a39e76d98165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bb76ae-c2b3-4bd7-9181-1da0cdf13137",
        "cursor": {
          "ref": "ae8f3686-4dd4-41b3-9a19-9e9696230c2c",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "770f5589-0e54-4df2-8a68-3ecdd6fffda1"
        },
        "item": {
          "id": "24bb76ae-c2b3-4bd7-9181-1da0cdf13137",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a09df50e-5d9f-4421-980f-8dc270a6a64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb90dcdc-7f38-4e21-b79f-8557ae65e17e",
        "cursor": {
          "ref": "96f08bdd-5a54-4ca8-822a-94c97ac55454",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c104224a-1a03-40a6-a293-d52a4d4afda8"
        },
        "item": {
          "id": "fb90dcdc-7f38-4e21-b79f-8557ae65e17e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8e60693b-f61a-430a-a11f-39f104b4931f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87e7aff-7676-4150-af13-336fddb68563",
        "cursor": {
          "ref": "c61405b7-eae6-4320-8133-498131188613",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "21695193-6755-4d0f-a643-40dfd35569ca"
        },
        "item": {
          "id": "d87e7aff-7676-4150-af13-336fddb68563",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0e954e2c-1e6d-4dc0-80de-1d56898395d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01923e30-19da-4be6-ac22-370bf2ba78b9",
        "cursor": {
          "ref": "4fb8d75a-3d0a-4255-9e33-f4b6e39a3e83",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f4f4ecf4-b4d2-4422-8fd3-f2ea1b742d24"
        },
        "item": {
          "id": "01923e30-19da-4be6-ac22-370bf2ba78b9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c1efc2ac-b306-47c7-a3f5-880b6dff3794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b957a904-65c7-4774-ae15-71fe589ab8ac",
        "cursor": {
          "ref": "4dbce213-6889-47a0-83eb-8fa487de5759",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d1beddda-4bd2-4010-a7b1-80cf0057b4ac"
        },
        "item": {
          "id": "b957a904-65c7-4774-ae15-71fe589ab8ac",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6e2fbbda-902b-4044-9fc9-53c69f30e57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5f81ef-d081-41a9-82f2-d6876231f30a",
        "cursor": {
          "ref": "d7a22091-55e3-44e6-bdb9-ab81fb7b9870",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2190ee53-5fec-4070-bf66-aa9e3db4a92f"
        },
        "item": {
          "id": "7a5f81ef-d081-41a9-82f2-d6876231f30a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "800f00a4-6e7d-42f4-af8e-229e36a29324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a45016b-a66a-4c5b-9e32-bdb3b38de2ac",
        "cursor": {
          "ref": "c367462c-87fa-4a86-b43f-54e2cade295d",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "81085f8b-f9f9-4e11-bdaf-891dd2f80cee"
        },
        "item": {
          "id": "4a45016b-a66a-4c5b-9e32-bdb3b38de2ac",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "befa51a9-9ec0-436a-a971-3b6abd0c0b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646672a7-6e67-42f4-b246-1c36a5e00fb9",
        "cursor": {
          "ref": "fe8c45a5-c546-4ad8-8237-edaddc0ad5c8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8aad69af-a2d5-46c6-a777-77e4faf00064"
        },
        "item": {
          "id": "646672a7-6e67-42f4-b246-1c36a5e00fb9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a9cf8d1-ee0c-4e29-8776-b61567a8e2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9601b22-bffc-44a5-8f97-c951b21f2fa7",
        "cursor": {
          "ref": "84bd66ff-8c66-4e39-b360-8ae70571c76b",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9f137e9a-25bd-46ea-8346-2ad2e7c5f6b7"
        },
        "item": {
          "id": "e9601b22-bffc-44a5-8f97-c951b21f2fa7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c1c9f9f9-72fe-4f3f-a485-52eb4683914e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78841a24-00b8-4770-b410-b8c3e74f1c55",
        "cursor": {
          "ref": "12253d0e-3152-44b4-a60e-e25ae2c25103",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6bb91a9b-7c8c-4a76-91e2-21fdeefe9470"
        },
        "item": {
          "id": "78841a24-00b8-4770-b410-b8c3e74f1c55",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e5234d91-8b33-4b1c-ba3f-1dc76b3885d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec8ac40-6ec9-4ce1-998e-424e471f4903",
        "cursor": {
          "ref": "f2170d6c-770d-4262-ba2b-b9cefd52b654",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "86da9f67-1a47-4506-b0f4-bcb287f67ec3"
        },
        "item": {
          "id": "fec8ac40-6ec9-4ce1-998e-424e471f4903",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c2258fba-4897-44e6-99e9-99651c0a9fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94dbfe4-d8b4-4aac-b3e6-7ea137833195",
        "cursor": {
          "ref": "b04e2192-7db6-48af-be59-9d73005a88cf",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cba1f3d2-5ed5-4638-a33f-479cd1fb6050"
        },
        "item": {
          "id": "a94dbfe4-d8b4-4aac-b3e6-7ea137833195",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "79ff1da5-4078-4646-8e6f-b9ce66a1d393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ec485-b153-40a8-b70c-a1334f8d9eb3",
        "cursor": {
          "ref": "a124b535-c7c7-4240-aa84-2d35a473d828",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "392bb96d-268f-4074-b077-02392cf70926"
        },
        "item": {
          "id": "570ec485-b153-40a8-b70c-a1334f8d9eb3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ed576e73-18c2-4e94-8b6f-8add990a9a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8762edc-6432-428c-95f9-2b0cdb310a48",
        "cursor": {
          "ref": "cbba961c-6225-4d5c-bc6d-e4d21725bcec",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0266adbc-704a-41b1-a5e7-d9e7bc3118ae"
        },
        "item": {
          "id": "c8762edc-6432-428c-95f9-2b0cdb310a48",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ff1e8916-f61e-4450-a29d-f059b3e3f0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af99f0f5-334b-461f-bc46-8586e7e2d5f5",
        "cursor": {
          "ref": "41554fd3-9269-4732-82d0-9c513fa73521",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2e912e61-48b6-4997-897e-99cd21f38966"
        },
        "item": {
          "id": "af99f0f5-334b-461f-bc46-8586e7e2d5f5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5301088e-705a-49a0-9061-9561f4120b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe12176-42a0-4a3b-a396-77ba70d049f5",
        "cursor": {
          "ref": "149aeac2-1f56-44dc-8996-7a506c984898",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cbb08c4f-25c3-49d6-a13f-823fe63e7ef5"
        },
        "item": {
          "id": "abe12176-42a0-4a3b-a396-77ba70d049f5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a4740a5c-169b-423e-9855-3dc4e9711b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efb6db3-fb47-4127-858f-b0e21d3955c8",
        "cursor": {
          "ref": "3b722d1a-a99e-4713-acac-718f2bb47131",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "511540cc-6354-454b-9ec8-6c598e350660"
        },
        "item": {
          "id": "1efb6db3-fb47-4127-858f-b0e21d3955c8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5ac23cc1-6615-4e0c-8b3f-530871c73d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592da5e7-b408-4471-a3e4-0e68a47e67e2",
        "cursor": {
          "ref": "003bf06a-674a-4851-859a-ccc6e2209cc4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4e357e4b-bd8c-4d65-bfd6-ddb909ed0c6a"
        },
        "item": {
          "id": "592da5e7-b408-4471-a3e4-0e68a47e67e2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "73ec3d33-d65e-4c79-8937-4e17217921dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecbc024-8877-45ae-bfea-6fb7c097748c",
        "cursor": {
          "ref": "0bc4c4fa-f682-4b67-8aa9-8acfa7335387",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6960f4e3-0a3b-44ff-a8c1-a3e7ba2a2e06"
        },
        "item": {
          "id": "5ecbc024-8877-45ae-bfea-6fb7c097748c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "68119eee-bdea-44dc-8e3c-281614b9eb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385c800-ec7a-42cb-932d-7ff92282c715",
        "cursor": {
          "ref": "06439348-c594-4822-9e3f-ae9b238720e4",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8bafad96-b704-4c92-a564-7d88eb38c9bd"
        },
        "item": {
          "id": "d385c800-ec7a-42cb-932d-7ff92282c715",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f7525b54-a927-45c5-86b7-ae281fbe9f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f55b0a-37ab-4b83-ae55-2d083d327efa",
        "cursor": {
          "ref": "5386fa7d-164a-4c7f-9e61-64085ee81f51",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fbb56723-8f4c-4227-809d-bd834136698e"
        },
        "item": {
          "id": "16f55b0a-37ab-4b83-ae55-2d083d327efa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "527d3e66-9fe6-4e78-8d51-7458e11e0a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2b05ff-2fcb-454e-8533-0cc42f825f7a",
        "cursor": {
          "ref": "5016bbb9-f970-4d48-84c8-9a9d6ba21988",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c16f03b8-6f1d-4a4e-bffe-460958b61345"
        },
        "item": {
          "id": "ca2b05ff-2fcb-454e-8533-0cc42f825f7a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8e5bd4ef-f3f9-4d67-83c5-fcef9b64ff84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f3e545-5541-40e3-af15-20c581418556",
        "cursor": {
          "ref": "98182171-df43-4bfd-a10f-0502f89494e3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "93926a53-ec11-4f73-909e-5c07612a94ee"
        },
        "item": {
          "id": "02f3e545-5541-40e3-af15-20c581418556",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bdd77af3-62e1-4337-89d7-23477a0b4c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce26af6b-d431-4269-924f-a901413a36a8",
        "cursor": {
          "ref": "788ddb97-8e3c-4c71-866b-cdd1dce0d49f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "44b92d70-ab05-48e3-bcf1-fbba9aac0e69"
        },
        "item": {
          "id": "ce26af6b-d431-4269-924f-a901413a36a8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "88ae1231-1f60-4734-9cc6-5b6a38ec76bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2938bd5-ae77-44aa-b69a-f25f28ee5ae4",
        "cursor": {
          "ref": "c7bcc55f-d04b-49fb-9f92-229466829f49",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0f64d366-1d38-464b-a672-8a5364aaa3d3"
        },
        "item": {
          "id": "d2938bd5-ae77-44aa-b69a-f25f28ee5ae4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "042685e1-45ca-4192-8392-914eeb0d24c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f698f9-6ced-4698-9303-4d1bce968228",
        "cursor": {
          "ref": "d75b0016-50f0-4f51-8a28-538c455d6024",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "853f7780-41f6-45e1-b554-63f7713e7238"
        },
        "item": {
          "id": "c9f698f9-6ced-4698-9303-4d1bce968228",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3f46367a-b5d0-4ad7-a5eb-3e5cfcab287e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ca3279-a345-4d48-8e17-cfdc15d3df51",
        "cursor": {
          "ref": "2a42c2aa-da1d-49d5-8494-54bf7d4a0fa7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cfd6dcb4-c359-4eb9-829f-ce5492b9a017"
        },
        "item": {
          "id": "b2ca3279-a345-4d48-8e17-cfdc15d3df51",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cb41281a-2b0f-4496-9d44-a675ea927384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca42253-6e56-4749-9cb1-eface37d56ae",
        "cursor": {
          "ref": "8f56c885-1366-4885-9108-26f3e6653aeb",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ddbaa156-a1a5-4d3b-82fa-86739caa8681"
        },
        "item": {
          "id": "0ca42253-6e56-4749-9cb1-eface37d56ae",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8701c5df-23e6-423e-977f-a074929c0ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2edcc8-7c6c-4e45-9a07-d23c51733459",
        "cursor": {
          "ref": "8de4572f-1aab-4d59-bf01-3131091f63c9",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3faf53f2-72e2-4894-bcd5-f14a7d0c62d0"
        },
        "item": {
          "id": "3d2edcc8-7c6c-4e45-9a07-d23c51733459",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b6b389fd-3ecb-4f27-8f0c-5b878dc95f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4383f32-de36-4b5d-b8ad-5674ce802e9c",
        "cursor": {
          "ref": "b6517e0e-6399-4ae3-b9f3-351e9a5b00f5",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ad02ab41-aa88-42f4-8f75-bb20fbbe8c48"
        },
        "item": {
          "id": "b4383f32-de36-4b5d-b8ad-5674ce802e9c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "230a5f2b-7a9c-4a7a-b726-0bdbfe129c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502d1af6-c35a-46b5-99d3-1dceff741eb8",
        "cursor": {
          "ref": "38bc9f9b-64f8-4069-983f-513cac5ad804",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0f0b4538-8264-4409-bbbe-8e69f88d0ab7"
        },
        "item": {
          "id": "502d1af6-c35a-46b5-99d3-1dceff741eb8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "df6fb344-a0c2-4e99-997a-d8f3b66718be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18fdbd5-1983-4899-9cf2-01b8bd711d99",
        "cursor": {
          "ref": "3a362c22-bad9-4e24-9637-e6ae459bf39d",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d4d8accb-7e94-4f23-9617-bb6ce26df5ea"
        },
        "item": {
          "id": "d18fdbd5-1983-4899-9cf2-01b8bd711d99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2275bbf1-b64b-4a3b-8d71-893c64110d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc8a1d2-82c3-46ff-b89e-ac1266011ae6",
        "cursor": {
          "ref": "2f2458b6-2604-4bb1-86d8-a9625dda97dc",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bb12ad7a-e9a1-464c-927e-8228df213687"
        },
        "item": {
          "id": "4dc8a1d2-82c3-46ff-b89e-ac1266011ae6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c800b485-3880-440e-bb7a-9aa7783d950c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807835d3-ea80-4029-bd59-d7b586479f07",
        "cursor": {
          "ref": "91da5051-1475-4cc4-8463-5e0930fd71d9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1a89c25e-8cca-49c4-bfc1-86e3fcbf6af0"
        },
        "item": {
          "id": "807835d3-ea80-4029-bd59-d7b586479f07",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4284c3d9-3af6-462f-a6cd-aad1c920a32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21688494-18c1-4927-8283-33bd0c28b8ee",
        "cursor": {
          "ref": "4a3dd6e0-f929-4cab-9ed5-e70c5ee2883a",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6fa5ef52-8265-4d50-bc45-997f5112f0bd"
        },
        "item": {
          "id": "21688494-18c1-4927-8283-33bd0c28b8ee",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e4586c08-5c73-45a2-9587-69be14477768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90e567d-5b1c-4942-9677-807dd5827314",
        "cursor": {
          "ref": "351cc18c-49d7-4823-8d05-93f0e0d71d27",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "dc92e9b4-ee59-4ca8-af29-4a7dc17a5f88"
        },
        "item": {
          "id": "f90e567d-5b1c-4942-9677-807dd5827314",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cd996b1d-d234-450c-a6f1-ba927e71f189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e73bcc-d8cf-404e-a877-5cc7d28cce12",
        "cursor": {
          "ref": "70ca9ad6-82ab-446c-b334-e0bbef252cb4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "577e2d6c-d85c-41d2-aaff-f07f7a1aa487"
        },
        "item": {
          "id": "67e73bcc-d8cf-404e-a877-5cc7d28cce12",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "602c9076-db1a-459d-9116-5ffc149b301a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3a7f4c-90c6-4ace-a1c0-6d6c0cf9cdf8",
        "cursor": {
          "ref": "d677bbb6-ac11-49e5-a62b-2b08658e1eea",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3ebda7b2-2ae8-4a72-9607-1b968b31f33a"
        },
        "item": {
          "id": "ea3a7f4c-90c6-4ace-a1c0-6d6c0cf9cdf8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c53e7981-81d2-4a5c-bfb3-fe9c10f39a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0691fdc7-f198-45ba-8cc3-7087914078a2",
        "cursor": {
          "ref": "92d444c8-f283-4448-8ae4-db4b6c66db03",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "74431a20-77a3-4160-ad5a-875582d40ad5"
        },
        "item": {
          "id": "0691fdc7-f198-45ba-8cc3-7087914078a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bc7b5d74-7fb1-48cc-b5e2-9bc4f21f9b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b27ca3-9d4a-40a4-a02e-b421d370d290",
        "cursor": {
          "ref": "9062450f-0601-48c2-9cb5-35862c75d96f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "783e5b2e-4215-404b-819a-045979d6d118"
        },
        "item": {
          "id": "e3b27ca3-9d4a-40a4-a02e-b421d370d290",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cb82324d-045b-4ca0-a90f-4e90d3b6ebb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1950766f-16c3-4ebd-9ef7-aef49a1009f2",
        "cursor": {
          "ref": "5fb84e6c-bcce-4043-b233-6895674e49c7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "21069842-9497-40e8-8591-c4b6eed7831f"
        },
        "item": {
          "id": "1950766f-16c3-4ebd-9ef7-aef49a1009f2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "79b4b890-2d33-48cc-91ac-38f93b25590f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c769a1-59bf-48e0-a6e3-140aa408f94c",
        "cursor": {
          "ref": "f9c322a6-3ecc-4096-b1f2-267180349973",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d5128965-9600-4708-8e26-47e526649880"
        },
        "item": {
          "id": "91c769a1-59bf-48e0-a6e3-140aa408f94c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cb4d776a-94a3-4222-99bc-d690612266a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72098d9d-8ea9-4b02-ab9e-6724a34219de",
        "cursor": {
          "ref": "f2b4259e-a47e-4362-9f27-864b6be898a2",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2de3189c-faf7-4a81-9a0f-781aaa1e6d87"
        },
        "item": {
          "id": "72098d9d-8ea9-4b02-ab9e-6724a34219de",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "62b3e569-9cf8-488a-95e4-3076e09edb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9adbb82-a8f8-41fe-831d-30f1d4786d6c",
        "cursor": {
          "ref": "f3e09a2a-c09c-4724-886b-0e2aaf233294",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f64d2e30-b1a4-4087-ac3b-244775dee50b"
        },
        "item": {
          "id": "c9adbb82-a8f8-41fe-831d-30f1d4786d6c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5e440307-7c8a-433e-9209-935cd915d8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd94940-85e9-4f84-beb2-33ff95455012",
        "cursor": {
          "ref": "bd377d87-27d1-4e34-ae5a-a0ee8045f2b5",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2c633da6-5bfe-42ab-8ab8-664ba39c8b03"
        },
        "item": {
          "id": "9bd94940-85e9-4f84-beb2-33ff95455012",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ec1f2fdc-acbc-4f91-854c-6e9b2a971fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6344fca-3057-473b-ae75-240b6acfb5a2",
        "cursor": {
          "ref": "fa3bcb23-1239-4679-9721-336afafbe09a",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "80bf5937-484d-4dfd-b592-e061c641bdd1"
        },
        "item": {
          "id": "d6344fca-3057-473b-ae75-240b6acfb5a2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "50047f8f-523d-4cd9-8fc1-96a0a68b874e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d04fa4-602b-45c4-a708-217c893d6b54",
        "cursor": {
          "ref": "62c9fda6-d9d5-47f4-a360-53b44ffe1409",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4432062a-131d-4c7a-adde-66cc3b3f03f1"
        },
        "item": {
          "id": "05d04fa4-602b-45c4-a708-217c893d6b54",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "18d8c194-1db0-425a-88fc-70e179d24600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28b5579-f21b-43a7-9b2e-e5a6372e315c",
        "cursor": {
          "ref": "25383ae6-2399-4dbf-9e89-24550990ef73",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "75efa4f2-9a62-48c9-8078-565309ac2dd5"
        },
        "item": {
          "id": "e28b5579-f21b-43a7-9b2e-e5a6372e315c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a85cf04d-ce0d-476e-a3c8-7323092a128a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa774045-38ed-43f7-9dac-6a83d1c28d26",
        "cursor": {
          "ref": "11e37fa3-b622-42ef-a21e-1f7302d0d849",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bb777ee1-67b3-4e5e-9766-412190a2ca66"
        },
        "item": {
          "id": "fa774045-38ed-43f7-9dac-6a83d1c28d26",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7a2602d4-d701-4738-ab4c-6e36bb9dc213",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66794f88-4b24-4080-b9cd-92032751ef88",
        "cursor": {
          "ref": "a60f0757-4dcb-48d0-b018-cbfdcfc34918",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "27d69bbe-83b0-4b11-a04a-706f251d2a58"
        },
        "item": {
          "id": "66794f88-4b24-4080-b9cd-92032751ef88",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8d95e33f-0f31-4f9a-ba3f-4fc334207bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "18f3fe5d-0c8c-462d-95be-3fb0a0836e8c",
        "cursor": {
          "ref": "292f2273-1a2b-4ffc-a868-d8d4573bc17d",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9ec400ad-0257-46f4-8e29-674085c4f2f4"
        },
        "item": {
          "id": "18f3fe5d-0c8c-462d-95be-3fb0a0836e8c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b7bf48a9-67e9-40c1-a2a3-cb8e78e2a88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "b40d1a2c-c544-4a0d-9d65-ac52b640b999",
        "cursor": {
          "ref": "119af525-e9b1-4bac-b6db-5414c986eaac",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4b0ec7c3-82c3-47cb-8756-a82839d3f1f4"
        },
        "item": {
          "id": "b40d1a2c-c544-4a0d-9d65-ac52b640b999",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "21d260ef-bd71-4925-8b66-16e54d2ce68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "c386337d-de14-4318-a34c-d80eab66ad60",
        "cursor": {
          "ref": "d11d590b-ef72-47c6-8487-ec85397de5d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d4ee6a-3853-4226-b4c8-d4a9e6190ba9"
        },
        "item": {
          "id": "c386337d-de14-4318-a34c-d80eab66ad60",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c386337d-de14-4318-a34c-d80eab66ad60",
        "cursor": {
          "ref": "d11d590b-ef72-47c6-8487-ec85397de5d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d4ee6a-3853-4226-b4c8-d4a9e6190ba9"
        },
        "item": {
          "id": "c386337d-de14-4318-a34c-d80eab66ad60",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c386337d-de14-4318-a34c-d80eab66ad60",
        "cursor": {
          "ref": "d11d590b-ef72-47c6-8487-ec85397de5d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d4ee6a-3853-4226-b4c8-d4a9e6190ba9"
        },
        "item": {
          "id": "c386337d-de14-4318-a34c-d80eab66ad60",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "91d84fe0-57cd-4a78-8ce3-4973a5d42b7e",
        "cursor": {
          "ref": "a38e62ff-c68f-42f9-9816-93036790e37f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "491ba269-391a-4fa3-8fcc-48bfad62a7d0"
        },
        "item": {
          "id": "91d84fe0-57cd-4a78-8ce3-4973a5d42b7e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "abbe4830-224e-4326-97d3-8c3f1b91ea4b",
        "cursor": {
          "ref": "ae2164d2-410f-4a6c-a718-a729c03b8eb1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1e2f28d3-3c86-47d8-885a-feca1c91a709"
        },
        "item": {
          "id": "abbe4830-224e-4326-97d3-8c3f1b91ea4b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "abbe4830-224e-4326-97d3-8c3f1b91ea4b",
        "cursor": {
          "ref": "ae2164d2-410f-4a6c-a718-a729c03b8eb1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1e2f28d3-3c86-47d8-885a-feca1c91a709"
        },
        "item": {
          "id": "abbe4830-224e-4326-97d3-8c3f1b91ea4b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "516ddcfa-0336-4f7b-8ff3-0a8a84cc0955",
        "cursor": {
          "ref": "d571692f-703f-4672-b819-f395a6a331ba",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "026e25a8-46c9-4797-a696-ccbccc4002e1"
        },
        "item": {
          "id": "516ddcfa-0336-4f7b-8ff3-0a8a84cc0955",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "221bc4bd-2845-4a3d-8968-82e29db9f163",
        "cursor": {
          "ref": "9e721dfc-1a9b-4c2a-a811-dce949878ace",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26f18df7-8bdc-45c7-b04b-134c35380070"
        },
        "item": {
          "id": "221bc4bd-2845-4a3d-8968-82e29db9f163",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "221bc4bd-2845-4a3d-8968-82e29db9f163",
        "cursor": {
          "ref": "9e721dfc-1a9b-4c2a-a811-dce949878ace",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26f18df7-8bdc-45c7-b04b-134c35380070"
        },
        "item": {
          "id": "221bc4bd-2845-4a3d-8968-82e29db9f163",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d97b22fe-d381-4e82-ade0-7f3ba5f9366f",
        "cursor": {
          "ref": "46f5a94d-2797-43c9-8392-286ad0f3c60a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aa47d26b-2098-44e6-a421-6086611f8e43"
        },
        "item": {
          "id": "d97b22fe-d381-4e82-ade0-7f3ba5f9366f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}