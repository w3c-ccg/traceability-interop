{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bb32a09f-845a-4076-9e25-630bb3ef1132",
        "name": "Clear Cache",
        "item": [
          {
            "id": "91f01912-189c-4233-8634-369e2e38a310",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32876121-8db2-441a-9c40-c90598fd2064",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e7eaf16-81f2-47c7-b26b-6c1cd182bfd5"
                }
              }
            ]
          },
          {
            "id": "9420de3e-1b08-4f89-b1ab-92554e37ac85",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28f7fe3b-f35a-42d8-83fa-deeb2c4c73a5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7da9d4d1-106c-4948-b775-0e7c455fa06f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b3093fa5-5005-45bb-9207-d102e32f4e29",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1d0e370b-8f3c-477f-bebe-8d9b35dec714",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d22d0c7e-bd63-4826-ae25-63f9288cf3aa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2168f9a-0b10-4606-91b3-64338cc4c839",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f22b5498-320d-4513-9ed4-ca11d8cd43ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccbaedd8-2106-4fb8-a681-3b7ca7ebab6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac80085e-4b36-4410-97b3-710e4cfa1cfb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12b6b35d-d285-4aae-bde0-3e9a8e890faa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "186a88b6-210f-4a95-8ba1-4ee6d28c32ec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcd411a2-d876-4c35-826c-eb0ca2ce05e3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ea9f126e-8971-4a9a-a381-de10b32bff09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f99da690-e6eb-4af4-a4e8-9155bdcba549",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d39b8ccf-2e7a-4b02-826b-05129ce03134"
            }
          }
        ]
      },
      {
        "id": "598ca4f2-5d72-460f-88f7-1960121cd227",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "59448399-340b-42bb-adec-9b977322eb75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf4a5961-e9da-4193-bda2-a070d91c436e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1028f22-1490-4f55-8944-3b64d9cb628d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c88255-5be7-4189-a70a-7f42e77ea5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba56f18-2640-44fb-a609-67ce91d688c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d5a0b7-eaf3-4457-ba2e-04584d6f582d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc7fa0e-4925-4132-9f78-911d9244a255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef73f029-434e-4f72-bb58-29b8652f89b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950ade1e-eccd-43a6-b826-2e561628b74f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87177d3c-6d27-4726-a483-2d97151e0df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07d65202-3a82-41b5-a08d-c0922cab0a26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0475751-b3a6-4895-ab05-05727a758ba3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d799dff-308f-4443-b8d7-fc5968e70d45",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99740f4a-90ff-4f3d-a7d8-34dbbd536083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba3bc57f-93bd-41a6-adad-8e332ea28c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7381d5d9-f741-4be3-920c-c0d6c999eeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e31c41-a19c-447a-bd63-65d11704c5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4bb4bb-2752-43be-945a-eb540ec4bec4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3db9ab-312c-432d-b789-2dd5b69b3a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a61ec4e-afca-4ec8-a812-8c5581e672e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e486e292-10cc-4f76-8174-a00b65d2361b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d8bf9afd-007e-4eb8-8390-535aa11480e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "16ae1704-e506-4649-bf31-6effee71082a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41da5a94-fabf-4e72-b686-64db67dd62b9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f9a16a5-95fa-40af-ba3d-01468dd3b0a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6c372b00-e7b6-4f3a-a181-cff0019faefc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15c6d40b-8089-4345-8c78-6a2939a06189",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0355a510-0999-4a06-a054-4454447e64be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21929d9c-5af9-4102-a6fd-1a1cc8e66f1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8daf34ce-a318-4e3d-ac25-de1980143d4d"
            }
          }
        ]
      },
      {
        "id": "85468527-67e6-427c-8830-6fb72b6e9a6a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2e8a31df-55ef-4401-9e16-38b6184993cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8903562b-e162-45f0-9b5d-9e4fdfde7119",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6bc7a129-9679-460a-874f-d828da3ab92e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1ff3cb-a719-44ad-914c-fbb1bf93b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6184b28d-c8ef-45fb-b47d-8cfcd794a0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5850d30c-9162-406f-9ad7-4fbd1f0d3fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b7d38d-b714-4c43-a81b-d2a4d82b7a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323b901b-3f51-43d0-9f1c-04216f05aa45",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2075f1f4-de9a-4746-867a-f91b448abf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74973ca-5ce7-489e-a6bb-620d4e5b0e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2fe984-7662-4edb-af33-89ca273f5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8120e2c2-1a80-4d03-a7cf-377afada401e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72783c2f-905d-499c-bb44-e385486260e2",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22feb6ed-3ca7-4cbb-9a91-ca6a1cc01b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7a6d88-7c55-4165-849d-0931b092a2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b374828-d73c-4692-ad23-d422a077d058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4fb0850-2330-4c83-a747-19da53ac823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f522f90-0594-4ce3-8481-9ae9789656b8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac964e8-5a82-4f3b-ab9e-9e28aa97b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2887ec3-ba64-43cf-ac7e-7f0d753b3b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f67110-96c7-4c76-a303-af2bfa316d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cfab1b1-dffb-4105-b3e8-6e17caf2ddac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5344219-2a4f-4c6b-833e-46c88f4b493a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30ef881-7b9b-47e6-9dbf-92fe4a635b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13645f9d-9aa8-42e8-8019-a6fe62c64edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe74d3-5820-421a-8249-0fcebc57b1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb87705c-bc8d-479f-98cb-31192a3e6b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0b8398-016e-42c8-8419-615e031d7290",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d9672b-f605-47ab-b800-8d7f5ae38802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790ddd01-ea5a-4800-bb86-e830c9cade84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e1e680-555d-42a5-8f1d-dfb057187f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dacf52b3-cb67-4bbe-a545-ea678bbfdc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae725cb-af53-42d0-8316-c71fe88a8025",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b17ca6b-b6ab-436b-9fc0-8fa667ec9282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882a296d-0c50-4b6f-9922-79f7698b76e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5637d38c-38b2-43b6-9672-4824b048a0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b66b6fe-9be0-4615-9b05-2b08929b613a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a23a78-7d4d-4f5c-ba18-eaf7fd906480",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7204d925-3c7a-4c0f-8295-46d769a9937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ec854e-a023-472f-a465-922ba31ab3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18de88a1-0d4c-479d-bb0f-a2cfb6af2f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e179faee-0400-49ef-bec5-8ba64ea4c21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333ce3ec-0332-419c-804c-976214ddce71",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e482cd42-a230-4da0-861e-41db46734517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b77f5b-5bff-4c32-9c4b-bc110d817595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac71bb55-7d8b-43d2-bb6a-cd7567065d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c0ad708-7946-4bce-be29-640a0f45fde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d66091-c72e-422f-8458-e80e20389854",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adbda9e-5b62-4e4d-92d9-df0ddbf8c2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76258e4f-a99e-403c-8718-dc4c6be32247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde709e-c648-4c2d-9e69-f50246f1563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39d81002-6670-46eb-8c48-9f01232aac48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6507d2c-4471-4d52-a7f1-d7d1d014ff7d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ec227-54f1-40d5-950f-afa22b4d5183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a1c34b-7e19-4b50-9237-6d8f965a7977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4c97f1-efbd-4c94-b571-200c93dc0f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c06fa48-07a2-4750-a8f1-9dc597ff45ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a24cb0-4cfa-4410-9062-cf515242f7d1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe52816-f2e9-43a4-a31b-761a01a7fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa80a03c-8f98-4f26-81fb-b1a5e84bda91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bd50fe-1a45-48fd-82c8-108e454a5efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c24744df-ee79-46e1-a1c0-231051a8eca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ab4518-63c4-4313-b8b1-81168bc4e4e1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818ce821-39f9-413d-955b-6b5806f2b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba90add-7bc0-4453-9091-65bf7e16fd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f16394c-1ec9-4228-9960-20f68f5286ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e5359bc-a1f2-4b20-931f-0ed42dfcfa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d3e779-bdc7-4a6e-9fd4-d0f5f6e0fb7d",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d4ced3-dddc-4086-bb15-3040455ce163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d0dad9-a127-4131-8d6f-0372550a837a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5141189-62d1-4601-9399-b3c21b69a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e11776-a412-46c7-986f-fde1a57a17cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ecffc8-6d68-44db-8b4f-af685c14e3d5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4439704a-c4aa-4583-bfc2-0b06b4b4ca93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0486482e-4a5f-4623-9f26-7a700efee461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c54d69-742a-42d8-b6b6-2db7335f3572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dee8224-d1d2-4801-983b-3b407c8b9834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b64e2c-ec67-4747-b1c3-a9e8eaf8fa34",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac75c95b-7678-4e53-93dd-3841d9cabe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0198353-9d24-4f59-ab5f-faaf6999b53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806e377f-1be0-49f5-8abf-bcddff04bb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "410cac0a-a930-4944-9164-1a98581b80b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc55c5a0-0763-4d63-bc13-02275cf0556f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14c16f9-47b9-4d7d-baa0-8012580b9db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3bc0f0-11e2-497f-ab03-d0ed41915607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90429ec-62bc-45a7-ac2f-a6fb6a60877f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "216f0e46-fd27-43b0-90c5-1f37b6ddec46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3eb740a-04b5-4052-8569-b838974dc1b6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebefd48-c3e9-47b1-9a34-272a6927247f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdb53f2-3a3d-4771-9cf3-217dd98df96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9253e862-cf69-4210-b862-25e4fc279106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "465da22c-caca-40b8-bcad-8df9810487a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d77c695-65f4-4522-a39d-f56d472029ce",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53148850-90fe-4287-a807-80f791ff3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49587b5f-95c9-4fee-a393-5ce47be2991a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e081f5d-b421-470f-b534-5682678fbfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd121e6c-74a9-45a7-a4a2-4e3c0f1a61ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc99438-9810-41a8-bd42-ecb396725355",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa15da9-c480-488d-a4d9-f154d51eddd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f444c256-d25d-48d3-81fd-fd1b402ef521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6468c3b5-7122-4c71-978e-b2df14410b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ccb5ac-b045-4de0-bdce-8d0f1b5e5c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b2447f-8dfb-461b-abe4-6e3a4ff9c6f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b9e3d9-de9b-464b-9314-78d510c4de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d34d0e6-f451-49e4-bad0-4cb32b305044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7770e0a-040c-499c-b5fe-ad4d21df0b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aeb39f4-4df1-46f8-9e91-628b4befc466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bbb7ce-51ef-498b-84f4-334e45b31477",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe23e9f-4509-4fe8-a971-068eb47abbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e27210d-5ef7-42c6-966f-649accc7b50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5bf72e-f91e-48d0-a31f-d61c212482c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4ec7f2-cd40-4b14-a4a6-577b97ac5308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7687df12-8e34-4f00-8b08-82d5de528f27",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8ebeb8-86b8-4a4d-a48e-91654ecab11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6392201-2f75-4f61-a911-1668d9eebd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5eb2009-98c7-440f-9f55-c135bfdbaa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8d4c6c-90cc-4529-9b9d-e39212c37a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96a6f84-11af-40a0-ae2e-13a4fda9e1b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f21e0d6-38d2-4cc4-b380-d81e42a70cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705ba017-4e3a-4c27-bc57-eba7c49bc053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37dcfd6-d4db-4e8a-bebf-678fa3c9a5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c900928-34ab-4d38-8ada-1ee2c3fcf493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9083779b-6256-4894-bd2d-c4185f4fa682",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5ceabb-55f6-43ef-8b79-a0241d7b9e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43eb352-7fca-4866-bc93-140a9484e8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f8cdfb-18d9-45f3-93c4-4807a573e055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24e00b90-0e33-434d-844e-9a04e3f55e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf07671-b506-4423-a2fc-f4c9fe547fac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270fe468-a5b9-4fce-b6f1-7bb0b594f92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d20692c-cb0a-4cdb-b29c-8e7da66fb7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543b0d3d-ff1f-4640-98e8-f8a85901321e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf962cc6-2a17-405b-bb11-7313483cd1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d68ecc9-3f02-4a6b-ba12-1df318c7315f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31f7458-d385-4215-a032-a1cc43f40c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5093c77b-ec70-4d31-992a-84d3ad4cb0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3b5adb-a24b-41f3-99aa-f653da1915db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67764ca-a3f7-43f9-9cef-85945433b86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e4d422-c70a-4bfe-9423-913e1df589b8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9ac380-3713-4a6f-bcb3-b28ec4c75968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77bec8c6-0ab3-426e-8576-0d119b679d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af49f27a-6fb2-40b9-a767-a9f28bbc752d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bdfe35-7663-4852-a7da-fa895b847ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094fc406-8ebd-4616-85a7-f2d9251e576c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd75fbad-500c-457e-86d8-2728895beee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f0599c-4706-43cf-8b3f-cdfe4bfa0aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90157b5-b957-4da7-a6df-14625bc13ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "394ccc4f-687b-480e-97aa-7398aac3c6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5972dc3-b964-4000-9037-2b5f78686d56",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec5f562-bd4e-41ee-913a-17907a2fa312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea960a57-01a9-4f7f-81b9-2a01bc199cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc83a4bf-4a6d-46bb-98b5-5e3e98d07336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef1b197-4a2c-49d8-b8bb-aa671e64399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472b8da8-0520-4916-bff2-a066d7edd3ec",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83a5865-f13a-43f0-bd8c-1afd8b8f0c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e03ee1-2a7f-4b03-9703-a1e27565e460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69f4fb1-d033-4c60-a5dd-61262cf645e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3383d0b-876b-40be-afb1-fa069690fc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c43072-8c95-4fb7-a76e-00ef72246f63",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf59e8a8-ac81-4d61-9285-7dc715d31c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b47b011-c4d7-4545-a115-2587afe711fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae1c3fc-0abe-458b-bea1-c91c3672a201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05e2953-f257-4b30-a5be-025fb1bec1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b730027-43fa-4677-bfda-dbda436053c4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466c0939-4cf2-4e44-aac9-ee9779b9208d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631d7bf4-6642-4f18-b77e-6f8b1a8416fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5f47e3-afa1-4f4b-8022-41e6bca6c707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ff3a78-d7a2-41c8-80f6-eecc0a68c7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa00ac96-64d8-4571-9caa-0fe1515ea19b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575b618b-23a6-4fb5-9d89-c6c7d821a84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793a72a2-1249-4719-914d-066165ad3857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dd23f1-032d-4965-a8c4-c261dc6c6fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22fad5f0-fc22-41d1-b153-6fbec80a951d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67e078e-6bd6-49bb-b6ff-4f5f73b1627a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2781a5-83a6-4621-a297-302442a6342d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55df474a-573d-4ea3-b196-ffbc7507d3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5da74f-feee-435f-8300-c25f8bb38a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3d3d61-1adc-4a5c-b93c-04073c6611b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee3c984-63cb-48b7-857c-eae3511774d3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607760b3-5356-419f-bd3a-ecb66bc899fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e676bc2b-4ba8-4c50-a937-01260e50354e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78023dfd-2a2a-4eca-a6a1-bd0ce042245c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af6296a2-bcb3-4faf-ad69-d4805ab56447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5ae8d2-4a1c-4888-a861-5dfa451d77f0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941b61f3-2e06-48a0-8848-2582a5ec0e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ce7eef-edd6-44b0-84f1-c8f7968acba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f630db34-8111-49a8-a43b-3c183d7ce906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c39903a9-8efa-4f24-8a69-8517af377480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b761a6d-7af7-436b-b756-0b55adce22f1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b93eec-0f41-47e8-a598-8e183c00f317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df52aa30-b106-47c7-9503-d3df07bbf5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14645e9b-8f96-4092-96e1-26e8834cb3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f70f47c5-38f7-477c-a616-cdb9f7f9721d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916deaf4-fd9b-4366-a1b4-ee623aaa963f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce51275-a4b6-4a9c-8d05-c226fbcea272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00039a95-ce9a-47cd-99db-0c1ffe3601b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57f626f-9b31-4c3d-8514-bec1690bf07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e78ff35d-c027-4d27-b770-d115b4f6fc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439db2df-669b-446d-bf01-cb24390832c4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c42fb4-ea14-4297-bb85-c04377a3035e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6e08a3-1b48-45c4-98f6-ffa170d846f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614f2003-f02b-4d52-ab14-2019afe42eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fab214ef-bb75-44f8-93c2-7452caf69333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fadb78d-240e-4131-9263-43e2d50b0e60",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d558ef7-0509-436f-9f5c-012eb043dd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73286a6-a9d0-4e67-a2fe-4be97534a39a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c81536-53e0-4082-9245-d9f66bef07f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbe45fe-7190-478e-8541-fbe59734c366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1d2e68-8027-4d95-ab6d-9889c828bd33",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8442a7f7-706e-41da-a879-2388fffd6c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb00c52-f0f0-477f-b99c-21872a626eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009f813b-21b4-4e7f-8ad1-ea47a590780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58b0e14c-81cb-4449-bd1f-a2a5ea8aa083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca13a17-02a7-47df-b57d-54c877e7a855",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d1f7d7-6bf4-469a-b135-35da025dbaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400d0e8e-e334-4091-bd0f-a6dfe1d510e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2346235-de71-4cc7-9e86-ca24c39ca6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a631888-4c91-4127-a9e0-d36d233b42ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfdf630-fcb8-4dbd-9fab-999377574b28",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8318e7-177e-4e42-8e7a-2f5e68f1f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce16d14e-bc0d-4e54-b505-a7e6a13c2992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ddc00d-af9e-43be-a22b-8620df78d972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "800a05f7-9354-4c48-8669-f7a4662e375b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ea3ccd-5c15-4916-acd2-e08834bc0c95",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d090c-df96-4b53-af23-4e7bc70547e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca8f334-7a67-428c-8347-8c8f44f7f60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4e4c51-1251-4575-b792-11034afceb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "573ae6f7-bf75-4c19-9e7d-baf11333d80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4952c642-9bee-4f74-9ce4-5d7be4a22d90",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b45c6d7-f8bb-4439-b291-9c72946982ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529f7b4f-1417-46b1-a109-f974d33ec95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821e6c2b-f44a-44b3-b2a5-3b96e08a4b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca040e54-464b-4e21-939d-80af7ebdd9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb0aac-3269-4f66-89a6-bb527b12f2a7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb98a44-c6a6-4a20-819b-6715ee01b540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0e2b02-5b67-41de-84be-dd9a1238248b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834323da-a43f-4eca-ac56-24450f6e454d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae6c11c-a415-48b5-a3e2-7a072fbdd670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8486534a-143b-4ca5-954a-b8befb39e634",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01ab0a9-80f2-40c5-8fba-013ed6e0461e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d040844-3a10-4b33-b49a-3dff1e1dcae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75229eb7-4eae-4d5a-b64b-356decfd9fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "813eff0c-d2f3-414e-b742-cb3715449abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d15c6c-a301-4a3f-8095-6fa667f36d72",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d435dcb-6aab-46e6-941e-cac2180ee01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3db580e-0194-43d9-bd24-4973c8bf80a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5289018a-f814-4818-bb43-bf34dda6cc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0769208b-ed2a-49aa-a7e2-3584506b0ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d820792-7ab4-4059-bb5b-18739e3c3e1f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d399916-7c59-4005-8301-b557fda2538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e1569e-b026-405a-9795-53fc1d70d986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a1b806-b324-4727-8539-12958659d3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0777ac3c-bcf3-449b-83c1-9b2184d30329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffd3126-a927-4d82-8716-1b218e9c8d99",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b978aa-98bb-4447-900e-26460aa3ce76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11629d66-396f-44ac-8bfa-a60072a5d847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4934c99-2b2f-4d14-8f7b-5f608917ef5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb88ca58-4c66-479e-b7ab-798647f3dc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df98dd9-7418-41e7-9fab-1cf98e3c7f4b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd6cbd1-4368-4e82-9c14-970a4428a84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ae7a63-9312-4ed2-9b7b-bb878864dc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783033e6-7726-49e4-b230-83e0aa5103ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69d7404c-90f3-4496-bc4a-023905bc51e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fac319c-0c6e-4e14-b9d5-58587ca16c80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87a482a-eda9-4b0c-a435-6e3e232712da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7305e9-f267-4cf0-b643-47e24650933a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160d6334-af3e-44f4-88cf-e629a3012f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac1bee5a-09be-4c89-b516-01d797180925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cf561e-bcb4-4288-bc29-ebff4ea3b96b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc39aa10-936f-4606-afef-3a9cf9b0d830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a3acbe-c893-47d4-aa2b-bb532b3eb920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d221e3-19f8-441d-b03d-0e6ab27564a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0638d2-8095-4b25-8afc-3e887bf06695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4aefc8-bc9d-43fd-b6e6-cfcd95db76dd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e091c44-bb1d-4483-9733-7b72e0ce81ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f732b860-e3c0-4c73-9ca0-bdc113d251eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc09461-9c59-4081-9ce0-74232138089d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47bbd1b4-5636-4022-8a3c-4503adb7076c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c59f66-019c-4958-ab2c-8c70a7692ee8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bad8a32-debc-4fe0-a02c-27cf62d5e2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c01f96-e7b2-4838-949a-27d5733719da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3e7cda-75aa-4805-b417-2cd7b175c2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b41203-ac9d-4eed-b206-4d9a8658afd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883ee580-fcc4-4574-bbc8-4c1bc9ad4002",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e18206d-ca8b-43b0-a24b-754fd3166937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750c7964-9dcf-4332-92fb-c6dd3b734bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc40d6b3-24c8-4c63-97f4-ac566eb3e56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55cca521-e4cb-41b0-a82c-e1cbd139e854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5349558d-c887-495c-9777-9e5180956a09",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b08864d-a1fe-4813-b25a-1f5dd664125d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626011e7-15ef-4188-962a-6952fdcaf814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c883b1-01fd-4643-ad78-232fd287498b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c917a169-eac0-47a8-a619-bdc222909b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168b9ec2-c6fb-4ed0-80c5-0b669ca64b09",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086a42e0-bde4-49c5-92d7-eda3ed35f5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c18dd55-257b-4e19-91d4-5fc637c03756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c50e52-704f-41ad-965c-928685701b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d172386e-74c3-46df-8f55-8a4720093e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5865dc-6b7e-4b38-91aa-a26c308540be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1589bc1f-24e5-4c45-a74e-3ec00adcc242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95b48f1-3bea-4807-822b-2980d9d2e414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3002542d-0d4d-4292-820e-1c3faa89cb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "adf7cb7e-07b0-42ca-8620-ad26a2a81d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2481e679-743c-4a10-b6d9-bf8b7b095b1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6329f09e-8349-46b4-8d51-3822d6050d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03b6116-8b04-4c5d-aa10-4bd3e06ead7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34785ac-7b28-42ec-86ec-9ac0995d40fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e400680-5744-4bb7-bace-549c3211ceee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec559a9-eb38-49d9-adbd-8029ea47ba5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35db621-610b-4168-80f3-a380b0bf90ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfe4c9d-3d5d-4aad-ae90-10b57e9177ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bca8c4b-31ef-410b-ba8f-dd70f8f2f18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37b68e06-3cee-477b-bda2-aa2e53934590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1c5c7a-1cf7-4e95-97bf-a5631263f5fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7755ee70-3d38-47ea-9f93-ebef6e048ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bde5c4b-d45f-47cc-ade1-ed2a705cea26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a34fcbe-3f3d-4d01-9eab-ca638e137d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5df0b3-3bca-49e3-9d74-b2ab6736656c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398c7d67-4746-48b8-afdf-ba717837a639",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e97f225-be9e-41a3-865b-8df96c0f37da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae966551-5b5f-45a5-9de5-07b614c402b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe7901d-59ab-4be2-8280-288ae5f670a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d04a3b0-3f2f-46a5-b06f-e11cc9e6228f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3363750-e993-49df-a08e-930563e3aae7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1f67dd-05b7-4946-83ba-86cc0272d4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af150c53-6e58-4e12-a768-8f1207ef87bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2bcf18-1474-4a84-915e-ab43c64158bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f81545e7-82f7-4565-89d4-b4333b454f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883b3495-2b87-4e66-a492-668deb1a56ac",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02be41e-4449-4e92-a863-28d9101d2e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81892735-ceb2-40ac-bce1-aeb591a6c9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0a2721-c9b8-4e08-9338-2a295e2d1610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb775eb9-e95f-4ee7-a019-7cd80e793e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d13716-569f-49bd-acd8-b501950a5cbc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f806a2-482a-4f48-b5a4-163ae29e3348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d1a74b-a9de-461a-9ef8-2eda556f3872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6282cc-6f5e-4692-a506-97663bd0757b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4dd9b86-3deb-432b-989e-7fbabf455847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd3b0c7-85ff-49e5-b705-ed67b0ceae6c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc50655d-abde-403d-a76f-f57d475a3610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e73deb-9403-424d-80b8-fa53dc6f6a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250dd5f9-3ade-4eb8-bd40-d071b5041b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b912b0f7-94db-4ed4-a58d-26b222ec8f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590d4293-1536-4610-bdcb-7848de76517d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4251f103-b3b1-4cc8-90f6-3ef50ef5f2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fe4a9e-d5f5-49a4-ab77-dbf82936085e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ad69a4-d384-4ff3-a62b-a1c7c8b8aa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8fb5cc-1f64-4bc1-b954-eefde67da5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0b6349-1abd-4b6d-bee2-586d748a5690",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed55d3c-d293-42fa-ad39-3c49a3ce5630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd3d29f-6534-47ef-984d-20a5fd1cc5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b0abe-2414-4a47-adfa-b911ff131674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1464cc-995d-4244-aa11-e4aa189a02c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e47938b-56cc-4bb9-9632-c61bd4476ff4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e220864-b3ac-4291-b280-c2ec7031ed5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095ab207-f329-4d59-bf81-3ef874f385b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9588c00-3755-4857-a1cd-be9ee6797bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8392486b-812e-49f8-9828-91ba080b255f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f06d445-2cef-46be-9541-6e8efa15a40b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca43c26-b8ee-4956-b1a4-496551e08820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472e8e20-db68-4304-893e-a48548af5455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea9eaa6-c9cc-494d-b363-7ce9515852cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db6b9534-1b6c-4f02-9d35-7ea2a81cbcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8e5f3a-6836-4e3f-88fb-5ef9c5440589",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3857deec-1dff-4a0f-b8c3-b4d8e2d6519c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84fd406f-c69c-4fac-9ec5-de7aa4f95f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fd2f09-bb3e-4df8-b599-0d9e7e760f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cac1bf49-9028-4885-bbdb-bbf0cc768c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97becda-08ee-4482-b590-dfffb556557e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27900900-74df-4eac-a672-adf1caf3c0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05bfb47-bb5f-468e-a193-46ad78ca47b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8af4305-d2e8-4385-b82f-3dd259383c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11d8e9e8-17fa-47de-9cd6-4268a7e6f591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee934864-2791-44fa-b5a5-01f31fbb5364",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccc0229-49b8-4cde-9530-6b6a58757fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f46680-2dbd-41b4-96e3-d24bfb0838fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934983f3-20e2-4996-9ed8-f72a275d2ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "443382b2-0ae1-4cf6-b0da-15383acf7396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2063f20-e284-4a18-9fb8-66b5f1506e82",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec59832-8cc5-4f2b-9ce3-8e0c15d68afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29034a72-f4a6-4fa0-adf6-35bf0bccc9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d03353-9878-45d5-8b35-1f756826c8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63152a1a-1762-4da2-8b96-c1f342cafb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323e3b67-5329-4ed8-8402-4e5fb2aadd97",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b6a733-a06d-480f-a914-4c491f17ee61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a92fa0-6e0f-4885-91ea-2118df92afca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85842670-888c-4765-aacd-0dbdba6728a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a07d521-9334-432c-88ed-464e0f479adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f5dbed-0958-4bd9-b6d5-34a0c2b76ec0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b25455-0091-4703-9470-e89f8d52912b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6cd5a8-1b08-4d87-9ecd-dde809f53835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f60ec4b-7ee5-42e5-ad45-f4d9dcddf14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a53293-7925-4c67-9d5e-451833feaa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04e83dd-163e-4805-85a4-904d81cabbe2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11af0ddf-a86b-40f1-b336-ad39fb080d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9365654f-66db-4258-92dc-62357406e545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193b65a5-99f2-42a0-83cf-de7a2d85da2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e83281-9d9d-4eeb-8b75-753e3e5ff3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d41cb2-b4ac-4842-abfe-7223cdbd824a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302cf64d-ac18-430c-9cd3-43a0265cd873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f342a359-1175-47b6-ad2d-08dc253ec4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a7ed19-400d-4383-9aa5-2f0eb6519df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1363ae60-9688-4514-9a32-5f6150fa2869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da697ea-d4cb-40c7-8803-530f6098ca64",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4580bbc4-158c-4a37-928c-ef0c10919d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b09c38-41fc-40ea-ad0a-a730140d937c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4fcb8c-9509-4317-9339-489dc9a7e7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fb9797-e76e-46ac-a27e-74bb803cd921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861bf151-044c-4d0a-8c67-f8961cb528be",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3be5b5-d9c1-428c-b18a-c0b9b6367ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3b8430-ffac-441a-9ea0-5dacfad10408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e014c1-115d-4635-b044-5361a9aa6ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57b64043-7a84-458b-a129-81662bfc4a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d0ef85-73c9-4fe3-ada6-1b54dfbc04e8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f515f1eb-e86a-4321-ac92-68c659a731b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03eba3f0-ab5f-4829-97ce-974cbcd81532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ca9950-d1cd-4ba2-8523-75d8399f3518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaca805c-1938-4b1c-b6cc-b0a20e9ae840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c6d826-a5fb-426d-af9f-6d1ae31a07ad",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae247da-d354-4976-ba1f-6220d8cc0c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918f14e0-d21e-46a5-b00e-f5b5bea2b5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f728aafe-f7ae-4b08-bad4-830ce750ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cf62fc-f579-46bb-a4bb-bc3124682e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fce191-92e5-48e9-bf34-047f806849ed",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a57186-6e70-429a-904c-bb98222aac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2826e6d-defd-4403-bd9a-f910b3908655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5da087-a05b-4256-b3ac-f3f127dca2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b341fa97-4a41-4bc2-b1e4-2382ee8e6745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb3e412-c93c-4913-9430-ad4bcb100e86",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7570100c-2809-47ab-8877-b80bb264c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a8b255-aaf5-4d68-bec7-6000c970a6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b154fe9d-8ba1-4b87-ab3c-c6de75b90665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05542a20-0058-41ac-aa0b-05768b4ca708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cee1e81-4719-48c2-b20e-be84bf528125",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d78141-eef2-4528-b59a-811598d24d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40b4a0d-0020-4bd0-8ee7-3eca37035e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa30e1e-ec86-4c93-8ac3-5c772549e1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "737d2e6a-20b0-4f13-bfa6-aa99282405a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c29daa9-4398-4e8c-b72f-3a697107a66e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ee172a-4324-4bf1-86b6-837a0427c828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a338660e-eddd-4c5c-bb23-5f89a787ea3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73df7cce-51b4-4f37-90da-66dcd92f764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "043faa9b-02ea-4bdd-89a6-6b2131f8be3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e94edc-ce28-4c3d-85f6-76c63b505e50",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be0ae3d-2a11-4652-9cce-85fa871c53ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca120d36-848b-4eb5-87e6-57667b853c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79042805-a4b2-427f-ba74-dfb4fb387c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c081e165-a1e6-48d0-b473-8c6b8c0f92be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92b74ea-7809-4658-b6aa-5c4b5c99f185",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476752e3-ab6c-443f-9096-c788d45b5a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b03c7e-93a9-4b4e-b272-2653d232ade4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f782f454-6fb6-4dda-a6fd-eb9e37f0cdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2eacff54-757b-4eda-9ee9-252ee7416d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26540b2d-0270-4cab-b905-159671cdf393",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0932a650-6b87-4ae3-bfa9-e73e7a778625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55d03ac-713c-4166-9cde-aace1a2cf575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a63fdf-454e-4d9e-a653-58e6128fa7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9f9cb3-4a06-4b49-903d-d7afef3c670c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0ec2f0-43e7-46d0-9ff2-da52da0c59dd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f2a45a-50b4-4d91-a1cc-6873d564a202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500aaff8-052d-4260-ad21-eda0ae20de6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eeee68-bbaf-4cde-966d-f68146b3a7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6161040-603c-4a0d-9553-3209d7d00f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ed5a35-2d3d-4feb-bc34-683c8185e21f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175b900d-9ae2-43c0-8cc1-43cd76280437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104e01f9-fe0e-4ef7-b066-02e4c139d9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caed92e-6838-4334-97a4-d5974f8f2418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7dc2b82-700d-42fc-a942-e6bf20fe4a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1f5d27-3a46-4a83-8d7f-ac9e3470a88b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e38f118-1c37-4e3b-a55c-74858b87ef28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ec25be7-859c-454c-9c3e-ce3359540934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada31a5c-a90c-4845-bde0-21b6a4653e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fa0cfd-68a8-49c5-b78e-47df11d2fa19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9de2981-241d-4c1c-9153-2e0f7766380a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6297f49a-6be0-4b4f-b46d-0f24f0dc2924",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8321a82d-918e-4b49-bff8-97d80b4678e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "178873d4-ace2-49fa-8c15-0dcd0260fb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa077ce-3a0e-4e01-9c71-12f2cb90c2b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9b2f5198-3298-42be-9500-c18de5df3b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda548f9-8d39-4529-ad09-af03786b85aa",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ff69fc-6df2-4b2f-9abe-b28c937c0089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4179417a-28b4-4998-9ae9-a0efa454dd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e345f16c-edfd-4b90-b581-c4b819ffc972",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "856ea358-a3e0-4275-bd03-e66997c03d7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eefd7fe1-67fc-42e5-9adb-79964df58c1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0087f4e-0c78-407a-88cd-eca5d0160f54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03120eb0-31bc-49dc-9204-15b8e1d4cd0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c2dd61c-dd69-49c9-8171-7c4c3237184b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1416717b-c8d3-43bf-bd78-15ecd448c425",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87a58a5f-72a5-4b8e-8c1b-9a95c0e8f673"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d2d8b2c-de2b-41ce-9898-d00877de42a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4f5aacd-0713-438e-94d5-280620153eda"
                }
              }
            ]
          },
          {
            "id": "ceaa09cb-3f12-474c-bcb4-4bea0a7dd821",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b0b8f54-e888-4284-8e5d-314e3f6cf91a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fa09623-a5a0-477f-9e13-6adc52d6933a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4cf3b7f-34dd-4b9e-9801-f09f2619fb5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96a8fd9f-a8e7-43bc-974a-e92fffd0735b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "833f28a5-bdc3-4b44-8e0d-f50cc27831d2"
                    }
                  }
                ]
              },
              {
                "id": "84b79295-25ce-4b84-a301-aae38c4941ee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cdd63b0-200f-45c0-b433-ea204734611a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a7c3249-639e-4850-88f4-d51f7ecb4a02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1af389ee-7a12-4aa2-b367-e8f526e87d1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc6b40fc-4cae-4b39-9e5d-2cb7d2292ea1"
                    }
                  }
                ]
              },
              {
                "id": "c61749be-be05-4a8f-ae6e-59766f3aee5a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec53b5e-680b-4bfc-a48c-19194b1ab4a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39682ab8-0d54-4a43-9d9c-2cf3e8e453a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d20d9681-1db1-476c-8b65-9896c6ded943",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b7119177-0a05-4587-b0a2-489451d3a526"
                    }
                  }
                ]
              },
              {
                "id": "c83d47ba-7593-4cac-8857-5591a95c41bc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64841699-1331-4723-9577-38609008b419",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70967f35-801c-4b12-9393-03d0b3094f81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d93cdf0d-1ca8-4397-bbc0-d3b0461edcd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5856ebd2-9d7b-47d0-92db-a09c4af87ddf"
                    }
                  }
                ]
              },
              {
                "id": "38448edb-683a-4099-b7f8-8fc859fd10d4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bdc88bf-1fb5-4902-9f55-b0da94dfc22e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4677590e-6c54-42f8-a689-7ff5b3c008f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7ff328a-b5ed-4070-bbdc-90b7988f18b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "824535b3-15c4-4c0b-801a-c3429f8fd7a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a44c4ea9-409a-4749-a0d0-3d66a656355b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0bbb268-9e35-4b55-a4d2-6bd9b16707d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e7ed4763-e841-4fb3-9ad3-4c2cbd858d73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bfcc410-2060-4ff7-988d-5a5a0ec62f1e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17178bdd-3101-4571-9ccd-9b9a1e9c35b6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "89979000-980a-4587-ae48-e7b3804813ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db8965dc-9483-4fb3-880c-f86aa39007af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a5baed3-6cd1-4755-a123-d8c394387f74"
            }
          }
        ]
      },
      {
        "id": "69621611-7264-4ab6-a3cb-f6c0c01bbcb9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dfd475ef-0ab2-437f-804a-75618444539b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ec80b44-81c0-46a1-a01d-c6cb143a9649",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d9fa5229-d54c-41c9-be74-6847e0fb9404",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b7b33d-7a9b-4bb8-b9aa-c51404fdd581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dad95d-1d56-4805-81ab-b6b463d7a5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69528e81-1c99-4104-b53a-aee79eea433f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3acf1517-fe96-4be3-8e2e-2e715df2446e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e4e2a2-cebd-4a5b-bb94-595480d61d9d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc12ed2-b189-434f-ae86-cd086dbae6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f58c73b-cac0-44a3-90fe-7f251406fe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90693a41-74d6-442d-a6b8-8c7087b6d432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abe1c22e-53d9-4484-b101-17316904f81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51712cf3-8aa5-42fd-9c2d-53aa1721803c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd68339-1dff-4779-82a1-bc8061e50f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d9f6ee-0c40-44ad-acf1-c44a3225f5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e54da15-da4c-4343-9030-96cfa976900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "766e735a-6be1-4346-b190-f3f021111232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bda51a-f14d-4b81-bc28-3a3084d86971",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895640c7-abc8-457f-b347-8e1659fce359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e634030-e07c-4ed0-b207-ea5c2a5fd48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02885845-7d3d-4193-ab6f-cd357ed45587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e58da8-cdbc-4491-8414-4d0634770e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74dee39-42d2-43ca-9ce4-a7d20ca5f5b2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb639022-d215-48ee-8913-a73895177537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859fd6ad-398d-44d8-a283-d05c31e8d2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bec20d-4cd1-4217-bce8-9fadab3e88e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdc264e-66c8-40ce-9254-63f4a6472e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ad349c-a414-41ec-b110-d32b8de9a82c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c5237e-c565-4338-be48-6a19128b07f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7156ccd4-e57a-4a55-9d2a-f788a5d97d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b3ba0-990b-4e26-96fa-e146c396937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df3070ce-b8c7-4d03-953a-2c20da2bb4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ef8d79-8f75-4b73-961d-04033b7abb17",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e442b49-6b29-42cb-a879-8606d8c65f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34975ae0-2ac5-46f6-8d66-d056d8d43b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1e6ce1-02b1-4471-8911-1306015dcdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf88103b-8935-4ae4-86ec-901e48e597f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd94360-0c77-4b48-a696-f4e4afb854d6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a5585e-3c8b-4732-8b92-9e06873c85c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d317ad25-ec34-4fec-951a-4b27c5252145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7be242f-263b-4d6e-a265-33f812dd0ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf326df-5498-405d-b508-1703ccddfe30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27005544-d959-46d6-9d89-fc9307b177a0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482f14a8-9345-415b-a5b5-031f78f822b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e09b12-d4e2-4e8c-a2b0-d73a407c2e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a045f48b-f612-4cf5-8394-a9f37e88b32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1371204b-2a74-4eb2-8a8e-edf66e772aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7874f1-6d0a-4e96-886e-392dc0e4f8c9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0956c9b5-3bb9-4b9b-a916-2905f8be4c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fc3480-15df-4033-b7af-338ebbf54326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3f04ad-0bc7-434c-9811-e1c34571244d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af06c77-b1ec-4a6e-b0f5-fdd5dc27b187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260e6d8f-dd15-4f0c-9089-bef379b7f124",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb663f3-67de-4c4b-a3e2-447b7ba4dbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afd6e71-e4e1-4920-9d72-1ac2981e1bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a44a39-7400-4c9a-94f8-3607189017f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "32e0fe9f-603b-4b41-ac8f-53696b0b2375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb7b6b6-2483-44b9-83ab-318c522d19a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8bdab0-ff41-4f36-a134-269adbd26ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaf4274-f37b-4d98-9076-07dc5364c765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0c69ab-9706-4a39-a719-3276e8ad68d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0477dd-e9b3-4909-8320-bc4e9640768d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770070f0-42c1-40e1-b14f-423a9b6d9433",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0204d0-7e7a-4b8f-b476-7c152c971732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d635308-32f9-4f2f-83c1-4e4c29cfa822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4635a31c-12a3-49bc-881b-205247eea269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4574c18-c942-435f-819a-5422ec2aef52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a6eab1-1d9a-4fb3-99bc-92185313d137",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d60c00-cb93-44a8-a84e-8767b65c6719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80af5ef9-cb0c-410f-b8ef-d3ce1bf320eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20f50c0-6bf7-452a-b635-b71dece12c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f95f0d6-0a8a-49a3-82ed-996458d49d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28113f3-f947-448f-991a-45340044f485",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eb6b0a-86c1-4dcc-a28e-7697bbc57b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039b124c-4854-4411-9671-35dd78400e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384dd219-f200-4c01-b5b5-eb59d748f176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "061ef1af-fcb6-44c6-8e88-0e4fd282e4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0e3d64-5feb-4dc7-b2ae-5ad2187ead90",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c40327b-9253-4cde-8c3e-c5a24244d98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b87dd06-7277-4f6b-98a7-c8ec91ab22fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12ad84f-62df-4476-8093-ecf738a9e672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee199ef4-7246-42a2-a700-ed7dc5336276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20651c6c-4a07-49c4-8273-488b8224cff5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71101fa-7441-4ea9-a5fd-105b0f4aa73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a616d243-4c0e-4fd8-b5fc-1d3344f7de4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e751fa1d-7b73-4820-8e5f-1ddbc47ae4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4078e4-db6c-4c65-a43e-f3c91fe82301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34543ee2-e186-4714-a391-0401c0eed9f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e60941e-2293-42e8-ab2c-560409aeebb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0054d6-4108-4290-b9a9-9b2d5652d569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930acf48-6063-4855-8bea-ec6d0f35a326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef85713-fe6c-46f1-a464-30c307f954c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6305462c-6fed-4113-85a0-6f41b146c03e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892b639-3eb1-4a8e-9b39-a7318b54a2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345c1ea0-546b-45f6-8fa4-e3d9585afa50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4016b034-de9b-4bcd-822c-e5c1be0cbb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "139e19c6-8c26-41dd-bc2a-d5eff3a0b2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c46a915-b428-47d0-8e9e-a46e8355f8bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519797f3-be86-4fd9-bc29-6f5cf687e38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28a695e-d797-490f-a882-5542354627c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed501be5-37c9-48ef-8166-477d79978770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5644fb9-f3c4-450d-9d69-17adacd77116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2239d496-1b48-4d63-bba4-dd0ee40b723b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940ec2e4-8512-4cc5-9954-53ea7fcca79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad5b084-5f2e-4487-97dc-151ba3ff2fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5088a6c3-437e-4edb-9b81-0760ac51f5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d3b080-79c7-4f14-b927-65d9346b0670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0847f-c4b1-49dc-b408-112d66d77e60",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f674d7d3-4bce-4a91-8ecd-78044ae4366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e3f76b-8bca-47c9-ac78-848696d8bc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792844cb-e832-4254-92e3-0082a1e04f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1ed6ef-c271-488a-bf73-0c478085de13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173081e8-09f2-4c7b-9e12-ba9c0e748025",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1912967-e444-4cb5-a025-7944e48b97a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f921da-ff4c-44be-aa43-5e6028ae413d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcc233c-4876-452a-9ffe-7b8a6f996933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2dfcb0-a301-465e-ac5a-96175d48eee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d71d5e5-513b-408f-8644-237fb7ce8004",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f0b81b-7ead-40d8-a217-f070fefdfb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f51f130-06a6-44b0-84fb-af0944676ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72d4b42-963d-4e6a-8b65-bb7a4a1b0f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4256e6e0-764e-4aa2-a51a-350e4d9212d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165db4bb-a910-42c3-ba61-f41ddb0e3a54",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfa01c3-9e00-475c-809a-7638d369c2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb6c538-dcf8-4f7e-80ba-e829fede73e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d1f8b2-b7a9-4043-9f56-08ef568e7702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e38f6790-e688-4db1-8dfc-6c53cd30ee59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef34253-ae07-4eac-9c68-cfe711ba41f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e96de1b-a939-4d9f-a9b2-2ad9a75876ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d965d4b-9a35-4357-a0f4-48a9179a0e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acff250a-d590-4463-9d9a-ec0611367236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33b439c5-ed01-4f66-9197-a6bfe2eff109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4ba11a-992e-4ee7-baeb-ce2410da0aa6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300f6ab0-a651-4ec7-bd91-00c5ff1ed6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228e58be-0c5c-4dba-92a3-856f63368b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c7821f-4f52-4358-a96a-801e28a8e602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32581a79-e48c-46f1-baa9-97e17e6ab2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58de0ae1-d7c1-4fdc-bdc7-c7bb39e68dbb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29191f35-c3cd-438d-83d4-1578c8405e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7b1aa8-b07a-4f0d-94c4-4403dedea4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fda0a6-5d72-4ca9-a35f-1251e91d6eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47435962-0054-4ac3-b6be-b8301a2e5ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f232f4-8280-49d3-af8c-0ca72f8e8437",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e679d552-0a4b-4cf2-995c-2ed11d209357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba53953-db38-4ecc-9efb-b5b2b6fa6b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e268fdb2-ef57-4380-a432-cad5bd694d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92ede745-505d-45e6-9c7a-8ef21e2c01f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e3342e-3307-4c79-a4a4-c936f2718eef",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c09707-9a44-45c3-8df3-3690b4340ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553e4802-425e-4b1d-81e4-18ab0c5740a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4db0b1-5f98-4e8e-b571-964ad819a22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f62707-7cf3-4b3e-8262-715a34d67fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80328f8-aa9e-419d-bfce-3dcdd5ab350c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071c510a-e701-4d0f-b8be-601e21d9b196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a3b4e3-13ed-40d3-a77a-3aff4290f92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2799bee6-c814-4115-aba9-a3bad361170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4aa647-d372-4c48-9292-d2e67d8925e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f7f7f2-59a2-43b8-8c4f-2cd4a1a709f3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64361e84-9c76-4f10-a7f6-ebdce9b3770c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9994a795-f8b0-4385-980c-aa6a4c8481e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7c8cc5-9c64-4007-857a-2e76888cf590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7836f81f-9616-44c4-9a63-6f33001fb152"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee357de3-86bf-415a-ab93-d3045f3da906",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49095f28-a34a-48b0-a9b7-810bb845873d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c0aeac-f6e3-442c-b1f3-2c880589ad72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f0ac8c-670a-43ae-8be3-5a6a4c4e95cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147659d6-2073-4065-b116-f76f2cbb460e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a93b361a-cb60-419d-8eba-6992b79e41ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b478952-75c7-4b6d-9f2b-f9239e1c7820",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca7ea19-12d7-4428-923f-80bbbad1a574",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "190f843e-f4a1-4474-b4bd-5ff736e3e15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7899fd26-5f7a-4c08-9336-133b47893968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e33471d-29e9-4f48-8168-59bdda501658"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fadf14c8-8b31-406e-bc43-5648c1e0741f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3aecca51-9962-488e-920e-0bfc8b6bf810"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e61de55-81ad-496e-9427-26e63d185656",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1609c1b0-cc6f-4a61-937e-99277023e5a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9971cfcf-6d14-4474-ab34-05291e468cbf",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa5fc7cc-8735-4396-a779-f165abe42cf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a563c813-7e69-4610-9721-2499de046cbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c845011-2789-42c5-bae7-58637a4e1406"
            }
          }
        ]
      },
      {
        "id": "b7764c9c-b7b0-44d3-9e13-563f4c8ad79c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b98362b6-82df-4c78-819a-26ad9178297e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94146ba2-6da4-474a-aa91-8a21a2c56252",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e09180c-5952-4f4c-abab-746a331943b8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4214a62c-7de8-4a4a-bb1e-f5da3359f9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29b88ae-75ab-4c94-b221-d8be8e20ddae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269feff6-7700-438a-a2ed-c9c917dca0f4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02082ff8-000e-40b8-89bb-51df067aa02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6225ad-a0be-4fe5-bb6a-2e5fa1b557b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285f0cb8-48e0-4b85-9bf7-fbb5c0e27c31",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4327ba4-e16a-4843-8fb6-8bfabe9b9279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3632e19-4fea-4ea5-8b64-4eca31f8e5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ccf3f3-ebcb-4eca-8c5e-cb7eef8c0d84",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7580a35-04c3-4b8a-bb37-e9d94c9e919d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e4d0e6-8b5d-4580-89d3-a3c54a27c056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea410e14-1244-427c-b6ee-1259cbc00928",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096c7cf9-1e5a-4711-9b8e-0c01a8dbbaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6555e14a-7792-4216-aa53-f0187c6590cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb837f4-4291-4fb9-8bed-eeaea88d22f2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c89e1ee-e5fc-4a61-a621-506293ab8ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b90c6a5-3c18-44b3-b601-54820315b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47f80ff-a772-41d6-a118-1966209c578b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e654ca1-4f05-44f2-ae9a-7fd463278b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9366be2-3eb4-4752-932d-5bcca5c6ff7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4208127-cb59-4902-ac41-b354849d3c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4924f1-910f-4df0-adad-33c2431184e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3129d6e-f7f4-4fa2-b6ab-9c79e50e55e9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6deeeb5d-07c3-4ecf-9c62-3590314d18bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd307849-558d-4a05-8be6-b5f873b92732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d574b9e-bd4f-4a06-923b-2adc3686f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7399bfb6-f7f3-4a91-8b60-55cca77e935c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28240321-ed64-4287-b279-84f642e6c22e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50901a78-637a-48a6-82a7-61e81ff58300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd668e24-6b81-4b93-bece-607b4aa7a99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88096625-62c5-453b-913d-80bc3672d442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b65f4-4734-4ab3-9b53-ffdfb7045b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ecb11e-d5ee-482f-a256-a958cd1af14a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea31a117-b6e3-4c54-9a67-bd09e0857e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a41ca92-1059-45f4-9a14-a943bf299063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fff63c-5c33-4e94-893a-122a6a4763c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21330066-b44c-40ce-a3a4-28813ae6a7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b963fa5-5b20-4e44-9eb2-d0c8ba4167a4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989dda8-4c38-4679-a2b6-8d43ab36594a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ad3ae1-f65c-4478-8835-187955885160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4347c728-3c01-4260-a4b3-7db11b7951bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b996e538-c365-4560-a8b7-cc2485ebd74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d11a5e-e18e-4d36-973c-32cf613e7128",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8bed33-5102-4cf5-b1f0-b1187416341d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b515ae8a-b6e8-4aa4-8ad5-4ef32f775066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5769da-a941-4e1d-ad0a-2e4dd521175e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b069f267-9453-468f-914a-7baec276edde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a5c2c7-e39f-4d55-bcc3-555812d01bbf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52acce44-858a-4850-8bea-318d70f13a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1def98be-efa4-4af5-b483-e96e3a901467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a943eb4b-c295-4f69-98fc-7a90a6a3a50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a12ccd-3993-46d3-af0b-dea01be1ca7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16549fad-506a-4593-9a7e-55f6365f667c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5949a931-d03f-4e2c-9af6-c217187ceea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f12030-6df4-4128-bfed-effb37f30944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f5c022-30e6-4fc4-8af9-e3702193a98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898c48b9-ab8e-4680-b2d8-d81ec272a295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed9624e-5e28-4db2-b50f-7e2031b393eb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647e9ec8-9114-4180-83ae-1c03f9918813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95470c3a-5a13-4a3b-b63c-ec9c4c79354c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8bc330-d0a8-4a42-85f4-e43ae50c1cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bd5769-de90-4845-97c0-734dea398621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fa769b-5780-46e7-8c09-c409633486fa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da813db-4574-4599-b737-06f50e29ca4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8111a62a-3275-4dd3-88cb-8052f817030d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88af7fe4-a1e1-46fa-897b-e7575b164791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6275f08a-96e1-4fbe-95b7-78aad93430ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f503d8fe-fad9-4965-9af4-0fb187072937",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cf724c-14c7-4c85-8e0e-91cbde100983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6de9bde-f395-4088-9845-a1be5813881b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bea1b63-be88-4718-ab7f-7dbf33f33fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb6a764-4325-4749-8405-0b2a4f21bccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd667b90-c277-435c-95e5-1060585b6b03",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916ff7ea-5498-4062-ae4d-083d9ccc31d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0ea427-0f18-4ac1-9f45-434a2603bb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5757e6f-8e1c-4440-8d43-380e63ade026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29a68ed-c0ad-48d2-8665-fdacf1096f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a445bec-e13d-4cd5-b1f6-01b5b19d1e29",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf33b8d-c5b2-4c08-a9c1-11802eba7762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b346645c-ec26-4657-b441-85e498b1fc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29fb1a3-81e6-4daa-8627-ee2a70bf01da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecf85d1-9641-41d9-914b-eed7c79383b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2045e897-6bcf-4cc2-87dc-e81f641ea973",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b291242d-ac79-474a-a0da-db0d6c2c3414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935106d3-5188-4747-b845-4b673bfdd65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c244e5-f5df-41e2-9914-7a48b3bbb565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aef35a-eff5-423c-8dff-91f2952ade50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1006a0a1-4afc-4733-8f9d-3ddeb5fb530b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a77bce-f84b-4250-aebd-be78e65b5255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ae8883-3331-421b-a2a1-e6df6117af51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e364be-e3ea-4f78-871e-1000dab87b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609d44f8-8ce4-4386-9e66-102a9bd9b8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f616e9d-3e59-434e-9f09-1310afdee250",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4e435a-16c1-44c9-9d9b-26247521d578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2330d1b-9861-486f-9df2-f0ea17b8a79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62add8ca-5e6d-42c2-bdf1-3f27b2628d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfb674b-f500-43bb-b144-ffd16c83d9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303faa53-d95c-4af7-9f5e-8846cf5f0a05",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ce5596-f1dc-4472-b3ac-8fec5e5b9f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829fc3ba-52e8-4649-a201-4f094958cbe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9938f4-c396-444e-a892-0fb065fdd52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1393af28-6685-4104-8037-c09cb6b8b0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9f8bcc-68c2-4760-8086-7b89bb2ff435",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccb5677-4ed5-4ca8-956d-546256e48bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61a5923-80f4-4dc0-8884-d04c7ed6bf0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f50941-7b89-44cd-b2dc-723d33da3bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d471b57d-758d-441e-82c8-b0004dd03815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04eabb9a-59ee-46be-b98a-f56e27242352",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758ee51d-f1bd-4d80-9385-b1d73e884705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6124fd-60b0-4f49-a023-c38572f95b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b16cd2e-ec03-4f41-9aca-23734aaa50ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef07d59b-4448-4fcf-8f6e-ac900d867a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e401edfd-e87d-44c2-842c-0b0c8ecf69a2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9e3ce2-09a3-4498-a078-b52f7d97b49d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a4b9908-8e0c-48cd-a3b0-464870dae469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5507bcec-1782-436c-9e81-d6bae445c28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9648b7-72a7-4ed9-88cc-16534926053a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd9a3a-dd59-427a-bae0-eeeb40fb6ead",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8ad732-8c1e-477d-8714-3cab9fda4510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873b5934-3866-406c-b86e-7ad69c334d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e04aaa-2d27-415c-aad5-d132d7041d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8252bef2-af1d-4c22-abd0-e123ca1acd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33018cd1-7628-4232-b2bf-b7aadc2cf00e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc5f8a8-2031-473c-8c3b-951caf0ea19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d064f1b9-9d0f-4c4a-bf41-05c1da385aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b949cb-a2ad-46dc-9085-67f79ebd0c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097184ce-fa6f-4f77-beca-0d1a004304da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd08dff-26f2-4756-8c7f-1aecf420353d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55afe2b6-00d3-458c-a57f-554d8c8f1e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0962195-7536-4862-ac57-e5458ce54a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881af586-b24b-42a4-b7a8-ab8dac8cf070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0043ed58-3467-4ded-b2e5-502fc8a1af7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22db3307-7a7c-4fc0-9f76-671f5e1085f4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e326e8-308b-4fd3-bb09-4caaf7d1492b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "814768f6-03b7-43ba-80ab-82f01558ef23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0915b3b5-61f9-4bf3-ae87-b4bbacb99a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d87ba4-c966-4516-8333-99939391fefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebf2927-79c8-48d2-84c4-3304f7fb6b27",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b59252-ab4c-4996-9533-84034aeb4a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8fc53d3-a881-4e19-ade7-f5293071a7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14afc0a-a7ad-47a9-99d5-ec0e1ebea7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b97f4b2-24f2-45bd-90af-b1e9bc56eb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6bc349-b713-47f9-b7af-18f9ba78c4a3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceddcd6-8ca5-4cd4-b801-a0686c371a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfc18588-7fec-482b-a5e4-dc795b2957ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfecf89-0e4b-40b4-9856-ab1ee84222ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb391076-496d-492a-a8b0-5579c4618f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2374990e-6e7a-495b-a751-a47f0376ee88",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4e5dff-b8d2-4e75-8bce-88a6086c6dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f8b392-e048-490c-89d7-e10d851c2fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a849493-7e02-410b-90c4-bbfce4a2de7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535e453c-2958-4e9a-8509-b0005d9716a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de61e3aa-6fac-434a-8a1b-cb34e1c69096",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a189ae13-55bc-4c43-ae3f-be06ab37fea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65b0b9e8-bbdf-45a8-8647-3c11b1013e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98238469-19fd-468e-8584-a6628540344e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbaa7cf-fd7c-47ef-a295-96b5e92ffc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11474bd2-afa6-4d3b-b033-1b8d8f0e7c03",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a91cab-5f96-4039-9815-809b1b7a1237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b24d33-60e5-428c-b790-60f752a16dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9748b675-4093-40a4-adef-1bb946cfda60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b94acbc-1cff-42a8-9c1e-e46d4a089c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b406b5f-bddb-4d95-ab59-b2a387d5babb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8686b46-72e1-4a53-b80b-ed62b34e4546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c1a89a-01d7-4316-b12f-cbbdd97aec84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dd4f75-c7ec-4a39-b625-29180ede27e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f39ece-3af9-48f0-82cb-76608c969cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aec1953-060f-4b89-82c1-9463473b757e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27857a89-2e32-4f63-97e4-d37962b128e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3885be-6f99-477e-a1a9-e06dff324293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65839db-02ee-4af1-9544-0084c2aefb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae5edb0-d427-44a8-aff2-bede709b5fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccbd382-11a0-419a-b597-7f872d1c1a60",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d398e00d-1946-4375-8327-c9cfdaa25d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc9077e-cc40-4ba7-abc6-d155d537fc17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd533d7-bcba-4907-9224-54a80c6f847e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4cf370-e952-4c00-bcd5-06ab9bb65854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1b26aa-3a1c-4c44-890d-16a3e32fc926",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc8760e-2253-46a1-9dee-341b83ab8d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc49c739-446e-4a09-9da6-2a5c671a127d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ad9195-ca7b-4b86-9b75-533c8cb1c9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb66aaa1-aecc-4767-9032-037b744fb253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d24644a-4a3c-4d87-83c8-676970ab1f5c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fddf398-c571-4631-8912-2860f39637ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfe6f37-c86b-4b44-8087-ba14a401026f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342c2d99-78e4-44ca-9523-925fea8c7262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02316c02-986f-421e-b799-786d4c1f96e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d1de33-3c17-4d27-bd06-4ad28a2d3772",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70c5538-c4ad-450c-b312-c6d6e4a4f301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed00b44-f676-4b50-9c13-d16f8750f71c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc5c48b-4188-498e-ab4a-6520cfe2cf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9bda20-2745-4548-9d54-d6bf24028318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f8d620-3ab5-4978-8843-3c0802958ce1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546e0b76-af10-486f-a7d7-ab5cbf3d4a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e3cc1b-2b4e-4037-9839-eea88fcb0a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64d397d-5b63-4697-b77b-dd9420785d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8a4e01-9f65-48fc-b80e-910f416f50c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10dd89d-5ccb-4784-82bc-d0bcae3626c8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dc5d15-0895-4619-bf18-b296898a277c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb45fe7-3678-4e2c-bfad-fd6677e4e020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3b45f0-6f81-442e-b80a-eb634fd91d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f96dec6-0db9-4670-a9eb-fde02f13db28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640f70be-c6f8-446b-be39-af7ac5b44db4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb84882-ee85-4a58-94bb-feecb4e2277f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136f56da-e0e8-4a47-8a75-49f0192e7aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1ef5a7-f70e-4709-aaea-09b5039884b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7665c34a-03f2-41f7-8142-34c7e4b0a5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8971496c-72a9-4551-a99f-487b39b99ec3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f4bb17-b2db-45c1-869b-3ed762eeb5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19aedcf1-9f05-45e6-9a3d-4d6787ff6366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1906484-217c-4de6-8e1f-7b6f21f98469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f23538-b25d-42ba-8bd7-1cf28d164b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cbe0ff-710d-47c8-b6d3-e58a1d2da92e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058f4c2b-2697-41b0-92f0-f120c0c15ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c86c5b2-7edc-401c-82a2-1864b2960e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52316c22-36f9-4b45-9733-594f12bfde31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55adcbf0-8dab-4ce1-b970-2b04f6fd15da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3052941e-3346-48f9-b1ca-e19f73d85718",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8431ae3d-a67a-48db-a049-7104e24be8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9acdaa0-02a9-4676-9b48-807001f9c8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b426f2c6-cccf-416c-bf05-5ed5f155d1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76407334-360d-4239-804a-8f51f87ecccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d826792d-d4d9-4d1e-abbd-ddb7a0474c33",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90de4db3-d21a-436e-99c2-d51dafec21bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78991ed3-f428-4900-bd7c-7cc9002cf893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cd1ed6-bd09-4664-99a9-f836845246e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95688c3a-5c92-4a70-a352-913b8b4e1625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa940ff-47d1-43eb-b430-b0975eeb10a5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04a7471-027d-420b-9120-4d574c1c2ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1140b2-c5b6-4b29-b735-c7d13ae40c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a919e731-9272-4ed5-afc8-16dc54e0e4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b733fc-cb66-470b-b5ef-7c642da3da8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185e7466-ef54-4da0-8e86-a455474ac2e5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811f07e5-4f32-42ae-9bd6-8423da98f642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62ab743-32a7-4502-aef3-afada5b4e723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0a8e6b-ff8b-45ba-8b0b-ded3d67a2879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc832f7-1e4a-4d5e-bdbb-18e4957c4515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9f9e70-312f-475d-ae23-728f226aeebf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3c46f9-c5e0-47e2-a347-17dcaba0d8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aaf1497-d90a-460c-b8bf-c587c8658e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc657dd-86b6-4176-a5f3-7399ad9317d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c48e38c-cafa-4411-a459-0b5e4bca0aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185f41d6-50c8-42b9-866b-782ac0864c86",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046b4796-0587-4fd4-be23-2d063e37cbcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fb20a7-25a6-4a40-bf59-b0c38b64c150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b574d38-c318-4e84-8b6b-9bf6aa6a0edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ca4c6b-68e0-48ce-be85-23a5636ad859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae904c42-2815-4621-88f1-a09771992c33",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31699ef-f019-4158-bfa5-c2f407433322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517e8684-b95b-424a-8bfd-e94ed80233f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368fda66-c379-4c89-b0eb-1e43864a6618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8668bf-f02b-4211-b16a-cf49ab20ef38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63ba09c-4575-48d8-bb39-664fae3b96af",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da7b7a7-7096-4324-8ed5-d996137f11e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb7e81b-ae1b-43bc-a111-e6657ff59a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e343b6-a3ea-494a-91f1-3af4b13423d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa277a27-b121-4f41-a02c-fe1f57d6b0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9e2808-fe55-4650-acda-5893e763a9a4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbd0e53-f63b-40e5-bd10-3ad5c6a4be41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec81983-f302-4ecc-9485-0c67745d4105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd51621-552e-43a4-8cd2-c767680e8c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364d21d1-6e4e-44d3-9b2b-a4fcd1041149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb3d238-3964-4bed-b1e7-921c0a698fc6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d52746-b3a1-4095-a515-872e431165cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bee9be-372a-482a-889b-f230df2289f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33829d9-4f99-49be-9495-be3fe082c4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb7b8fa-e880-49bc-a3b1-d950591cffc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa42c2f-bd02-4384-b2f0-26d4410db021",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cc7e7e-ec9f-43af-8fcc-4cba7cb36efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c7a22b-70b4-4e58-b7b2-668fa06f366a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58857107-9335-4410-afbb-0313e26521e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5d9eb3-ea23-4249-9a67-441425fec284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8edb96-7e40-49a0-bd5f-9d44cb02eadd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a0e62d-f11c-4800-badc-b5427865caea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e3cf8c-bf9d-4c68-8999-98927137fa6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5a9e14-27a6-4f44-a277-95db2d205cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d5740b-17d8-4bdf-84c9-5c988321896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85005749-f7d8-4748-b6b2-f3f4065e7dc9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b7b146-6879-44b6-abd6-97cdffe4067b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c96e02-e00a-4dc0-b9cc-81a90e506cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20dba69-d74e-4176-9f5f-211759ce3128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b728586-d6e2-4bc8-89bb-9610b7726368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f79558d-6547-4f6b-976f-a64ba76382f4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5acd9a4-6ba6-4bde-9f79-0505cd6401b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702d9a8d-cbd7-47c6-981e-dfbd1f0af5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c248cb65-d3bc-48fc-b899-b93276932c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aee2543-cd95-4b3c-ac07-d3322c72c213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30145aea-73ae-4bdc-acdf-ceafdbae8512",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2348219d-fd3a-4c54-a222-d4244e72aead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a580e09-5de8-4d7b-be9b-1cf7675adb97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9a776f-bb98-41a1-bbf3-69843b6cedd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad61004d-f485-4129-b339-5584b3279644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504483e2-e8aa-4a27-93ca-88a57158f91e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34f3fe9-3c33-4c2f-a623-1a03e4066710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716b4661-8adf-4aa3-983c-599ce30969dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a89d1f6-ab90-498f-a57b-1c76c6f96d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc30a6a-d8d7-400f-adcc-799c71864285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272022cd-4376-47ab-a20e-28e1ab67dd70",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d255e5-da46-4a07-9f7f-c659b273e026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a66d9fb-2e07-42a5-834a-2efe901c7727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dad7709-ec09-440d-96dc-3cb585896fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c058a1-ba9f-408d-ba06-cdd4f3695da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fefe2b2-0574-4ea3-87c3-cddafbefe2b2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b0fa8b-cfcc-4204-b2dc-8d2189f7fac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501ab15f-2720-4753-90c3-8b76aa6efc73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e53b40-bde0-4a0a-a614-435e7c5ac322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe76b36-0ab8-4f6a-afb6-baf2ff79a149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252accf6-5675-461f-b203-1bd10c469e32",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1227fe-92ff-4976-a2c4-8613db6caad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3da890-b6ef-4d0b-b76b-a91cd78637fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b025fd9b-d791-448f-846b-847f3acc44bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5846e4a-0c67-46a7-a916-d7b3447afac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d9ebbf-c43c-4429-9277-b3107e0db911",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cdae44-2fc8-4b62-a4e4-574dae3dab4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f5e250e-62c4-4075-966a-715a7fc225c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d601636-fc6d-4f2a-aae2-a185b49bb8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21d1000-796c-4b5b-9478-432023ff67b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71a7137-65b5-4d2e-8193-6a68cdc72b50",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d3219e-4ffc-4399-832b-5f3f3e0151d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7261cee9-44d6-41eb-8ddc-f8e76f205b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa44e598-bd6a-41ae-8b08-1e7cdb87590c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6b6d66-2a57-4262-bf2c-aea40fc09800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e446a60-67c8-47bc-9be9-0d1f09a5cc73",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0085a29-3c0c-4b6d-ad56-1606c698fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708b43e0-58d4-4edc-9323-b61953ce73e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825aea0f-c4cb-44f3-8ca3-575341f4d90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836f0dcc-4c6d-48c4-ad34-ef573a295eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2497977d-d07f-41e1-b3bc-1b5c6503dc43",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fdb7f0-be84-4d2e-a7aa-a66e59f456bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4201217-3a1b-4924-bf9c-b6d6bd73104e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a771b2d7-26d2-4321-973a-9a3a1fd06d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd1a0e8-f5bb-47e3-aaba-938ca021c441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27652f84-c02b-48e2-861d-809e910dac50",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce90db2b-8113-4143-97cb-7a5c0b024d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4365607-0276-4adb-84f8-70262d352c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21513316-e0c0-4e11-aae2-7111be87625a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bcffa6-332e-4343-a02f-d9d88286e8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1505f68c-31cd-4f55-a924-6f42638fff11",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d299457-54f0-4cb0-9d4d-d9c996af90d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd428ac-6bfe-45e3-b725-38dc7cb07338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4721f22a-f085-4cc7-b3f4-2d029ec9b8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2048555-d213-46b8-a746-6762522f5330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6015f8-cd27-4bb1-b7e6-6c41d04451a9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74ec985-418a-49c4-bb91-d2475d027954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca09608b-34d7-4279-83b3-964eb3844d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c33edc5-ffcb-4914-874f-091b2a87de65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443b72fc-5f18-4b6d-b20d-77e738437dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610a6cdd-36f5-42bd-a3ba-9441e15052f7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d0be97-72e0-4468-bd04-dce809e56899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1060362-67d3-4e2a-97cb-0f157c7c007d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a6b1a9-a981-4045-84d4-5fcc94706820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4117edb-6fa2-4be1-b65e-547305e35e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149c1eac-ddf8-49b2-b17c-8bfe3e0f2bd5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a750093-50f1-44ad-a037-16769ef29537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "510988b1-ccb2-4a51-bbc2-0b4ac2a4b9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd3e264-9a22-4b1b-9575-26bd349dfa04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685b80f2-feac-4502-bece-78f9db96be2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77acd4bc-a5b3-4429-b800-565ada23c374",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48b7040-5e40-4314-ad7e-35c711c190ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd976728-b638-49bd-8a36-12494cdf3b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b96867e-342f-4f6b-ad00-7655e76ad40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94e0d59-d23c-4abe-9816-3ce5de4abc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cb343e-69dd-4e47-95ff-caac5559dae8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c077f72c-4231-490c-a8a6-9f35359af707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c39eff1-e70a-4229-83e6-f5355a4ca433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4e7a3c-c6d7-45c1-a9ad-e408dd3b9282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23be424-f1e5-4c40-b60a-82489775128c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25fec45-07fe-4ff0-9f0e-c8bd80683904",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a33cf3b-f7f1-43db-985a-6d41d95f7f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41fdd5d8-7a0c-43f4-9f95-0dec3db7df94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88896665-984d-4c41-9a55-8c382fd69c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef92a8c6-3582-4948-8e3e-a352161116b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f3b949-9f1d-47b4-b9bc-4edbdbfd0be9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32e014c-d782-4b9a-aac9-58c54fe8cfe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7308469-2057-4647-b933-f85ffbb86c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9137352a-a7d5-4a4d-b694-001301c3b2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3d8bb0-abdc-46ce-874c-6befb6820c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb26b064-f897-4efc-a90f-af675fab36ec",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a57d16e-ee71-41c7-a159-4b99890b31f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96d63e0-9b9f-4ee6-a8e9-d953a1b042f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab200e13-0ec3-4a2a-baa3-ae14509ab127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af736bc-1405-4476-a836-33e44ce7c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ddf067-7126-479e-8ace-c50922321249",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a06185-15cd-4f14-a53c-c6aa461a9f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fa1700-f45f-4fae-ae86-ed4b534e3945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59280739-48ee-4e5c-9459-5130a81429e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add12da2-cd77-4653-a52d-5cd188dd3b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4849e90-1183-4c5b-bab7-90550dcd2642",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2e8810-f4c9-471c-afdb-dc0401ce104f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd910481-53d7-4315-983e-2d0c6d7e9fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9774e6f-abc9-4ec6-b53d-a160787b4dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a72fdd5-c662-4efa-8f1d-0ae2afd93a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d676d24-6d83-4592-8eb3-14c493dc4c20",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a3c298-760e-42a5-8687-fdef60661b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "347eec78-effe-438f-9c4c-60d154263590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc474ab-1fcd-4c60-948a-cfab6ff32f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf1190a-1996-4d86-94ff-6f80a2eeebec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaaa0db-eb82-40a7-ac76-f8aa407bf3d7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92686f3a-2d09-4bde-96b7-80806c4354ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b54fb9-648f-4910-81e4-b4c99cbe3fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28352679-9bec-4ac9-9d92-01f5f850c3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e219f1-5383-4b47-80cd-7385c220488a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0bfffd-04fc-41e1-b1df-916d7a00633d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff838b3b-6ea2-4f97-bb8b-f885e4092d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f7b765f-eab5-40f7-8ef7-86b668d40574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3bf5a9-4288-4deb-8dc5-df7e5cce04ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb00948-cf2b-43e3-a134-19d20471500a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124bf61a-61cc-4a8b-943b-e3d7b9e00117",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d981858f-74a4-48e9-8628-90de8b5f87c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4105d40d-12f4-41ab-b6bf-e09038210f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab3f986-61cc-442a-ab5b-1f9029f22467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d1b4b6-2def-4e1d-ab2d-caf540944f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22f5a36-c878-426f-9d75-e6500b6a0664",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfed0af8-7196-488d-b1f9-42e9834d4deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c9d8871-1d1e-4b4d-ba28-39599380c2d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9a79f4-309e-42b8-9787-56a270121513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dd7ad9-e7ff-4d3d-b06f-4c74881ae90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b7a64b-ea6a-44f2-b1fe-958626416e4a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cb11cf-2eac-425f-bc7c-00864836615a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2419e584-a883-4ac5-a85e-97f44ceac79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba3fd8d-8810-4de9-85c0-40b4aad0a1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f40188-d75a-475f-9a8d-9baa556348a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d8fea8-669a-486f-97fd-e95437a9ad6a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e662d87-6fee-45ea-99fd-4f1d93d5c14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a30b264d-3e04-4b21-a37e-e9e52994015f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e49bd66-ed3e-4b3d-8a03-4ab3b07e5459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c72be9-8180-49be-a213-6f4785345c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de440d5a-32a9-4a8d-b0b5-ce2e4ee40d27",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4ff7b5-a5ed-404c-a683-c18e184b5378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e2f50a4-75df-4252-9878-5168fb40c70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fff4335-4ebd-4862-9273-39798e419056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b322c2-b7e6-409e-ae4d-a51503ab7e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc0d600-e3ef-44ee-9677-9fb078014229",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161b1007-10bb-4008-af2a-fba2015bf0a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46a4f05b-80eb-4643-9ead-bb50f378d06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e125e512-3248-4577-bc48-18b2778fb377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ce65ae-22ee-42b8-8e8f-762b167a9a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e88c878-3c0f-4cfa-afee-a5f5832d2e84",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5feca89-9852-4da9-bef0-67944f3e1305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b111b9-b613-43c4-b64f-49811815f95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d17c77-6a9f-46db-a6fd-9d5321e10ad4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fecc13-0108-4300-a4e3-eea25145e6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf97dc69-4f47-43d5-ae69-531b1e4f80d8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc66b8a9-d307-4461-b477-f7dda1f39a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de915dc1-ef3d-4a09-80e5-a8415931d4bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba82ee78-7f5a-49f4-be48-0253e5186048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf41eca-1c87-4759-b570-ff92062fe121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f1c5bf-ec11-46fb-a68e-402bddfa81af",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f647b933-536e-4bb7-ac52-c22259eecc77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac05faf-611c-4f4c-bf7c-01342ad06b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee33d5f4-7ca1-4f84-8ed3-36c8f3f305d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42ad2a9-3bbc-4de6-94b8-2b71ef8171b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5451a38f-3868-4755-9305-e11b78643d6b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3837ee4d-cdc2-4a2a-b6e6-eb8e50e1b6ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56074463-9de9-428e-b6e2-3a12545fee32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1ee1c0-a58f-4170-81ac-84eac0df5541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626fb252-f49f-4a24-90cc-6c1626f59901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc13f5e-4661-4685-90c6-38f4a975d103",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed72781-2a1a-4ef0-94fb-bcaaca857e0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993907d8-450a-45cc-b61e-57cea01b22fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7dad0f-4fec-4b6f-808c-92cd49e86475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45eb7de-e350-459c-a370-5dab730be0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48338f5f-7be2-42cc-8dc4-70cdb34d58aa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd32fea-7085-453b-8774-3b2fd3c3dbc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21a96e52-09f4-436f-89c5-1d5c9e496111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05542654-35a1-4cef-8a58-e653f5945cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7750e341-b996-4a7e-b5bc-d8736338c560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebf9b8a-892c-406f-bb0a-1fc5bb924082",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06054bf6-8258-4faf-a52e-e47dd52fcb08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd9c4f5e-fd21-4c08-a37f-28e24f9f6fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92ae8d4-1956-4ba4-8309-9af781a6be27",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb751c-8af3-4c8d-a22e-25d4590c4bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b7d220-6e60-4d10-82a6-6a5bd41e27df",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bb94d1-7248-4530-9d43-f89f688fe076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2014bc97-0981-45c8-beaf-c79e10f07ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817f34f6-f831-4418-a787-902583d07452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f841f5-e122-4f92-81f7-6c768c8b277f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8192224e-4189-4ec9-a980-87e841ad0b02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d00c381e-cff7-4f4a-af4d-b2b3d739caf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2be7368a-b781-4568-a285-b20d5cbab0d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "837dbdfb-a6d3-4827-b209-249768a4db4c"
                    }
                  }
                ]
              },
              {
                "id": "4d07d641-abdf-4932-9db9-e9c318993757",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45eb73c6-dd46-4f1e-90b5-1baadc7ea7ee",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4aaff2-38ab-4b70-ada8-67db23b9f415",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "015a3cdf-22af-4c5a-ac05-6537ee6c8b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26b7ade-0d32-4bce-93ad-8aa5949e9af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc8065ef-7b5f-476e-aeef-0a6f79f1a4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa92e32-24d2-4a03-ab13-720901536c9d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b996700-f3bf-42be-896c-1b46da9e47da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13569708-ccfa-411f-a535-ea127e14890f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a9fddb-7bff-43cf-800e-55f65ee2e1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "733607b5-5fd6-41e9-a6a2-40a33bb3958d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6a7001f-59e7-49a8-b495-e1f6db80f138",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e91b18ed-083b-4d78-adfe-e48292897350"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "935da42b-76f7-4450-bf75-f6060bcd2c0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62fa69f0-cd4d-4c84-86be-5674ec48ca0c"
                    }
                  }
                ]
              },
              {
                "id": "ee8e7e43-234b-45e6-802d-f702fc2840cb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c2e00c56-086b-452b-8f02-fd59927ed6a4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7891652d-757a-4aff-ad08-368725dda8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4c71318e-c0e5-4e81-9d90-e91cec53d55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75639067-b2f5-4723-aeb3-c061ab975437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fd3b9e-c8f7-42ad-b025-95214b1c86b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "700f56d4-7083-4ff3-b2db-cac12d9a370a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9cd709c0-df16-4547-9cac-26270bd02110",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a611ecd-7390-46c6-8498-a83f8bef4dbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2a21419-c184-4b19-bfbf-1bccb9269d3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c47cd58a-84f8-47e2-b694-e6fbf6a95b2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11747f12-1207-4c24-ad32-54107e6d0e3e"
                    }
                  }
                ]
              },
              {
                "id": "3922db08-3082-4386-9394-1e6ddd15b51e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3305b60-1fbc-4d2a-a814-d6c409d627c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "432a05da-7eeb-46cc-a0ff-41aeb4758426"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39441122-e3ba-47f0-a8ec-3536ebd57eb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e83d5ee-aa85-44d3-a755-5f10675ce8d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43767c25-a392-41fc-a93a-5159009c36d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f293f7d3-308e-46bd-b1ba-a5328ebade02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efdc7730-8dd9-45d0-902d-40fe70f7192c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d930ceec-bc1e-4d2d-b524-c734661ea2c9"
            }
          }
        ]
      },
      {
        "id": "25c4607e-aab9-4b36-a31e-5f7683ff147b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "24dafec1-2b3a-4d65-b21b-de57a13c8afe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ea372ec-a958-4883-a759-f9cf8e24c107",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e64986-aaf6-4fdc-90fc-263bbf2458ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bdd29d37-88f1-4edc-9af2-cc873b2749dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3354b4c-5797-42fa-b615-0daaa687b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7526f5a2-221b-48a5-9c3d-7ed2c527b991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4a1906-4873-4c90-b050-c05896c141c5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3b4d56-5370-4d30-94f3-a0ff4558e202",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29f6152f-3a76-44bb-8c26-e2a0fda12e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c88f8fc-613e-4c8d-b024-8ab4c4e9737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "832d2f75-fab1-4d1f-890e-4ee50de0f0d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3efe5830-ca71-43d6-b8b9-666c2a7b6d09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02882970-08b0-409a-8d14-4dace935602c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "537cb903-c15e-47c8-b0df-16f682ad7dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b1ee3c-9aea-4c58-9b77-ea1f7bf05504"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aeda6aa3-6de1-41a3-85bd-36a54869f08c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fb59a1cb-7e34-4137-94d7-6fcd36c93e90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fcdadc8-6f9b-459e-9642-d3d5f01d655d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b1b9a6d-16ff-4d28-b10c-1a370021e46e"
            }
          }
        ]
      },
      {
        "id": "4558bee4-16cd-4f82-93bf-36b3bfba4f9e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b9af210f-1f87-4ff7-b541-66c792c4e5cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7293fc8-78e7-409b-93d9-53cd21516ee8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "458e0d0f-541c-43f4-ad0d-9cdc34295298",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1905c71-0994-40b4-953b-d22c5e7ce0b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "91d3fefa-55d1-43d5-b35d-f183772efb57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51facc4d-7529-41b6-bfd5-43a4bbee0450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dee93741-a45a-492e-8d6c-d69982c7f699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9543f9c-9b09-4af1-8e46-cd2c8a58695b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaed9a56-71ac-49c9-bd93-6d384e720005",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f98e37e9-cb78-4baf-ba39-81f0f42acae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0332a4-dcc9-4b37-89b6-0632130ea5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ca9631e-fb5c-4337-bd49-a87ad9f28fe4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e470d10c-cddc-4aff-b3c9-cd2251577e56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f791c788-d148-41a2-8bce-265dbf59ddc4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a578214-09e2-48ac-be0f-fac126208b96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ac2ae0c-b70b-4a0b-9e92-82537284e793"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a13a8853-a037-4150-b61f-350216427f30",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dab75b49-407b-4eae-998f-6efe96f98ecd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d47152c5-823d-42e6-a93d-54d92958d2f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "437f7284-7bde-42e6-9503-06933b595df3"
            }
          }
        ]
      },
      {
        "id": "e137f5f1-81a5-4fef-a4ba-e74abcd6e502",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d9b337eb-d8b8-48c3-a504-3b6ceb4a116c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "732c1424-dc80-4846-8723-ad455f7f4339",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "893ed198-8426-4f4d-b8cd-901a4ed6f522",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff103fc-95bb-418d-b0b8-e5cf3ef918e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd514175-4eda-4598-a10e-a276c962bbbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662b849e-8cdc-4640-bfd0-5241af39f7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "594c6163-8a24-49a1-b9ed-918bc9553cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcfba36-2b2b-4af6-897f-06e9603edb7f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93252302-cbac-4595-b6bc-6b692b338e4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d465975-cc45-43eb-a2b1-6fa2ec240c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5193fc3-65ad-4432-8424-35559b5c53a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3729847-d848-481a-9ff4-d93a88738af7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a5b13bf-367b-4709-a9c5-6bf712b56d19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2f86016-795c-4ab4-81db-015d4de0a3ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28e32ce7-3add-4887-a332-e97f6251a189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33ded864-db4f-422e-ad9c-4cf72af32536"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "255b933b-c33b-496e-95c6-e76dc8e6ad8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6bfdaafe-0527-4605-940a-31f4963cdd4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06aa0d07-6251-4c96-96be-dcd628ea85df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "070f93aa-26f0-4936-a978-13c7f76db902"
            }
          }
        ]
      },
      {
        "id": "953f9140-0d7e-465f-acfa-ec98f3a6db90",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e2582ab-14df-487d-80f3-e491fd0884e0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78531342-acc8-4bad-be52-654c58ca6792",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "670bcbba-af62-46dd-b851-e415c589a20e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd9782f6-5897-47bc-a83e-8ad10b5aaa6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c20c5f3-3bb1-4d05-8585-34d9c8381257",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.11832061068698,
      "responseMin": 7,
      "responseMax": 444,
      "responseSd": 36.936056364683495,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676248929289,
      "completed": 1676248960699
    },
    "executions": [
      {
        "id": "91f01912-189c-4233-8634-369e2e38a310",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e92e6876-d28b-4460-9302-17b3baa371e5",
          "httpRequestId": "7e31f123-86ce-48dd-b14f-42ea23d50ce9"
        },
        "item": {
          "id": "91f01912-189c-4233-8634-369e2e38a310",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4d50a81e-3517-4424-92cb-a279fcd22845",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "9420de3e-1b08-4f89-b1ab-92554e37ac85",
        "cursor": {
          "ref": "8398a88f-b9f8-4edd-945a-8feb1b505a8a",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "17df53d2-1405-4564-bd83-f5f36e631f5c"
        },
        "item": {
          "id": "9420de3e-1b08-4f89-b1ab-92554e37ac85",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "29f6ed2c-6217-4030-9a73-29e76b9f3e50",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "d22d0c7e-bd63-4826-ae25-63f9288cf3aa",
        "cursor": {
          "ref": "ded45b4d-4147-4af9-8e12-7794faa0d1d8",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c16f0f6-8742-42e0-bce4-a75a1df0f47d"
        },
        "item": {
          "id": "d22d0c7e-bd63-4826-ae25-63f9288cf3aa",
          "name": "did_json"
        },
        "response": {
          "id": "b9119a1e-214c-4fdf-9f1d-1d9fd2529905",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1028f22-1490-4f55-8944-3b64d9cb628d",
        "cursor": {
          "ref": "3af8e589-a2b4-42aa-9500-aaac1d1ba23f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "21d686d7-9c4e-4466-812d-0df55cebc679"
        },
        "item": {
          "id": "f1028f22-1490-4f55-8944-3b64d9cb628d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9b6f5ea1-78f8-42aa-8679-2e8c05fd5a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f1028f22-1490-4f55-8944-3b64d9cb628d",
        "cursor": {
          "ref": "3af8e589-a2b4-42aa-9500-aaac1d1ba23f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "21d686d7-9c4e-4466-812d-0df55cebc679"
        },
        "item": {
          "id": "f1028f22-1490-4f55-8944-3b64d9cb628d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9b6f5ea1-78f8-42aa-8679-2e8c05fd5a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b0d5a0b7-eaf3-4457-ba2e-04584d6f582d",
        "cursor": {
          "ref": "ff07dcc4-0ab1-460c-8ec1-d3f6493cda22",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8dca6d4e-6c45-4448-9384-cc4c5a1d68d7"
        },
        "item": {
          "id": "b0d5a0b7-eaf3-4457-ba2e-04584d6f582d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1c7838ec-e7c3-4815-ae92-df0decbd1f57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950ade1e-eccd-43a6-b826-2e561628b74f",
        "cursor": {
          "ref": "d894f2f6-3b9d-442e-a35b-d0eb945da8e1",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "08e2df74-d5e1-4ee6-902d-1e95257dfd1c"
        },
        "item": {
          "id": "950ade1e-eccd-43a6-b826-2e561628b74f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c439c0e2-a75d-4c15-966e-878e05363817",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d799dff-308f-4443-b8d7-fc5968e70d45",
        "cursor": {
          "ref": "eb2a5c11-9e39-46fe-90af-cd0e806ebc14",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "83d5596b-67f4-4c13-a9c0-bb40b83a58a2"
        },
        "item": {
          "id": "8d799dff-308f-4443-b8d7-fc5968e70d45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "522ee5f1-59bc-4681-bb50-8b31395ef699",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4bb4bb-2752-43be-945a-eb540ec4bec4",
        "cursor": {
          "ref": "53d7e019-be71-42ab-913f-89f20481103d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86301df0-77c0-4399-91ca-e5651e2d4e66"
        },
        "item": {
          "id": "4d4bb4bb-2752-43be-945a-eb540ec4bec4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68cbc914-b6d6-445d-ba44-44bd95978dfa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4bb4bb-2752-43be-945a-eb540ec4bec4",
        "cursor": {
          "ref": "53d7e019-be71-42ab-913f-89f20481103d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86301df0-77c0-4399-91ca-e5651e2d4e66"
        },
        "item": {
          "id": "4d4bb4bb-2752-43be-945a-eb540ec4bec4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68cbc914-b6d6-445d-ba44-44bd95978dfa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41da5a94-fabf-4e72-b686-64db67dd62b9",
        "cursor": {
          "ref": "6c80f7d8-25b2-4603-b219-91da470a7b97",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5a97dfa4-a295-4897-b427-ec49522d58e9"
        },
        "item": {
          "id": "41da5a94-fabf-4e72-b686-64db67dd62b9",
          "name": "identifiers"
        },
        "response": {
          "id": "3f8acb17-b217-4312-a3df-34a0abc3c202",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7a129-9679-460a-874f-d828da3ab92e",
        "cursor": {
          "ref": "7c1b9e2d-80fe-4d80-8232-815f079178e1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a524bbbc-b3d7-4304-a1f2-07b1b3325910"
        },
        "item": {
          "id": "6bc7a129-9679-460a-874f-d828da3ab92e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "833973eb-2174-4bd9-834c-134df58332c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7a129-9679-460a-874f-d828da3ab92e",
        "cursor": {
          "ref": "7c1b9e2d-80fe-4d80-8232-815f079178e1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a524bbbc-b3d7-4304-a1f2-07b1b3325910"
        },
        "item": {
          "id": "6bc7a129-9679-460a-874f-d828da3ab92e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "833973eb-2174-4bd9-834c-134df58332c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323b901b-3f51-43d0-9f1c-04216f05aa45",
        "cursor": {
          "ref": "548dbef6-26ee-4925-81f6-99ac1f764f50",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "142f419c-4bba-4175-97b7-e3e25005666a"
        },
        "item": {
          "id": "323b901b-3f51-43d0-9f1c-04216f05aa45",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a1639f81-c797-4cf5-bb9f-11221a643b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72783c2f-905d-499c-bb44-e385486260e2",
        "cursor": {
          "ref": "6d42e6d2-35ef-4be4-adc4-c632dcc40e93",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a305b157-5fcd-487d-96e4-2704e0e24787"
        },
        "item": {
          "id": "72783c2f-905d-499c-bb44-e385486260e2",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "9f154861-3a0a-4572-8840-9a6eccce68f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f522f90-0594-4ce3-8481-9ae9789656b8",
        "cursor": {
          "ref": "28eca65a-bd55-4e3f-8791-194e3be7dc6d",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9adf3d19-88f0-4bf0-b8dc-93d77c25225c"
        },
        "item": {
          "id": "5f522f90-0594-4ce3-8481-9ae9789656b8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3e28011c-0011-402b-955d-88a062332fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5344219-2a4f-4c6b-833e-46c88f4b493a",
        "cursor": {
          "ref": "1dc12995-adb9-4c13-96d6-17669c541a2c",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7e2f0987-321a-461e-9386-0a6d29d6f6ff"
        },
        "item": {
          "id": "f5344219-2a4f-4c6b-833e-46c88f4b493a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "81dcbbd2-b895-476c-b8a2-4e6b392ecbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0b8398-016e-42c8-8419-615e031d7290",
        "cursor": {
          "ref": "8ff7f00a-66da-4b28-b1a2-ab89443bffc9",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4af543eb-6523-4359-b00f-929ed93889e1"
        },
        "item": {
          "id": "ec0b8398-016e-42c8-8419-615e031d7290",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c2923ba5-23ff-4cfe-8eb4-539f83e145bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae725cb-af53-42d0-8316-c71fe88a8025",
        "cursor": {
          "ref": "98618e9a-e024-4f9f-9eb9-ce7dfc1f1fa1",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4bd0abb3-7b5c-492b-af96-a9211150af25"
        },
        "item": {
          "id": "eae725cb-af53-42d0-8316-c71fe88a8025",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3a8d1440-b5b7-4153-96d0-5e345b61681f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a23a78-7d4d-4f5c-ba18-eaf7fd906480",
        "cursor": {
          "ref": "f84339d9-ff70-47e5-b4a9-655906237cf5",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bad0dc04-1240-48a5-b6c4-f4bca18b3420"
        },
        "item": {
          "id": "71a23a78-7d4d-4f5c-ba18-eaf7fd906480",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f437f80c-2fa9-4e1c-8f1a-3918108de381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333ce3ec-0332-419c-804c-976214ddce71",
        "cursor": {
          "ref": "d4303c5a-16b6-4931-83c2-e55916300fde",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2972c712-5a53-4cb5-8e2d-a85b6164170d"
        },
        "item": {
          "id": "333ce3ec-0332-419c-804c-976214ddce71",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c33331ec-76d8-4de6-a642-88ae4dea1c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d66091-c72e-422f-8458-e80e20389854",
        "cursor": {
          "ref": "5fa6734f-1aaf-447c-8135-b86b7d284aa2",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "69c7f435-1e1b-4a85-818d-f30ecfd06004"
        },
        "item": {
          "id": "a4d66091-c72e-422f-8458-e80e20389854",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c55f8b4e-f197-419b-82d9-efa92483c2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6507d2c-4471-4d52-a7f1-d7d1d014ff7d",
        "cursor": {
          "ref": "73e1127c-4866-416b-a624-7831bfefc0d2",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "850c22ac-ef8c-4f4d-917f-1ff09a6aadd8"
        },
        "item": {
          "id": "a6507d2c-4471-4d52-a7f1-d7d1d014ff7d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b2132eaf-1fcd-4ab7-9540-01cbbb39d560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a24cb0-4cfa-4410-9062-cf515242f7d1",
        "cursor": {
          "ref": "0fffb283-9ec6-4de3-ad96-95758036fabb",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9a48de94-895a-4687-94fe-9c3bb66be544"
        },
        "item": {
          "id": "81a24cb0-4cfa-4410-9062-cf515242f7d1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fc6186ba-5148-4880-97b1-cd1a87b86bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ab4518-63c4-4313-b8b1-81168bc4e4e1",
        "cursor": {
          "ref": "9617b446-8248-4f74-9376-64c874cc1785",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "579911ec-dc18-42e4-8071-1f719c076041"
        },
        "item": {
          "id": "b9ab4518-63c4-4313-b8b1-81168bc4e4e1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4453b824-4e55-4dcc-b8b1-0132e5cff690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d3e779-bdc7-4a6e-9fd4-d0f5f6e0fb7d",
        "cursor": {
          "ref": "4978f9bb-299c-4a8f-88a2-795bc2ad1f9c",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1ec38b58-a5a7-422b-ac70-a5ea3dcb87e2"
        },
        "item": {
          "id": "a2d3e779-bdc7-4a6e-9fd4-d0f5f6e0fb7d",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "e34fc17f-235f-47cb-ae44-fcbe26a9aeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ecffc8-6d68-44db-8b4f-af685c14e3d5",
        "cursor": {
          "ref": "6114291f-8e5b-44b4-8be3-8fb635e95516",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "020a81cd-2672-42a2-8828-1ea7cb211680"
        },
        "item": {
          "id": "26ecffc8-6d68-44db-8b4f-af685c14e3d5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ff97a591-4365-48da-a20a-f90b62ab5850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b64e2c-ec67-4747-b1c3-a9e8eaf8fa34",
        "cursor": {
          "ref": "61e28aa2-9706-4ed1-920d-ce732009a5ab",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9007deaa-7cb9-489d-925c-4a681fe8a2ab"
        },
        "item": {
          "id": "13b64e2c-ec67-4747-b1c3-a9e8eaf8fa34",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4d88265b-05a9-4ecf-bb1a-42b639d17c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc55c5a0-0763-4d63-bc13-02275cf0556f",
        "cursor": {
          "ref": "69b20048-20c7-472f-b08d-7d4895439683",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7d886847-61ba-4721-8c24-96f38665ac64"
        },
        "item": {
          "id": "bc55c5a0-0763-4d63-bc13-02275cf0556f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8a57bdce-90a2-45de-ab3d-0351fda7a8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3eb740a-04b5-4052-8569-b838974dc1b6",
        "cursor": {
          "ref": "3464cf4c-6432-4fae-9932-d8be1ee2e175",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e89718f2-9493-44a5-ba9e-44047ab3150d"
        },
        "item": {
          "id": "c3eb740a-04b5-4052-8569-b838974dc1b6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1e31e386-497a-43ce-b349-dbb935ebae5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d77c695-65f4-4522-a39d-f56d472029ce",
        "cursor": {
          "ref": "f1048476-e0a3-4a5d-a7b3-4be377534d13",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1c8947e6-d91f-475b-bef6-57e2de0ccad0"
        },
        "item": {
          "id": "8d77c695-65f4-4522-a39d-f56d472029ce",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "03bae83d-036f-4f15-9492-6b768fd2afe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc99438-9810-41a8-bd42-ecb396725355",
        "cursor": {
          "ref": "5a1381d4-542f-46ff-b893-0916db493ae9",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a5619952-c96d-4d61-b4ab-0143d6af34ee"
        },
        "item": {
          "id": "8cc99438-9810-41a8-bd42-ecb396725355",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e272572e-a7a3-4929-bb24-c769fd5f8c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b2447f-8dfb-461b-abe4-6e3a4ff9c6f2",
        "cursor": {
          "ref": "c44c6a76-30b3-45a8-8981-6ab1d9e098db",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "24352039-1269-4a97-a06c-7d51269b955d"
        },
        "item": {
          "id": "f9b2447f-8dfb-461b-abe4-6e3a4ff9c6f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2a592b45-65da-48bb-8009-05b94ff0f1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bbb7ce-51ef-498b-84f4-334e45b31477",
        "cursor": {
          "ref": "a1d6d473-25cf-4255-8d4c-c0b5c9648216",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d69145a2-5b4c-4501-bfc5-5653d2ef683d"
        },
        "item": {
          "id": "91bbb7ce-51ef-498b-84f4-334e45b31477",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "df90349e-1ad6-485f-9289-2a015dc37fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7687df12-8e34-4f00-8b08-82d5de528f27",
        "cursor": {
          "ref": "d1b10fa5-33a2-4aab-8aef-0d153ad7bd0f",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "24954563-f90f-424d-810f-ead8da71f3d2"
        },
        "item": {
          "id": "7687df12-8e34-4f00-8b08-82d5de528f27",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5e92af4f-5c7a-4a78-ba16-71793c96fa90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96a6f84-11af-40a0-ae2e-13a4fda9e1b3",
        "cursor": {
          "ref": "a54d68cb-cf4c-4ed4-8f55-e439535ab5e1",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "900fa149-e9d1-445b-83ed-778076e8c0ef"
        },
        "item": {
          "id": "f96a6f84-11af-40a0-ae2e-13a4fda9e1b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e484d326-87c9-4dbd-b243-d499fa31e11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9083779b-6256-4894-bd2d-c4185f4fa682",
        "cursor": {
          "ref": "1a355822-280f-4340-8e03-095867ee849e",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "882ea881-60a4-4f09-9613-64081b84ba68"
        },
        "item": {
          "id": "9083779b-6256-4894-bd2d-c4185f4fa682",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dc885509-a41e-4782-a1a4-418b650f7406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf07671-b506-4423-a2fc-f4c9fe547fac",
        "cursor": {
          "ref": "073ca941-1ff2-40e7-a7c8-1da76acdd8b6",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "910a078d-5e73-4f32-bb56-3fc47826708b"
        },
        "item": {
          "id": "8cf07671-b506-4423-a2fc-f4c9fe547fac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "061f5c2e-e540-41e3-92c5-c08ed8f13478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d68ecc9-3f02-4a6b-ba12-1df318c7315f",
        "cursor": {
          "ref": "54a5b9d7-f53a-4a90-afb4-d816f03eab6b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c1578f41-6696-4602-86b5-5716b6e57e6b"
        },
        "item": {
          "id": "7d68ecc9-3f02-4a6b-ba12-1df318c7315f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1c4fde9c-09e2-425c-9337-10ef483faade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e4d422-c70a-4bfe-9423-913e1df589b8",
        "cursor": {
          "ref": "686d15a2-1f7b-4bf1-8e0e-c0dc87763860",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "187c245e-6dbf-4cae-a2d7-3f556500c73e"
        },
        "item": {
          "id": "63e4d422-c70a-4bfe-9423-913e1df589b8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bd69c4f5-8375-4d26-b186-78b944977da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094fc406-8ebd-4616-85a7-f2d9251e576c",
        "cursor": {
          "ref": "b5874d21-b558-4fd5-9593-5b14c5d42e29",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "325e48dc-6fd6-4e6e-a32f-4eefebe99737"
        },
        "item": {
          "id": "094fc406-8ebd-4616-85a7-f2d9251e576c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ffc63888-1fc5-45c3-b44d-d84959d26030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5972dc3-b964-4000-9037-2b5f78686d56",
        "cursor": {
          "ref": "b4197023-603c-45fe-8374-5b5a818e4f2b",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e4da5c19-6a68-46ba-9a16-a573db5ad665"
        },
        "item": {
          "id": "f5972dc3-b964-4000-9037-2b5f78686d56",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1764b27d-4e6d-45bb-a707-9f70d63e1a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472b8da8-0520-4916-bff2-a066d7edd3ec",
        "cursor": {
          "ref": "572769b2-dfe4-4c86-84a6-4a75f95b5f6c",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2042e4f2-9c1a-4da4-8db5-e55cc9fb60ae"
        },
        "item": {
          "id": "472b8da8-0520-4916-bff2-a066d7edd3ec",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c08b10e1-afe4-40ee-91cc-920c86feaadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c43072-8c95-4fb7-a76e-00ef72246f63",
        "cursor": {
          "ref": "2a703414-8483-4525-a868-1bb9049fb526",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "40abe96d-0b7a-4ca1-802d-725073660914"
        },
        "item": {
          "id": "d5c43072-8c95-4fb7-a76e-00ef72246f63",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "57b6ee74-dad6-4f7b-a31e-e9ec55ead5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b730027-43fa-4677-bfda-dbda436053c4",
        "cursor": {
          "ref": "9062e1a6-9c8b-4ca5-a08e-ee52139fc7e5",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ff0ad4ef-d83e-4a50-aca7-f29e70c2de4f"
        },
        "item": {
          "id": "7b730027-43fa-4677-bfda-dbda436053c4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "aa4fb4b8-4ebc-4db4-8484-9edc1d1a5d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa00ac96-64d8-4571-9caa-0fe1515ea19b",
        "cursor": {
          "ref": "ae0f4f5e-ce66-4685-9396-ea6d72689c70",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4beaf67c-e8c2-48ae-b8cb-664d53b7166f"
        },
        "item": {
          "id": "aa00ac96-64d8-4571-9caa-0fe1515ea19b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ab92004-6250-42ec-9785-5b6aa716827f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67e078e-6bd6-49bb-b6ff-4f5f73b1627a",
        "cursor": {
          "ref": "b25a5e8f-9c44-4134-a1a3-d9c7c546659c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b46ab3aa-5be0-4942-95c1-865ae9efc6eb"
        },
        "item": {
          "id": "b67e078e-6bd6-49bb-b6ff-4f5f73b1627a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ff8f1ef2-831f-4f28-911c-ce6fb9415add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3c984-63cb-48b7-857c-eae3511774d3",
        "cursor": {
          "ref": "cd3bf7b5-0317-42f0-8a37-e5c5cff5a9cf",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "66af5412-032e-4d7f-a6a0-472cde2ef473"
        },
        "item": {
          "id": "bee3c984-63cb-48b7-857c-eae3511774d3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6b782f93-2594-468e-bda6-2b96fdc52021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5ae8d2-4a1c-4888-a861-5dfa451d77f0",
        "cursor": {
          "ref": "03e26e22-c138-4772-be6e-51d3847bc326",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4ddb8a62-ed96-4f28-91b6-07f8de0ca0b9"
        },
        "item": {
          "id": "6e5ae8d2-4a1c-4888-a861-5dfa451d77f0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f34d8606-4a98-4667-a3c4-5da7d0d089dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b761a6d-7af7-436b-b756-0b55adce22f1",
        "cursor": {
          "ref": "bffd9fd9-9728-4d9a-8811-5def8c489ab9",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fb374738-bf12-4200-a2fe-1f02adf9b46e"
        },
        "item": {
          "id": "9b761a6d-7af7-436b-b756-0b55adce22f1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "967de9c4-693d-499b-872f-e4e06511d903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "916deaf4-fd9b-4366-a1b4-ee623aaa963f",
        "cursor": {
          "ref": "55c527a5-91a8-4e1e-bd78-df00745ddb6e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a7f36b22-08c1-4b52-b5b2-bdf20119758c"
        },
        "item": {
          "id": "916deaf4-fd9b-4366-a1b4-ee623aaa963f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "67391165-86f1-4e11-aec4-1a4e677059e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439db2df-669b-446d-bf01-cb24390832c4",
        "cursor": {
          "ref": "6a5561e3-ade0-49bb-8e3a-44294abec6ad",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e80ad5a7-e1e5-428a-9cc4-4b893fd79ea1"
        },
        "item": {
          "id": "439db2df-669b-446d-bf01-cb24390832c4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3155667e-fdef-4d22-bcb5-1f6ac6101f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fadb78d-240e-4131-9263-43e2d50b0e60",
        "cursor": {
          "ref": "31fef8ec-3c90-48dc-aca9-37f2ec947d88",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4514799b-9df6-42f9-9723-fa1e304ca3fa"
        },
        "item": {
          "id": "9fadb78d-240e-4131-9263-43e2d50b0e60",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "57cf3758-fd4b-445c-a969-05da5f8bd292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1d2e68-8027-4d95-ab6d-9889c828bd33",
        "cursor": {
          "ref": "fa2a4447-e9a1-4a7e-b1b1-590b150609be",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "42f413cd-4901-43f6-9c41-409bb9886477"
        },
        "item": {
          "id": "da1d2e68-8027-4d95-ab6d-9889c828bd33",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7f8264e9-d727-4974-aa26-9c9dcc4fd739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca13a17-02a7-47df-b57d-54c877e7a855",
        "cursor": {
          "ref": "00071ecb-fd91-4ba4-8397-c632cd353ca6",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d7afa3bf-f0e4-447b-96a5-6aa64c482749"
        },
        "item": {
          "id": "7ca13a17-02a7-47df-b57d-54c877e7a855",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c35f45f5-3f28-4dba-9103-66d3cec7be74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfdf630-fcb8-4dbd-9fab-999377574b28",
        "cursor": {
          "ref": "bd14748e-b4d4-4f23-b063-1331d09aa916",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "67019a55-098d-419d-85e5-4cccec214042"
        },
        "item": {
          "id": "8bfdf630-fcb8-4dbd-9fab-999377574b28",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "507565c5-4561-4dcf-9c4d-d230e599b65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ea3ccd-5c15-4916-acd2-e08834bc0c95",
        "cursor": {
          "ref": "b5e89601-52ea-4641-af80-369a6811eb6c",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "79a6f56e-5779-4d1f-9c81-dd162ce4a98c"
        },
        "item": {
          "id": "f1ea3ccd-5c15-4916-acd2-e08834bc0c95",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "648df466-ac9e-4fae-8217-c86ed1c9dcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4952c642-9bee-4f74-9ce4-5d7be4a22d90",
        "cursor": {
          "ref": "3c47971a-d013-4d5f-a77a-67a99fb10936",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f16fe1da-a5c9-4b0e-940d-196fa33dc636"
        },
        "item": {
          "id": "4952c642-9bee-4f74-9ce4-5d7be4a22d90",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e22b0dc8-726d-4ff9-9471-046060c3e656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb0aac-3269-4f66-89a6-bb527b12f2a7",
        "cursor": {
          "ref": "95f8e041-9f27-4f80-a5d3-e8997c5a9d4d",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "58a8e917-9323-4345-94e5-fbc26c5240c3"
        },
        "item": {
          "id": "8adb0aac-3269-4f66-89a6-bb527b12f2a7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "60a009d0-5b70-43f1-bbf9-32951cda7822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8486534a-143b-4ca5-954a-b8befb39e634",
        "cursor": {
          "ref": "d2b5bf07-0abc-4fa8-9082-dd40fc20e31e",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7394e2ea-ad5f-455d-8441-f63ce4b7d281"
        },
        "item": {
          "id": "8486534a-143b-4ca5-954a-b8befb39e634",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1231e781-2d81-4a8c-b6cb-ad8aaf549f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d15c6c-a301-4a3f-8095-6fa667f36d72",
        "cursor": {
          "ref": "800ec90b-2d4f-4713-85e4-bb192365b8d3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "96a4fc73-c7ff-4dcb-958c-cece07a30331"
        },
        "item": {
          "id": "75d15c6c-a301-4a3f-8095-6fa667f36d72",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e09eb7fe-7791-42a1-a990-a69d6f69c45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d820792-7ab4-4059-bb5b-18739e3c3e1f",
        "cursor": {
          "ref": "08e52f52-de0e-4267-9614-a0088e9f06b7",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "01e72ae8-4c95-40a0-968c-48c31fc7a1b6"
        },
        "item": {
          "id": "3d820792-7ab4-4059-bb5b-18739e3c3e1f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "47ad9726-94fc-4815-a0c0-bbb95ba01856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffd3126-a927-4d82-8716-1b218e9c8d99",
        "cursor": {
          "ref": "f21b4ab1-115b-49d8-87ad-830c83dadfac",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6e3d4288-8a8c-400c-a961-e25aef83e877"
        },
        "item": {
          "id": "3ffd3126-a927-4d82-8716-1b218e9c8d99",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bc7eec62-b63a-4dee-a583-0819b238db16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df98dd9-7418-41e7-9fab-1cf98e3c7f4b",
        "cursor": {
          "ref": "48d3ecd6-d251-48f8-85ac-df3e15c97216",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "992e7b67-df56-496e-ada6-3fa4eb016e93"
        },
        "item": {
          "id": "6df98dd9-7418-41e7-9fab-1cf98e3c7f4b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4aee66db-feb9-4200-bba3-d63c29efc492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fac319c-0c6e-4e14-b9d5-58587ca16c80",
        "cursor": {
          "ref": "c3047ad6-16ae-4fc6-9e00-90b450af95a2",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "706d516d-7e48-44f9-8512-36ce7e9f5290"
        },
        "item": {
          "id": "7fac319c-0c6e-4e14-b9d5-58587ca16c80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "87152773-b6a2-47ac-ba46-f7c7cf6432f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cf561e-bcb4-4288-bc29-ebff4ea3b96b",
        "cursor": {
          "ref": "a7237cc2-ec21-4729-a089-fb4e6804d259",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "049594c9-e2eb-40a1-8ad0-6d3b58ebbfc4"
        },
        "item": {
          "id": "30cf561e-bcb4-4288-bc29-ebff4ea3b96b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f3f8ea94-b3a6-4009-af31-80e6c7cf16c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4aefc8-bc9d-43fd-b6e6-cfcd95db76dd",
        "cursor": {
          "ref": "21b35947-89fa-4399-9186-8600fe98b5a9",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "463be3ad-cf3d-40fb-bfea-fc8cf3617462"
        },
        "item": {
          "id": "6b4aefc8-bc9d-43fd-b6e6-cfcd95db76dd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b5080a4f-24a2-4837-9b4f-b40e377352e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c59f66-019c-4958-ab2c-8c70a7692ee8",
        "cursor": {
          "ref": "6ca96f29-88cd-4d8d-bfeb-0ed37f9f660d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0c7dda58-820a-43c6-b51a-5b9c18320e11"
        },
        "item": {
          "id": "f4c59f66-019c-4958-ab2c-8c70a7692ee8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bb4f5bf7-df55-4bf9-b9cf-12f19669cb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883ee580-fcc4-4574-bbc8-4c1bc9ad4002",
        "cursor": {
          "ref": "4dbed4a5-5654-4406-89a8-047ef955c55e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a614bbcf-0e69-4982-b5dc-872213daeb62"
        },
        "item": {
          "id": "883ee580-fcc4-4574-bbc8-4c1bc9ad4002",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b02c3354-664d-4cfe-b46d-5456bbece784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5349558d-c887-495c-9777-9e5180956a09",
        "cursor": {
          "ref": "f7f7ec33-fbbc-4abe-885f-54966ae45ad7",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cf411a3e-8f8c-43f6-80f0-ccadb1d73932"
        },
        "item": {
          "id": "5349558d-c887-495c-9777-9e5180956a09",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "50aaf820-da74-4018-916a-37b8b35e16bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168b9ec2-c6fb-4ed0-80c5-0b669ca64b09",
        "cursor": {
          "ref": "40c8e131-f0df-420b-89ff-e8a6b7f59422",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "abece513-9359-4171-83ae-0e8e0314386e"
        },
        "item": {
          "id": "168b9ec2-c6fb-4ed0-80c5-0b669ca64b09",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aa9f3a17-7b50-45e2-9c9a-4a10f06cda9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5865dc-6b7e-4b38-91aa-a26c308540be",
        "cursor": {
          "ref": "30f39b64-0718-4300-a61e-ff5f82a9c39e",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "690a44a8-8fc9-4bb3-98b3-c464b2193dce"
        },
        "item": {
          "id": "ca5865dc-6b7e-4b38-91aa-a26c308540be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cd7db62f-32a0-4601-b69c-3ef9ca6bbb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2481e679-743c-4a10-b6d9-bf8b7b095b1d",
        "cursor": {
          "ref": "1cb7354e-2535-4e02-9ff4-a79f9a8acf6d",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ef55bf6a-d12e-49c4-af87-631e2e8f26b8"
        },
        "item": {
          "id": "2481e679-743c-4a10-b6d9-bf8b7b095b1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0d2b010c-b239-429e-a37c-5c6a33c1a879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec559a9-eb38-49d9-adbd-8029ea47ba5c",
        "cursor": {
          "ref": "3f935e97-1ddf-4d9c-8045-71eb40042aef",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f14d0559-6ad8-4b14-8c5d-e59c538380dc"
        },
        "item": {
          "id": "0ec559a9-eb38-49d9-adbd-8029ea47ba5c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1226bbdd-c0b1-4aca-9faf-e212f072cd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1c5c7a-1cf7-4e95-97bf-a5631263f5fb",
        "cursor": {
          "ref": "32250e44-db4a-4be5-b6ce-16d9621167d8",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a39b98af-e9dd-45b8-a7a0-2844ad95da66"
        },
        "item": {
          "id": "fc1c5c7a-1cf7-4e95-97bf-a5631263f5fb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "65f6daeb-073a-4f3e-9a5c-a8aa37a93533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398c7d67-4746-48b8-afdf-ba717837a639",
        "cursor": {
          "ref": "3a61a64d-f1be-41ec-9781-51c529611308",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "910676f1-a025-40c6-9414-c3563f7d8962"
        },
        "item": {
          "id": "398c7d67-4746-48b8-afdf-ba717837a639",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "533ab2c4-8ef9-49c2-aabf-69e6fecfda51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3363750-e993-49df-a08e-930563e3aae7",
        "cursor": {
          "ref": "4e976b75-73a5-4ab0-8cce-db231a8354bc",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d0bb2eef-3b99-43d1-8e30-0150e1402204"
        },
        "item": {
          "id": "c3363750-e993-49df-a08e-930563e3aae7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d7f23beb-8a6b-4805-96ed-585cb1a5b4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883b3495-2b87-4e66-a492-668deb1a56ac",
        "cursor": {
          "ref": "17193cbb-221a-461a-8fa7-6e328609a802",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fc1b3fa3-b737-444d-89a5-a92eab328c77"
        },
        "item": {
          "id": "883b3495-2b87-4e66-a492-668deb1a56ac",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d63163da-3807-46b1-a7ee-fca5f6bc05ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d13716-569f-49bd-acd8-b501950a5cbc",
        "cursor": {
          "ref": "1783a3fb-e458-467e-b21d-783994a1ff18",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a1064cd0-ff92-4d78-af18-dff3b907a085"
        },
        "item": {
          "id": "73d13716-569f-49bd-acd8-b501950a5cbc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "52847c55-6a98-4bbd-84a3-aabd9798b27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd3b0c7-85ff-49e5-b705-ed67b0ceae6c",
        "cursor": {
          "ref": "e393e981-7c8d-45b3-8b16-82a32e285689",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "58bb0cba-6986-42db-8a42-538094183dfd"
        },
        "item": {
          "id": "8fd3b0c7-85ff-49e5-b705-ed67b0ceae6c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ee2d6969-14ca-4a65-ae31-8c36805ad428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590d4293-1536-4610-bdcb-7848de76517d",
        "cursor": {
          "ref": "3874e1a4-912a-4d04-b0e7-284e6ea61b47",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3706ee68-0c42-49af-8fe9-6748ad5faafc"
        },
        "item": {
          "id": "590d4293-1536-4610-bdcb-7848de76517d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ca5b593a-4b6b-4abe-8d9f-25f5b9f1ffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0b6349-1abd-4b6d-bee2-586d748a5690",
        "cursor": {
          "ref": "8dda9736-85c7-471b-8718-d093112285c8",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6467e592-b7fe-4c3a-9147-4a7b9b1de954"
        },
        "item": {
          "id": "5c0b6349-1abd-4b6d-bee2-586d748a5690",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fd894282-1e97-4fb3-8396-e7b67a878c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e47938b-56cc-4bb9-9632-c61bd4476ff4",
        "cursor": {
          "ref": "623c8802-5a8c-439d-a704-8168f29e8331",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7006e4e2-4d3e-4d00-9f1b-466d3e92e082"
        },
        "item": {
          "id": "2e47938b-56cc-4bb9-9632-c61bd4476ff4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2bac137b-358d-497a-a229-d6b068e3fbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f06d445-2cef-46be-9541-6e8efa15a40b",
        "cursor": {
          "ref": "22d7ec24-842a-46e3-8626-dec1ae09891c",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b109f90e-566b-45a6-b1f0-8116fec08480"
        },
        "item": {
          "id": "7f06d445-2cef-46be-9541-6e8efa15a40b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cd6d6cc0-c0c2-40ed-97b1-3a6d1a9285dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8e5f3a-6836-4e3f-88fb-5ef9c5440589",
        "cursor": {
          "ref": "f84183f8-9951-4b34-932b-fe2616b13c64",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "da63d2f8-97b2-4a15-9729-b9fdce084ea6"
        },
        "item": {
          "id": "3c8e5f3a-6836-4e3f-88fb-5ef9c5440589",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "93a2365a-fdff-4a7b-bcd0-13f200918f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97becda-08ee-4482-b590-dfffb556557e",
        "cursor": {
          "ref": "b4adb699-8686-4fc6-a403-d8cb8920947f",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1c08a733-44e2-481b-8c84-d9723a912c35"
        },
        "item": {
          "id": "a97becda-08ee-4482-b590-dfffb556557e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "23476d88-78ef-48fe-9ec6-f54c898980e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee934864-2791-44fa-b5a5-01f31fbb5364",
        "cursor": {
          "ref": "33a65dba-b647-4700-a572-fcc381eaeab4",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b3d4d87a-018b-4ae5-9ca1-4108eabb6644"
        },
        "item": {
          "id": "ee934864-2791-44fa-b5a5-01f31fbb5364",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "80c6a6b1-4926-49b2-80bf-ff30431db51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2063f20-e284-4a18-9fb8-66b5f1506e82",
        "cursor": {
          "ref": "2b3240be-0756-4e23-a079-e107f085b5b7",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ae941668-cac0-486f-8cc1-14620362dbf2"
        },
        "item": {
          "id": "f2063f20-e284-4a18-9fb8-66b5f1506e82",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "685c04f8-0841-46be-9647-620351ddaf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323e3b67-5329-4ed8-8402-4e5fb2aadd97",
        "cursor": {
          "ref": "f0e33d35-bfef-4a53-80c7-e80545cc5307",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "47d58ed2-e967-494c-af60-664014e3499f"
        },
        "item": {
          "id": "323e3b67-5329-4ed8-8402-4e5fb2aadd97",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e26020b7-b2a0-4dd9-9311-2b51001e22e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f5dbed-0958-4bd9-b6d5-34a0c2b76ec0",
        "cursor": {
          "ref": "f9584dd3-0cac-4786-b115-7015992ad56b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "754bd475-82f7-4493-9beb-50e6f2bb4359"
        },
        "item": {
          "id": "d0f5dbed-0958-4bd9-b6d5-34a0c2b76ec0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c02345ae-456e-4fe2-a14b-1dd660b02c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04e83dd-163e-4805-85a4-904d81cabbe2",
        "cursor": {
          "ref": "f056e501-9837-4837-8de1-3e343418ee44",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3e02e704-dc3c-4731-9bef-cfcf1a946ac9"
        },
        "item": {
          "id": "f04e83dd-163e-4805-85a4-904d81cabbe2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f72dc9b4-30bd-4307-a4e5-39cefa64a333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d41cb2-b4ac-4842-abfe-7223cdbd824a",
        "cursor": {
          "ref": "543e2476-5788-48a9-b60b-ebb25304a13e",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "61eada36-cb35-4e53-aff0-14330c10cf4d"
        },
        "item": {
          "id": "72d41cb2-b4ac-4842-abfe-7223cdbd824a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a2eb9bc4-4362-4224-94c7-63e77020c863",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "8da697ea-d4cb-40c7-8803-530f6098ca64",
        "cursor": {
          "ref": "1116bbab-5ee7-4015-aa3f-9a6a53aa5a46",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7d024562-426b-46e3-9762-8dc78a670be5"
        },
        "item": {
          "id": "8da697ea-d4cb-40c7-8803-530f6098ca64",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "18f7bd44-0fdb-4d0e-8b7d-7229943184fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861bf151-044c-4d0a-8c67-f8961cb528be",
        "cursor": {
          "ref": "e7993f80-6ef3-4c59-806c-6606a858cdc2",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4a05a7a2-163e-47ac-a7f4-c610709c8eab"
        },
        "item": {
          "id": "861bf151-044c-4d0a-8c67-f8961cb528be",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0808d372-3cd9-4729-9117-4eec11c454f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d0ef85-73c9-4fe3-ada6-1b54dfbc04e8",
        "cursor": {
          "ref": "7b896bf3-8fdf-4da1-aa72-2461311f0672",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e398bca3-a4b5-47c3-818f-0e7824d165bc"
        },
        "item": {
          "id": "14d0ef85-73c9-4fe3-ada6-1b54dfbc04e8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ec1d414b-c70b-45a8-95fd-00493e25330a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c6d826-a5fb-426d-af9f-6d1ae31a07ad",
        "cursor": {
          "ref": "b727f057-7e40-4b94-853a-cd0dbc6bedf5",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "60258b6c-3447-42f4-add9-0f984ca905de"
        },
        "item": {
          "id": "90c6d826-a5fb-426d-af9f-6d1ae31a07ad",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c7af66e7-0681-4589-bc9d-dd0bb8d2357f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fce191-92e5-48e9-bf34-047f806849ed",
        "cursor": {
          "ref": "897781f8-c93e-44cd-807d-e8211c5037eb",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "99258547-260b-4ec7-886f-ba87bed86fa2"
        },
        "item": {
          "id": "68fce191-92e5-48e9-bf34-047f806849ed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "50d3faeb-112c-49e8-9db2-99d015f2da31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb3e412-c93c-4913-9430-ad4bcb100e86",
        "cursor": {
          "ref": "c4812c70-2e78-4f1a-8449-72bcaab1be22",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7d524ab0-4d65-4b41-9471-7708f23f3291"
        },
        "item": {
          "id": "bdb3e412-c93c-4913-9430-ad4bcb100e86",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b049649c-9ed9-44ac-b199-aa37fdb867e8",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4cee1e81-4719-48c2-b20e-be84bf528125",
        "cursor": {
          "ref": "388949d8-59af-4b87-8f4e-a95f76279691",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f56e47b0-4050-4fb1-abf3-0c22712f886b"
        },
        "item": {
          "id": "4cee1e81-4719-48c2-b20e-be84bf528125",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "70b84047-cdf0-480e-8af9-56b8978ddbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c29daa9-4398-4e8c-b72f-3a697107a66e",
        "cursor": {
          "ref": "06e424d8-43e8-441f-b3d5-3a431e9fbcf6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "de3898d5-76cf-43a3-8b0b-fb6cea0902d0"
        },
        "item": {
          "id": "6c29daa9-4398-4e8c-b72f-3a697107a66e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3189b614-545c-4d72-9bcb-91530d1090e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e94edc-ce28-4c3d-85f6-76c63b505e50",
        "cursor": {
          "ref": "55ec630c-b7b0-4779-8f34-6d6025cfba7b",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d21056db-dc6f-4fc6-ba57-7abec6498995"
        },
        "item": {
          "id": "56e94edc-ce28-4c3d-85f6-76c63b505e50",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aaf668e1-d987-41a0-82c5-160fb64c0c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92b74ea-7809-4658-b6aa-5c4b5c99f185",
        "cursor": {
          "ref": "f49e6354-0802-4a8f-840e-f54b46ed9a59",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2546af0d-ce35-41c7-be02-f46d5fbdaacc"
        },
        "item": {
          "id": "c92b74ea-7809-4658-b6aa-5c4b5c99f185",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9c125d15-a311-4c47-82d5-4e1b613dce92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26540b2d-0270-4cab-b905-159671cdf393",
        "cursor": {
          "ref": "b517b07f-b8f3-4026-b0e7-686ce9f35174",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "759f92dd-01fa-4385-a82e-438b46707b35"
        },
        "item": {
          "id": "26540b2d-0270-4cab-b905-159671cdf393",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "83b10fa0-d47b-406b-975d-59899c1c355d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0ec2f0-43e7-46d0-9ff2-da52da0c59dd",
        "cursor": {
          "ref": "08f9e902-a7e7-41be-a682-1cd552f08a0b",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aacff38c-64a2-453b-a5a3-f177db5e0f3b"
        },
        "item": {
          "id": "8f0ec2f0-43e7-46d0-9ff2-da52da0c59dd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e68fb99a-6d79-4190-abcb-f67c8e2e40eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ed5a35-2d3d-4feb-bc34-683c8185e21f",
        "cursor": {
          "ref": "184c198e-0000-4067-b204-e0cd3dfd8fff",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9cca73a3-62f8-48a0-9561-26b2c3212289"
        },
        "item": {
          "id": "71ed5a35-2d3d-4feb-bc34-683c8185e21f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "19fa66e5-400e-4425-93a9-2259a88f37b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1f5d27-3a46-4a83-8d7f-ac9e3470a88b",
        "cursor": {
          "ref": "b88433e3-3e15-4e10-8926-211e7af6ef46",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "08706f71-9052-44bd-ae5e-8d6abed1ffdc"
        },
        "item": {
          "id": "7f1f5d27-3a46-4a83-8d7f-ac9e3470a88b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "61364ff0-b6df-4208-8969-5a45e97cb7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297f49a-6be0-4b4f-b46d-0f24f0dc2924",
        "cursor": {
          "ref": "fbe6baf1-eabd-42cd-ba73-d372c5507bb9",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7607dcff-e059-4890-ad1a-08ed75fff81a"
        },
        "item": {
          "id": "6297f49a-6be0-4b4f-b46d-0f24f0dc2924",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9347b5fe-8e5c-413c-8e27-47e5f004b362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "eda548f9-8d39-4529-ad09-af03786b85aa",
        "cursor": {
          "ref": "a4891e47-b8fb-4586-8abb-4df889f878a6",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "77e5d433-7771-4851-8062-d41c98b79c0b"
        },
        "item": {
          "id": "eda548f9-8d39-4529-ad09-af03786b85aa",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5d5736c8-ca3c-44e7-8fdc-42663bede809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "1b0b8f54-e888-4284-8e5d-314e3f6cf91a",
        "cursor": {
          "ref": "7254ed6b-365d-4968-8de8-82f37f5622fb",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "85d93d57-5436-4c7e-8e8d-06da37c27361"
        },
        "item": {
          "id": "1b0b8f54-e888-4284-8e5d-314e3f6cf91a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "51c348e7-0ef2-441b-8b93-7886109dd614",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b79295-25ce-4b84-a301-aae38c4941ee",
        "cursor": {
          "ref": "0fc7b1e9-6725-4b28-982a-a65b917281f4",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5b4df42d-0487-424c-b679-d235c18e640f"
        },
        "item": {
          "id": "84b79295-25ce-4b84-a301-aae38c4941ee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6ec46880-be90-4a1c-a817-7d8210187990",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61749be-be05-4a8f-ae6e-59766f3aee5a",
        "cursor": {
          "ref": "56493299-0f20-44d0-9117-aabedcb37b93",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ffce9d7e-69b1-4dba-9d18-48802560dd97"
        },
        "item": {
          "id": "c61749be-be05-4a8f-ae6e-59766f3aee5a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7fe44678-2e35-40a4-b88f-02764eefe9bc",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83d47ba-7593-4cac-8857-5591a95c41bc",
        "cursor": {
          "ref": "b9cac285-4f58-4b05-a91c-50b93fd8730e",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0912fbff-df0f-4872-8340-e363e061de48"
        },
        "item": {
          "id": "c83d47ba-7593-4cac-8857-5591a95c41bc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "29582e8d-c6fb-44a7-9de0-5cf698411b19",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "38448edb-683a-4099-b7f8-8fc859fd10d4",
        "cursor": {
          "ref": "f54163d9-077c-4573-9c7e-cafeda426549",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b9b9935-3fb4-4eb3-9c0b-538f6d0c45d9"
        },
        "item": {
          "id": "38448edb-683a-4099-b7f8-8fc859fd10d4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e8a0035-48b3-4d3d-b9d3-74b20ce346a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "d9fa5229-d54c-41c9-be74-6847e0fb9404",
        "cursor": {
          "ref": "bcdb4a61-a468-49f1-8615-e0ef0e613b1b",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7ad7de4c-268a-47a2-a05a-df2a8034c560"
        },
        "item": {
          "id": "d9fa5229-d54c-41c9-be74-6847e0fb9404",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d9c62e6-d82d-4b47-a80a-5ce26e52b959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fa5229-d54c-41c9-be74-6847e0fb9404",
        "cursor": {
          "ref": "bcdb4a61-a468-49f1-8615-e0ef0e613b1b",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7ad7de4c-268a-47a2-a05a-df2a8034c560"
        },
        "item": {
          "id": "d9fa5229-d54c-41c9-be74-6847e0fb9404",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d9c62e6-d82d-4b47-a80a-5ce26e52b959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e4e2a2-cebd-4a5b-bb94-595480d61d9d",
        "cursor": {
          "ref": "5295e86c-a351-4ca1-a815-391dd702aab0",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c77df167-7dc2-4a61-a1a8-5ec8006d06f2"
        },
        "item": {
          "id": "b1e4e2a2-cebd-4a5b-bb94-595480d61d9d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3f288dd9-4941-4402-9178-c0b3489740fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51712cf3-8aa5-42fd-9c2d-53aa1721803c",
        "cursor": {
          "ref": "d152d797-c11d-4fbd-a566-7168093ffc14",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c60bb6c3-1564-4a64-a05b-09c50a97992a"
        },
        "item": {
          "id": "51712cf3-8aa5-42fd-9c2d-53aa1721803c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "712797a1-2ff6-4b2e-8aad-1d420bf8ea3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bda51a-f14d-4b81-bc28-3a3084d86971",
        "cursor": {
          "ref": "39e7f635-40b6-4fd1-b2a3-5fe1ae13b1ed",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bd848b84-acb7-4011-81c8-e8844defa40a"
        },
        "item": {
          "id": "95bda51a-f14d-4b81-bc28-3a3084d86971",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7abde1b6-6c1e-46ff-acea-f1ac492a0327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74dee39-42d2-43ca-9ce4-a7d20ca5f5b2",
        "cursor": {
          "ref": "d5bcbb80-bd68-40d5-8f4b-bf0ee51c8c93",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "087cda81-d93a-4056-93da-05962b81c6ad"
        },
        "item": {
          "id": "f74dee39-42d2-43ca-9ce4-a7d20ca5f5b2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f7e99049-7b6f-430d-881a-c24a7bcf46d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ad349c-a414-41ec-b110-d32b8de9a82c",
        "cursor": {
          "ref": "bac0d737-dd06-4eb1-9e92-a18b2a0f22dc",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ce0d984c-16cd-4b24-8773-42b4fa85de69"
        },
        "item": {
          "id": "37ad349c-a414-41ec-b110-d32b8de9a82c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "64f72db8-dfb4-4b00-ac10-e55c3fc9fc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ef8d79-8f75-4b73-961d-04033b7abb17",
        "cursor": {
          "ref": "c04375c5-d366-4399-894a-8d58e89496e4",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e3922d88-d025-4885-8b31-df584ce172f0"
        },
        "item": {
          "id": "f1ef8d79-8f75-4b73-961d-04033b7abb17",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35eecfce-2d9e-4033-bbc8-523bb5ef880f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dfd94360-0c77-4b48-a696-f4e4afb854d6",
        "cursor": {
          "ref": "c3bd7043-7253-49d0-9f6b-185c9c1008ba",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "13fd2278-6808-4c56-9634-ded506fbea84"
        },
        "item": {
          "id": "dfd94360-0c77-4b48-a696-f4e4afb854d6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64780d2c-b738-4cc9-9fe7-cc65c4aad356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27005544-d959-46d6-9d89-fc9307b177a0",
        "cursor": {
          "ref": "f8b0e415-ef48-4cbe-a90c-d1d5ffee4350",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ec75e1ce-b52b-4f2c-bd27-55ee5e1a89c7"
        },
        "item": {
          "id": "27005544-d959-46d6-9d89-fc9307b177a0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7c08ed48-1ea0-4b59-aaf0-1c0f78e497f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7874f1-6d0a-4e96-886e-392dc0e4f8c9",
        "cursor": {
          "ref": "e5d3cac7-079c-4a35-b0dd-941002f101e9",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9b36a0b2-c7be-4e1a-aae7-e76583df6286"
        },
        "item": {
          "id": "7d7874f1-6d0a-4e96-886e-392dc0e4f8c9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "617c6299-d0e0-4a74-816c-17c7505d62b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260e6d8f-dd15-4f0c-9089-bef379b7f124",
        "cursor": {
          "ref": "626b265e-fa06-40c4-b5f5-405b43164707",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2be58849-63ef-406f-a3b7-4b0aaab09340"
        },
        "item": {
          "id": "260e6d8f-dd15-4f0c-9089-bef379b7f124",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4acd1018-aad2-451a-a1fc-b2d4270896c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb7b6b6-2483-44b9-83ab-318c522d19a8",
        "cursor": {
          "ref": "35711d4d-8a72-4d16-b851-a767516bf195",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72f05779-f18c-42e1-8757-36af1ecb41a0"
        },
        "item": {
          "id": "cfb7b6b6-2483-44b9-83ab-318c522d19a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "36187332-275a-4990-a9ad-2a65d87803ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770070f0-42c1-40e1-b14f-423a9b6d9433",
        "cursor": {
          "ref": "82b4f7ed-a3cb-406a-8123-3ecb3d058452",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fa52e9f6-75a3-41a4-afa7-d26719676388"
        },
        "item": {
          "id": "770070f0-42c1-40e1-b14f-423a9b6d9433",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "36c0f747-ebd3-4fee-bff0-430312770117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a6eab1-1d9a-4fb3-99bc-92185313d137",
        "cursor": {
          "ref": "0bea3c53-31cb-499b-a80c-5f3f8a7572d7",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5d2a7618-5d51-4102-b2cf-aef47b87b4eb"
        },
        "item": {
          "id": "87a6eab1-1d9a-4fb3-99bc-92185313d137",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a516d3e8-7a07-4fd7-a522-87cbf403ec4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28113f3-f947-448f-991a-45340044f485",
        "cursor": {
          "ref": "05412b5b-1eed-4692-a266-12218c257077",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "33eccef2-21fa-4863-95d8-2f047f6b7e26"
        },
        "item": {
          "id": "c28113f3-f947-448f-991a-45340044f485",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9843a9f-ecd6-4e27-af8f-1468bfbf51c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0e3d64-5feb-4dc7-b2ae-5ad2187ead90",
        "cursor": {
          "ref": "90526927-0507-48bc-87e0-54c47f78da61",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "31066104-9055-4217-97e3-3dcac4d08b41"
        },
        "item": {
          "id": "8b0e3d64-5feb-4dc7-b2ae-5ad2187ead90",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4a59a0b7-bc49-498c-b82c-b6762212e9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20651c6c-4a07-49c4-8273-488b8224cff5",
        "cursor": {
          "ref": "62ae0f69-858e-4a5e-8ea8-16afb5ea18f9",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6f77f88a-82aa-45c8-814a-7c93a93bfb24"
        },
        "item": {
          "id": "20651c6c-4a07-49c4-8273-488b8224cff5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bd666834-7d85-4b8b-ad0f-64baff222c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34543ee2-e186-4714-a391-0401c0eed9f5",
        "cursor": {
          "ref": "c0bb5e0e-d2d2-47b1-ad81-1402d65a23c7",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4df16052-0d22-4fd7-8281-f66466e50237"
        },
        "item": {
          "id": "34543ee2-e186-4714-a391-0401c0eed9f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b16edc91-8509-4428-85da-e60e6dc8c22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6305462c-6fed-4113-85a0-6f41b146c03e",
        "cursor": {
          "ref": "f67853b8-1fff-4536-9a06-c26339441b36",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5f7b1f4e-0f93-4f97-a944-c1d04aefaa37"
        },
        "item": {
          "id": "6305462c-6fed-4113-85a0-6f41b146c03e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7ae907f6-d9b5-4225-bf3b-9a815da1ce35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c46a915-b428-47d0-8e9e-a46e8355f8bc",
        "cursor": {
          "ref": "b3fd5c7e-70cf-4721-a8ce-7c517d75c49f",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "150a9ee0-8b8d-4dc8-af44-e84554eaf7b6"
        },
        "item": {
          "id": "5c46a915-b428-47d0-8e9e-a46e8355f8bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "974e97b5-f62f-4951-9ac8-bcdeef394899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2239d496-1b48-4d63-bba4-dd0ee40b723b",
        "cursor": {
          "ref": "709ed669-f596-4b39-87f1-a71b2dc09683",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b97a0e46-a272-42a6-a41a-861fb0d9ff14"
        },
        "item": {
          "id": "2239d496-1b48-4d63-bba4-dd0ee40b723b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "046ba470-f72c-46ec-8708-f8a3d232bdf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f0847f-c4b1-49dc-b408-112d66d77e60",
        "cursor": {
          "ref": "63345358-6e26-4e92-9143-a486a0988ee7",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "502c7533-d463-47ee-9dd9-5d6da238162c"
        },
        "item": {
          "id": "d8f0847f-c4b1-49dc-b408-112d66d77e60",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2fa625d2-ef2c-43fe-a2a0-3f8f7fca6b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173081e8-09f2-4c7b-9e12-ba9c0e748025",
        "cursor": {
          "ref": "711d359a-2b00-4b19-850c-13439db7edb1",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "79b3479b-74ec-45e9-a48d-5c7d4009b391"
        },
        "item": {
          "id": "173081e8-09f2-4c7b-9e12-ba9c0e748025",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "14c65fcc-c9ff-4905-83e7-4a7dbb4b74e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d71d5e5-513b-408f-8644-237fb7ce8004",
        "cursor": {
          "ref": "a5a88ec7-6feb-4cd7-8ba7-c820a02d595b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9be1202b-087f-46eb-95f1-cd73498e9302"
        },
        "item": {
          "id": "9d71d5e5-513b-408f-8644-237fb7ce8004",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5efbe7fe-2425-4a0f-8963-5175d50242e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165db4bb-a910-42c3-ba61-f41ddb0e3a54",
        "cursor": {
          "ref": "8d43b08d-ae83-4d97-b154-7c7672d9ce87",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0acc2269-92fd-4b95-bc09-eb79722f6c1b"
        },
        "item": {
          "id": "165db4bb-a910-42c3-ba61-f41ddb0e3a54",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "094a5233-26ca-4655-9354-64b7d4edff4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef34253-ae07-4eac-9c68-cfe711ba41f8",
        "cursor": {
          "ref": "3f630520-8f56-41ff-8d3b-33c075bfce4d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9e668ef1-e47e-4972-9451-840d7758c58d"
        },
        "item": {
          "id": "4ef34253-ae07-4eac-9c68-cfe711ba41f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "898c8255-8145-449f-b7c9-8eadc2950082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4ba11a-992e-4ee7-baeb-ce2410da0aa6",
        "cursor": {
          "ref": "dc358b43-8272-40e6-99f8-17cbf44ff3ea",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "657aa265-ef64-4ab9-94c2-4d1f49a97dfb"
        },
        "item": {
          "id": "6f4ba11a-992e-4ee7-baeb-ce2410da0aa6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6a98ee0e-9df3-459f-ba94-afc6965b5a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58de0ae1-d7c1-4fdc-bdc7-c7bb39e68dbb",
        "cursor": {
          "ref": "432ad7d5-62b5-452a-88db-7566a1ec5403",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7cc3cd30-b41f-4442-ba52-607f7a0e982a"
        },
        "item": {
          "id": "58de0ae1-d7c1-4fdc-bdc7-c7bb39e68dbb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ceb15dc0-6589-40da-8e9e-bbec12ace528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f232f4-8280-49d3-af8c-0ca72f8e8437",
        "cursor": {
          "ref": "98d406e6-4d98-463d-9735-bf5dbacd719e",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8e04c336-f0b3-40c2-860e-c0c9611b3c42"
        },
        "item": {
          "id": "f8f232f4-8280-49d3-af8c-0ca72f8e8437",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "653e78e8-3fd8-43bc-b171-6f9a8094f5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e3342e-3307-4c79-a4a4-c936f2718eef",
        "cursor": {
          "ref": "c95b19b5-07b4-4325-8f7b-12d78d77d799",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "190ceea0-45eb-4c19-9770-a5f474196784"
        },
        "item": {
          "id": "81e3342e-3307-4c79-a4a4-c936f2718eef",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ed68c71e-9343-4ad8-977d-e0170bf62173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80328f8-aa9e-419d-bfce-3dcdd5ab350c",
        "cursor": {
          "ref": "4731e0f9-5827-446c-9c13-f6458d6abc8a",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ddce719c-7b93-4ef3-a8c9-1afe166d2ac9"
        },
        "item": {
          "id": "d80328f8-aa9e-419d-bfce-3dcdd5ab350c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "19b00b79-4b99-40c6-ba51-208b5428602f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f7f7f2-59a2-43b8-8c4f-2cd4a1a709f3",
        "cursor": {
          "ref": "9f241caa-c2dd-4a97-8524-6204ae8acdb8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ccfca456-b588-4637-8192-23730033c73f"
        },
        "item": {
          "id": "e4f7f7f2-59a2-43b8-8c4f-2cd4a1a709f3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "785c3b7d-cb78-492f-8306-21a66e00bf35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49095f28-a34a-48b0-a9b7-810bb845873d",
        "cursor": {
          "ref": "d4a02f2f-8b6c-42bc-9e66-a0097dcd6114",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1e72df4b-07e7-438c-b65a-e0cd440aa41a"
        },
        "item": {
          "id": "49095f28-a34a-48b0-a9b7-810bb845873d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "57f64780-c797-4c81-a67d-817ca3a9e753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9b478952-75c7-4b6d-9f2b-f9239e1c7820",
        "cursor": {
          "ref": "b6412996-f459-4ddf-bf4b-9f3c41fe72b3",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5f7e4688-4357-43c4-ba89-58e453c653ed"
        },
        "item": {
          "id": "9b478952-75c7-4b6d-9f2b-f9239e1c7820",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "10fd88da-c9f1-4dee-803b-596325b79b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4e09180c-5952-4f4c-abab-746a331943b8",
        "cursor": {
          "ref": "ccd3e3b3-938d-4cfd-9d1b-03814e70f90c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2e7d618a-4271-4e6d-81e5-eb5de8753e40"
        },
        "item": {
          "id": "4e09180c-5952-4f4c-abab-746a331943b8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1b498acc-056c-4423-9b30-4841d8c92f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e09180c-5952-4f4c-abab-746a331943b8",
        "cursor": {
          "ref": "ccd3e3b3-938d-4cfd-9d1b-03814e70f90c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2e7d618a-4271-4e6d-81e5-eb5de8753e40"
        },
        "item": {
          "id": "4e09180c-5952-4f4c-abab-746a331943b8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1b498acc-056c-4423-9b30-4841d8c92f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269feff6-7700-438a-a2ed-c9c917dca0f4",
        "cursor": {
          "ref": "b3740fab-4495-4a13-a559-d3a31130c822",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e692c54-a663-4297-bc95-6cbd185cf2c5"
        },
        "item": {
          "id": "269feff6-7700-438a-a2ed-c9c917dca0f4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a5984f98-704d-4ca9-99f8-e8a255a93c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285f0cb8-48e0-4b85-9bf7-fbb5c0e27c31",
        "cursor": {
          "ref": "96923aec-65cc-494d-8726-aae331547086",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a29515cf-5926-4044-a068-6c6c03204848"
        },
        "item": {
          "id": "285f0cb8-48e0-4b85-9bf7-fbb5c0e27c31",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "aaa43e34-22f8-4113-98a9-4d0f1e80195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ccf3f3-ebcb-4eca-8c5e-cb7eef8c0d84",
        "cursor": {
          "ref": "4bed3dbc-7958-43ea-9175-29279c8208ee",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe0c0ae6-8ef8-4d32-89cc-2cc11f366278"
        },
        "item": {
          "id": "42ccf3f3-ebcb-4eca-8c5e-cb7eef8c0d84",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9d7c0140-4ee4-4ebd-a297-8402bbfc5f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea410e14-1244-427c-b6ee-1259cbc00928",
        "cursor": {
          "ref": "b88a20d4-32fb-40de-a975-be67d9f8081e",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "94547bd5-94a9-4b1d-a628-ef770825d4fe"
        },
        "item": {
          "id": "ea410e14-1244-427c-b6ee-1259cbc00928",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0f27e7e3-a2b3-455b-b19e-982bb36ff5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb837f4-4291-4fb9-8bed-eeaea88d22f2",
        "cursor": {
          "ref": "2a785af2-d9d9-4011-80cf-26fc19a55494",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f6a2026f-771b-42ff-b37b-1e2cb554ea56"
        },
        "item": {
          "id": "5bb837f4-4291-4fb9-8bed-eeaea88d22f2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c2045e57-6592-489b-a458-d7ca58c73e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47f80ff-a772-41d6-a118-1966209c578b",
        "cursor": {
          "ref": "3ade8496-92b6-4bcb-895a-b3dfca93fd83",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "02471236-2250-407f-8c1d-d0a3c8f1b080"
        },
        "item": {
          "id": "e47f80ff-a772-41d6-a118-1966209c578b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d50ac88-d558-4212-821d-844b6dc8353c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3129d6e-f7f4-4fa2-b6ab-9c79e50e55e9",
        "cursor": {
          "ref": "bc885a16-5d21-4c72-a47e-8bac3834d622",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c4309d67-48a7-43f0-93f9-2fe346fd1aca"
        },
        "item": {
          "id": "f3129d6e-f7f4-4fa2-b6ab-9c79e50e55e9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c5be06bd-bb0c-4afc-89c9-13a5b4de878e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28240321-ed64-4287-b279-84f642e6c22e",
        "cursor": {
          "ref": "7138899b-0abb-49a5-82e5-d6c1dc18f6f5",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "415b604d-f029-4806-a66d-4cb6bfa143cb"
        },
        "item": {
          "id": "28240321-ed64-4287-b279-84f642e6c22e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "349ea1c4-bf66-46e7-b769-6a993bfac139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ecb11e-d5ee-482f-a256-a958cd1af14a",
        "cursor": {
          "ref": "d574b2ea-ea10-4e5b-b008-2eb6e15c4548",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1b629fce-d2e3-4772-ac5a-a675fb85f348"
        },
        "item": {
          "id": "25ecb11e-d5ee-482f-a256-a958cd1af14a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bb3e4998-5583-466f-a52e-f569f2352f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b963fa5-5b20-4e44-9eb2-d0c8ba4167a4",
        "cursor": {
          "ref": "229286a2-f8fa-42e4-8c31-27d716fbdc5a",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1eab34f6-c7ad-4210-a6da-70e57dfbb338"
        },
        "item": {
          "id": "0b963fa5-5b20-4e44-9eb2-d0c8ba4167a4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "db6721f1-cfcb-49a9-93c4-395b61194946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d11a5e-e18e-4d36-973c-32cf613e7128",
        "cursor": {
          "ref": "62ac1bc5-e64f-4e76-b54c-308aaad47edd",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c41e734b-eac7-4ece-a72d-12d850251602"
        },
        "item": {
          "id": "97d11a5e-e18e-4d36-973c-32cf613e7128",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ff533462-1313-4fd1-bf58-0127935b67a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a5c2c7-e39f-4d55-bcc3-555812d01bbf",
        "cursor": {
          "ref": "63862937-3e86-4491-be66-ff4e879b61ed",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "35ef9b40-6e4a-436c-b669-484c9146d05f"
        },
        "item": {
          "id": "33a5c2c7-e39f-4d55-bcc3-555812d01bbf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7cbe9f13-8ec4-4c8f-ad9c-b9552b957c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16549fad-506a-4593-9a7e-55f6365f667c",
        "cursor": {
          "ref": "165f181b-fb25-450a-b971-3657bfbed20f",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2466f617-68a9-4cdb-8fc6-353c4ab6f1e2"
        },
        "item": {
          "id": "16549fad-506a-4593-9a7e-55f6365f667c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73806a67-9e19-4075-b419-8b4435f50617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed9624e-5e28-4db2-b50f-7e2031b393eb",
        "cursor": {
          "ref": "3962e163-68c8-4b9d-90c7-40776038301c",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "49a35167-a14a-48a5-b51e-5cc2c097fb7e"
        },
        "item": {
          "id": "5ed9624e-5e28-4db2-b50f-7e2031b393eb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e186c922-97dc-470f-845f-bb7fa3f9eb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fa769b-5780-46e7-8c09-c409633486fa",
        "cursor": {
          "ref": "eae17555-1b35-4763-b2eb-ade43b199242",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "01fc173b-9fd8-4791-bd7e-3a5a2832fe59"
        },
        "item": {
          "id": "71fa769b-5780-46e7-8c09-c409633486fa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9e76270d-beab-4bea-b5a8-ed4c24d7fb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f503d8fe-fad9-4965-9af4-0fb187072937",
        "cursor": {
          "ref": "eb6567e5-b801-475b-ab79-138750b9928f",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c1f62665-258f-4b18-861d-a959aa1467db"
        },
        "item": {
          "id": "f503d8fe-fad9-4965-9af4-0fb187072937",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1f6c6bcd-fb69-43a4-9745-ea084a53ec7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd667b90-c277-435c-95e5-1060585b6b03",
        "cursor": {
          "ref": "2dd5a39f-d7ff-4773-9301-e5a67bee7cfa",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2a47c43-21c5-47f9-a047-78310908f8e5"
        },
        "item": {
          "id": "bd667b90-c277-435c-95e5-1060585b6b03",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "91e2cf3f-1d55-47ae-8846-024e6ab0de55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a445bec-e13d-4cd5-b1f6-01b5b19d1e29",
        "cursor": {
          "ref": "0a86a5cf-127f-413f-b71a-3499a10bc34e",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b9f4d98e-3202-464f-bc88-09cef715d815"
        },
        "item": {
          "id": "9a445bec-e13d-4cd5-b1f6-01b5b19d1e29",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "121ca8a0-d2a9-4307-8fb3-cd483bf36cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2045e897-6bcf-4cc2-87dc-e81f641ea973",
        "cursor": {
          "ref": "c0b2d73c-56c9-4f76-990f-8a93ee885cae",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "abde9a7b-c3e7-4a63-8cb4-6e0c38255866"
        },
        "item": {
          "id": "2045e897-6bcf-4cc2-87dc-e81f641ea973",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78151c22-15ac-49e4-b5a1-2a410c184754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1006a0a1-4afc-4733-8f9d-3ddeb5fb530b",
        "cursor": {
          "ref": "c43a8e9c-19a8-42fe-9ab5-3a94f92d3767",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "465ee022-157c-4eda-ad09-a03daa9f5c2d"
        },
        "item": {
          "id": "1006a0a1-4afc-4733-8f9d-3ddeb5fb530b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ee7b2028-fa3e-4c7b-8cf7-4623b3117ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f616e9d-3e59-434e-9f09-1310afdee250",
        "cursor": {
          "ref": "9da1d6a0-5a6a-471b-8f80-52f7b28d508e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c75a61be-eb8a-4f99-b316-a8070154b204"
        },
        "item": {
          "id": "2f616e9d-3e59-434e-9f09-1310afdee250",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8316425f-7cfb-4c9d-b4b2-618ad3834ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303faa53-d95c-4af7-9f5e-8846cf5f0a05",
        "cursor": {
          "ref": "642d8ba5-ad55-4a09-baea-31389be6ec4b",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a7fe00e1-695e-41cd-b886-0a0f5ad8e6da"
        },
        "item": {
          "id": "303faa53-d95c-4af7-9f5e-8846cf5f0a05",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6b3d3096-7a4f-4208-9e8c-08eb92555666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9f8bcc-68c2-4760-8086-7b89bb2ff435",
        "cursor": {
          "ref": "017e4484-9375-4d0e-9d64-7260ce3930d1",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7307896e-5cd3-4dbb-8eaf-ad8a4241da41"
        },
        "item": {
          "id": "cc9f8bcc-68c2-4760-8086-7b89bb2ff435",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "66a1e698-dbbd-41e5-bf82-6c541d7226eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04eabb9a-59ee-46be-b98a-f56e27242352",
        "cursor": {
          "ref": "19a9ac38-fe47-4f87-8ac5-8edbc0424a2c",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6e7a8e4f-65bb-4151-956d-70435042d444"
        },
        "item": {
          "id": "04eabb9a-59ee-46be-b98a-f56e27242352",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c687d750-3b91-49e5-9ff1-1db790132e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e401edfd-e87d-44c2-842c-0b0c8ecf69a2",
        "cursor": {
          "ref": "03a3f592-6004-4b1d-afbd-c7944bfbfb29",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "445c3b21-8ad7-4631-bbb4-9f92b477f478"
        },
        "item": {
          "id": "e401edfd-e87d-44c2-842c-0b0c8ecf69a2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "176c26c1-6e2f-48b5-8b43-4116ee915e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bd9a3a-dd59-427a-bae0-eeeb40fb6ead",
        "cursor": {
          "ref": "0c0ab940-a8d1-41a9-9b05-d489ebc53110",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14ec11b5-5f2b-4488-9898-674c1e1a0e91"
        },
        "item": {
          "id": "94bd9a3a-dd59-427a-bae0-eeeb40fb6ead",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "26776cd4-cac5-431b-a10b-95e7def208af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33018cd1-7628-4232-b2bf-b7aadc2cf00e",
        "cursor": {
          "ref": "265f4854-d118-495c-9308-b501cdbbe280",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "58d9a063-722a-49be-8c97-6a57964712b8"
        },
        "item": {
          "id": "33018cd1-7628-4232-b2bf-b7aadc2cf00e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "245d4295-40c8-4d95-9675-74e616604686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd08dff-26f2-4756-8c7f-1aecf420353d",
        "cursor": {
          "ref": "685db665-1d45-480a-b90b-14bdcf8f7f3f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c9112313-7106-4e9f-9ad1-9bf43658e144"
        },
        "item": {
          "id": "3bd08dff-26f2-4756-8c7f-1aecf420353d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e1a89e72-88e5-4758-9035-6805d29fb8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22db3307-7a7c-4fc0-9f76-671f5e1085f4",
        "cursor": {
          "ref": "1dda2f7e-6e2c-4472-9f59-bfa1bc4ba815",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6f66ad50-4612-4f9b-839b-6fe4dab3de42"
        },
        "item": {
          "id": "22db3307-7a7c-4fc0-9f76-671f5e1085f4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6747a0cb-6ba0-4be4-a56a-e68e240adeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebf2927-79c8-48d2-84c4-3304f7fb6b27",
        "cursor": {
          "ref": "c23b0522-d661-4374-916a-0eefef35ee5d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f993d4af-0ee0-42c3-ab03-bd2b1178f83a"
        },
        "item": {
          "id": "1ebf2927-79c8-48d2-84c4-3304f7fb6b27",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "aba3b49d-7324-4a1e-9be0-41beed477029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6bc349-b713-47f9-b7af-18f9ba78c4a3",
        "cursor": {
          "ref": "9ba440a7-2919-4c14-aa01-f8b034748bf1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "acf81de2-1ba2-470b-9c0f-36d0576cea1f"
        },
        "item": {
          "id": "1e6bc349-b713-47f9-b7af-18f9ba78c4a3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e59aa0ef-45bd-4ae2-9107-1df4716da642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2374990e-6e7a-495b-a751-a47f0376ee88",
        "cursor": {
          "ref": "1668612d-a34f-4658-965d-c8d3bfe2484e",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c83d9f38-e03f-43e2-aeac-961c31077437"
        },
        "item": {
          "id": "2374990e-6e7a-495b-a751-a47f0376ee88",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "54067b5a-c137-4d0f-97de-c90b0259dba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de61e3aa-6fac-434a-8a1b-cb34e1c69096",
        "cursor": {
          "ref": "1a1c1209-3fcb-4445-95e0-cfb3b0762249",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e47add68-b538-4235-b429-72b82b3be359"
        },
        "item": {
          "id": "de61e3aa-6fac-434a-8a1b-cb34e1c69096",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e8b5239c-0750-400e-9b87-dfef2dd523b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11474bd2-afa6-4d3b-b033-1b8d8f0e7c03",
        "cursor": {
          "ref": "375d56cb-a93f-47ac-ab1b-c5d910430cf4",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "828003df-b754-4e27-a272-3883209c574a"
        },
        "item": {
          "id": "11474bd2-afa6-4d3b-b033-1b8d8f0e7c03",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "70d58128-6c7c-4995-b43c-9184a1486885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b406b5f-bddb-4d95-ab59-b2a387d5babb",
        "cursor": {
          "ref": "54db2478-46fd-4f16-966c-62c0db517eee",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ddbce13d-db67-4e83-9798-343f02ab57b2"
        },
        "item": {
          "id": "8b406b5f-bddb-4d95-ab59-b2a387d5babb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "180dbcc8-e362-45c1-9c79-4d1b3b98ec0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aec1953-060f-4b89-82c1-9463473b757e",
        "cursor": {
          "ref": "3e9d2216-9263-41d0-8f83-a786db2c392a",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3a9c3ced-0336-4023-94d1-7377fce09d9d"
        },
        "item": {
          "id": "7aec1953-060f-4b89-82c1-9463473b757e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d05f8477-8bcc-48bc-8414-82b869761972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccbd382-11a0-419a-b597-7f872d1c1a60",
        "cursor": {
          "ref": "20870d89-53a0-4359-a00f-13558cc58dfb",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4e5e5006-7a9e-49e4-b797-96936120ad95"
        },
        "item": {
          "id": "2ccbd382-11a0-419a-b597-7f872d1c1a60",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f42c993b-2586-4056-a4b9-5be8956b6672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1b26aa-3a1c-4c44-890d-16a3e32fc926",
        "cursor": {
          "ref": "9d75ccc0-af84-4054-8275-bf3ac72b993b",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3c90c8d9-374c-437a-9c37-983dac088882"
        },
        "item": {
          "id": "af1b26aa-3a1c-4c44-890d-16a3e32fc926",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d6b09a86-3b9e-49a6-b8f7-13018206b5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d24644a-4a3c-4d87-83c8-676970ab1f5c",
        "cursor": {
          "ref": "938abf4a-c29b-4b29-9a9a-e99df1a6cca6",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ce77511a-de21-4740-8131-726b6e2ff466"
        },
        "item": {
          "id": "4d24644a-4a3c-4d87-83c8-676970ab1f5c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7fd00b1d-9eff-48a2-85e4-42a6ca91a931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d1de33-3c17-4d27-bd06-4ad28a2d3772",
        "cursor": {
          "ref": "e0e1325c-c519-4fd1-9145-e0ff02da5ff7",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8522f901-42f4-45f0-97e0-d42c14afd695"
        },
        "item": {
          "id": "a7d1de33-3c17-4d27-bd06-4ad28a2d3772",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "29c3d1e8-cbeb-46a4-9d18-a7e896f217aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f8d620-3ab5-4978-8843-3c0802958ce1",
        "cursor": {
          "ref": "4cb3f9f0-1bbf-4282-abb6-c70b32dba134",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ba8865f6-b513-42ce-ae34-b7a736cef970"
        },
        "item": {
          "id": "32f8d620-3ab5-4978-8843-3c0802958ce1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f306b62c-24e5-4545-9efa-7542411ed037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10dd89d-5ccb-4784-82bc-d0bcae3626c8",
        "cursor": {
          "ref": "e7ada323-82da-46bb-9be5-e930c252ec68",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8fa9681d-275a-4dfe-bb1c-6b4c93ef054c"
        },
        "item": {
          "id": "a10dd89d-5ccb-4784-82bc-d0bcae3626c8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "73b6f650-7d73-4d5e-a9af-71e5f873ed6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640f70be-c6f8-446b-be39-af7ac5b44db4",
        "cursor": {
          "ref": "073f095e-4db9-4bea-88ba-a427f8e1704c",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "57eb58a4-5c97-4eae-9f48-82d117a70dba"
        },
        "item": {
          "id": "640f70be-c6f8-446b-be39-af7ac5b44db4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0d9e97b4-7aa7-400f-aa9c-0ad26625dbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8971496c-72a9-4551-a99f-487b39b99ec3",
        "cursor": {
          "ref": "1214a116-9df2-4f27-b87e-c95b8525142d",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8c5f0536-5e5e-4b48-a5e5-218e1daa0231"
        },
        "item": {
          "id": "8971496c-72a9-4551-a99f-487b39b99ec3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6740d37a-1e50-48fc-97de-43db7e3b6289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cbe0ff-710d-47c8-b6d3-e58a1d2da92e",
        "cursor": {
          "ref": "61ea2750-1aa4-40b0-9ba6-b07a2550ad32",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "031c4400-34f7-426e-8db5-d39369d83258"
        },
        "item": {
          "id": "18cbe0ff-710d-47c8-b6d3-e58a1d2da92e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "95acb5d3-548d-4ff5-a080-f323654da4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3052941e-3346-48f9-b1ca-e19f73d85718",
        "cursor": {
          "ref": "0a0d796c-32a7-45d0-a8e2-ff4f149253b8",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9e319ddb-712c-456d-b8e5-6becd864ddc5"
        },
        "item": {
          "id": "3052941e-3346-48f9-b1ca-e19f73d85718",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5625a527-cafc-4123-aa1b-50587a189952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d826792d-d4d9-4d1e-abbd-ddb7a0474c33",
        "cursor": {
          "ref": "6c72adc1-df74-489b-9b32-48b3be1ce7a0",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9e205573-77e0-47b2-934f-9daee2a74b01"
        },
        "item": {
          "id": "d826792d-d4d9-4d1e-abbd-ddb7a0474c33",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c33867b2-2bd8-4ff5-af29-863348b144bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa940ff-47d1-43eb-b430-b0975eeb10a5",
        "cursor": {
          "ref": "a5464b54-b649-4133-9fb0-c124a3a1c111",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a6084852-0042-49a9-9d03-035dc43f3b31"
        },
        "item": {
          "id": "0fa940ff-47d1-43eb-b430-b0975eeb10a5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "064777b8-9a95-433b-a53c-e6769d57882a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185e7466-ef54-4da0-8e86-a455474ac2e5",
        "cursor": {
          "ref": "f0467fde-c1df-4753-88a1-2470b8c457b5",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0fff50cf-afa8-4fef-8e6a-3fe7eb95fbe0"
        },
        "item": {
          "id": "185e7466-ef54-4da0-8e86-a455474ac2e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4fc22484-f84d-4945-8ab5-e06ca7163e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9f9e70-312f-475d-ae23-728f226aeebf",
        "cursor": {
          "ref": "536320ea-285f-4f69-b164-93547f647bde",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "993c000b-0b5c-4c55-a656-092a5f4ebc6b"
        },
        "item": {
          "id": "8e9f9e70-312f-475d-ae23-728f226aeebf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a8ba03cf-7df4-40d9-8a34-47f02691ff51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185f41d6-50c8-42b9-866b-782ac0864c86",
        "cursor": {
          "ref": "8e463fa3-47b5-4248-8437-e72a94db466a",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a161b759-493c-47c5-99cc-ec24fe552194"
        },
        "item": {
          "id": "185f41d6-50c8-42b9-866b-782ac0864c86",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b696216e-823a-4ec6-846a-b5c9aac4f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae904c42-2815-4621-88f1-a09771992c33",
        "cursor": {
          "ref": "56291e96-6f15-40bb-abfb-d4d0159e58a3",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5fdf2de0-ba21-4b47-892f-d251da2fc1bf"
        },
        "item": {
          "id": "ae904c42-2815-4621-88f1-a09771992c33",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0afc61c8-c90c-4c27-ba2b-a9b933cbb693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63ba09c-4575-48d8-bb39-664fae3b96af",
        "cursor": {
          "ref": "4edd7670-c826-4fec-a844-a234921ffb48",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6009f0b4-472a-42e9-b819-f43bc72e05ca"
        },
        "item": {
          "id": "c63ba09c-4575-48d8-bb39-664fae3b96af",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e6054345-a649-4535-b4cf-2abc141b0b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9e2808-fe55-4650-acda-5893e763a9a4",
        "cursor": {
          "ref": "3f984a18-38eb-432e-8a6b-cf080449c782",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8c1b25dc-a721-4735-9198-e8774e22c985"
        },
        "item": {
          "id": "be9e2808-fe55-4650-acda-5893e763a9a4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f59e1d12-9e05-4337-866c-af76f96fb445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb3d238-3964-4bed-b1e7-921c0a698fc6",
        "cursor": {
          "ref": "69f0208c-76e4-4363-a1c8-5a451b631f1c",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3a6ba6cb-5248-4e4d-8c49-ce31d55deec6"
        },
        "item": {
          "id": "bbb3d238-3964-4bed-b1e7-921c0a698fc6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cf9b2592-3e48-4321-9a1f-4cc5b230ff53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa42c2f-bd02-4384-b2f0-26d4410db021",
        "cursor": {
          "ref": "dd25d74f-8b6f-4bb3-a354-c4b3d8b477c9",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "14472244-ba6f-48fd-af6a-3e3260e9d329"
        },
        "item": {
          "id": "0aa42c2f-bd02-4384-b2f0-26d4410db021",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f528c5a2-8c98-406d-a5e7-c07e1d564f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8edb96-7e40-49a0-bd5f-9d44cb02eadd",
        "cursor": {
          "ref": "84603ff5-e3e5-4773-a043-43e5f6339b36",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "247daf8b-55d0-4e24-92cf-ce539d6ffd42"
        },
        "item": {
          "id": "fa8edb96-7e40-49a0-bd5f-9d44cb02eadd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ffb43f79-beb9-4025-a6f3-c7569a924602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85005749-f7d8-4748-b6b2-f3f4065e7dc9",
        "cursor": {
          "ref": "a332d898-1365-45d3-b68b-58f6cd56854f",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b2ee9feb-02aa-4b17-9f96-4232ea80d185"
        },
        "item": {
          "id": "85005749-f7d8-4748-b6b2-f3f4065e7dc9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e8c87753-328c-4b51-86c3-cbb513e33042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f79558d-6547-4f6b-976f-a64ba76382f4",
        "cursor": {
          "ref": "3845e98a-9b77-4a75-8485-231c11f5a3b1",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "41e0a4de-cc36-4b24-add8-3a29214821f4"
        },
        "item": {
          "id": "4f79558d-6547-4f6b-976f-a64ba76382f4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "851bbe0b-98a3-40e9-aab8-f5969c8f4209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30145aea-73ae-4bdc-acdf-ceafdbae8512",
        "cursor": {
          "ref": "93a7191c-b6f2-44ea-be41-a783298a63ca",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "11483bf4-1e51-4645-bd3b-00128971e909"
        },
        "item": {
          "id": "30145aea-73ae-4bdc-acdf-ceafdbae8512",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6d6ccdfd-27a9-4206-a5ad-3b63f658dd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504483e2-e8aa-4a27-93ca-88a57158f91e",
        "cursor": {
          "ref": "0a24f68e-e740-4b07-bfb7-ee61e79ed38b",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "86a4ca8b-09a3-4e56-8140-6b8a328c0d16"
        },
        "item": {
          "id": "504483e2-e8aa-4a27-93ca-88a57158f91e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a78f423e-4ede-4e92-9354-37b81adbaeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272022cd-4376-47ab-a20e-28e1ab67dd70",
        "cursor": {
          "ref": "72b5a026-a4f8-4bf0-9d14-7b75daae000e",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "47dc0981-ffde-4506-8e2d-d2db52082f5f"
        },
        "item": {
          "id": "272022cd-4376-47ab-a20e-28e1ab67dd70",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8303a6f5-a92d-4cd9-8cee-73e3879908d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fefe2b2-0574-4ea3-87c3-cddafbefe2b2",
        "cursor": {
          "ref": "77bfa93b-40a3-455e-a714-7d1ee5bcec99",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8963cf13-5611-4fb4-ad16-2099d4d75ff9"
        },
        "item": {
          "id": "9fefe2b2-0574-4ea3-87c3-cddafbefe2b2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "590b76c3-0fa3-4408-b32f-51d0167ade14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252accf6-5675-461f-b203-1bd10c469e32",
        "cursor": {
          "ref": "afe3a1e2-b0c8-439f-867c-b7ce2ffcfc17",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "08689bb4-6b41-424c-8828-42efca17875f"
        },
        "item": {
          "id": "252accf6-5675-461f-b203-1bd10c469e32",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1403295c-f3bb-49e5-bd89-1e869489f9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d9ebbf-c43c-4429-9277-b3107e0db911",
        "cursor": {
          "ref": "d6dc00f1-24c6-4775-ad23-c071ba6e4f1b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "150bef33-8f02-43c0-953c-24cd7c206055"
        },
        "item": {
          "id": "32d9ebbf-c43c-4429-9277-b3107e0db911",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "92f39992-c4c8-42f5-92ac-a5a5a4b40ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71a7137-65b5-4d2e-8193-6a68cdc72b50",
        "cursor": {
          "ref": "2b02a092-96db-4d1f-ae2e-4ea063572ab2",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "22877c23-992a-4a4d-95f4-648d781fd00a"
        },
        "item": {
          "id": "b71a7137-65b5-4d2e-8193-6a68cdc72b50",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "65ba7848-05fa-4364-aa0d-cf8ba769aec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e446a60-67c8-47bc-9be9-0d1f09a5cc73",
        "cursor": {
          "ref": "f81848bc-4dc8-4208-baf3-71ed461a9f1e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a24230d3-f54a-4ba9-a66d-09a471ad6309"
        },
        "item": {
          "id": "4e446a60-67c8-47bc-9be9-0d1f09a5cc73",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b52982d7-7900-4cb9-b853-303038a080db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2497977d-d07f-41e1-b3bc-1b5c6503dc43",
        "cursor": {
          "ref": "018f18dd-6ab6-436d-8036-3ae3824d21f4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "17c3a8b3-dde5-42b7-9032-7c25bda27e29"
        },
        "item": {
          "id": "2497977d-d07f-41e1-b3bc-1b5c6503dc43",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f94f3d42-2000-4246-8d29-fe98aea9964b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27652f84-c02b-48e2-861d-809e910dac50",
        "cursor": {
          "ref": "2006ca67-c35a-42c7-b724-a1e32a8ffd35",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5fc09ebf-9d14-434b-b83f-c6331cf31f5a"
        },
        "item": {
          "id": "27652f84-c02b-48e2-861d-809e910dac50",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "394e11b5-dd02-4ebf-9a7e-80895e1bb551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1505f68c-31cd-4f55-a924-6f42638fff11",
        "cursor": {
          "ref": "14365ef9-2042-4835-8cfa-449a923422c6",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b2e2398b-6309-4514-9fcc-cc46d3964f9b"
        },
        "item": {
          "id": "1505f68c-31cd-4f55-a924-6f42638fff11",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b017a8a0-37c1-4a57-9da8-e52938c2e9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6015f8-cd27-4bb1-b7e6-6c41d04451a9",
        "cursor": {
          "ref": "a2e72755-706d-4610-8d7f-eeb72719e1e3",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0a99371e-8b35-4300-bd0a-1db2c7328c4d"
        },
        "item": {
          "id": "ad6015f8-cd27-4bb1-b7e6-6c41d04451a9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8a124181-74f4-48e7-aa57-482454f602bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610a6cdd-36f5-42bd-a3ba-9441e15052f7",
        "cursor": {
          "ref": "04ee1ae8-9428-4798-a7c1-ef716da6f3b5",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ac5211d2-6e31-48c5-a460-08a3df677efc"
        },
        "item": {
          "id": "610a6cdd-36f5-42bd-a3ba-9441e15052f7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8f55f8ad-bbc1-4e92-a841-a1cc025c755b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149c1eac-ddf8-49b2-b17c-8bfe3e0f2bd5",
        "cursor": {
          "ref": "07dcc709-09e2-4155-a65b-9de9582fe775",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9f5da9b9-bb1b-4c92-9b72-6435e09eed3f"
        },
        "item": {
          "id": "149c1eac-ddf8-49b2-b17c-8bfe3e0f2bd5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "29fa6f64-60f1-4657-9870-fbdfbfaf3115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77acd4bc-a5b3-4429-b800-565ada23c374",
        "cursor": {
          "ref": "fe538f19-91b7-4aa3-b857-bf12ee98080f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7194ed61-e554-4876-9caf-711a369312b4"
        },
        "item": {
          "id": "77acd4bc-a5b3-4429-b800-565ada23c374",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df378533-a8da-48a3-ad18-ac89ff33f3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cb343e-69dd-4e47-95ff-caac5559dae8",
        "cursor": {
          "ref": "fe3be6be-6342-49d0-bb59-8cf168dfeadb",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e7e14f01-f036-4359-b17c-2e9ef39384ed"
        },
        "item": {
          "id": "73cb343e-69dd-4e47-95ff-caac5559dae8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "86dc29c7-b12f-4388-a62c-3ab274289782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25fec45-07fe-4ff0-9f0e-c8bd80683904",
        "cursor": {
          "ref": "b05033ab-159f-47f9-8bc0-fb4ba35efb3b",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "25491712-a1d2-4db8-b2d0-d2d2af69c4b0"
        },
        "item": {
          "id": "f25fec45-07fe-4ff0-9f0e-c8bd80683904",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "99f92b54-c9d2-4a08-b9fa-0d16f741dd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f3b949-9f1d-47b4-b9bc-4edbdbfd0be9",
        "cursor": {
          "ref": "eede1fa7-6fc0-494a-ab05-44841a2308ef",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3c083b4f-23d0-44a1-90fa-cc9c5b072d28"
        },
        "item": {
          "id": "00f3b949-9f1d-47b4-b9bc-4edbdbfd0be9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ada285bb-4492-4ad5-a723-4bbc2ba88de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb26b064-f897-4efc-a90f-af675fab36ec",
        "cursor": {
          "ref": "71130898-b1d9-4698-8886-254d7301ae4f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a40c3ce7-b4d8-460a-99a9-4a81a469de0b"
        },
        "item": {
          "id": "eb26b064-f897-4efc-a90f-af675fab36ec",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "554c8f78-3633-46c1-a64b-47daf5af8830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ddf067-7126-479e-8ace-c50922321249",
        "cursor": {
          "ref": "a42a9ecd-351a-4664-bda4-38f967e52d82",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cce6186e-6a93-46f2-8196-a0594840650e"
        },
        "item": {
          "id": "55ddf067-7126-479e-8ace-c50922321249",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "09a525d7-3ead-4b92-aab0-16e03a244bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4849e90-1183-4c5b-bab7-90550dcd2642",
        "cursor": {
          "ref": "a510e961-9d3f-4e76-bd7c-694407c75c99",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d0a71bef-ca6e-4bbd-9edf-1e693edd346a"
        },
        "item": {
          "id": "f4849e90-1183-4c5b-bab7-90550dcd2642",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7baf63b7-f5f1-407f-a824-86db571cc07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d676d24-6d83-4592-8eb3-14c493dc4c20",
        "cursor": {
          "ref": "a1c50595-67f4-40a0-86f5-a549658e7fda",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f87ec032-4275-4f53-80c9-40c6e8f09817"
        },
        "item": {
          "id": "0d676d24-6d83-4592-8eb3-14c493dc4c20",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "20d084b6-096b-4e63-bb5a-4de6858a6115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaaa0db-eb82-40a7-ac76-f8aa407bf3d7",
        "cursor": {
          "ref": "641b308d-66a1-4004-8b45-ae3ae2e7ceba",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9399d87d-f305-48cc-b314-01f2143a0c0f"
        },
        "item": {
          "id": "bdaaa0db-eb82-40a7-ac76-f8aa407bf3d7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "60fe1baf-caf9-4930-b6a1-81f50211a4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0bfffd-04fc-41e1-b1df-916d7a00633d",
        "cursor": {
          "ref": "260603af-3af7-4556-a706-10317239ecac",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ee8e2709-edff-432f-a681-ecb65821ac92"
        },
        "item": {
          "id": "ea0bfffd-04fc-41e1-b1df-916d7a00633d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4371b566-0176-4479-9bc1-964fe055ce12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124bf61a-61cc-4a8b-943b-e3d7b9e00117",
        "cursor": {
          "ref": "4c46e681-38ff-4900-ae90-32a3a7563d06",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4f502225-aa38-422a-b54b-0a9e9c3a9c78"
        },
        "item": {
          "id": "124bf61a-61cc-4a8b-943b-e3d7b9e00117",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "173bd7fc-c3ef-4d9b-9140-59710408f48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22f5a36-c878-426f-9d75-e6500b6a0664",
        "cursor": {
          "ref": "c46cf1be-f847-4fe4-b153-ad6b3ec19124",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5ac755c4-ef42-4627-8a89-8e97d28cd920"
        },
        "item": {
          "id": "c22f5a36-c878-426f-9d75-e6500b6a0664",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f8d7c8b1-5c27-4be1-9c9e-43c8db8f3e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b7a64b-ea6a-44f2-b1fe-958626416e4a",
        "cursor": {
          "ref": "32a48c2a-5506-404e-8f04-0169dd083772",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "785868e1-7d22-4ae7-b714-841e324946c3"
        },
        "item": {
          "id": "b6b7a64b-ea6a-44f2-b1fe-958626416e4a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9825b71d-f7c4-42f6-bfc8-7c1a4f1ee9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d8fea8-669a-486f-97fd-e95437a9ad6a",
        "cursor": {
          "ref": "a249d4b6-0067-44f4-8104-760b587119aa",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "dfa330f3-a08b-42ab-bfb5-3016a463a468"
        },
        "item": {
          "id": "41d8fea8-669a-486f-97fd-e95437a9ad6a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "256a7107-1d04-488e-9381-e48ee857d9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de440d5a-32a9-4a8d-b0b5-ce2e4ee40d27",
        "cursor": {
          "ref": "b4c61451-c750-4013-82bd-200149998346",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e6a75035-a0e4-4821-bb57-014b0ff08b3a"
        },
        "item": {
          "id": "de440d5a-32a9-4a8d-b0b5-ce2e4ee40d27",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "083f983c-dba7-4ef4-bc9c-f9748b6b4107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc0d600-e3ef-44ee-9677-9fb078014229",
        "cursor": {
          "ref": "af467ece-a825-478b-ae03-c469d7e10ca3",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7cc0eaff-6ffd-4fdd-91a2-95e957ff52b4"
        },
        "item": {
          "id": "bbc0d600-e3ef-44ee-9677-9fb078014229",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d4156ee1-b873-4014-99b7-7768f9f501e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e88c878-3c0f-4cfa-afee-a5f5832d2e84",
        "cursor": {
          "ref": "ff16ad3b-1de0-4d69-b826-e008ca78f837",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "79ccf022-9a1e-4019-a017-e197da6932b4"
        },
        "item": {
          "id": "0e88c878-3c0f-4cfa-afee-a5f5832d2e84",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b62bdd3d-e6b7-40ef-9c99-12b868eddc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf97dc69-4f47-43d5-ae69-531b1e4f80d8",
        "cursor": {
          "ref": "118655d6-a181-4eb7-9885-a406ff6ebc6c",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "04e9be44-d084-49a6-ab5d-41ccc2762289"
        },
        "item": {
          "id": "cf97dc69-4f47-43d5-ae69-531b1e4f80d8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9daeaa19-0c7f-4483-9896-a398551c3669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f1c5bf-ec11-46fb-a68e-402bddfa81af",
        "cursor": {
          "ref": "53f5103c-0e4d-4e60-92a6-07bfb08ed8ee",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6330e61e-72b6-4c1f-8b0d-c2f9746c4664"
        },
        "item": {
          "id": "81f1c5bf-ec11-46fb-a68e-402bddfa81af",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9c24b3a7-1671-4775-9cc1-65ed213ddcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5451a38f-3868-4755-9305-e11b78643d6b",
        "cursor": {
          "ref": "be1d5a16-3549-420d-b3ab-bb3dd8318248",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "247849cf-9e9a-484f-b02b-c3005e6e332e"
        },
        "item": {
          "id": "5451a38f-3868-4755-9305-e11b78643d6b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "42cf3b7e-5256-4e54-ac1a-1cd3aa3965a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc13f5e-4661-4685-90c6-38f4a975d103",
        "cursor": {
          "ref": "a75f9b9f-47b3-4aae-9260-6fcf0e8a7216",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f3bd5948-8418-486c-bcf1-2edb769b7c40"
        },
        "item": {
          "id": "dcc13f5e-4661-4685-90c6-38f4a975d103",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "693b3368-d5fe-4c11-9a27-b57caf108b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48338f5f-7be2-42cc-8dc4-70cdb34d58aa",
        "cursor": {
          "ref": "2b111357-8946-4d37-a3b1-1a40fcefb840",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5d09edd8-d18a-47ee-8f74-7929b8e463b6"
        },
        "item": {
          "id": "48338f5f-7be2-42cc-8dc4-70cdb34d58aa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8350f355-749f-42ef-8d5b-b49cdbb6707c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebf9b8a-892c-406f-bb0a-1fc5bb924082",
        "cursor": {
          "ref": "5c95c46f-7485-42c0-8b91-28a15812a2fc",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f5beb94d-3038-4a10-9df3-2e7c4af0dc67"
        },
        "item": {
          "id": "2ebf9b8a-892c-406f-bb0a-1fc5bb924082",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2901b7b3-8c6a-44e1-b170-28bef3b20d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b7d220-6e60-4d10-82a6-6a5bd41e27df",
        "cursor": {
          "ref": "169b48b9-56b7-44e8-b83d-eea21f4ec533",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "50106311-6353-4450-af9c-f2590499785d"
        },
        "item": {
          "id": "31b7d220-6e60-4d10-82a6-6a5bd41e27df",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "04d22432-180a-4b33-bb6c-fac3757d1ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45eb73c6-dd46-4f1e-90b5-1baadc7ea7ee",
        "cursor": {
          "ref": "d980e68b-922f-406a-8e86-bc9650a7d72f",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "441f1fb0-d5e6-4e3d-bffc-63df85301b43"
        },
        "item": {
          "id": "45eb73c6-dd46-4f1e-90b5-1baadc7ea7ee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4414026b-b20d-4a80-bc68-badb9169b128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa92e32-24d2-4a03-ab13-720901536c9d",
        "cursor": {
          "ref": "3aff736a-23da-492d-b767-d0db22bea432",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "67665ee3-e527-4d38-9873-b1cce68992af"
        },
        "item": {
          "id": "5aa92e32-24d2-4a03-ab13-720901536c9d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d60a6a80-159a-47a7-8919-6782ee58d698",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e00c56-086b-452b-8f02-fd59927ed6a4",
        "cursor": {
          "ref": "b9aa23e5-9800-4bd7-9b6a-6eb36784cbc6",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4944abba-143c-48b2-a0a7-aa0d1fe58189"
        },
        "item": {
          "id": "c2e00c56-086b-452b-8f02-fd59927ed6a4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2768d1ec-5292-4823-ab10-492491770383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9cd709c0-df16-4547-9cac-26270bd02110",
        "cursor": {
          "ref": "d703d7d6-a867-43d6-8d0f-171bb06c2978",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "145067a2-bed3-4c94-af1f-2d9e6737ae7b"
        },
        "item": {
          "id": "9cd709c0-df16-4547-9cac-26270bd02110",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ca936b90-880e-4192-be0a-ee27055c1ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "3922db08-3082-4386-9394-1e6ddd15b51e",
        "cursor": {
          "ref": "77d9c19f-93cb-48e8-89d9-f1f508027bd9",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83d4acca-ba21-4828-9c3c-7ab6cce42957"
        },
        "item": {
          "id": "3922db08-3082-4386-9394-1e6ddd15b51e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5d25d64d-4b15-426b-90f8-9d3baadb9f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
        "cursor": {
          "ref": "03f552d5-b0ee-41ad-aec2-ae1e9c40c2e6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2af3ebef-8d6e-41a4-ab85-0c0bdc3b0264"
        },
        "item": {
          "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5336309d-8955-44f8-833f-f1a0fb0978b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
        "cursor": {
          "ref": "03f552d5-b0ee-41ad-aec2-ae1e9c40c2e6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2af3ebef-8d6e-41a4-ab85-0c0bdc3b0264"
        },
        "item": {
          "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5336309d-8955-44f8-833f-f1a0fb0978b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
        "cursor": {
          "ref": "03f552d5-b0ee-41ad-aec2-ae1e9c40c2e6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2af3ebef-8d6e-41a4-ab85-0c0bdc3b0264"
        },
        "item": {
          "id": "b7baf383-95d6-413b-81f2-33eb172cdafd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5336309d-8955-44f8-833f-f1a0fb0978b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4a1906-4873-4c90-b050-c05896c141c5",
        "cursor": {
          "ref": "013152ce-3daa-4b03-89bf-b537ccdc89a8",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7351f035-e362-4c17-b9b9-690a2d1fc785"
        },
        "item": {
          "id": "3e4a1906-4873-4c90-b050-c05896c141c5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8fad3cda-5eda-4c78-a580-7faa744e534f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458e0d0f-541c-43f4-ad0d-9cdc34295298",
        "cursor": {
          "ref": "9944e82e-5bc6-49a4-b04b-0d0a2c7a40ab",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fda3232-fd98-4eb5-99d9-7947d49e4406"
        },
        "item": {
          "id": "458e0d0f-541c-43f4-ad0d-9cdc34295298",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e3f4c3e5-b268-4420-b769-7e319645b9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "458e0d0f-541c-43f4-ad0d-9cdc34295298",
        "cursor": {
          "ref": "9944e82e-5bc6-49a4-b04b-0d0a2c7a40ab",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fda3232-fd98-4eb5-99d9-7947d49e4406"
        },
        "item": {
          "id": "458e0d0f-541c-43f4-ad0d-9cdc34295298",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e3f4c3e5-b268-4420-b769-7e319645b9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f9543f9c-9b09-4af1-8e46-cd2c8a58695b",
        "cursor": {
          "ref": "bbef470b-5f6a-4906-a535-88dfb36df85e",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bd1b5008-db70-4e80-9cf7-f0efe8252d26"
        },
        "item": {
          "id": "f9543f9c-9b09-4af1-8e46-cd2c8a58695b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a596f791-5c88-4870-a9d5-8b832e262bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "893ed198-8426-4f4d-b8cd-901a4ed6f522",
        "cursor": {
          "ref": "96aa628a-067d-4308-abf8-2f5a7045d52d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "09a00758-6663-494e-8139-a70025fab7ca"
        },
        "item": {
          "id": "893ed198-8426-4f4d-b8cd-901a4ed6f522",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72128225-8bc2-433e-91fd-36b39d06ca76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "893ed198-8426-4f4d-b8cd-901a4ed6f522",
        "cursor": {
          "ref": "96aa628a-067d-4308-abf8-2f5a7045d52d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "09a00758-6663-494e-8139-a70025fab7ca"
        },
        "item": {
          "id": "893ed198-8426-4f4d-b8cd-901a4ed6f522",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72128225-8bc2-433e-91fd-36b39d06ca76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "5dcfba36-2b2b-4af6-897f-06e9603edb7f",
        "cursor": {
          "ref": "4f1e3e00-a06d-44ed-9766-83fd2b2859fa",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4c3dd944-d81a-4aa0-a8a0-480cb75f078b"
        },
        "item": {
          "id": "5dcfba36-2b2b-4af6-897f-06e9603edb7f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a78bc097-235b-4565-9d81-9c57c65aac1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}