{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9b473194-c12d-44c4-9d66-79143b85126f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "78c65c0e-52ce-40c7-86a6-89b0e0af4549",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "806a5dbc-676e-417c-89d4-f42caa1617b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7a1f010b-3918-4179-8d16-75dece0a4bf6"
                }
              }
            ]
          },
          {
            "id": "bf9d9842-d948-40f5-8684-d60c77a4da20",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dffff11-68cb-4410-90f7-a48667006c80",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "85c1a550-ed57-4a6a-998f-a406c8d16065"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bc170084-1c0c-4a91-b638-dc434bfde6aa",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9c64f82a-cd8b-4d72-82ee-3277f4a8a02c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "251d2085-6af3-4bd5-b565-20c8c8ac23aa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fdfbbf0-b302-4e82-b7d1-aabc959b9a73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47a2478f-c3b6-4bb1-a1d9-4dd1e3f6e621"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b8d3d17-af5f-4b60-8e5a-045fd2474bf2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b68ea401-ad5a-475b-9bbb-852ec575fd44"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb6f3f39-d9e9-4569-97d7-a3dec17e5a09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8533b8ce-72d4-40ef-a867-6553122069f1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a659695d-8cc4-48e7-a708-66948ad34ad2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "88560486-aa70-465d-a2db-7ea077174426"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bec58fb-d895-4a0b-beaf-74095d532903",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2271980e-f203-40b8-b2dc-e79287488544"
            }
          }
        ]
      },
      {
        "id": "2b7201a7-ae1a-495b-9922-9e722e8f15bb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "82b99c4b-b81e-4f6b-a073-ca792d268cc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8d30528-20b0-4330-911b-79c7919434d5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54a6e7ee-8a90-4628-b31a-7194bfa0de88",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a28d3ad-9380-49fe-a967-e46ba72cf649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e93c04a-f7b7-4e95-bad0-1dd4cbaa228a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d884256-b658-4f51-bba8-0bbc4146284e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c5a3a9-b930-421d-9162-ff5fec7f6869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47927656-e59a-4603-b591-ce6c459e637c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0fe94b-4725-41cc-bd41-e8c774faab50",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a10e3a7-f9c8-441e-9447-6ff5b1c7b9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84c7794c-8aef-4166-b524-2ab18798a047"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33dd4bd2-0835-43a3-9329-8c4f1bd8be7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b628795-b288-4281-8854-93ae8a04e6e6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e40b857-3649-41ae-ad2a-cb99b3810e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d19720-e7c9-43cd-800a-aa98147426ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22c5c46-20fb-48d3-9650-4bcfd44e27fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d522b778-f298-455c-bd09-238d6ec06c9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e2911231-0679-469f-b1c0-fdbf6be18a2e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "260b5ee3-9b23-4089-937e-7ce4adde712c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30fc2c44-9325-4691-b231-a17e656e3427",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c99628f3-816a-46e7-af5a-1608304ab993"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6caa248-3e6c-4959-97d5-718c35eda11d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d4a0d7da-1c3a-4634-a8c0-5b1f58bd637e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c42ba04c-996c-446c-8221-faf1aec233bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2d0930d-ece6-44f7-831d-0f21e8134293"
            }
          }
        ]
      },
      {
        "id": "a1615bfe-5ea6-45cd-8e7f-4e48f3e7a933",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6a4213ff-1a76-4b0e-a308-eefb34db1420",
            "name": "Negative Testing",
            "item": [
              {
                "id": "408d4210-0254-434a-b2ea-5ebec77168bf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1ead8a78-2a66-4406-8a53-eb03c6fba08f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a5e451-07a6-418d-9de5-aa79c68af606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31051311-994c-4830-9e8b-7aacb92ff718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbf2bd3-ce44-47f0-b093-c5a8b144eef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5df0cb4f-478e-4e10-8930-764b58051e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6279b1f3-f082-40bf-b1d1-a6a6af171a16",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187bae78-42b2-4c1b-a9cf-9edc447236b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072ceab1-26fe-43e1-b0dd-4b4367ea9189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85f72eb-6ce4-4fa4-a33a-508d88f821a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e9e7e49-a158-4e42-b8b8-db40f0c87ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2218c006-0f97-4e56-907b-8bf0e1cc1cc1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53d56f8-ffef-4cc6-ad1b-0db9f09118f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497659bf-cb0a-4974-84b0-113ec79193a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a605a4ed-d56f-44e0-a127-33f97a0c973e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c343200-96d9-4acd-a442-d5546d1e2b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db269e58-badc-4995-be8a-96be0013f5f4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf030a68-9faf-41c9-aa76-94acf8f25f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358afcfb-edbf-4211-86ac-f888b3bf1ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af03e751-84a9-4769-9648-b416f9dd7b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46c6fe83-1c95-49a5-85c5-49fa9f26adca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6df6aa-83f2-4cfe-a106-357ba75fe824",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93534faf-5204-4263-93d0-7766ccfed400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1805b3eb-de9d-4345-8633-8509a8050365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df32dd36-b618-483e-92db-eec5d81aa298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9090eb5a-65cc-44d0-a8be-6a17403ee1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6d25b3-fd89-443c-b912-3ec0ae7a6c4e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4ad3db-d33f-41e6-afd4-0c1a47b60d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2723a4c7-e8d9-4cbc-86da-a9c6fd1166c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e133a57-a8e8-4978-a824-c4c545d00b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "279b2974-7677-4fb2-9036-16a90b64d019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc75896-8822-4f3e-aac4-7df03ecf3b0f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecdb8ce-c0f2-4769-b9df-dbd38104542b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc92954-b853-4235-ae08-8e8662ee44bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91eab6a4-fd37-4409-9dcb-03891de468cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec028002-9a8e-4387-9e87-9db3d10368a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73809c4-0657-4121-bd6f-08e472c9c560",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5bf65e-34aa-4443-ae1f-8baf0b272345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8cd359-b396-4c34-a623-b4985130c614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b51ec9-6336-4712-8694-f85d12e5b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8657199-a7ce-4065-b299-dd39296995bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb7b430-eb80-4d98-b003-dcf9898a4605",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450363a6-eef1-4f2a-9534-bc4200136348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba790d76-33a2-4920-ac20-54cf39751a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069158eb-7b68-4563-af79-081435cefa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7591ee6a-0c92-4efe-b97b-9a3db8e7b0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ab6d8f-4db3-4c1c-a2f0-b7d50af8b7e6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6592bc6-24e7-4cba-b442-a5fca6238e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd0795d-292e-4289-a3bb-41573d6cab9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3275031-aa7b-457a-85d9-cf377b427a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f16ee19-48dc-4ffc-bfaa-9d35bcf9bdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c6f5e-36e0-41a8-babe-3eb8112da8ae",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6072abfb-fa33-46d4-8fdf-e454d0475c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7f469e-48e7-4edd-ae3a-eaf15116af1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b991a2-33bb-49fa-b871-8d211bcf28d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f00db007-34cb-4212-a186-c531c525a1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf380211-61e4-44c3-8675-f8875f36423f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537d46e7-1fee-46f9-8671-fcdcd3474166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2bff22-b8b7-4cf1-a108-8879ec5da5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ed05f4-63e5-45fe-907b-4fa2310f6db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba2bbbab-fa55-4451-993a-08fe1c831378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c05679-2a59-4a5a-a29b-d6ccbdfefe6e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e1431b-7559-46b9-ae8f-3ea0b86ab5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d523636-ae36-49fa-a73e-9ee3fb744f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c2088e-cd65-4071-be15-aa3cc45d5e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6813da5d-7107-4b5f-a441-c5a41604923f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd25bc47-3fd1-4950-8095-557ea455eeba",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fd3f83-ff0c-44b1-be1f-440dd5235443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bb5832-5ed5-4e89-82ca-7b774876eb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6371d53e-62cb-4354-8e76-ac427dca8899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39c9d6ef-4402-465a-aa02-6b7ef13764e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79842cc1-142b-47d7-896c-308ec053efbc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae4c5fc-1806-464d-993b-920743fe8211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f396ed8d-328b-4106-bb32-0d4ffbadf1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea92a472-e82a-43a1-ab20-ca1afe257d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef3e0ab6-9ef2-4dcd-ba26-5126b6c2525d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bbbae4-c59d-46cf-a15f-4041a51d90cb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d34797-ffd0-4593-9734-9a6c396d548b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81943ac2-4b92-4250-ad07-2fe168134c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c385ebe2-59d8-4366-921b-4e433855b7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ade77ee1-8d02-4268-b80f-f065cbeadf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2692938e-4b6d-4077-85ab-0e65e00f5b6c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed981ae-a07b-4a58-a473-62af4b940443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d91ac8-dc4f-4ce9-8b0b-15a591def261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5f99aa-4ace-411e-90b4-90b03bf0e44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c4d30ff-874d-4d2e-9a18-66d34343ccd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dbe58f-67a3-4fa9-bb86-2ef7c68a35c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548b8fab-79ce-4e28-af85-3f68f0f7280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebc040e-ce0c-438a-9d54-caf2a57aac3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2adad714-aaed-4516-96c1-72fb7ea1bf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4411aff9-4e63-4123-b286-344ffd5d97d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb3ed20-b03e-4fc2-8557-b12462cb8e63",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d260e2-63f4-49e5-a9d0-17ebe69347fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9be42d-9197-4d8d-ad5f-bda747f05285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d1ced4-e10d-4fbe-a307-afc79a689ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "109b1241-673e-46bc-8514-d0adc308cd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb890e6-f023-481e-a01f-0159d3fe63e9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675cebdc-e624-47ba-b34d-1b37e6c2cfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9bda06-5f7d-4c1e-b004-9b250d5bab34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89563f18-a361-4499-bb66-0d447e950562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "304ccaff-1a7d-4d54-9057-1f81f669121e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8640d66d-a2b6-4963-bf23-f2c8892752d1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31495265-9bf9-43a8-bca7-46d0ab3eabbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ae8865-6906-463c-a311-78e6963166ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566ee4bc-dc02-434b-b4eb-1da4de95fcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e49f364b-0e79-4d19-a2b9-adeaf739040c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10304480-73e3-400c-b225-2e377f3e3398",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312f683e-2bee-44c2-bb38-29f2a9568541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a670d30-0ad7-446a-825d-ac8170a02a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7da9fe2-da24-4a4f-aa27-fdba14a594d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "144035f9-d352-4673-b02f-909231111c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00b005b-63bc-463a-982c-d421265f86ed",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca9cde1-0618-4bef-93b2-6196ef60cd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55c86c2-8132-4f3d-8196-1eead09bdbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9282efd-dad7-4ddd-8ec7-24749d405a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e97e9e-6c41-47fb-9bd4-082645beb58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f554b4-da58-4f95-bcbf-7e5b417f4282",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4955618c-92ed-4753-a769-73be962c6612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6cd60a-9237-477f-957a-2cedc3e754aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0e258f-32f5-4c64-b2b6-4cb26ad924fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "19caf2e8-23a5-4f50-998e-3681272a7e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ec8367-d2f8-4aa7-9c88-19e22d2a0b27",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ae1d5e-7068-4b0e-8d1c-e1af0291cf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fd4c83-9c76-4cc8-a840-3620f9aa53b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3522aebf-49a5-4239-b30d-4a6b1b01e16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4ec2c8-09fd-4240-abcd-3a66bebde450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f4989c-a12c-4876-9780-7cc21f81a591",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493fda34-354a-469a-8b92-34ea5f68d601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb8291e-8102-4004-9eba-3521058c5d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb29314-71b6-44b6-ac11-1426b1384e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db64616a-3213-4160-999e-0f1f73215300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e32ce12-cbb3-49af-b7f6-c22f9663c045",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4040ed-de10-4996-952a-9877e3bf4cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4de40fb-1318-4a22-b5df-d018222abb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09be770d-2039-4950-b22e-76ddae2c56de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1570e4e1-e651-4312-8191-c29a52432bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5cbcd5-b47b-459b-a4ba-911a4c7508cc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77921f1e-a322-43ce-98b7-03be382f8c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce5d431-ca98-42f1-8c1f-6427f6381518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910b3e78-81a5-4440-aa62-9348ac22ec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e6c50a2-52d2-4519-a3b8-270b6ffb374c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131b712c-60c2-4956-8f23-c2281e906a0f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78ec867-e5c3-4970-b7f8-d7dcc82f5d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6eec7c-935e-48fd-9f7a-0d90a8fad38d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12643bf-fa50-4f25-8c03-2bfdadf2e297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe181ba-7232-4081-bddb-62e0f8e81479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bdfbc6-8be8-4379-8ef8-7dcf48eb579a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c88d43-93aa-4b1f-bc63-9cb1ef821502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79ef28b-ee6b-4f53-a183-eced32dd61e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9032f6-bf61-42ca-bb54-aa54b999c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5079b59d-c337-4b10-9dc6-1a2cbd02428e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02effe2-d85b-4d8b-9eca-29563a91d639",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab06d0e-2bb0-4e78-b067-60a663ae20d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76340004-11af-4075-a9e6-03da6fff82e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456522f5-fccf-4337-ad0a-65b6c91f03cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cf06c7-8f15-45db-af5e-ce0e11eabb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1104c939-dbee-4d08-9b10-dd4e76ecdd3f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed784a07-bb72-4d57-9afe-2fca1fc5ad42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a861cfc-0bee-4040-b38a-9264f3d1b323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdf08ca-d753-49ca-a0e9-a5b8f58d6b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "548e9637-39d2-429b-87b7-003a284f7f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ec4b82-9967-4877-87fa-5e4e89c7f9e5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdfb04c-e866-42bd-986e-70427d2363e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480e0886-3367-4e62-97f2-783e8257a481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681910a7-e351-4cbf-9ca9-b0c34f6fca6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae747c5c-7094-4b09-9b40-27d4200dc118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e29ea5-5d04-4cdb-b45a-aef3400ee698",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0247fdb7-a4bf-4d0e-a7d7-df01e590e85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c5e124-d711-4d75-8763-0287af336a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a53a9b0-e581-45d9-a437-e08637bdfd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "413ca312-e090-40c3-b513-aaa222c9796d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4001c74-5059-4b6b-8004-2aa24c1a9ec1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57590777-3532-4ddf-9f86-fea7708a5159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa79079-92bc-459f-9e7f-c788af135595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91533751-0a60-42a2-9cba-c6ba556037b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bee21c-543b-4f4b-838c-de8179d7c5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554b5b0f-5f22-4abf-848c-f2ddacd41c1a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452251be-aec3-46b1-8d9b-d41e3c85e531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9627484e-2700-418e-b42d-2da4f1e85292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b7ef8d-f141-421e-9df9-c45c3c7aeff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "295bf083-724c-4ccf-8e45-99f2718c177d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b5c04c-bfb1-4b3e-b38c-13d5d7ee5250",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1864004c-7431-41e8-8dc2-afb86d29f92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1c6d60-1c3b-4dea-abb4-16091b20177b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec95a4c-1978-42b8-927b-23fd4fae2808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11963f86-5657-4b22-bfb1-2044554cc95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761221fb-6fbd-43a8-8813-9c975c83d359",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df5d8bf-8022-4838-9c19-9a5fb3fb16cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff5b202-a02a-44e3-a6bb-5f90a96b565f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8251e746-7137-4126-97cb-b84cc5772d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "166172cb-b74e-426e-ba9a-992b21a7a943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad0f041-4f97-4457-898b-71152c34e861",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0440d2-1da3-4258-bd1a-229b3b3243f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9961db9-3055-4a47-aa64-0bbd8e5ba0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05022e92-d426-4d99-9264-ec453ffdcef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63e97d98-1527-4a82-a613-9ea8d12bf569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fc2a09-0c20-4566-99ab-509ffacaad06",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720d00f5-8812-4653-bdc2-9dfad9280cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ed199e-bd3e-4d14-9731-e199a073a08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d293a84-3e01-4a65-8872-4bd954fd8071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10769f70-1aa6-43ff-b3cd-0ad4b7f9cd45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9628ad1d-c60d-4120-8e36-14b7bcf53c75",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31585725-5a82-410b-b677-9dafa45de4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269f65de-e4d2-4dd3-bad5-cee1e953246f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1db796a-32c5-4545-900b-77805688cd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5a70b0-392b-4dee-91ce-a5f6277cdb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c2e675-d5de-4295-ab47-6c1eedf7feb2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f4741d-e8f4-4320-b198-bba4e29b979a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419b1470-1dc4-4db9-8acb-4613903108ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4541199-de96-477f-9d2f-69b8da3324c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d45823ad-39e5-4d22-9ea6-510c85bc11a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42eb37cd-ed58-4387-8470-3a85e70c642a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7294a3-34f6-4c32-b2d2-3d4c08f6bcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffe9599-7e1a-468d-bb45-0949995fd743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c189dff0-1af3-4da8-9f6d-5a06d6b9b396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "885cfb32-c1fb-4b61-b500-e3f2fb12c96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf1d610-61be-4451-8227-4d394a6a9f8f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41da0df-aeb8-4391-b380-9fa01687fa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac1e54d-d202-44eb-88db-b28fda6fd41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9303426-639f-46c1-aa4e-b2a2d6438064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a232eb9-c914-4079-8c1a-8e4d5eab275d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd7bbde-6532-488d-b8bc-96267245b314",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922b3d20-3753-41a1-ad6f-e9897447f9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae32b1f-4b41-40e6-b034-1674ced152a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1036ebf1-9369-43fa-85cc-7898b0110f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ce3af8-e31a-4307-91a4-0a15b58b07d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb832aa-1154-4f99-b7c1-fdf6346a7509",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacca08f-b63f-4bd0-84b6-26520304a647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09e1b53-49fd-4d31-945e-5e982e0180c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0aef967-3355-4b39-bc89-7c1398d9769f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1e8012-d9ab-4339-a69a-14bede25e38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb843c2-df97-4f38-b790-17fa27a7cdce",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5224ac3c-fd99-4596-abaa-79a02642555b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea90c65-c370-4645-8585-8188e88b18e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565d5205-cda7-43a7-a2d5-db47e0bc86dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c60e18-1796-4e54-a4e9-f63b89a618fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bed65f-cee6-456b-b9a9-0ccd68b2884f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74382252-3f13-4d54-ac2f-4d53a3fb0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62317c78-689e-44ec-889c-2eebb4ce7dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7245b1a7-7acc-4f52-afc6-151c3001c9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1cfcea-fe74-4b5d-82bf-8710e145ed98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b43572-9d77-48fe-a1fd-9c2da907e729",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f4b557-7c63-4b7f-8721-e35810e28262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c1f4ca-10ac-4b93-89f3-8d0a83565fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e827ea-a62f-45dc-8e64-d4a3c1958c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6949d923-29c6-40b1-9292-f122a42efee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3bc5be-f143-456c-9c62-4e8bf18cb51a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337991c9-4707-4a33-a5a9-2f0c7cbd59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bed284-3063-48e0-9689-bc9adebf9d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a511a8-113b-4187-9e4c-6b217494d323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddb1cc7-ecac-4827-a483-c05a27f5cce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90909e56-31f5-400b-909e-230e0a7b74ca",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b014e1-6f2c-4b41-bb5e-f866261aa284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6813fc4-d72e-4c33-89df-b5deb80bc7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886bc4da-a369-491e-b28f-42d11a1c5f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8418a81b-f380-4790-9584-67e62d1ea000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0cc75f-b647-47fe-89c4-af9f34d7a640",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2514849-b432-4c71-914d-e4162fe17cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c61e34-17f7-491f-b058-cdd350ac0629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43be260-5855-4e84-b05f-cfaaf0b2ff44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9fef75-d94f-4f01-a2c6-83fc387879d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a25b838-5062-48c6-938e-91d4cd520091",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab85109-c9ef-406f-9899-0938b7f295f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa962d95-540b-4baa-ab80-fb91d135c810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f28d892-df4b-496f-b83c-c9b28ba1de1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "376af0a7-414e-4a28-9f06-57cf2f8c780a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49aad0e8-073f-4733-8df0-25ba271bcbbf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b03160-39a9-4367-af3c-07039e2f6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6bf4ab-4731-46ec-a74a-e7bdfe08edca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14f61c3-1924-4cc2-aefb-2a88fff37324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2397fbb-45e7-4ad5-b06e-f563dc878789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f702ce-8408-4b84-8dcc-368f42f09601",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dbdf1a-c703-437f-a70e-89a7e487ca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f513f3cc-adb8-4446-9e59-e1e38ef70bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2ab2cd-022a-4f52-a21b-90df929f9183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ffeb73-639a-4f75-9274-8ad632452780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3037d64a-9373-4fc6-ba01-4d9177fbf6ca",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af765669-ac8d-4354-870d-8b8a5e3a42eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c5717d-5642-48a2-ab7b-1b1deeedc0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4706f0-6f1a-4e65-874b-3122a5bdb609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "919ec88d-e275-449f-9eb0-dcdefe7d8eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a68aee-554e-4663-94ee-5da137b5f45c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdb58e9-c15c-4b86-ac75-79cf9b35f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb42ab7f-cda6-4030-9d37-c004710cfb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6374f71b-9823-4bea-9d0b-d17c3d6393bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfda34e-372e-4064-bbff-b6ed59b89607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0b5a98-2a26-499e-bc98-eb328a09d06b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457222da-184a-4ba1-832a-a72fd11ffc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621c907b-b1d8-4e22-8eaa-92a235098cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba65712-35de-4785-80ab-b54c2ff43ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e93e03-8f2d-433a-8784-011b4f6b77b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93df0cc-49e8-443d-a0d7-6f78a0e85c52",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37b18c1-b1b2-4766-b4af-b988f0771787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1dcfdf-2f4a-4126-9d2c-f42adb783510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1624645e-3d25-4fc9-bac4-fc73ebca38f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6295822-6f8d-452a-91d6-572f263808ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffff7a6-ecf1-43ed-abbe-d3e5ef94b55c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d53fe58-a2a4-4ba3-a821-29db788bb4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeeebf44-3195-4930-a9e8-7ec25f027320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e798eac7-02bc-47f9-b344-5a49e5096dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68107c9-6b40-497f-8250-a8122ade9591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6eac87-ea0c-4678-85e0-098bc61bfb26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c000e9c7-f6b2-4f70-9cb8-901c9c3e9cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bf67d6-89d2-43af-b8af-472a5cf65b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6495ab5d-0025-4a1c-b84f-2193d0c92915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "79d8ca09-014d-408e-89ed-ab74dd760885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9ccbe1-0cc6-4089-9092-cdb2e0d141c2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d24bcf-5f9d-4297-b906-0d2483391b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8594b88-d31e-4840-8a89-e75554b18f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad6a326-9db6-487c-b787-749f42c3a862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "933d998f-b4bc-4084-a95d-401420e80d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e70cc2-3b85-4481-b48b-1073387e6675",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54c1f3f-304f-48e8-97c3-39d103d2eff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1955b05-c84e-4887-a908-f1adef7477f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c56fc69-2441-4d71-9ff8-f4f6044a0e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "228f65c4-d021-4fed-8b07-83727c4671aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9421d7fc-5cab-4667-851a-5e1f305b913b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d0ce87-690f-46bc-931e-9713daa11b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330db1f6-ce2d-403d-93e0-42f0eafea6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213aac1d-8d35-432b-86df-5ef0b669befa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13dc211e-38b9-44f3-a830-37ddc3598c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e83268-b3f0-4ce5-8aa4-cad6966809c3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5524b1-f3e8-49fa-b5ba-00ae6a2cfa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e278d290-cd08-44d1-803d-2964d1d73760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0949122-203c-46a5-856e-bb495458fba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e24dc749-6d27-441e-84bb-dd2e9f1bf391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ae76f-09f4-436d-add8-444356ef750c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35bc88e-ec14-48db-bdbc-d3338767b82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b5145b-e5bb-4ff9-8809-56b48b10e4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e051eb-4ee8-410b-9641-3b50c88f3948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88804dec-960d-471e-ae6f-e2a062f5405b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a540d0-ba30-49a9-91a9-8d785470ea99",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdce94e7-600d-4418-8067-547adc3d1fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c72b4c-e0f5-4cd1-b688-afed9e335fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e24ee92-e491-44ca-91ca-86681afc0dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80c153a0-1d1a-4972-9523-f0f45e13b961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fd66dc-100a-4acf-92ec-25c46b768fe1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b9f17e-35c1-4244-bbb4-fece7fd5a248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb617cec-3e98-4831-812e-53e243d6dc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1308ce5a-73e7-4591-aef0-4429cae54910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b7361c-a825-4e03-ac07-27d096a9bb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec70be0-0a6f-438b-9942-683f057d4abf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ec70cf-cfb5-4e67-a30c-e72f3b9bfd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3dd48d-3a0d-4a7f-9f30-2417a3d97511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084c8312-a8a7-48c8-bf48-85fa367c836c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c68c2170-c7ab-406d-83cf-a7ca5757a72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178f0764-75e0-4905-97ef-fb2f137241ee",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffc581b-f01c-4979-a26f-0afe4611cbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e13bb8-c9e4-4f9f-85d7-7f93565cfe4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d703de-eb67-40de-a52f-9f6d5b77259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e091afa4-da10-4f10-b186-3bcda2e2f144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a4f66b-c9d9-43fb-9385-d397012bbad3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3383c0-c130-48ac-946b-e756fa901a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f764b21-12d3-4d9c-a154-cf3d0bd0bd15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2a8af9-9633-4524-8e93-83e62ab2a5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b7402d-3b7c-468f-b2a6-4efc4e50614e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f96e722-b223-409d-b8e7-5d0ddd106f7a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95890d26-f71c-4dd9-afe8-eb665a8240a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb32176-85bb-4e79-b49c-81018105bb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17eaefdb-ef31-4c40-85de-990598b35f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c860edc9-f312-4546-80e5-e03503886d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d40d250-cfb7-42b5-abc1-12bcf8b923ee",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4737f9-42eb-46f4-846b-a2dbfbe87a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5d3a42-c3a4-49b0-a772-26724eab39ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43edd1b-bf39-41cb-892d-7ec244541ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc165acd-a608-4a15-82b9-a1187d5b62bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72971780-279a-4f54-8557-4413368f3713",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107b0ac8-b631-43e8-9b0b-435082301db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bbea34-3e93-46a2-bef5-50634fc58321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3186226-9668-4aba-b60d-e899f370bbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b45d1905-6132-468d-bce5-0db6a4dbc175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f03840-a28f-4b85-9462-9620afacbdd3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0552b46-29d2-4717-9fe8-549f865141b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ef7038-aa80-4239-9b43-a77d5f58c00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d877cd07-6ad0-44d3-bb11-50c89841f843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c75acd8-b4fd-49a5-a4be-e0fc3624865c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da855453-201c-41be-8d74-60245f2e67ae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc26f66c-d4a3-4c68-b67c-58520951bb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ce8d80-6158-4cbe-a203-e0cd0d732088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf8b9d5-a275-4f1b-8a3f-7870f24a9b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c240ec4d-6c3d-4363-a439-49398eb1d5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58abaf0-229f-4e8a-b509-85550bc34f64",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d7ec77-0b89-4fe8-bb4a-d032f0960bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc31476d-96fd-4aa3-8030-899a0291663f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713796f6-548c-4962-a0e9-c35547bf7150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa59e740-da8b-4f96-81d4-5e1b2c014380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab014f2-2961-40d5-bc89-42935b72ea09",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31129a63-192b-4f11-aafa-df2b306d701c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1dd851-e8a0-4b56-b66b-a7c798c86a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deed1014-6d14-42ad-a170-fd47b75dde8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a454a3-4cc5-47ab-8b30-b5d103aa2fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606b0bfa-8f2b-4f38-9574-e83a5a298ad0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebb2f2c-aa0f-4500-8a07-0283a845b1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7b0a8b-af3b-424f-9c61-26159365ec0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0735d9f0-57d9-45ce-bdcc-46dafe14c402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "914edf61-b5e6-4b06-9204-72e0e3cf3895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac9d4e1-57cd-4e7e-83e8-b12e1b6d6448",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7e47a7-c954-4c16-9922-ac7488388626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b22750f-4589-4d2e-a4ba-ea6271282806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4292cd-619e-43ae-8ffd-8e6d9ca88945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b695be90-d912-4fb1-a6b4-b6ecbf3690c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b5f4b5-2c14-48ee-9255-2bf93baab182",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d5e204-2f83-40be-ac72-8a1610d0938d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410579d0-dd10-41a5-8e8d-65c4c07217fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71ddc62-9ef7-4339-b9bb-1c32321d1f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd19fe3-be90-4487-be6c-7e267b271a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266866d5-246f-4676-bfb9-05f0316ab0e1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544835bb-7905-4fef-9f94-dfb1270287bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63da01ce-716d-4307-91bd-a14af2abc05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e62706a-7476-4067-9f16-fcbc609038a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc674c8-154c-419a-a574-aa2127a1f881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626f52c7-0895-4dfa-b1d2-f1839cc52662",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025d7a0f-694d-4cff-bfa8-8791a4d9443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517fe4fe-b961-4fec-8f17-08e4f88bf295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89063db0-e77d-4fb3-b7a5-f6ee9537005a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e8c28d-5f43-4dea-b758-92e5564cf83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cdec63-8f26-44cc-b0c8-f1a7767dbfe2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942ac651-d772-4e64-8b0d-8f0eef78e449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed230248-da96-43c3-981b-9ddfad094b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ba108e-d9d1-4afa-92ef-fedaa71cd8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad177dd-5ee3-406c-9f18-bffee481674e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f4e853-4517-469b-91fa-4d9ae434818b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d50d4bb-e336-4b01-9a9e-752a71e1cef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d7724b-08e1-4131-8b57-7dff1e6729ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da41b98a-bcab-432e-8ce7-97be5df30be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6b4083-ca7a-40aa-a7f6-768c2bfe5212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439e727f-99c9-472e-b250-d2a45dc807ed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5c819e-65ed-4c0c-95be-7bafc45625f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc45bdef-472d-472a-b9e1-d2b5f9ba269e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d9cb44-5d1e-41c6-8aa8-7adf6f29d8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2023e1-0d7b-4a7d-9f8c-8f0f680ab97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654b1729-2af4-41f0-8aaf-ed8ac6b2f054",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41828cde-6e4d-4fe9-bc86-e52b0f97c36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9575ff-2f04-4288-a8cb-2824f85fbdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6b0506-d8c1-4fdc-8cec-e604bf6f59d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c166a48e-65a9-4471-910c-b29a4edb5d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893a2a32-8284-4363-9589-18ebb7a55d9d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814a9638-6a77-4b7c-bf1a-88bbe26989a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794d65a4-3a71-4400-a9c0-101335427cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cca9cb-6014-45d8-8c11-5334e4e65b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "202c453e-26d2-4947-8c00-9469a71462bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2dbd5a-7172-4d93-8145-d32e9e1a6fd9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f54826-f8f5-43c7-ae44-ba1805953337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8571dd29-9fb7-4fbe-a5db-593cfa4cab0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef0ecf2-9df2-46e4-85ea-45c934f62f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a938950-3b17-4c7b-892a-bed6f89a6c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f480ae86-3449-4312-943a-16929c2afd33",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34233381-ada7-41c2-a0b5-597c82d7a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25168a7-f814-4719-9aec-82a903299576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b371fe8-4f11-45e0-ab87-0472f026a001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3a229b-8b8a-43ad-871d-12531466c37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e891c64-083d-4d43-97da-d40dac05caf3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f129f45e-518c-4292-9bf2-224f5036cf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f88dc7e-b752-4ea9-8636-5ed2712a40bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd55e0-688d-4c73-a812-7d33d55f8ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e23884a7-235d-4adc-a2e9-5491fbf8b9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20be30e0-6ecb-4978-9218-97cd176f84d9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd4aff6-5bd7-4097-9ab3-1a001b25cf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "982d1c38-45b7-4fb6-bc4f-986a9e119256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fcdf71-be57-4302-b923-9df5bcb162c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbacc9ef-beb2-4b1a-bf3b-38d450e9b4cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f4d5df7-5655-4897-9520-d80603101702",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "727c459f-8e64-4ebc-a206-5a1f3c58d5c4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b419ac-2b2c-4e70-b2f0-d917a0277746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a9857fb-d593-4b88-bfd5-40f823b3b878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e0b3e6-32c7-43a7-b22e-f5114d013149",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb8d51ab-633b-45fe-9b77-af7de3734f26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e865504b-4388-4284-aa20-dd920985d960",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9362d9a1-c61d-4233-87fc-968ce079f4c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e16720fc-be29-4202-adb5-667a0922a7ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6059389f-4e9c-4b5a-938d-690993df5373"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce8d66d2-471c-4bcc-b54c-2fa835ad72ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35cdc9a8-93c1-453e-960b-2a80b1008749"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a0a93d6d-4e64-43dc-ac5b-e6372f5741fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e7ec1b3-6dcc-4d33-9761-9f5a041f5107"
                }
              }
            ]
          },
          {
            "id": "f2ce2941-7624-4c80-a8aa-2c57c3f50471",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1cca289b-05bc-4699-b1ae-d50df1dbcc7d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f029d956-11db-40e0-82fb-f815a1469694",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b1d404-38df-4858-b3f4-f01a38e23d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9c2e8ca1-ba62-4371-93fc-474b009a5478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36d150f-5806-4aca-a11b-169723c7c019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46b1d35-d19b-4ea7-82c9-6a8eda5b92a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b98f7925-bebc-477a-bbd5-f96c6b72cf19",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e0c9bf4-0989-49e5-8070-08356017957c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77883a35-0877-4aa0-bd96-855262044de5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ee2bfc2-3dc8-4f1d-974e-1c4597a58cdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ca6ad80a-041a-43ff-8ec8-76f7b03bad39"
                    }
                  }
                ]
              },
              {
                "id": "2d761cb6-c557-42e6-a29a-e516f01b7254",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f20f507-61ec-489b-b5cb-7727014dc39a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f6f82ce-b582-4047-b801-994ee73b8767"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd2e50fc-3cde-4c02-a839-8b8d287e3b0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03d62e0e-2aa7-4699-820a-2b8c91aa178a"
                    }
                  }
                ]
              },
              {
                "id": "94e387a5-9cdb-4307-a5ce-457dc9619a0c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78db5954-f1be-4097-a310-384ec5f387e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16081765-83a1-4e18-94b0-385db8d98eef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d9c19f3-99bb-48ee-a7b7-859bf6170221",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87c4971a-cd82-40f6-85e6-0e62d95f16f6"
                    }
                  }
                ]
              },
              {
                "id": "66351ff8-038a-4ad0-a2a6-722b6aca6777",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35d43951-cbdd-4878-bdb1-1236580ff308",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b48494a-0fbd-403b-9824-87cbfe41a6dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05eb49ff-9a79-49b6-b082-b8a348c4c79e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5dace1c3-56a4-453f-8fc4-818e8c2a5e95"
                    }
                  }
                ]
              },
              {
                "id": "a1d00181-abd6-4234-8ac2-9b521f830b59",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bd76c22-220a-459d-96ee-23340b40ff55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9194bfb-89ff-4736-b8bd-67cf68195e70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b07d8517-837a-40b1-80aa-aad5dfeca384",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3f18f30f-c848-4e1a-873f-408b15bd45f2"
                    }
                  }
                ]
              },
              {
                "id": "b5bb5a84-1980-4041-9d3d-64d60d82847a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d164c7a-4d31-4b8a-81a0-136b0bf8dc69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef85141b-fb46-4b03-8963-b388769851f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78f08826-5b2f-4099-841c-ea98b0c37a30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9dc6f5dc-d737-4b94-b04c-77539d3d1069"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af214929-a089-4e8c-9ae8-39a198be5ab7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b435ce5-7c2f-4c78-a929-f420f4984573"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "caea3bf6-d284-4f1e-9fad-c7fbf253c552",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8a7ecc6-7e1e-4124-977c-ffe89365ca09"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa9a58cd-d537-41d2-9da1-3a5e8afeda82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "87b65cf5-3662-4ab9-b515-f7d5a94039d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1413bb8-10e2-4000-9d2d-03f6098e019f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b29a9382-286a-40a7-9f29-9d002a7c0452"
            }
          }
        ]
      },
      {
        "id": "d591fee7-f2e7-47c1-bc6a-775a12dca613",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4e11920b-db75-4446-995b-b70620b03911",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab21ea0d-aa47-494c-b565-4d59b3a576be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fce94941-4d89-4ec0-be84-2645726c8966",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76832172-3e26-4067-b7b2-e884c6b0f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4296011b-8caa-43a0-ac36-7aefb8dd3b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2d6aeb-2b2f-4538-9f09-c66144671e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e0c6dc-f125-49d9-bb5a-1b3488c86a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed10d590-0d62-4fad-894a-2a68309a4cce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2327f6-68b7-4050-9965-135dc4a35fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8220194e-2802-4d13-b39c-6691af46604d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bad58c-883c-40ea-a912-5c9d54a46954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7323afbf-53d1-46a1-bd86-4c784fcf1249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d041486-7d8e-4b50-a3c9-b3f52ea425da",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f2e570-2d35-48fa-8327-21966d6df645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92500b50-d197-4bb6-8927-84437efa28c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be206a0-b236-4b04-8c73-4d41a2e41c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7e5904-1733-4e18-a8a2-524459183523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb12eb97-5cc1-40b0-b614-da057e0d1a14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd943be-af5d-46c2-9758-8db7cbf99ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1b3510-33b6-44d4-8f43-01b0b8b9f901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4a44e5-e58d-4d9a-a3b9-80a5fa9608f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be40bb72-1755-4087-b7c7-96b1b25f43cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfb0c58-4438-41a0-9979-79ccc56650e3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a81f59-db9f-4149-aa99-356ac846795b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5dbd71-c8db-4198-bde6-fc2e98964347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01a8ec3-7c05-4ea3-b9a2-efc263860307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb27f87-8fc6-4ac0-8dcc-35bb92f21e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4071d82-2467-4a39-b6ec-06d221bb1114",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba76561f-8721-483d-809b-937a2bbdc721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a4b208-fef5-434e-b4ef-812f3ac8dc19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61aba3c9-30cd-40ac-809a-3851cf492cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc64ca57-4225-46e4-bcf1-bb2e50f833b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d733fdb-8258-427a-82b6-b60a3a5374e5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec5add7-3ecb-425d-b964-1163fafff7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55308d2-125a-4963-a8a0-5a65b5a3ff7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca76c80-21bb-4529-a378-46771820c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0081922e-e714-4a23-9be5-5cacf8f50c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dad4870-52aa-4703-82e3-01fcffb9e715",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c179afef-f76f-4939-935c-3431b623b9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d0ef33-8492-4333-8ffc-b18ed89375e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6da2daa-0af6-4903-86fb-c1284aae9b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2676183f-44b7-440a-a4db-d99b2a2c7297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3b320d-7c92-47f7-83cc-5301b5c38b50",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a438d7-6efa-496e-8ec2-ed5116d837e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574018f6-6e88-4ed9-997a-f6da136d0881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581bd382-33de-4074-9963-6df8cf8930a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9979f13e-4cf7-4835-b621-ab8956451ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eff2523-1692-4b9e-931f-b7291d9b7dd3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ac08f0-4b68-4c73-a454-d2e01421b8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788fe18d-9c8f-45e0-b38e-b5716cd4bb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc372150-6051-4b6d-b7a5-dab751f0b719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49f8028-a369-4b37-abb0-2230378ca618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fffb823-b4d3-4e55-84fe-d4f8c71f5191",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218f4792-1047-4225-9269-ed3af71a6bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64d5f0b-722c-4921-bff7-c20a06ed9875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c3ec57-4555-4631-9243-74786aa5ce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3d647b11-47d1-4424-b62b-0909f88104b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607215f4-7fb4-406d-940c-c9431f632ebf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c492d5-8f83-45ee-b4f0-10681b29dad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bb3936-7456-4cad-b1c8-d314256a63cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ec8b9b-fc9c-4fe3-b4b0-14836f521964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6fe375-3992-42f8-a51c-f0788f890646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf3d5e6-15d5-4031-b0e2-47e3d4e142b1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ebada3-94a0-434d-9164-464dedc08f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572c33aa-6b0f-4eac-80ab-8ed8bf1e8d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e935ae51-a274-45f3-8ec9-f6d6913aef06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c110e86-b4eb-41c7-ae37-463b3a7050d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847c30f8-27f7-4a9e-a21c-c502390176bf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee476391-b300-4434-9107-bf6d624c53c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ce4282-06b1-478d-8d65-ff39d9f2ffb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b97cda-9aa7-4dba-bd9b-79bad012f5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "51efceac-c2af-4323-814f-f2393a40af93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5fb0f7-f758-483f-b4f4-1ca475915947",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347d0ad9-6934-49bc-a3c2-b93363caaccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4439d107-fc99-4dc7-a6ba-96c40e2a4c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed66c4b-3507-4c61-81dc-279c4cd15aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "38e40052-8db5-4df0-a709-12209f158cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc6a00a-afd7-40cf-b6a8-6a1a5845636d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8aa51a-caa4-4af2-861c-4ac16a053e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1440bb67-2c84-47c1-8a5a-8efc1bc3fadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a659b532-90d6-4a9e-9e16-c0c230f75287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c74fe0-e146-4a6c-bedd-38bc88245974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cfa1aa-f712-482a-bbaa-837447a69d87",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04719fab-49af-4f25-bdb3-c4e7a44cbf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8d99cc-8db6-4a4a-95fe-adfc5df7e0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fe5672-ba4a-4ea9-8c3f-1f070da82d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df31a6d-15d9-45bd-9e13-df94de6fdc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616c41f2-4fe3-4833-9a49-226a5a8e3d29",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a53d929-d070-48a4-b564-06ca482677b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34da3777-835d-421c-8a9e-25d9577661a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed048bd0-605f-423e-9dba-42e448b4ae90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "468db5c7-7833-495d-8f21-4903f581468f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf4aa82-a5ec-476d-8a45-c6f237aa780b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeaad13-90d5-42b5-8b3e-420930e081a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8968449-42fe-4274-9b2c-d2a8d5d2473d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9f43f9-f58b-4237-9186-12c27da3c616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3f56e9-e097-4cd9-8013-c89003e494d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0ad7ca-a866-45b4-b397-8dd512d9d155",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62bd90a-fb80-4010-bcc5-fa57c8cddfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d31cb2-c248-459c-aaa7-5689a0dbe2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004795fb-36d3-44f9-99e3-fd348ee8566e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb515e5d-aae9-4d50-8816-c176e3d3f2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcdcfdc-4c71-4a80-9d26-649f8f72fe22",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcdf6ad-1892-454c-9751-903e2ca4b399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f9ddf4-8e83-4b47-a4bd-178b545719aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75228d5a-0c33-4330-b5a8-e46303010138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29da1e85-21bb-4736-8beb-12c70e4bd1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76996c4-5a78-4288-a7fa-0ba0d497ff97",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe46fe0a-4ecb-489f-b90b-8cb5c01f74dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eab5f44-2f53-45c7-8ea2-87ead1cb5171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd71810e-0aa9-4ccd-b1b3-f111883e2c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65584982-279a-4c7c-8c6d-ee3eab36d165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018d459d-b993-48ec-8b42-f182a09ac1c7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c71cd06-ad8c-4b4e-9b3d-c91277a359f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3621616-ed9d-4fbc-8c98-37ee4508f914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f533f847-4a40-45fc-829d-5fb16a6c7a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8ea4a9-e960-4236-89cd-4b74dd199f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7846a859-436f-4557-b844-c7de66430f99",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37d9f57-b6d7-4779-9a95-4b4cb56e85b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eedace4-ded1-4382-84e4-835fa057766d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6ba920-c01e-4a76-8241-b4d1e50fdbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80219323-7eed-49dd-b561-6b6b92ad4ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72fb6ca-188a-4293-93e3-bd1275f01554",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae4c3e4-4927-4ded-b370-7895e255ff2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8d0d8f-6c64-44c2-8ea0-b6cb559598f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c7df3f-ff06-4b8f-9cc7-0f33f0e12833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d76a748-ef0c-4297-b878-caffd48421d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e6d5d7-3936-4d53-81dc-b96bcdc17e20",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c96ab71-c82a-4f2e-8572-b0bda675328a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6a075a-8bf6-4db4-8162-a82f69db712e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b973b42b-60b3-446b-8675-0687327e1c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e71f5c-22db-4c77-b6b7-3e8d0131046f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a2c5b9-c78f-4528-b306-ee9ba564694c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5c0f94-4f31-4253-a0c5-919695f84509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b336bc6-d9c9-4f47-a836-cea14322d2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c907730-2c9a-44a6-8837-63b9026d0e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eed2890-0912-4233-a593-fc26133678c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cbe0ec-c806-40a1-b8a0-9e923e7cbb75",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751fc620-5b9e-4f4e-99b5-56d088173373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e0186c-3511-430e-8613-5b9978b597e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e48be27-ca29-4a2c-9988-5e209115291d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa5233c-7b63-45e0-b0be-a9465298b869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30dc4a5-1ed0-428d-a9a3-9f4552625ea8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04847faf-61c4-489f-95bd-7f9163ab9706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a120fa4c-82e8-43a1-b8d5-819f34e62b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91351dbd-3885-42ce-a9e6-a929478fc329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd084b4f-7b41-4f37-97a2-0e73232d833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b5d4ab-f131-4005-9302-a5032a95e257",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c5e4fb-d58c-4036-8fde-c264a6b4f79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77e4b28-0790-422b-8106-c5bfc61c0d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519f948a-494d-4421-bcac-e9ca7b5a5ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1571f3ed-9b26-49a2-8af7-8c88e0899b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442bc67f-4acb-4d24-a455-144854c59994",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeae47e-0890-4003-8f78-a84ce5c5a39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fd381b-edac-46ef-9234-a194613a9e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f988a79-039d-4adc-b1e1-590b9552c9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19e55377-8a73-43f3-b89a-387e290abd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e928a3dd-14b0-4b33-9d89-92650648ba63",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f624d7-8b70-4f4c-a4fc-397298aab6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4515f8eb-ecf9-4a72-bafd-f3139a83fd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033dca3c-cd00-4195-b380-888c6c164e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c460454-d21b-41a6-aef6-33c5f0cc604d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24d8f714-a589-4401-975f-f2cdc2969acc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da9438a0-a827-4422-96ba-b8c0f56bfabe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db8c06-b159-49ca-8af3-c217a8949755",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3d94db-622c-420d-8ac9-664f66e2efec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05c2c67-e45a-40c2-9916-13f1aa2a3118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4923e2fb-329b-4f1b-90c5-704efc68d6b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "890d2f53-a70a-4ce2-980f-74373107d330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87893178-0722-4fc3-a103-e2428f42ac79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c055efb7-1f53-4474-b5e5-25815163c109",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f7fb32a-e400-445a-80f8-27f3f311f2b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f262b48a-c609-4e76-898f-29d89e09919a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eff7f14f-00d4-4606-8377-b4339973219d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30eda0a5-49e8-417d-85ab-27f196fe625b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2354ee6-1a7c-45e6-b49e-f22e7127b846"
            }
          }
        ]
      },
      {
        "id": "3b551c45-8948-4b2b-8e4b-2e14167fc4ce",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d44584b3-a107-4d73-b5b6-5062ed6c6c2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76ee13fa-e1b3-40e0-9274-7ba1f165affc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e81e8616-072b-4c1f-a0ea-23942e2e703b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbd2afa-9755-47d6-a774-138063e5f4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920b2f4c-f708-42d3-bd7b-a3bbae90f513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be5e645-5a59-4efb-af1b-891f1027792e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "444fdb56-e604-43e1-96af-bf463316a8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b29880-9896-4927-9991-5dd84220bc52",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2964167b-b47b-45b3-9673-8aa414be672b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25695f87-ba9d-4946-8157-5dddec2ec294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a95dc8-ebb6-4851-9b38-a3d6ac505d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "714c4fea-4849-45b2-9739-a9afe707cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c121acc-2714-4e9b-8163-ffe97df5b7ba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08bc68-1e9b-41a4-9be9-dd31d9d19d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb6c09d-7f62-4a58-8a23-08ca77ed7d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048b87ce-7eae-4036-9437-6f66d17c5894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "536c7c03-14c1-42d0-adb9-55f8a783e469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f7f9e2-eb03-4f52-b3fb-aedffff72004",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e3eaac-6d75-4d51-99f5-30dab7efc16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b08f2cc-0bac-4761-9c00-10fa1e179644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cba790-ed05-4726-9e04-00ef7d021940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee96fad-c505-40a7-a048-c2ad93298849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc80ebbe-8dee-4f91-a1a6-9aeee147c8f9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce75d0d-8146-4897-aa40-87f02b644b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b780e7-b957-4eae-847a-8784c8d7ea55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ac2856-2b75-4cc0-8a19-d4e71f05e1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32b0c5f4-2d69-44fe-a79d-d9608c7dcbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871ca0c1-a635-446b-af71-102bea83b011",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b8621a-d347-4753-8bdd-56db224db4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78784cf-3675-4fa1-b8b9-2ff00914f14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4551f62-dd00-4cd6-b03c-54bef7b19421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebbec45-9521-49f6-b3fa-541f3b37c416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ee240e-6baf-4b8e-93e8-d30dee7f9a8b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfde136-043b-4d77-b2b4-b18a5bbf750c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed83d79-1464-49aa-8e01-dfe54c020dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc3343b-b3b1-4e64-a05d-82f78a1f01f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3538a2-2d8f-4cb6-b904-e1374951b7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2295df-26ea-4b70-b1de-e46f364216ee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a165f8af-ded7-4c18-9008-4f91bc818c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fcedc8-cf8a-4414-a66b-fb8c991e6539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8708d323-0bfc-46a5-b957-f87ad934c9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25008a0c-7fd4-452d-81fe-12e824dacc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d77610-428c-403d-9b37-d93f9e9cbc09",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abd2bf7-2706-4879-94bb-739c3b340b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1b4c1d-c9f9-4339-bad4-e54f5d1aee30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd86acbb-160e-49c3-8069-53dd3babed36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04bdb727-f634-4e0f-986c-04ebc6a68093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b747da0c-8ad5-40b0-a574-8eae02a23ff0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5796a2-d126-413b-bd02-7b00d64d4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4392a2ca-7f41-4c4d-b7b0-cadf15259477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26660ae-d9ec-46f8-a130-7df478151d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3197aec-0156-4042-addd-7afe9c8619bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62926b54-2827-4864-a5a2-720925e901e2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395042b3-12ec-436b-9cc7-4e53e602e7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e51ff2c-312f-4184-8b67-f321ad278333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8927caa5-a7e5-4c06-ae72-674d577d5529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "20c89345-21cd-4fef-b8d3-766182411cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6bff5d-017b-45c9-aa69-203cf86fcc3f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11316ca2-615f-40e5-9b61-d8a47a8edf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1159a5c0-a1ae-4746-ac99-8bf163f0f5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b701ab94-ff87-431e-81ac-65b343b617e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "382aa4fb-38e1-4deb-902e-37529d0d15a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a58c96-a0bc-4995-8197-bd2163efd11a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a817920-5472-45f7-9969-7751b3128eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fae44d6-0f12-4ed3-9ae8-3268b4787adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbc9078-af0f-4baf-b883-e4fe59b7507b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f68735c-a204-432b-b1dd-9396fe764650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d93f4a6-6024-49be-9eb0-dd57b704d012",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e29b6dc-59a8-4aaa-b2ba-e214c7f1e3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea936fa-c978-4888-af25-2d22e0bbb945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6c1ed7-3223-4905-97e3-06006424750b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd5f3ae-f735-4643-8c45-cc9fa254ae27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ed0d81-c776-4cce-be6f-578520f0b217",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104f7458-7012-40a3-8f44-c73e0a7f1c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef1191d-56e7-4b3b-99cd-397c09ae164c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15163a4d-6c67-4e87-8bb0-2cf893927c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9417bc-9623-47fd-b75e-7555854c4e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaca30c7-0bcd-4a15-b861-b6101abcb63e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77130f7-6895-49c6-9768-ae250efccaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f86424-76c2-4032-a9ae-9225c2aad007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9302d929-b838-4b9c-bc49-4660d0acd03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6235025d-7aa0-428c-b081-e3d6e72555a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0073ef-65b5-4f4e-9ca4-0fa3b978a15c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5854f23-09d9-454f-bd75-33d70b5bd545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377a4e97-a5e0-42cd-9b47-0b2345f89c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a242afd5-5e9b-44c2-9b49-4e1415f8ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "35775e19-1fcb-4149-a5a5-833a14808c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab9e88a-0232-4715-ac12-3a33cb208480",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e0a779-9cea-4b34-8757-2e48e1488a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41250a1-bc3d-446e-8ff4-476dd8940ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45a4353-eaa8-4269-b487-00134a2660f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d294edb-c9f8-46ef-a1ff-778e9170f98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8740b94a-fe2f-4fb5-b356-b4e446b4b5d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8eba78-fb84-495c-b2de-ee4945e2dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b9cbba-7041-4773-a3a5-059062703dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01921c4-104f-4b6e-b048-70ee5c64ec07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f1e64c-2f9f-48e6-a00a-5d5f122b5773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45be67b1-a1ed-445d-87ad-c263918a982e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a59995-be18-4927-a36d-dbf1f3f3ec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edaeae3-a741-473b-9b4d-a548d47c5185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b721952a-40af-40ce-b23e-99c04c32d823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ec0856-2d11-4796-a6d6-8484e1f61669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b4e6ab-2e3f-4fc8-b430-773138924e61",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af523d72-43e4-4a86-9bff-a7e3967e3b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d846ab76-dc05-401e-9d3d-10f7da29aa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d21ecd-a67f-47cd-a573-3658c5db10f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86eaff8-29e2-4e00-898c-beeaf63d7998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd84d89-f67c-4aac-a35d-bdb0d014b7c2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd38568b-b987-4b48-be3b-6523f4b1eb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e818d5-eaa3-4312-aca9-c8ec89a242ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f91d6db-1500-4dd8-a202-e063a9c24aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "143f4f6a-57c2-42d4-b11b-a6d0e807a549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0f1cc4-7fa7-4c27-b2a3-a79ad85c2728",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a7f338-8aa4-49bc-afb5-3141b25d1d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7783aab2-485e-47e5-8d58-7f6315f2d414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b3f3df-737e-4381-9e9d-88704e2ce11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3ba573-404d-4b89-b9a2-a6842e438883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fb63c1-423c-400d-89ad-5871c7537691",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c285e67-69f2-431e-85de-d66ff9031480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e36a03-b62a-4d8f-8f9b-abd5c72b6296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2572cee-87d6-4f45-a053-ab41f0c89936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e808b6-3479-43dc-9867-bb515dde0af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b26710-8572-48bc-bdb9-474ebcda65a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eedfe28-9efe-4873-ba1c-0c9efa825b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff71a88d-bcb9-4d2b-a44d-49f3afdd71cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909f5540-e480-4627-8a7b-a765e9b971b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da5b6245-3ae8-4820-907b-a1a3c168ad7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73b7f8f-622c-4fcd-bca1-9b8f0d2e3618",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ec0195-6b03-4b91-90e4-86f1bad78fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4166e340-7920-47a4-b7a6-587a3f9c713f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d12dd15-d2dc-4dd3-9cac-48b250d5377b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4bdc15-eb52-434e-9bb8-e9dcd239f285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613f9354-2818-4861-b7ab-646f45c6b310",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7dc24-b8fe-46ca-b740-a959afda43d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3090884-8b54-42fc-8523-b8de4604a830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b46ead1-91f3-4eeb-8f19-b391ce927b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3285df9f-4d97-4e74-b2a2-7905a83be555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42c26f0-4dde-45d4-899c-1121a94e268c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd7a289-525e-4479-a3a7-68c9fb589a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328717e2-4fee-4101-a1ad-9ea9865d78d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b245bd-f4cc-48fc-8abf-231e804d0487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "208b533f-b6a5-41d7-84c0-241091f1d101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac85790-a683-448e-9c5d-0f84018db70f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e388eb9-b95e-4958-885a-444777e9c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c605ad54-0053-40b5-957d-ca09556e0d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df323d-ebc7-4c61-8b30-16d0e8f07da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8cd89e-0a77-48ac-adef-c7fde5df19f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3ce824-cf62-4f7e-81b9-fe9889402817",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6282722-723b-4c90-be5c-9193f7548ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3ce0b8-e12a-402f-9480-51e1a1493036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45efa769-d883-4cb4-ac31-f70a049c5d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b88e9b1-03c5-4193-b569-dcedfffdf1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe33af4-60d8-4ffd-ba09-11258fd1182d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2088b35c-95f6-4faf-ac47-f9854a467583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99d04a3-d9e5-4d3d-9769-919bad18fedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0a5065-f2ac-4610-a55a-554ed37abda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de919a5d-340d-4600-920a-09130c5d6cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4e44bb-c85f-494a-8289-ebd3fa80eecc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdab5c4-46eb-43a5-bb11-a063d3d955a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf4698f-a517-4d56-986c-52a72c7a318f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dc731d-5192-459a-9cae-0b41095fcce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ae2b01-ec31-4e4d-8c35-46be8aace644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ba2ab1-d375-4dd0-bc0a-a18900221b1b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b114326-01d9-4993-a521-66d9ba46ffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131e90ff-8981-4dff-9eee-d50d3ac5b77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029aead1-73e0-47aa-b6fb-fb1be184f3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0d5f2f-592d-4547-a570-29197a57ee90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35e7d06-d861-4656-a5d4-fac4ae692f79",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea7fdca-3e26-45df-a11c-df9ab3d6e18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00951c1d-d3b4-4ece-90d1-0fb57fccafe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca741fe6-4394-43a1-a3b0-4a0bc03f3c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5610673-ba42-4d71-9e33-d3291c408f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8036e0-1dbe-48cc-9b71-40b15b68bd89",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a27322-f0cf-4aaf-97a2-3e4a390784b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606bad01-bf03-4d53-aca5-0652de2509e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d85e688-685b-41eb-a578-86d6b9754dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44903c36-a2ff-4f3c-9783-41deb22c6ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcbf4e-3421-4529-a29c-c4d26a91c39e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be5add9-3722-4ff4-886c-4c14e7268cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d35195a-414c-415a-a457-833738334f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4d8e4d-19b4-4996-9305-e2b75d61fa27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55a3941a-7b16-41e5-b822-af6ac6aed7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa78c48-a90a-438f-ae83-5cd6eb41ef6a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdd8577-778d-4b88-ae2f-488442d1d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184aae81-30aa-4054-949f-483a1c4d75ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed56d626-3abe-4b2d-833b-feca9931422c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ad91cd-140d-457a-ba50-8775ce324f67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8fd3ecb1-0ef7-44a8-a893-151fb19ac3a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cde9552-b370-4fcd-ad70-f045e06059fb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa66b6a6-6ff4-4bdf-a8ef-3ce783962e3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "01ffd982-617e-4dfc-9194-70dc6cb6a736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1b1fe6-5e58-4d41-90f6-07456bea14b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82dfc9e4-164a-4fd6-99c8-76dd454b81a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef08ee86-8cfd-43a3-ac56-e8ef9d41bc5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcc07f3d-2451-439a-bc53-289b0746ccff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76682981-1ba2-4b6b-97dc-f468d0c4551c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3eb7a9a6-51cf-4ccf-a60c-0471751d63e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efa9c263-0281-4d36-b70f-0bc83a2e4cba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64b0603b-37f9-4054-9bd9-10cc4fbe41eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b879c44-6da2-4f77-954e-e66b390630f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eedc21c1-2f7f-4ec7-96fb-c608321c08a3"
            }
          }
        ]
      },
      {
        "id": "f4248cac-2c77-48c4-aa58-0a339be03074",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5d49739b-9aef-4cba-bf09-67adca5f3fbe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8b824dd-5f05-4ae3-80c6-0c7c9f11816a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0e1260f1-84a7-4018-a07b-179785980d1f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1213b-35a5-433c-b4ed-3a612d2770cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e8461e-e613-482d-9b79-123b1925e941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7284f3b-ccd6-4ce1-a1fa-f3a621adc1da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce918d9-d709-451a-b089-b4db72a92760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a283c47e-da05-4826-8ab1-e0360002ce8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756f94bf-7d0d-4684-aa5d-e371953b95c6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d7eeb5-1f69-4ff0-880a-3a573c5e04ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d5b3d0-9e83-4bfe-8f05-8c7a60d597a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2968730e-f6f7-4a28-8616-2fdd0e27fcc6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16dc86a-e93c-4548-a752-6706e2a41b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a413117b-5e86-416c-9b61-ce43238dc1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a33846b-4edf-4f21-84fe-4de01e710cd1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c44b203-4b4a-46e3-bdc0-52ef87925e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72494158-f10d-45cb-a7b7-4b0533f65dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9864676d-3a06-47f7-a54f-f8998aef7c94",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38713444-c024-4a14-91f0-77b7418b8d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c512f29f-2a9d-41b7-9ca4-5562d199e152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03206f3-102c-402f-bc0a-62c879dd411c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559a1b82-ad8e-4549-8fb7-79cfcc8dca89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c406e333-e6a6-4f96-825c-9bee86f27c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c76015-b7bc-43e1-9358-1a073db8e2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75fbf7a-32c5-4cc9-b82b-ff47c4d845b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936d6f51-80eb-42c8-ac77-95cd76569cec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859baf17-049a-4645-9903-a53831dfa786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1ae7338-0706-4f92-8727-56df63df96e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf27468f-ce56-4ee5-9c02-182db238fb8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33837f7c-c46b-4002-97e8-b4c620b2b944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f228fcd6-d327-4232-bfe2-2797e516025a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5837029-a45c-4a01-9ff1-530348520b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "320c4c98-82d4-41b0-85c3-63ce0f7ffd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d975278-20d4-455c-8e78-dbe9a3e946a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd9c5c5-3535-4f19-81cd-5af9acf13e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b547a1f-3a31-4732-bc5a-b6f8968fb859",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8735c7fe-f99d-43c6-8f36-75652e21fea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9d2728-3b32-48c4-b9f5-dc725efc65cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b804f025-51d8-4586-91c7-cf2181cd60c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22213616-3f90-470b-91d2-72cf277a7ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feac4611-8647-487b-b957-2e3a9d049483",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcaecf87-3f49-49d0-9791-e22845370518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d27ee92-fc19-474e-9d37-c241cdb539db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf90dfa-0893-4ed6-b3de-40a1ee50963b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a61d46-2c53-4b7c-b128-228c8413dfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f992beb0-a0d4-46b6-b5dd-c34fff82bc6d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7612e7-33f0-40f8-97a9-d7195c1b745e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe1a955-3272-4d32-a356-23ca622b5d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd7869a-079e-482d-9969-da685f8d69fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3285f7-2d17-4740-a886-8261079fdf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ceee2e-a1ca-4cae-97e8-bf2eaf359b78",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35af123d-6274-4d08-845d-7afbd2cf1dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c448b8-73d2-4d36-9e60-005fb6191756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857e0207-1742-4483-ba44-11895ec0c5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42177a7-fb96-4c38-a0f8-76b96fc8c3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9b0646-5d17-434b-988c-ccd487607786",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37fd21e-a05b-4f71-915c-d1ef6d306889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a8615a-760b-40a4-a872-864a90b7e009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9532e89-428a-4557-991e-76ebd3906f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b18dea-4047-40f8-bd7c-792f4fd3b756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8a6c93-ef9a-4072-bc29-f16953bc0a3b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75408f3f-21ab-454e-92f0-0dea91fcdb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d851a1-53b2-4c89-8b4a-5496d76462c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d9ad7c-615b-4739-9ddc-3a327acf5194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6602b395-4d55-42a8-9dd1-99f028ee2edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d0d113-827d-48aa-aba8-67439fab4b6d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399eb689-0f85-49ee-9ff6-7aa99b06416a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21cc6a34-c3ee-476d-aa1c-2ab5c9c576c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c689fe-a57d-4a05-ac04-fa14917d6656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04398b4-6afd-4518-8c5a-8bfa91379d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182eec82-7a71-4cdf-a948-1608f300dfc0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64aecc42-0bda-45e4-bfa0-ee79478dce87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9132982-286e-4e80-b90e-893f3e7e5640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d32e440-ac6b-4b26-8550-d7ec3293b49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89291c41-b7e2-422a-9a54-b1b6b61108fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7e527d-a709-4231-b3ea-f791daadd150",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf68db4-d550-40ee-9e17-c82f51d79b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf30e54e-8b45-4967-a9f8-c225c9e1e451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47148406-3be2-4bee-8226-75a1e4850e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99449dca-34fc-40b0-94cf-deefaa27ea0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001fcf10-cad9-41d7-9cea-ecd10e031260",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3838d727-086f-4595-9675-ec4e4751f7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e452bd1-8dc9-4862-b4f4-a37fe8cf4f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e795b08d-7e9d-463b-a892-aa822c5659fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fc7012-55e6-41fd-b157-41fd5a85cc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143ff308-c26c-48f6-a640-56e6396d32f2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b23b2c-6482-42b4-afdc-e19fd5350eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440d5a07-cee8-4fcf-9e48-7c4803da495e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225460ad-853a-490c-8774-a4d33b1a34df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb955214-622d-444f-87dc-d291717c4b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c674f932-569f-45e0-bf85-70e2b5ea78f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54328a0e-6475-4b83-8ee6-5ae14b60d572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b5aa46-a397-4586-aebf-30fdf3dbc351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8c2e56-7d21-43ec-a814-437fbca02800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408a9610-dcb8-4f28-9ba9-acbfb71a50d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9ee960-a7c7-4103-a01b-2f9017046bff",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3deb69b2-219d-4ae3-90f8-9d154644a6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88261ab-7f75-42fb-b7b1-80122a053c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0973efd2-f320-4cc1-a51e-4f28ab095bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cadac7b-6598-4ec6-9845-6b070fd06efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd428900-27b1-41ba-9823-031e1eba708a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01e96f2-d048-42c7-8a77-7b1ee576bb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9342fe6-4766-4dc5-88bb-f1e64e35fedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268d5ec2-8126-4d2a-8783-9a2125b9a7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487497a8-097a-499d-b20f-4d5e9f59b953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470573fb-e36c-4382-96c1-5168ec6a6042",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d50b66c-c0b1-4736-aef4-1e601b204727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a45b4051-fccc-4ab0-b17e-b8b15c1d5522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2258411f-ee06-4d00-a44e-e8bcac327736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af980ba-4bdc-44c3-94fe-58f7ac3d9026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affd980d-16fb-45a3-b349-00a8328d06bd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1975ac9-e0b4-46c4-8b2c-d9d360cc4820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89041892-8396-46c8-91ed-49a16b4053c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc466da3-66a3-4fa2-815b-810d78934352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7932fc78-5431-47a5-9116-e28fc4cf92f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c9a5dc-dcf6-4373-89cd-0392eb25af80",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0d0d51-fc70-4be7-9e32-575b803431ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b877667-c2a1-44d2-afa9-6bf9bcb85a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33909250-9969-47f6-b58d-4ac48f83b94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041a19a6-a133-45d4-b6b3-d40ba44b4e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50585bd-59ac-43b8-8d0c-b43ffc868f77",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea7c989-fc65-4c53-9047-93da284ffd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2e3e217-12a7-4448-993d-665797686b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767cc8c1-59ae-42fa-a4ea-dff485b41d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39143ed6-d2fa-4ab9-8fc3-c1c21be79ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a321c7f-56a6-41d6-8fd2-57b9cd437807",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8a7f74-f053-4878-8b79-6e9e3d491ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13821d0c-6dc7-4e7e-9f46-332e2ea0a5ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc945bee-66c2-45b6-a8f1-44addc278011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cde07fd-34e6-440b-a0a3-e899d350b277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17099db3-833f-47d6-8a40-15778fa99724",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b1c471-ab26-4172-b0ab-e280ab6c19ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1ca007-41c9-47a7-a75b-ab13112b114a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d080388f-30b5-4d49-ac2b-7023fbb5d441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7af189d-3ddf-4ec8-97ef-2296ab0c5b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30dc92b-75ff-4191-b7ba-1f71bf89cf9e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6d55cf-68f2-42d6-99f6-1355bfdd1310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "512d7f85-a7db-4ee1-a190-275514d36b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aee4ae-c8c0-4c15-b63f-2ad44d1d3d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb3777f-9a57-4279-9129-8b213f3b191d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580f52eb-f7ca-4738-b351-7b41f1ff2c06",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b88046-ab13-45a6-a91a-1af30753536b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41eb3448-f0ec-4eb0-90ba-5050ce895a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe9e7bc-bc3e-4e80-9776-fa324e3e632b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e39c3f8-4756-4cef-836a-52903d617158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e6928-2d13-413d-ae90-36abc2e9702c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f659b60d-e563-4894-b1f8-40d2edc0f02c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ebf3fe-1a98-44d2-b435-094d397552b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1765e379-94ff-4cd6-89f7-088946df34df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec92696-ff97-45f8-939f-48accbf7dfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0cb1e8-732e-4896-a0f2-f9b60bd3027f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadd7c6d-703b-40f9-951f-a47d2463df25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b044ee01-b83f-4461-abad-03c2fbea4179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f105f15b-0cd2-4f2d-946f-22716352501f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a4d218-4e5c-4e83-88c4-0503422e3433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5aa6df-a4cd-43e7-adcd-22355c94f5a5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb19ca0-9d69-448a-aab4-660678804737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5db5e0b-f29f-4b56-9dca-6fe512f3b092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d7c78a-76e6-4baa-b482-8b366068cf55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453c7ed7-ac17-4c30-842c-bd40a6c75948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73ad84f-4b53-43cf-b95a-780277d48049",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9c474b-04be-4ace-9c9c-6b7b3445cb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035b7a08-7df0-4896-a8be-3b90fcd99707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b968da07-7bc7-4921-8f1c-a8ab90836d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b998d1-4cf8-455f-b827-e9f04193786f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23752cb5-a091-42bb-981a-0a2707db1baf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2759eb-0c84-42de-8d91-bf74f4762b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99494f22-c05e-4e8d-9e37-ca57dc853cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285adca1-4a4d-4df2-81dd-75eafb033da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05f2057-19f1-464e-a4bb-717303f10acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49288852-7f79-4cf6-9fd9-cdba146b51b2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f975d-c39a-4f0c-9778-47ff9a160ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb4884d-22ae-4127-8b2a-bc3fd7957915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecfc6b1-70a2-424a-b80f-154be572db2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaeec7e6-e0eb-4d77-b3ea-77081e5add54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07145d43-2ff7-438a-a381-751026d63670",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff49ace-e886-47d8-bfa4-02c380bc8408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff3312e-4528-43e6-b720-5a81f7468e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7739b4-6228-474b-99d5-d977ec87f94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00d773f-7ccb-4580-9d99-26ce585de00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8bfbee-d50a-4acf-ba1f-8313c582e2fb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab67f199-3a44-40f5-8cda-4b08e4e18900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee299e5-a1fa-4b5a-91a2-99377cab4add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efc2049-b29b-412b-a1ab-ae3d95d0897e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455093ba-4725-45a8-9806-2e94f86b04aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deeb9c5-57b0-4e36-8a5a-def9a609f2f5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e74a10-0fda-46e4-b536-513f6a7d31d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60455e77-2a83-4fc3-bda2-8d4eb6b4dd48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a2167c-1e0d-432d-b4fb-05bd24e316e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e279298d-fa77-44d9-9fbc-ba08fb0095db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f0f4d9-3bb3-44b7-98e4-b7b28dfc4d56",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb810fe3-7d90-434e-b10e-db74ad80f2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e5f8bb-dcc3-43d6-95d5-b90a57066f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d28ac2-30c5-48de-9595-25e6c89aef8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2747b0c2-1624-4635-a420-3a39f0f527ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060b28b1-f334-4eb6-8811-297f4a221ab4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b64b14b-b3fe-4530-ab51-9ccf89e81ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ca40d1-42da-4c9f-a0db-8666d13a48e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ebffa0-fbfb-40ca-95b2-afb566dfa1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "876b384c-ab9a-4da1-aa26-7364202d376a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181df778-4f73-4e8d-a8e4-37b0bac173bd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43625369-98b8-4ccc-8374-6813932593c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd6c588-83e2-48fc-84a0-27b201ec2b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960cd83f-045f-4fd1-9410-65b39335acef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd008b3-ebe7-45c6-9d5c-1fe75e4b750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60dbeac-b3e7-4cb9-902d-80130dc400b4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1b5b30-b08c-49ac-bf34-12036b3712b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a4e0e8-723a-46b8-bfb6-53927f7063c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d24364f-4ba3-4d9f-9647-d4b924771cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7906930-26a6-466a-a34a-37d1914bf0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e96fb0-0de6-43a5-bd13-03d32d2bd19c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825199e9-d2d8-43e9-a6c7-47fb825b0071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18cd67c-d21e-4464-9f24-2ca785ccf35c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385cc7e4-aeff-49d2-aa44-81156d7237d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48df0f7-2c07-4d82-88f8-a66b81df2882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d57349-55b4-4364-88e0-8c96e3d06237",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d36a7c1-3336-4048-b0d9-73acd34308a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc529ed-03e8-4de1-ba96-93ed94ad158d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421be6e2-7410-4aaa-b530-591f5269c2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250f9d3d-b2d6-4b0a-bef8-bd1d5612d998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16f767c-e053-48c9-82a3-b72ba4d771a1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eea85e6-dfc6-4028-80f9-9618907c0b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe515958-78bb-4372-a732-3642699da0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebe9ebf-c85c-470c-94e5-49c32d2549ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e28b3fd-5ffc-48d8-b016-c75607f1bf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344f4df1-0c71-4d9c-8312-0568c603a148",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88068fc1-14f3-4098-98c0-679986514dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c72467f-bec0-4e72-a24a-669b3ce78bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6588fe9-d2ec-4a2e-9ddc-9b609b453c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c425a42e-3ece-4f8e-b0bc-d667a254b85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc47cb9-6c07-4ab5-86db-c664a67aa17d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef672379-3bf2-4365-94b1-73031f3ccaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a8ed8f-7975-474f-85d2-c103e753e6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37110965-f137-4b9a-8dd0-80b483f48064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faca8e1-a18b-43a2-ba75-7bfe301cb5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a92e90-6ea1-4df9-b8e6-be54c173b715",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537e49b-a811-4a94-9ddd-74ec28ff0baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5588f91d-2fa4-4c91-a4cf-ba0158c0d1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98630cc-97b1-4842-88c3-13d67f75f817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1e9ef0-e962-4a68-b87c-2f135a789ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e686d937-0c37-400b-9861-60ae10dfd209",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4c608f-43c4-483e-a8cf-dabc666f243d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4c5df1-740e-4976-816b-949aeaa0cd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740afaaa-5538-49f6-b4c8-cfefd2897bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7a74de-2672-4fb3-95ef-532ed457d82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dd4f0e-5fa9-46c3-8a6d-6b37f70b97fd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7f093b-999a-4c94-899d-93552e29c87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd76f967-40ac-4ec1-98aa-8ae194dfdcaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1745a3-c00c-452f-8aa7-4a20d605a725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211238d6-2cfc-4762-b25c-1215efb137c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1699dafe-b804-40d1-ba1a-cb261268c1e2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55eff9e1-77c6-47ff-b222-e27e0db7655b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42353cf-3697-49bc-be54-4ce7a7299b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a7aa23-68c0-4dac-a83b-ae17387ae9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4809c939-c527-4c03-9059-f478545104c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70222420-06b9-4228-b260-562cc470ac9d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeff7c0-88cc-415c-b7dc-d1d53c7149a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd83b047-1aa8-4f91-b11a-9547538615fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ea9d12-3676-434c-8fe7-05ef451b66f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57224dad-b6bb-454c-9381-3cf424865866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c080e2-5fc0-482e-a552-3c9fba2d45ea",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6615ba-0481-491c-bae4-b46cd8b51ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf2264b-c791-41f1-ab62-57367022384b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d92569-ce5b-417e-871f-dbe500921a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0feef47c-c962-4723-8436-e2d5507ea4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177853f3-6d5b-496e-8b24-c9e206b974f4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83089f3-d5ce-4309-9147-4da014529958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a255eb66-8931-412d-92ac-1aab26ff6ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b9feb4-c7a6-416a-b235-e1ac357e6e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4597d2c-3ba9-4c33-a944-774ac38c1c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cc6734-e8f7-42c8-a019-366e8c53bfde",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9feb267-925c-41b8-90a8-cf511b1ea499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd9de4b-445a-4a2b-ada7-cf4795972b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0489a0-f4fd-4be8-a858-218f213e6f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3956d914-85ce-4a71-8858-53ee8637680d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cfc9ba-1070-45a2-8964-f489fde3dd83",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a2ec14-0766-4e19-a816-a80441c2aca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922871a5-35b3-4b7b-bbe9-c570dc97e793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9feab4-c488-44a2-a2c0-bea479a166d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13d0d8c-1652-49f7-a2b2-7d50feb15ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ec2bdc-b18f-4dc1-905b-de45e72b9839",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffe4ab2-4e30-461a-b983-d229f9e3d877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cc5a07-a969-4c11-ae2e-92ea370e3000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104db6ba-e948-4ef1-9e0b-71cebb5198ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90dee81-9d3d-492c-a00e-a7fff39727a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544a635d-1bdf-42ee-921c-5cb14eb7e76f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7921a28e-89d9-44c3-b59b-7512523906eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73294f9e-f318-437f-b6f5-42cde24f3827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11049a8-8176-41eb-9fd1-23ec3a13eb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0b03a8-5f4f-4378-8afe-1db6e1df5783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8a194f-3184-4c67-b142-6b93d7083dc5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a8991c-64ae-485b-b97b-842429e9cfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7051dc6-397a-431d-b079-7112facb6c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cb1d21-020a-4fad-b67f-e07a364cb3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd92ca6e-18c3-4e2e-a740-3a45a038b795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ec8aee-f43e-4566-9c5c-3b44b9cce7d0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c373ed-b70d-4d21-89fd-59fdc933d079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeea95cd-a3c9-4f47-8315-7ce286af55ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7067666a-53d3-4d65-9bcc-4b9e7c9c64e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00cc1182-cafa-4c2d-8c7d-b2a71a63a4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baddf981-91dd-4e02-9c39-804d304f77a4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85df2849-8b1e-4b72-92b8-2865c90789df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6028b72c-5a59-4423-b9b1-9b9a409eae05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41296206-c57e-4090-97c1-b1d535e9208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56fa4dd-1604-4721-8f36-bcb94e0d20a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e273fe3-6bd8-4b4c-9a11-bf423c272ada",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f04e5c-6b2f-41ca-b0ee-63355e79561e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c438c59b-19ab-440b-b506-ec9e6e1b3cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01fdf93-1800-4f10-95b7-bdd52fc64403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb0e122-c383-461d-b97c-b32460826823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4610343-6d8e-44b2-aeba-21d6d13f0ea3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2057c7-f479-4104-9da3-5a70d98fa2a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524ee49b-a065-4641-aa1a-3ff2098eabeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aaacbf-1537-4845-9671-4f2bdadf4c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5541b9-71fe-4b3d-ac28-61d0b1ea1a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654b47e1-6b9e-41e1-9663-84817a84492e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27e98e-c88d-4598-80ec-beb1a153e19a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2e11438-ea8c-4379-a144-2b66309dabfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0be504d-82f1-4b0a-8dd8-21bfe80ee9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eab2311-b6a6-4631-b25e-19e2e211de53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226fe198-1e22-4d8e-91ae-97324e8bb49a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0573016-58c1-4fce-831c-2bc7167426f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c80d011-3824-4b8a-a71a-d530576d1cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f484c0-87ad-4a80-b2eb-4f4628357b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a25859-dcad-49d7-8ec9-5b0bbc3c5f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e493c6-3ded-4368-bfb1-9eb5eacab6b8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79fffef-ac63-4169-8a9d-bc814446850f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f396f46-a166-4986-a488-91b4899d3c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa01e721-6d66-4bd8-8983-35af63766891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c3e5a9-33f4-41ce-b7ac-0b7189c18f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7852f5b5-f587-412a-9d85-f2e5f5c7efe4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc5ee4a-c496-4d6a-8f30-ffefae098c27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743b73b2-36de-4a9d-b85b-c426c6afd4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9475342c-be4b-4a39-9530-99de614cc3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde7ca26-2d78-4ef0-a64c-8eefaf5a7f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6bbb4e-7b6f-43d6-aa35-d543daf75cc8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10240f75-6737-49ba-8699-da3c67c01c62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c049bc9f-4070-41a3-b03f-702952a1f384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf78f6fe-ccf7-44d2-a7ea-4eabd808a04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b391bd3-0fbc-4744-89de-bf3a317d6fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a43c8db-c673-4a7c-8b71-67004bed95b5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486cccf6-0208-4faa-98a1-17fc4590c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a464302a-c3e1-438c-a509-e81b235683e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74471fec-ef12-4e01-9e55-5da9b657bcf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55b5b27-fdf5-45e4-99e2-2f7181feea05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb3b2e7-3025-4803-b3d1-cdbaa95a24d6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d894df3-5cc5-4fbf-9950-54e6cbe992c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a52bbb2-8139-4208-b293-d5db074f70d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1424a768-b466-489e-a42d-f8753de8108a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a223a10-1916-496e-b655-bad7bbc6c31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97460656-914a-4b8f-801d-b505fb87053b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dbc1a9-da40-4eea-a0d4-b1e6a45b26a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a514c5-a8b9-44d1-8d30-1822ad164544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f02692-d337-4b06-870f-ac41826d0f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa34f7b4-c506-4990-ba74-f4d1042f1318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac425f3-0918-4c5a-a512-9337e563aa5d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9484b420-d5cd-4fe1-87bf-9c4784aa3732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242798e2-4332-4ad2-964c-92c8050159f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c84b185-1dc3-481c-98fe-875279880df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f37c37a-73d0-4c11-8a3c-2b43b8ef5b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fab81a1-09e4-449c-8230-56f5e58f440b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03735cc0-580d-49ab-ba5b-09a5f917ccb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2029f6e2-c5ee-4f79-8345-9d690e957404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2317ab5-0eac-4a97-9f80-a98451e4df2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c39fb2f-f702-4e8b-8414-0cab7db785fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1cd54f-987b-4084-b84b-62524bdec1a6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98347b5c-c7d4-468f-a830-140fc4279d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8fabd1c-1fcf-427a-9084-86c76ba3e519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2367c4e1-308f-4f0f-b471-7d89d5f8f97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7206e3-640a-4390-913f-8a01facebdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0500a7-4a52-4e22-877b-1013eff1f8e7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba8c026-a018-4e6e-98d2-43fad35d70cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f380b76b-5562-4af5-9527-1c447da2c144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba006c7-6aab-40c7-a1e7-e93f057b1b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256b3d49-40d1-47c0-a8d2-c8be6c5e4340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4227d6c-b2ac-4327-93d8-d24eecaf177b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf662a9-9a15-4d53-a099-88a1b8269da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68694666-db7f-4876-8087-cc343005ebb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b9f5ff-de91-4a1a-8daa-70471cecc514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca13a58-90e5-4aeb-9d73-95c92a03a720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522075f4-2f3d-4cb8-9164-a24026680b03",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a156500-b711-4c03-961b-252649da4dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e6e0dc-46d3-4670-b166-f1a3c9b94f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccdd998-e68c-4f07-80e6-3fbe74d59b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8baa6435-7d3d-482a-93c4-13170319ebab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576f3635-6b5e-4aaf-95a8-96df0713098c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34401dad-4e26-4e98-934f-050c1ae6bac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8b893b-de38-4cb4-8c88-8cf5837758b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9696d5-89dc-463f-9db4-e3788bfd81f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8822b845-3637-42b2-a918-2eeedf63aa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1119c565-fabf-4d3f-818d-4d7bdeb0c3f2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63634e7b-d58b-41b8-8e58-9548fdf2b54d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a07b4e9-05de-4112-8d6c-f66741be2726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af256df-a985-42dd-bb91-4f58f0c29188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a319876-fc8b-43e5-8064-9b9f22bb4c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87599be8-e860-4918-acdf-6f7c7c503146",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136ce320-fdd9-42b0-a4f3-6f8bd4c1dbca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c21b7a4-b1e1-43af-983e-25abb25779fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b482ad-a90e-450d-afce-68f4813e9bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c92fb5-cc59-403d-8aae-7d49b99ede5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fb510e-2cc9-41a0-a0b7-86cfedc9bde7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85e0648-ea31-4339-9465-7577f91fdfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6d5a07-0f4b-4658-b546-81cbaa1b3e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ed16b7-695a-43da-8c9b-af06700990ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be95093-99b0-4e6a-b1f7-340e7038fb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ede228-3714-4c31-aac6-cb5457d571bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb230f2b-6341-4d4d-b69f-c0d329f679a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a234ef-9b81-4427-8c5e-03b31695eafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3022ec6e-bc8b-4d85-8953-74dc6fcbd586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a07024-0460-46f4-b883-ebf068ffe7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860e7802-6317-41cc-bea9-88579d8b67ae",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e87ae2-8033-45a9-a873-e95c426124e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b2e08d5-a482-433c-bfc7-3d5353400ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47bf87d-f693-4a07-ad17-a29c2ce91005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9053ffe-0f90-4057-9347-3e8951f22b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1ac79b-27e5-4297-94d3-1eba88eb6c40",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6343b43c-32e6-400c-aa6b-e1ce3133e456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f25ca1-8e05-4a3e-895b-a8070b64d952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec389bb1-502f-447f-8d04-4a61252c4be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d18886-3ba5-4b0b-b13c-e81756112741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1cf95c-570b-4e06-83f4-a5a528e0e705",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dc30bc-6ae6-41a5-9f34-44fb6746a817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7790c052-5211-4631-a8ea-f6c2b0216ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039f8c17-7f2d-4516-9a56-ad11cd40cbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f44eda-947a-4104-b542-aa8e81565b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0cf2e7-6e09-4808-a922-d5758cc8d663",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c11058-2d36-48c7-ba05-633867e3878d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ff4701-787c-40ff-8235-56cacfd20d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64cea87-571f-4cda-a22b-fb520c7ea6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804c5b93-3deb-4f1f-bbe6-83723cfa8d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9e57b3-e35d-46b3-ad00-161da50c27b2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c076c5-62f6-4245-95f2-d4bc5d13cfea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f5a01d8-0f1f-4bad-ab55-2763b3cbea72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b04151a-cd0e-403e-a72b-d4c7747525cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82448d51-3492-4c4e-8312-1f656c629c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca7fb8c-0b6c-4b75-b1c6-3cd3c02310ac",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4250598b-b21d-4b97-a619-fb90ac2f427b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5767f638-299b-47a7-b4c2-1b290a6b4891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba6f882-8663-4ef7-9870-6b325a2f8099",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f909251-3277-4b51-a9d3-5df44a787efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedf83b7-9863-402e-849e-87532f101558",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666482cc-5ed5-46e9-a8b3-0d269b5a1b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "224926b7-0408-4216-9285-c1b786d9379b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22470f87-82ed-43cc-8730-f633f342601f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6303e8-121d-40b1-9108-f357127a17b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540015d7-5d6a-481e-a415-b1edfa5af77f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b439dd5-444a-44f1-b9b4-529ea8a81598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6719b019-0029-4844-918a-bb5d441c8bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0620b01d-ce2a-44bd-9def-bca9fd55055e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5fd2d31-cf97-4446-b121-ef846df01fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801d860-e5ce-4fe3-a611-9d148132c74e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c878a5-be29-4492-85f4-2b78290fac40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1923be8-e3f0-4cba-a829-060de15aa969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67651e3f-7a0c-473f-8560-9f7734ec2e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a4333f-83be-4d73-a9c3-d4f58c233e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8fa29f-7cde-4d6d-8477-a0e12fefbcdc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0ea183-82c4-4e17-9866-fabc3e2fa139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d531703a-66f0-47f6-aba4-4c01980aad9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f055f2-a67a-4bed-bccc-c08b2ae1736c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fc06d0-1bf1-4f3b-9db8-0a2992db1559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d64f64d-3e47-4d6f-8d5d-48edcbd9bb8a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c467b4-4dc8-4026-9a8c-58d78d25eca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "236b4b7e-9a0b-4112-9fde-10480df44be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e54e5a-0aa7-45f8-aea9-a86495081c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3169cb26-8714-4f07-ad46-572089fd4810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a7b413-8801-4932-89a6-0145aa59a471",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3a638e-7155-45e8-bc52-dcea652335f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a691c642-f9bb-4505-9e96-86121e60eed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d6b2c8-6322-4df0-a5f2-944789280544",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4f1401-2a83-4288-acfd-f6e2df5a4b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4563a4a4-fd63-4ed0-bc70-012d1756dc3c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e47520-8561-4d37-8bb5-20e8657dfca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc686d93-6a76-4348-ab3b-c35cb72f9023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7297b2f-ecf9-4208-b6e7-f5a02dc383e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4815e1fa-8e61-4293-8bbd-19b58c8f55c6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53c0bf6e-2d8a-480e-95d5-0ab13700c24d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77d509e8-0c88-4f01-aef9-441bee9cccff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2bd761c-1161-4209-9e0b-a8fe701455a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16289d30-b97e-4c45-970e-5373c68efd3f"
                    }
                  }
                ]
              },
              {
                "id": "9f17fbb7-1925-4f1d-9fcf-b2f80215f5ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fca407bb-ac96-40e6-984e-0c8c0605030d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7754ad5-d19e-4adb-bc01-ce3d1ccb85ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "242b28be-52f6-4b80-add3-4e229baa15c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da22c27e-a7ba-4420-aa91-3207e1748f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13815b67-746e-46f8-bb10-efbb716b30d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5754e227-76a3-48c1-8ab5-1e43de74c849",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a64a159-be9f-48cb-beec-d9ed22e8714f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51ef92a2-6d71-4f77-ba1b-983ed443f8bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "808c2e23-08df-402c-8274-2dbc6d826072"
                    }
                  }
                ]
              },
              {
                "id": "52ff6da2-1e38-4e23-9bee-638aefdbf4d8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "220c905b-76c6-40f5-81db-addc1d2e63bc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c965a5-ce79-437d-b7a4-4e72bf665e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8c6a8c71-303f-45b6-b17b-7c71a4047bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf64bc5-8c42-4827-a740-ad5f6a84c9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae27b01-3513-4c90-b9b3-0581ca72fdfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7a88d82c-5ddf-4988-a726-571fff721771",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a28cf740-3b5b-4612-8813-4e022a6fe5bb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0eed1910-4504-4e77-b087-d99f33031f49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fd88149e-b1df-4cba-87c0-5607159f0389"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "082ffe7e-1eda-4ed5-bb3f-a4bbbe18f214",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31c817c8-950a-472e-8a80-48cd42e0ce2a"
                    }
                  }
                ]
              },
              {
                "id": "f445b7ed-9649-4bcc-8e9d-70947e90d181",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a95e8e10-8795-4a90-b04d-8787232adfc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed83e061-f47f-45cb-901b-414e626feead"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f6ef7c6-4298-4e35-8c21-12088e715247",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bde03a1-002a-4f14-aa3f-6cd01b12f726"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12b2b095-c6c7-43b3-95da-5efcf0179ea4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9eea3ae8-30f1-489e-8f1d-9f94260954de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fb1ce6f-f28a-45d4-92fd-993bd8f66417",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa46c711-f04f-408f-a737-afc4035f2b41"
            }
          }
        ]
      },
      {
        "id": "d2aa2b76-9f67-45ac-8e89-1d7a35b358e0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd8a75f1-bdbd-4b86-bab0-07fa5437aeb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e1bb1df-dd35-4b4c-ba1b-1e00f1cb1ac4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "486462c3-088b-4995-9624-641534c99bcc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed630a9-afe9-4a4c-9d76-478a14b2bd7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "43e41572-2eef-4d3f-85ec-88eb6a0fc85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befe8275-4cb8-4c78-8ff5-972402381519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e51c4322-6258-42e7-afd5-4793c1cfcbe9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcbedcad-109a-4c79-bf2e-2b66f0a1eebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4273485-2e52-4e65-9fb7-b38e13ab3654"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71847f68-cf06-4a86-a5cf-7b7263688fec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2df98e27-2306-4134-8e3a-91f7fbd905a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf63e455-9675-47e6-b433-37ef26d1fb2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "974117fa-5e6a-4e2a-ac66-869f292872fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4675fb3c-1946-4a5d-83fc-90cc51ac7baa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a00323cd-234d-42d3-a692-36706e96fba2"
            }
          }
        ]
      },
      {
        "id": "883e2b3f-345b-4f61-85f3-0301ff8450c4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "82178d9c-261f-447c-984b-c3837241692a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d867123-fa6b-4072-9f32-c25715201598",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e55f0507-1f5b-4838-b58c-eefca9ad6d54",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2701591f-c55b-4ec1-aee6-25ca35a0d4ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42a954b8-1013-49c9-9673-d6df6f711a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e63946-96b2-4ba3-bb08-96b71fb08225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfb3c3a4-e434-4858-bb6d-6c90b10ed9be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96953b3c-f55b-4893-aa9b-60710f9d643c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf5cf80c-a3f8-4cb8-9ee3-c0ff0501d2df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aef13af6-85b3-4c14-981a-ad131a4f113c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06ba9035-4eb9-4237-b70f-9938e7a9222e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c62dea2d-7a83-485a-8050-7a36d4e2cbb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c525d286-448b-4413-94ec-91ab31c26422"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e90176d2-437d-4b6a-8c34-720b04644e09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23d81eb3-a36f-40fb-b45b-9a8b6001a78c"
            }
          }
        ]
      },
      {
        "id": "619e9bc1-73bd-4c2d-9c68-7d8e857b3c9a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "05ef5012-80f1-41d4-80fd-4eb5b5deeeaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a46c19f0-9209-4675-88be-c17f85646923",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05a6afe9-01b5-4d49-a5aa-7ee178b115bd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03074b7e-e5c6-473a-9449-3c7f541a57dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e42c52ff-9366-47a8-890a-aed337cc011b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d40c373-040f-4a39-951c-f3ad14225ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05db574a-4ca1-49b7-ac7c-fe12367fc746"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c263f853-a30a-4587-94b1-2b4d5ca492f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "931f6038-9465-4027-8792-61a16e6f4b64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62863083-7643-4632-9f5f-cdf9f418cfbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a211db84-3e93-4acd-84cc-44331740c606"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f26a5e1-3be6-4dc5-bfe9-c75b4f368b61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "68a01c06-9137-4513-8b36-32a34fed3714"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b41d09d-439a-4eaf-85c8-db85e2f447ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e8a304d-6fee-4514-959d-0781bc4adfc5"
            }
          }
        ]
      },
      {
        "id": "d7ba5497-a270-4dbe-8fa4-d113a28ba783",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b66a66b5-6fb9-4daa-a530-23087aa4c335",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e0ddd2c-26c7-41de-a4cb-a20ed8a3feab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e0a8b23c-6d8a-4cfc-b701-4b4090e8cf92",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fd61f7f-a259-4138-a5ad-557910c9e3a2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7afa4fe-82e7-4f7d-b17d-8cadb7ea1def",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.97192982456146,
      "responseMin": 6,
      "responseMax": 630,
      "responseSd": 80.32848734248593,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708994018101,
      "completed": 1708994044690
    },
    "executions": [
      {
        "id": "78c65c0e-52ce-40c7-86a6-89b0e0af4549",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "37d7aa9e-2fb5-471d-a53b-5b2190a466c8",
          "httpRequestId": "1a0254e6-64c6-43be-a314-f951b9bf6738"
        },
        "item": {
          "id": "78c65c0e-52ce-40c7-86a6-89b0e0af4549",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "01d7dc4a-dd15-45e6-8625-dae2070cc8a2",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "bf9d9842-d948-40f5-8684-d60c77a4da20",
        "cursor": {
          "ref": "1c080bda-e8cb-4388-a765-702795b68504",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "59edd24d-6e94-440b-a1b1-6c90a84521d3"
        },
        "item": {
          "id": "bf9d9842-d948-40f5-8684-d60c77a4da20",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ffc04f27-fd65-4113-8ba5-09d987eaeefc",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "251d2085-6af3-4bd5-b565-20c8c8ac23aa",
        "cursor": {
          "ref": "c84e6377-8622-48e7-8dc3-0ea3c2d65e23",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "04982ba2-91d4-471f-8fe0-71a34e305aad"
        },
        "item": {
          "id": "251d2085-6af3-4bd5-b565-20c8c8ac23aa",
          "name": "did_json"
        },
        "response": {
          "id": "465a59b2-8f46-4298-8617-38b85bad1cf4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a6e7ee-8a90-4628-b31a-7194bfa0de88",
        "cursor": {
          "ref": "ec007364-5ac9-4ae4-89f8-0b6d4d19eedb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0458b2db-fc6c-4780-b231-58dcf7e97a5f"
        },
        "item": {
          "id": "54a6e7ee-8a90-4628-b31a-7194bfa0de88",
          "name": "did:invalid"
        },
        "response": {
          "id": "3f5475fe-6cba-4a90-ba12-31a53ddf2003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a6e7ee-8a90-4628-b31a-7194bfa0de88",
        "cursor": {
          "ref": "ec007364-5ac9-4ae4-89f8-0b6d4d19eedb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0458b2db-fc6c-4780-b231-58dcf7e97a5f"
        },
        "item": {
          "id": "54a6e7ee-8a90-4628-b31a-7194bfa0de88",
          "name": "did:invalid"
        },
        "response": {
          "id": "3f5475fe-6cba-4a90-ba12-31a53ddf2003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d884256-b658-4f51-bba8-0bbc4146284e",
        "cursor": {
          "ref": "4cbd2b2f-528c-4244-a836-8f62eef75e2f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a94ea70d-ac1b-4df5-a58b-702d4d018aba"
        },
        "item": {
          "id": "5d884256-b658-4f51-bba8-0bbc4146284e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d37301f8-89f1-4611-9281-ea69c5cb136b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0fe94b-4725-41cc-bd41-e8c774faab50",
        "cursor": {
          "ref": "ec1065ee-cc5d-4131-b21f-bdb31513477d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "948b7954-53b3-4bc9-86a3-58185271ee0e"
        },
        "item": {
          "id": "ee0fe94b-4725-41cc-bd41-e8c774faab50",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "da9bad21-81d4-433f-a966-6364946f3ddb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b628795-b288-4281-8854-93ae8a04e6e6",
        "cursor": {
          "ref": "6b11e5db-4094-4870-9ddc-80e744864807",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b5dfab60-fac3-44dc-8bf4-e8f92882febe"
        },
        "item": {
          "id": "4b628795-b288-4281-8854-93ae8a04e6e6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2a15abe8-c1ae-4176-806b-4c7d1075bb6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260b5ee3-9b23-4089-937e-7ce4adde712c",
        "cursor": {
          "ref": "8e39ac66-13d9-499e-9bf4-c2a8650aaeba",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86c98ff9-ea47-4b8d-be67-97b5198c510a"
        },
        "item": {
          "id": "260b5ee3-9b23-4089-937e-7ce4adde712c",
          "name": "identifiers"
        },
        "response": {
          "id": "7064d289-5f7b-4257-90ea-c61cec84da32",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ead8a78-2a66-4406-8a53-eb03c6fba08f",
        "cursor": {
          "ref": "6fb261fd-c37d-454c-a0da-5daba2b3ef27",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3e413952-59b4-4f2a-a6f1-6ac5d1e751d2"
        },
        "item": {
          "id": "1ead8a78-2a66-4406-8a53-eb03c6fba08f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "991d066b-7abb-44c5-a821-e1069a1a9466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6279b1f3-f082-40bf-b1d1-a6a6af171a16",
        "cursor": {
          "ref": "ea812ed7-dd9d-4f7d-ab78-978a5516e9bb",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cb8390a7-a1d0-4360-87da-bb80b4a4b678"
        },
        "item": {
          "id": "6279b1f3-f082-40bf-b1d1-a6a6af171a16",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2bbb92c5-0a67-44a5-b4ef-f4e84ed2fd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2218c006-0f97-4e56-907b-8bf0e1cc1cc1",
        "cursor": {
          "ref": "98b8edc2-3e90-43ae-b1c0-27d4671662ba",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6402a33a-31ec-45ec-855c-999da263e3d7"
        },
        "item": {
          "id": "2218c006-0f97-4e56-907b-8bf0e1cc1cc1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "37ad8e98-fdab-4fb2-b0b6-acfb1dd00955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db269e58-badc-4995-be8a-96be0013f5f4",
        "cursor": {
          "ref": "c7c310d9-dbe9-4a11-8078-24b5823073f8",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2db09ad0-370f-4f7f-8442-9854a7e2fb1f"
        },
        "item": {
          "id": "db269e58-badc-4995-be8a-96be0013f5f4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ebdb938a-8bc8-4495-8667-e3152a3d8f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6df6aa-83f2-4cfe-a106-357ba75fe824",
        "cursor": {
          "ref": "933d21af-9cb4-4113-87ac-55caf000f23e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1d82b18c-d210-4e43-a4b5-247693bc9b45"
        },
        "item": {
          "id": "1d6df6aa-83f2-4cfe-a106-357ba75fe824",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9ea9f122-6cce-457a-896f-e455a1b3868c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6d25b3-fd89-443c-b912-3ec0ae7a6c4e",
        "cursor": {
          "ref": "ec2c61c7-736d-4f1d-9033-33f5fc4e5e17",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "24c3cdd5-cda7-4e71-843c-818178640f11"
        },
        "item": {
          "id": "fd6d25b3-fd89-443c-b912-3ec0ae7a6c4e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "40cf4550-3ae8-4d74-ab2c-94026d612eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc75896-8822-4f3e-aac4-7df03ecf3b0f",
        "cursor": {
          "ref": "874dc5a3-8ee0-4edb-9879-19878425ed20",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bd2e96fe-3d07-4a93-a24c-21707786bc2e"
        },
        "item": {
          "id": "dbc75896-8822-4f3e-aac4-7df03ecf3b0f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e18aecd9-3083-4ba6-a5fb-f207ac62381f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73809c4-0657-4121-bd6f-08e472c9c560",
        "cursor": {
          "ref": "cb378391-8105-4ce3-be61-2a58892f3145",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c84657be-0621-47f6-a023-a805425d1446"
        },
        "item": {
          "id": "e73809c4-0657-4121-bd6f-08e472c9c560",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "56d4d484-d054-469c-9af9-b8467935abc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb7b430-eb80-4d98-b003-dcf9898a4605",
        "cursor": {
          "ref": "f31ba24e-f102-467e-94d7-6aea1b3dad5d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "26a0cec7-da26-4197-99b5-a42c9e07e249"
        },
        "item": {
          "id": "feb7b430-eb80-4d98-b003-dcf9898a4605",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a79495d4-1e09-485d-a517-2a39ac17e1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ab6d8f-4db3-4c1c-a2f0-b7d50af8b7e6",
        "cursor": {
          "ref": "f474b3a3-454b-427a-9af7-3003d28d9300",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "024c7c7b-da92-43aa-90ed-ed30bcc3bd4d"
        },
        "item": {
          "id": "e3ab6d8f-4db3-4c1c-a2f0-b7d50af8b7e6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "97612bd6-c650-49b8-846f-434eff836c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025c6f5e-36e0-41a8-babe-3eb8112da8ae",
        "cursor": {
          "ref": "8501c910-0722-40ab-a6f9-a22f97c08636",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4b5ce19-eafd-4d7e-9f05-6f475da24740"
        },
        "item": {
          "id": "025c6f5e-36e0-41a8-babe-3eb8112da8ae",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6de29de3-9eb8-4410-ab53-94f6fa01ead5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf380211-61e4-44c3-8675-f8875f36423f",
        "cursor": {
          "ref": "0813c584-6fe9-4f17-a5b5-0343bf01c681",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d6138c6d-62e9-45b2-addb-4df3e6b3c3a8"
        },
        "item": {
          "id": "bf380211-61e4-44c3-8675-f8875f36423f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "60d21c0d-710e-4deb-b0f1-b520e9fc84d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c05679-2a59-4a5a-a29b-d6ccbdfefe6e",
        "cursor": {
          "ref": "a6d336dc-5065-4670-a974-214788d01b82",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "db49cfaa-fab1-4781-a8f0-9eac6d086214"
        },
        "item": {
          "id": "d1c05679-2a59-4a5a-a29b-d6ccbdfefe6e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2ff00da2-686e-40cf-b658-bdcb162057e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd25bc47-3fd1-4950-8095-557ea455eeba",
        "cursor": {
          "ref": "fee6ea4a-48bf-496d-839a-cfa6ff18ad58",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9c0b84b5-9b0a-4be2-ade4-375cb502d25f"
        },
        "item": {
          "id": "cd25bc47-3fd1-4950-8095-557ea455eeba",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a7d1c563-e38b-49ce-af2e-e60f424b3329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79842cc1-142b-47d7-896c-308ec053efbc",
        "cursor": {
          "ref": "f87bcef0-4371-4d9d-9b75-78ad8764f561",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "176a408e-dd2a-4731-b828-f464547410bb"
        },
        "item": {
          "id": "79842cc1-142b-47d7-896c-308ec053efbc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8dc7b437-716e-432c-8d0d-6ff1ee3f0c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bbbae4-c59d-46cf-a15f-4041a51d90cb",
        "cursor": {
          "ref": "712abef7-9ab9-41d6-a513-a6e66ea97e63",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "808a647e-be56-447f-bb83-af2322e9cc60"
        },
        "item": {
          "id": "e3bbbae4-c59d-46cf-a15f-4041a51d90cb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3bb0f8f3-e399-462f-8dfd-dbb126e044ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2692938e-4b6d-4077-85ab-0e65e00f5b6c",
        "cursor": {
          "ref": "d7da923c-7eae-404d-9aac-8d883be43d18",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "97efebc8-0a68-49b6-a310-9182037cf9b1"
        },
        "item": {
          "id": "2692938e-4b6d-4077-85ab-0e65e00f5b6c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "983bae56-d18f-4972-8ec9-b525fad05041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dbe58f-67a3-4fa9-bb86-2ef7c68a35c2",
        "cursor": {
          "ref": "639c12c5-2a6d-4038-b455-0f28fbebe16a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "260f832f-a1c8-4c29-8ed9-9984c8b4e2b7"
        },
        "item": {
          "id": "b7dbe58f-67a3-4fa9-bb86-2ef7c68a35c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "868ba8cc-6ba5-4fcc-980c-c3372afb8244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb3ed20-b03e-4fc2-8557-b12462cb8e63",
        "cursor": {
          "ref": "3003dfe8-9a7f-48cc-8d3e-aa1bd269a81a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "89689c42-4949-4094-95be-4fb2e28b10d4"
        },
        "item": {
          "id": "7cb3ed20-b03e-4fc2-8557-b12462cb8e63",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fc6bb87b-e4d5-4cb4-a6ff-301ddf0b62fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb890e6-f023-481e-a01f-0159d3fe63e9",
        "cursor": {
          "ref": "cd443762-3b92-4171-ac7b-dfcf478fbb2e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d2844ea7-eeb1-4d1d-a973-3421b7915285"
        },
        "item": {
          "id": "9cb890e6-f023-481e-a01f-0159d3fe63e9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dd3c79b9-3834-4d52-aebd-a5ada2cd4658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8640d66d-a2b6-4963-bf23-f2c8892752d1",
        "cursor": {
          "ref": "cd8f8555-83ab-4487-a74d-0d7e4b18edcf",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7b580744-7274-4746-b5ad-bec3963bdfc9"
        },
        "item": {
          "id": "8640d66d-a2b6-4963-bf23-f2c8892752d1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b9398750-fa11-40d8-853d-ce276816a7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10304480-73e3-400c-b225-2e377f3e3398",
        "cursor": {
          "ref": "5a992548-c049-4dc0-8d1e-6a43e57d25b4",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1291c7f9-5b6e-439b-806b-5e79a0b064da"
        },
        "item": {
          "id": "10304480-73e3-400c-b225-2e377f3e3398",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b7ddded2-e50b-4683-bc3b-6d698a0591f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00b005b-63bc-463a-982c-d421265f86ed",
        "cursor": {
          "ref": "94a40925-0df4-4267-976e-cdb4a16a8660",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f909b081-3170-45d5-94a6-340e142fdb6c"
        },
        "item": {
          "id": "a00b005b-63bc-463a-982c-d421265f86ed",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fea23462-9252-4f04-beb2-10daa86daeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f554b4-da58-4f95-bcbf-7e5b417f4282",
        "cursor": {
          "ref": "84de7989-c592-4628-9ab9-4c56249384a2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4057df05-7f92-47ab-9d1a-a42e53ee05f3"
        },
        "item": {
          "id": "91f554b4-da58-4f95-bcbf-7e5b417f4282",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "150dec9c-de00-47cc-80e6-9fe43eb320b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ec8367-d2f8-4aa7-9c88-19e22d2a0b27",
        "cursor": {
          "ref": "6036ae24-d206-4f70-88c8-8e4260ad9901",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5b83e3e4-ab37-4d67-9ee4-2cb93cef5617"
        },
        "item": {
          "id": "f7ec8367-d2f8-4aa7-9c88-19e22d2a0b27",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5a0815e1-75d0-4660-9ed6-ead25ff1fd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f4989c-a12c-4876-9780-7cc21f81a591",
        "cursor": {
          "ref": "b34d5308-468e-423d-8d22-c236c1aa9977",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8ef4da0b-1aa4-430f-bd10-da1391c2b9ff"
        },
        "item": {
          "id": "11f4989c-a12c-4876-9780-7cc21f81a591",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "130c4235-be7e-4425-a333-a8703a00683d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e32ce12-cbb3-49af-b7f6-c22f9663c045",
        "cursor": {
          "ref": "66815642-7d5c-4cac-a52a-cb638b6bae18",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ef236f9a-db59-49b5-8f56-4f78a1439ec9"
        },
        "item": {
          "id": "5e32ce12-cbb3-49af-b7f6-c22f9663c045",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "83c80d96-5754-49a2-8949-9ab5610cea15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5cbcd5-b47b-459b-a4ba-911a4c7508cc",
        "cursor": {
          "ref": "9c3459b9-2c9e-4f36-9db4-e9e047356c8f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c56dd6ad-48e3-4f76-99ef-64a3d7528cd1"
        },
        "item": {
          "id": "9f5cbcd5-b47b-459b-a4ba-911a4c7508cc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "effc874b-b9e0-4548-8e0c-9b9a4f33f731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131b712c-60c2-4956-8f23-c2281e906a0f",
        "cursor": {
          "ref": "ab2be90e-f7d9-4733-a8be-74335093be98",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1fbc2b21-de86-408c-bb16-bf5546250d73"
        },
        "item": {
          "id": "131b712c-60c2-4956-8f23-c2281e906a0f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2b84bb79-c528-43ce-aa2c-5ca062fa0518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bdfbc6-8be8-4379-8ef8-7dcf48eb579a",
        "cursor": {
          "ref": "1dd5d296-9512-409c-a56d-2b9691a6ea90",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4e8f6772-44ba-4a0c-9d81-86424a285d3f"
        },
        "item": {
          "id": "53bdfbc6-8be8-4379-8ef8-7dcf48eb579a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c06e6737-0b7d-4359-9676-0c0d1775d73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02effe2-d85b-4d8b-9eca-29563a91d639",
        "cursor": {
          "ref": "7e1b160d-de17-441e-ae03-412e14b6b532",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a65e7e65-e323-40af-9736-6afd2a33a1dc"
        },
        "item": {
          "id": "e02effe2-d85b-4d8b-9eca-29563a91d639",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "356d1d30-6f27-4c08-ad96-cd09884c28ac",
          "status": "Created",
          "code": 201,
          "responseTime": 630,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1104c939-dbee-4d08-9b10-dd4e76ecdd3f",
        "cursor": {
          "ref": "8b7f747e-8c27-49cb-89f7-993f1c94cad0",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a6ebec3c-c460-459c-8e8d-328fca6ebbc6"
        },
        "item": {
          "id": "1104c939-dbee-4d08-9b10-dd4e76ecdd3f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "94c78b60-8918-471c-91c5-9eaf851e8b22",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "45ec4b82-9967-4877-87fa-5e4e89c7f9e5",
        "cursor": {
          "ref": "be7a8d75-5b9f-4436-97d1-e3c8e58ff6a9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1d4eb926-dc02-489b-bdd0-ff9b994fbf6f"
        },
        "item": {
          "id": "45ec4b82-9967-4877-87fa-5e4e89c7f9e5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8c585364-9de2-49dc-af5f-2ba9b72a6587",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "29e29ea5-5d04-4cdb-b45a-aef3400ee698",
        "cursor": {
          "ref": "6a0c5bad-7be3-4a22-b718-df6d96a4eb4c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2a8d6d1d-a300-40c1-88cb-48878de242e6"
        },
        "item": {
          "id": "29e29ea5-5d04-4cdb-b45a-aef3400ee698",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2acdc808-3bc6-4225-988a-c024f7b3aecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4001c74-5059-4b6b-8004-2aa24c1a9ec1",
        "cursor": {
          "ref": "c56af0cf-8c8e-4b1c-9aed-1e51cb045f09",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a93c3004-9701-46fe-bfc7-5117dca8219c"
        },
        "item": {
          "id": "b4001c74-5059-4b6b-8004-2aa24c1a9ec1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6a3344dc-ea22-47b0-8ba4-0c2767b143dc",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "554b5b0f-5f22-4abf-848c-f2ddacd41c1a",
        "cursor": {
          "ref": "7c403658-5e3e-44f8-b82c-787227e20983",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "00daa861-4b7e-4e5a-a293-2c718daea3fb"
        },
        "item": {
          "id": "554b5b0f-5f22-4abf-848c-f2ddacd41c1a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ff1c28b1-a7d3-4284-b340-d53db35ba333",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "67b5c04c-bfb1-4b3e-b38c-13d5d7ee5250",
        "cursor": {
          "ref": "653d429a-8cda-4e9e-b1a3-4d36ef530b8c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "72c967d5-75f7-4556-9cf8-85b7a5b9606a"
        },
        "item": {
          "id": "67b5c04c-bfb1-4b3e-b38c-13d5d7ee5250",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b58931d5-e0fa-4059-a076-1dac16116c30",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "761221fb-6fbd-43a8-8813-9c975c83d359",
        "cursor": {
          "ref": "5d3b86d2-66fa-4852-9170-dc5ea24f91b6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "264099af-0949-4a78-a60c-5c1adff64624"
        },
        "item": {
          "id": "761221fb-6fbd-43a8-8813-9c975c83d359",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3c0c76be-dbbf-4da1-85af-3ada9efd86b3",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8ad0f041-4f97-4457-898b-71152c34e861",
        "cursor": {
          "ref": "0afd12ee-65b3-452a-b0c5-797f3eb58a44",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e884c69c-1e4a-4406-8187-515a9b2977f4"
        },
        "item": {
          "id": "8ad0f041-4f97-4457-898b-71152c34e861",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "63baa891-126f-4f2f-8a78-9844c6d80708",
          "status": "Created",
          "code": 201,
          "responseTime": 437,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "99fc2a09-0c20-4566-99ab-509ffacaad06",
        "cursor": {
          "ref": "15597614-52f2-44c5-9bd4-452c7722ad8b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "da016059-8786-483a-a085-1ead96b5ec52"
        },
        "item": {
          "id": "99fc2a09-0c20-4566-99ab-509ffacaad06",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7ef24a73-c3c0-4650-b3ce-07c50d726905",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9628ad1d-c60d-4120-8e36-14b7bcf53c75",
        "cursor": {
          "ref": "ad9b017e-4fd1-48d3-8d39-de7f62b5456a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9001703-4b9b-4f84-be8e-54377f8d8693"
        },
        "item": {
          "id": "9628ad1d-c60d-4120-8e36-14b7bcf53c75",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "64c90038-fa00-4efd-832e-869bba60873c",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "27c2e675-d5de-4295-ab47-6c1eedf7feb2",
        "cursor": {
          "ref": "44b51644-3e52-49a0-aa3d-af11019e4b13",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9ebbd040-fbf5-42c0-bc91-b02b071dd7a2"
        },
        "item": {
          "id": "27c2e675-d5de-4295-ab47-6c1eedf7feb2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8bd8baad-20c8-4d7f-b40b-02a0a7119a80",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "42eb37cd-ed58-4387-8470-3a85e70c642a",
        "cursor": {
          "ref": "d844a293-ab4b-4bfe-abee-6777a2287535",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "04fea931-d33c-4e06-991b-adad4379638f"
        },
        "item": {
          "id": "42eb37cd-ed58-4387-8470-3a85e70c642a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7adf669d-21cc-4c1e-8daf-410ef1bcf376",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dbf1d610-61be-4451-8227-4d394a6a9f8f",
        "cursor": {
          "ref": "8a0cdeaf-26e3-496f-9cb6-dc3001ad7290",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fccb8d89-2f49-4609-ab88-190e9dadc30b"
        },
        "item": {
          "id": "dbf1d610-61be-4451-8227-4d394a6a9f8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d9e41e5f-9106-4cdb-8210-73ea236e039e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd7bbde-6532-488d-b8bc-96267245b314",
        "cursor": {
          "ref": "85718e9c-2c31-4df9-b3ea-ab43f0efe882",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9b2ce590-2ffa-411f-98bf-eff1aafb0b82"
        },
        "item": {
          "id": "efd7bbde-6532-488d-b8bc-96267245b314",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4f4b37a8-dded-4fca-89de-117908cafe4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb832aa-1154-4f99-b7c1-fdf6346a7509",
        "cursor": {
          "ref": "6b0e084d-2b0d-490e-bd81-144b493abcf1",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c9bf4758-2ba5-4c9c-a4b9-e8302c85f0fe"
        },
        "item": {
          "id": "ddb832aa-1154-4f99-b7c1-fdf6346a7509",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d69675b7-b228-4d9a-bdbb-bb64df1f2d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb843c2-df97-4f38-b790-17fa27a7cdce",
        "cursor": {
          "ref": "786152a1-2064-48ba-bb7c-0f9b8edcabe1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3f6b76b5-0f40-4af2-b25c-33ce5eaf8b3b"
        },
        "item": {
          "id": "8eb843c2-df97-4f38-b790-17fa27a7cdce",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "90ed6ef0-3d72-4e5c-ba82-7b847328cb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bed65f-cee6-456b-b9a9-0ccd68b2884f",
        "cursor": {
          "ref": "0b3d5405-9a47-4cf6-9fbe-a1b25aa86bc8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1bce8847-8096-4c05-a9ec-20c8850f4129"
        },
        "item": {
          "id": "01bed65f-cee6-456b-b9a9-0ccd68b2884f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "75fb8868-92f3-43be-8878-40961c1e046e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b43572-9d77-48fe-a1fd-9c2da907e729",
        "cursor": {
          "ref": "7683b520-b61e-464e-94d6-b8dfd78017fa",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4711ba8b-17d2-4aa9-afb5-6c8df6585f89"
        },
        "item": {
          "id": "d7b43572-9d77-48fe-a1fd-9c2da907e729",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bb1bec22-1cc8-4922-bd0a-4d679b13437e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3bc5be-f143-456c-9c62-4e8bf18cb51a",
        "cursor": {
          "ref": "e8822e2c-1efb-4ec1-a850-21b21471e64b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c9d4e0f4-cc2f-43e8-b7a8-2372792531dd"
        },
        "item": {
          "id": "ee3bc5be-f143-456c-9c62-4e8bf18cb51a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c6fd4bb8-1095-414c-90f6-87f2dcb3b56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90909e56-31f5-400b-909e-230e0a7b74ca",
        "cursor": {
          "ref": "69cc30fb-eadb-4c6d-8074-0d88b1021d9e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eb514508-3f38-49f0-9417-040545c47e32"
        },
        "item": {
          "id": "90909e56-31f5-400b-909e-230e0a7b74ca",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "02487011-32f6-454b-a6cc-08853318a625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0cc75f-b647-47fe-89c4-af9f34d7a640",
        "cursor": {
          "ref": "7cb454e2-84bb-4828-9257-d712e2247d40",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "921f1c3b-e207-4d87-a64d-b85707d5f13c"
        },
        "item": {
          "id": "8e0cc75f-b647-47fe-89c4-af9f34d7a640",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c214f055-0260-4dbc-b37e-1d8f81738218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a25b838-5062-48c6-938e-91d4cd520091",
        "cursor": {
          "ref": "7c19ed09-14b7-4c6f-80c2-75908d80eac9",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "14871a5a-f15d-45c1-a95c-7e970b539e6f"
        },
        "item": {
          "id": "0a25b838-5062-48c6-938e-91d4cd520091",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fc1c5e6b-558b-415b-8ac6-01e17c0613aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49aad0e8-073f-4733-8df0-25ba271bcbbf",
        "cursor": {
          "ref": "fcf17066-c2f2-4033-8351-42f698a79a58",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e19c70b8-a900-4c62-8c65-b2f1ef37dc12"
        },
        "item": {
          "id": "49aad0e8-073f-4733-8df0-25ba271bcbbf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5d3fb587-a370-4f98-9c6f-ecb52a9fd8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f702ce-8408-4b84-8dcc-368f42f09601",
        "cursor": {
          "ref": "02bbf6bf-9f6b-4502-a130-10170fd8f065",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "62c538ac-6c8a-4dd2-9eff-ed9792c359d0"
        },
        "item": {
          "id": "d5f702ce-8408-4b84-8dcc-368f42f09601",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ebb43df8-4055-40cb-8ed4-5ca985daf687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3037d64a-9373-4fc6-ba01-4d9177fbf6ca",
        "cursor": {
          "ref": "47eed6c4-f78a-4632-8fc6-bf0eb59c538b",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "94d99cc8-915b-4a5e-8c9f-f5cb9be25baf"
        },
        "item": {
          "id": "3037d64a-9373-4fc6-ba01-4d9177fbf6ca",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1e9094bc-ba1d-43f6-9c27-5bab3f3d5c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a68aee-554e-4663-94ee-5da137b5f45c",
        "cursor": {
          "ref": "dfde77dd-0eb6-4fb5-9ad1-ea70812c9a7e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "04a2b900-7dd1-4ed9-8cc3-dab93df4ffee"
        },
        "item": {
          "id": "b1a68aee-554e-4663-94ee-5da137b5f45c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e1ad3cea-71e2-4d2e-a4b8-0f942a34104a",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8f0b5a98-2a26-499e-bc98-eb328a09d06b",
        "cursor": {
          "ref": "5dcc1866-99ed-41e5-adc1-cba3dcf293f6",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b64e91cd-7fe5-4e4b-8b36-9488ee12cd1d"
        },
        "item": {
          "id": "8f0b5a98-2a26-499e-bc98-eb328a09d06b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1cf26a94-5d4e-4116-9c45-fdf2cbb31c01",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d93df0cc-49e8-443d-a0d7-6f78a0e85c52",
        "cursor": {
          "ref": "3033d310-5bf5-46d7-9c80-cfdf0ef42c88",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7a52f243-ae8e-47d2-b241-0c0f4a226954"
        },
        "item": {
          "id": "d93df0cc-49e8-443d-a0d7-6f78a0e85c52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5f0c5ee2-3c49-4500-b6fa-6a0bb8a0fea2",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1ffff7a6-ecf1-43ed-abbe-d3e5ef94b55c",
        "cursor": {
          "ref": "fa9d3887-fc16-4865-920e-02dda1bc4654",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2230d3a8-1f87-4f2a-a4d8-f76db514ac15"
        },
        "item": {
          "id": "1ffff7a6-ecf1-43ed-abbe-d3e5ef94b55c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2c717c65-f003-49c6-8f56-047e4db1d791",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2c6eac87-ea0c-4678-85e0-098bc61bfb26",
        "cursor": {
          "ref": "72d6413c-ba5c-4b93-8ea2-f4af688b1d57",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "db7d5f53-a23d-48b1-985a-d1306d19063f"
        },
        "item": {
          "id": "2c6eac87-ea0c-4678-85e0-098bc61bfb26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "229d9f0c-c98c-4372-a831-330805c30677",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fc9ccbe1-0cc6-4089-9092-cdb2e0d141c2",
        "cursor": {
          "ref": "840abbe2-6a6e-404c-a13e-db04480daa97",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "03718952-ab4e-4170-9744-35cefa04e1b2"
        },
        "item": {
          "id": "fc9ccbe1-0cc6-4089-9092-cdb2e0d141c2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5b509b05-b661-40ee-8473-d03c706d7cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e70cc2-3b85-4481-b48b-1073387e6675",
        "cursor": {
          "ref": "a4aef8dc-1799-47cf-9ba3-6f9715b1a57c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b52bcec7-c694-455a-82a6-cc13f7763e1a"
        },
        "item": {
          "id": "f7e70cc2-3b85-4481-b48b-1073387e6675",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7f380294-de72-404f-8fd3-2a644d830ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9421d7fc-5cab-4667-851a-5e1f305b913b",
        "cursor": {
          "ref": "4d031dc3-92c5-4059-b653-58d4e7038365",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bc4f0379-ce2a-46f6-860c-8cbc98f1bdeb"
        },
        "item": {
          "id": "9421d7fc-5cab-4667-851a-5e1f305b913b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d05ba1f4-65bc-4a58-a971-ce960f403fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e83268-b3f0-4ce5-8aa4-cad6966809c3",
        "cursor": {
          "ref": "a14bb8e9-771b-4955-8b2f-098b4fd10121",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bfd06f83-ccd6-402c-b618-d5ae3fb28295"
        },
        "item": {
          "id": "e7e83268-b3f0-4ce5-8aa4-cad6966809c3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e57cdfb9-0995-4e53-b29e-56f53902594a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861ae76f-09f4-436d-add8-444356ef750c",
        "cursor": {
          "ref": "70e24417-dde2-4bfc-86e2-e489fcf08b22",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "22b59091-3cb3-42c9-8fb2-ddb2f8355254"
        },
        "item": {
          "id": "861ae76f-09f4-436d-add8-444356ef750c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "47e1be1a-c125-4fea-944c-8f6bc1cd76b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a540d0-ba30-49a9-91a9-8d785470ea99",
        "cursor": {
          "ref": "fe94f811-99c4-4295-838f-76145af44603",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d8cd2719-3460-4f34-bf74-87d004af44bf"
        },
        "item": {
          "id": "35a540d0-ba30-49a9-91a9-8d785470ea99",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b197c7cc-da44-4150-9aea-d4c5d38da6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fd66dc-100a-4acf-92ec-25c46b768fe1",
        "cursor": {
          "ref": "db00b619-51cf-4d98-8feb-090b1c5d4baa",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "47835cc7-45c5-4c3f-8d2e-be04a3c0c1df"
        },
        "item": {
          "id": "58fd66dc-100a-4acf-92ec-25c46b768fe1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a84c1c24-c0db-4e4f-a88f-3b730c16f58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec70be0-0a6f-438b-9942-683f057d4abf",
        "cursor": {
          "ref": "e8cf0b61-1dae-4212-96dc-1020246ce132",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7156b26e-4b66-406d-8dab-c4e216ba8db6"
        },
        "item": {
          "id": "fec70be0-0a6f-438b-9942-683f057d4abf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e9e59886-998a-4758-937d-4563911afcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178f0764-75e0-4905-97ef-fb2f137241ee",
        "cursor": {
          "ref": "75f1fc71-2b1c-482e-8cc9-2afc9fdbf262",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ed223c12-d142-45f1-8caf-76054991414b"
        },
        "item": {
          "id": "178f0764-75e0-4905-97ef-fb2f137241ee",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8efc4d92-f736-4748-b29b-795c3a39f089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a4f66b-c9d9-43fb-9385-d397012bbad3",
        "cursor": {
          "ref": "c9f6a8af-0cd3-4d4b-8d52-1aff59e1dff4",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c5212ce5-6f3f-4e03-bca6-1a6ed2b65e2a"
        },
        "item": {
          "id": "b0a4f66b-c9d9-43fb-9385-d397012bbad3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "47c2cacd-f908-4076-9855-cc05046950a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f96e722-b223-409d-b8e7-5d0ddd106f7a",
        "cursor": {
          "ref": "73133ee3-b22b-4822-928e-f332d1308995",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e5947972-deca-4299-8806-c9bb3e0f2a34"
        },
        "item": {
          "id": "8f96e722-b223-409d-b8e7-5d0ddd106f7a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3bc0a453-d74d-4931-9262-5f7f6064225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d40d250-cfb7-42b5-abc1-12bcf8b923ee",
        "cursor": {
          "ref": "905bd1cd-f4a3-47a5-bf4f-31904c78aaec",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a3e2b6e1-0d20-410c-922c-f5f7012fef41"
        },
        "item": {
          "id": "2d40d250-cfb7-42b5-abc1-12bcf8b923ee",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "91e3feaf-06ed-4b3b-90d3-9ef1b4210eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72971780-279a-4f54-8557-4413368f3713",
        "cursor": {
          "ref": "2ebeb236-fecb-43a1-b44d-2fdd4a313a68",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c4c57dc1-1314-4762-87c8-bfb8ab64b689"
        },
        "item": {
          "id": "72971780-279a-4f54-8557-4413368f3713",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f638a8e9-571a-499a-8157-b0bd84bed0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f03840-a28f-4b85-9462-9620afacbdd3",
        "cursor": {
          "ref": "87618052-ccc8-4db3-b4c6-ce1b616c3782",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "403893e3-b683-4155-a3f1-bdf5969d5cdf"
        },
        "item": {
          "id": "10f03840-a28f-4b85-9462-9620afacbdd3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "65f82c40-dce3-4b88-a371-f193137caf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da855453-201c-41be-8d74-60245f2e67ae",
        "cursor": {
          "ref": "29f2f5a0-ce57-4f87-bc3c-47c154de7783",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d64e8cc8-6c3c-489b-b1cc-4167e0cf4c33"
        },
        "item": {
          "id": "da855453-201c-41be-8d74-60245f2e67ae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "03461f48-a70c-4143-abb7-c68e75d7551c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58abaf0-229f-4e8a-b509-85550bc34f64",
        "cursor": {
          "ref": "8e25c08e-3fdd-4cf6-903c-00c746e60078",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8df95414-6e15-43ac-808f-0a7c32b2a5e1"
        },
        "item": {
          "id": "e58abaf0-229f-4e8a-b509-85550bc34f64",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "61a9a722-b356-447f-8984-61fe2e7f744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab014f2-2961-40d5-bc89-42935b72ea09",
        "cursor": {
          "ref": "018e1c11-5e5a-4921-b030-7a8d7d30d7f3",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1d301495-e904-4b27-a7e6-bb61feb125d1"
        },
        "item": {
          "id": "7ab014f2-2961-40d5-bc89-42935b72ea09",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "127a9b1c-0356-4123-a1ae-27e4c2c5231a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606b0bfa-8f2b-4f38-9574-e83a5a298ad0",
        "cursor": {
          "ref": "b42e522d-b7c2-4d60-9264-de79fb69c5f6",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5efb70ed-56c3-4b7c-bf62-dfb6eba388ac"
        },
        "item": {
          "id": "606b0bfa-8f2b-4f38-9574-e83a5a298ad0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "00a8f23d-8c5a-4390-90ce-77dac2ae5184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac9d4e1-57cd-4e7e-83e8-b12e1b6d6448",
        "cursor": {
          "ref": "cfcadfce-374d-4220-bc4d-9db2dbd38da7",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7430862a-aaee-40bd-8aed-3028c78591c8"
        },
        "item": {
          "id": "8ac9d4e1-57cd-4e7e-83e8-b12e1b6d6448",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4628c564-e717-4cf1-8581-e614b8690769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b5f4b5-2c14-48ee-9255-2bf93baab182",
        "cursor": {
          "ref": "81e832df-0cb0-46b9-b120-67764ae19f97",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2c1b23cf-4465-49ad-b4ab-9504820f0d58"
        },
        "item": {
          "id": "e3b5f4b5-2c14-48ee-9255-2bf93baab182",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3a61c005-4465-445a-a69c-c4d60f4a63e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266866d5-246f-4676-bfb9-05f0316ab0e1",
        "cursor": {
          "ref": "2d52fc4f-9800-495c-8fd9-bfe79d08b3a0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5627087d-6312-486c-87be-669ab10a8368"
        },
        "item": {
          "id": "266866d5-246f-4676-bfb9-05f0316ab0e1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "baf5632b-5bb7-4ac1-97e2-169194e586f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626f52c7-0895-4dfa-b1d2-f1839cc52662",
        "cursor": {
          "ref": "f3fd8704-5e86-4e09-ba29-1ba3bf871079",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "92eeb318-24b4-44cb-b969-5a718a7bc425"
        },
        "item": {
          "id": "626f52c7-0895-4dfa-b1d2-f1839cc52662",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d1067c8b-c0e6-4c28-a13d-9b2d6e5dd22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cdec63-8f26-44cc-b0c8-f1a7767dbfe2",
        "cursor": {
          "ref": "90a9c178-c017-436a-8fee-e0e730ef0f87",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1875d507-d6dc-467a-b8cf-4f42ff1f1ed5"
        },
        "item": {
          "id": "56cdec63-8f26-44cc-b0c8-f1a7767dbfe2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "53cddfc7-de27-498f-98bb-461632a4c8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f4e853-4517-469b-91fa-4d9ae434818b",
        "cursor": {
          "ref": "ae006e7c-e9ee-4c19-b647-3e43572e3efd",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d2a19de9-d338-44c7-9a7c-ed4f0f5cef28"
        },
        "item": {
          "id": "50f4e853-4517-469b-91fa-4d9ae434818b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6db12e90-ccc1-472c-971d-6e2728edda45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439e727f-99c9-472e-b250-d2a45dc807ed",
        "cursor": {
          "ref": "fb633a91-d6a6-4088-83dc-4c52e64e6ee0",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e3c13111-da0a-49cc-8e08-ce2c32432268"
        },
        "item": {
          "id": "439e727f-99c9-472e-b250-d2a45dc807ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c832ee71-323d-432c-823a-def71210465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654b1729-2af4-41f0-8aaf-ed8ac6b2f054",
        "cursor": {
          "ref": "db9b3a46-05dc-403a-9aea-7690e756d8c4",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9fafdf23-081b-4240-9e13-988ecf6d5575"
        },
        "item": {
          "id": "654b1729-2af4-41f0-8aaf-ed8ac6b2f054",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4794d304-430d-4cb1-bdbb-5dac07e5d941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893a2a32-8284-4363-9589-18ebb7a55d9d",
        "cursor": {
          "ref": "6b51adda-b964-4985-82c8-79e542e7b310",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c0b0d36f-b15f-4749-9637-303a080c770f"
        },
        "item": {
          "id": "893a2a32-8284-4363-9589-18ebb7a55d9d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3237c309-cd01-4440-95b8-13388cbf9134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2dbd5a-7172-4d93-8145-d32e9e1a6fd9",
        "cursor": {
          "ref": "ce12eba2-28ab-4912-9e52-90e73faf8b5e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ef9312b6-d459-4070-93bb-ff6a6e82f916"
        },
        "item": {
          "id": "aa2dbd5a-7172-4d93-8145-d32e9e1a6fd9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec42df91-6fcd-4ccb-a1f4-6286a399f854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f480ae86-3449-4312-943a-16929c2afd33",
        "cursor": {
          "ref": "219cadcc-03eb-4d34-a7d3-9fe4aec371d4",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bcb4c8a0-ad8a-49dd-ae98-a3bb94c36290"
        },
        "item": {
          "id": "f480ae86-3449-4312-943a-16929c2afd33",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9eab23c7-d4c1-424a-a0c8-fa4c3cba56d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e891c64-083d-4d43-97da-d40dac05caf3",
        "cursor": {
          "ref": "ecd9c0e9-48a9-4e62-beda-8d99ab65b4cf",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7deb8ca3-dcb0-40a8-a554-dcbbe2a9014d"
        },
        "item": {
          "id": "8e891c64-083d-4d43-97da-d40dac05caf3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9d9d2407-97d5-4762-9149-dba3711b0144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20be30e0-6ecb-4978-9218-97cd176f84d9",
        "cursor": {
          "ref": "4af5c116-72f6-4519-953a-67a8b4f7d24f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "637d220e-e858-4845-b4f9-4dcb7611a104"
        },
        "item": {
          "id": "20be30e0-6ecb-4978-9218-97cd176f84d9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "83f73666-0f2c-484e-8d78-18a2b82256aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727c459f-8e64-4ebc-a206-5a1f3c58d5c4",
        "cursor": {
          "ref": "8ea84793-db5f-4e51-9b14-9cd8b8c99313",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4e5cc0d7-0c8e-4406-8b40-ac1287db0b5c"
        },
        "item": {
          "id": "727c459f-8e64-4ebc-a206-5a1f3c58d5c4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "928bd6f9-aabd-4efc-b7ef-f0b5e19c8f9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f029d956-11db-40e0-82fb-f815a1469694",
        "cursor": {
          "ref": "9daf6c64-e290-4a25-82e9-88061876f9c6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eacc9070-ab54-4c15-a242-f254fef214b2"
        },
        "item": {
          "id": "f029d956-11db-40e0-82fb-f815a1469694",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c09b492d-9204-4835-a2d0-82d8445546e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b98f7925-bebc-477a-bbd5-f96c6b72cf19",
        "cursor": {
          "ref": "7310d267-34b7-412f-864c-bf2ae1b37ecb",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "26933f4f-7bd5-40fa-b9fd-3a79d4ee68dc"
        },
        "item": {
          "id": "b98f7925-bebc-477a-bbd5-f96c6b72cf19",
          "name": "credentials_issue"
        },
        "response": {
          "id": "311e3c98-7edf-4443-9b99-e8a37b3003a1",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d761cb6-c557-42e6-a29a-e516f01b7254",
        "cursor": {
          "ref": "fbf0b3f5-9db5-4a68-a75b-b2f544201317",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "23120544-fce0-4770-9668-3851721093ad"
        },
        "item": {
          "id": "2d761cb6-c557-42e6-a29a-e516f01b7254",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "65f6d216-a70f-4546-ad48-f242a1c1b8b2",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e387a5-9cdb-4307-a5ce-457dc9619a0c",
        "cursor": {
          "ref": "b80d45d2-8e19-433a-bb7c-35d3abc85d8f",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "16a795ae-0d71-42f2-b725-2dd492519e17"
        },
        "item": {
          "id": "94e387a5-9cdb-4307-a5ce-457dc9619a0c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6586b4a5-3ff0-461e-82a9-9cb26dcec4fd",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66351ff8-038a-4ad0-a2a6-722b6aca6777",
        "cursor": {
          "ref": "15643858-a2f7-44fc-a4e5-563b8c5f7069",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4de4d00c-bd45-4f25-be39-bcaf7351f585"
        },
        "item": {
          "id": "66351ff8-038a-4ad0-a2a6-722b6aca6777",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "31eafc32-0d2c-462e-b6fd-e7478a69e93d",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d00181-abd6-4234-8ac2-9b521f830b59",
        "cursor": {
          "ref": "244d5a77-d6b7-4efd-892f-8403666af948",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f0855bbd-9909-46f1-be4c-5f8b19d971cd"
        },
        "item": {
          "id": "a1d00181-abd6-4234-8ac2-9b521f830b59",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9ce13b42-1de8-4ef8-b5ce-2768c7334a7e",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-27T00:33:51.482Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-27T00:33:51.482Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b5bb5a84-1980-4041-9d3d-64d60d82847a",
        "cursor": {
          "ref": "d90598ec-7441-4fe6-a2a7-f700fa534e89",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "82411b74-79de-445a-a25d-c24bfd9784f7"
        },
        "item": {
          "id": "b5bb5a84-1980-4041-9d3d-64d60d82847a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6df2102a-de31-49b9-9e48-eb1b5982c0a1",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce94941-4d89-4ec0-be84-2645726c8966",
        "cursor": {
          "ref": "a5eb48f5-93f5-4800-a95b-64dbd4fb9e84",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1ffb1c0b-650d-4bb0-b3c7-96258234ce66"
        },
        "item": {
          "id": "fce94941-4d89-4ec0-be84-2645726c8966",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3824a14b-cd79-44c8-ad47-a8457ea928f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed10d590-0d62-4fad-894a-2a68309a4cce",
        "cursor": {
          "ref": "6bcce827-a3a5-468d-81bc-652c8728e36a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "888de52d-0d28-48f6-bc4d-ba78b8abab52"
        },
        "item": {
          "id": "ed10d590-0d62-4fad-894a-2a68309a4cce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "885c2ad1-60e9-4e0e-a247-c69ac881aeef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d041486-7d8e-4b50-a3c9-b3f52ea425da",
        "cursor": {
          "ref": "323d0891-3729-410d-bb35-0380941a2087",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8da64d11-bf58-4e76-ae58-446ce7b14079"
        },
        "item": {
          "id": "4d041486-7d8e-4b50-a3c9-b3f52ea425da",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "135d0a45-ae38-4119-8133-9deb7ba7abf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb12eb97-5cc1-40b0-b614-da057e0d1a14",
        "cursor": {
          "ref": "4614cdd9-2ba3-439c-a6a1-23f5f97e1127",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4dc1b241-f3a8-40b5-b1b1-782fc751faa5"
        },
        "item": {
          "id": "eb12eb97-5cc1-40b0-b614-da057e0d1a14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f4df38f8-894d-4c1b-bb57-e59953aa72de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfb0c58-4438-41a0-9979-79ccc56650e3",
        "cursor": {
          "ref": "064bebfc-284b-4a7a-a9f9-ee908adfff09",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dd768ed4-3306-42c5-b274-580b4d4c54ce"
        },
        "item": {
          "id": "9bfb0c58-4438-41a0-9979-79ccc56650e3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9c508c7e-6fc6-423b-8da3-b84dfed92ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4071d82-2467-4a39-b6ec-06d221bb1114",
        "cursor": {
          "ref": "876b2e8b-1cd2-4278-b282-dbf825289695",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5574a9f7-1a2a-419b-b75c-abf068dbe3f9"
        },
        "item": {
          "id": "c4071d82-2467-4a39-b6ec-06d221bb1114",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e719fd6e-eccc-4786-8af1-5b3d868a0d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d733fdb-8258-427a-82b6-b60a3a5374e5",
        "cursor": {
          "ref": "db5fb10f-3056-47e3-92e2-5005be9f4ddc",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d8f58670-ff46-4fed-8602-9d341f68f0a2"
        },
        "item": {
          "id": "3d733fdb-8258-427a-82b6-b60a3a5374e5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "32e3ad0a-27be-4e97-82e5-8fd1fc297ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dad4870-52aa-4703-82e3-01fcffb9e715",
        "cursor": {
          "ref": "6c327ce0-f73e-465a-bf62-e37d3794638e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "287750a5-4f4d-46e7-91ea-f2f572c40694"
        },
        "item": {
          "id": "4dad4870-52aa-4703-82e3-01fcffb9e715",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c153e0b-066d-4cc5-9d2b-97267b12ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3b320d-7c92-47f7-83cc-5301b5c38b50",
        "cursor": {
          "ref": "19f84196-97a3-4d36-824d-742d488e1904",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "38f2e2ca-fdde-433a-828f-a3b9392cf1b9"
        },
        "item": {
          "id": "4d3b320d-7c92-47f7-83cc-5301b5c38b50",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b354b23e-3b6a-415d-b339-e16cdf16808b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eff2523-1692-4b9e-931f-b7291d9b7dd3",
        "cursor": {
          "ref": "2f772955-362f-473e-82b2-2d0cd6c62599",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8339c68b-8457-4d77-b9f2-5d8662ca1fe9"
        },
        "item": {
          "id": "8eff2523-1692-4b9e-931f-b7291d9b7dd3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2b9cdd08-e551-4ad4-a6c5-53c178c5764a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fffb823-b4d3-4e55-84fe-d4f8c71f5191",
        "cursor": {
          "ref": "245e9d36-3f97-4b13-a4f6-8e651cb0e8ce",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "98c4acba-1e75-41c3-aa3f-e8e7a89ec70d"
        },
        "item": {
          "id": "8fffb823-b4d3-4e55-84fe-d4f8c71f5191",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0a1672aa-976b-4d83-99de-b8bb81b92b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607215f4-7fb4-406d-940c-c9431f632ebf",
        "cursor": {
          "ref": "9d98c16e-f7c3-469f-8166-bce44e94d5d8",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0b37b816-ce58-43c2-a5dd-653f74eaa85a"
        },
        "item": {
          "id": "607215f4-7fb4-406d-940c-c9431f632ebf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "12b8a4a4-46ac-421e-9c96-a7a5b6250426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf3d5e6-15d5-4031-b0e2-47e3d4e142b1",
        "cursor": {
          "ref": "51672cec-4bdc-44ba-ab5b-e3cd890d95a5",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c99d7c1f-1e11-45b6-a3b2-b25cd992ebfe"
        },
        "item": {
          "id": "ccf3d5e6-15d5-4031-b0e2-47e3d4e142b1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6f0c41f5-ac45-4cf5-91bd-342e7a6d2536",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "847c30f8-27f7-4a9e-a21c-c502390176bf",
        "cursor": {
          "ref": "bb4b163e-d0b5-487a-b2fd-2ebf3db24fdd",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1b152503-077a-4b50-9195-e18cf3c14fb8"
        },
        "item": {
          "id": "847c30f8-27f7-4a9e-a21c-c502390176bf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4ce9beb3-908c-48d1-8e77-082b97be3379",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9c5fb0f7-f758-483f-b4f4-1ca475915947",
        "cursor": {
          "ref": "67571c9c-258b-4932-87c1-296fd112e9c3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e4b2e3d1-faf0-465f-a0a7-e3f5d51e3f3c"
        },
        "item": {
          "id": "9c5fb0f7-f758-483f-b4f4-1ca475915947",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c3939967-da54-4693-b890-c3dcc689ba9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc6a00a-afd7-40cf-b6a8-6a1a5845636d",
        "cursor": {
          "ref": "af5bbc99-92e5-448b-834b-8f90ac66734a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "87f0ee67-7a96-4f4a-8161-3f7559eee968"
        },
        "item": {
          "id": "4dc6a00a-afd7-40cf-b6a8-6a1a5845636d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba406e21-b620-427a-8aab-e4bd526da723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cfa1aa-f712-482a-bbaa-837447a69d87",
        "cursor": {
          "ref": "88e82eaf-285f-42e9-8a74-d4be8fcd1ce3",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a928c610-06bc-490b-a388-5845a002b84c"
        },
        "item": {
          "id": "33cfa1aa-f712-482a-bbaa-837447a69d87",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "45ccfb97-dc71-46a0-baa3-0d013ffbeaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616c41f2-4fe3-4833-9a49-226a5a8e3d29",
        "cursor": {
          "ref": "d8ff86e5-8636-4ca0-a747-758180b9f2be",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8ef5610e-d50e-49db-8f4f-4980c41c0770"
        },
        "item": {
          "id": "616c41f2-4fe3-4833-9a49-226a5a8e3d29",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9420b7a2-0438-47dc-b38f-291719dfe797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf4aa82-a5ec-476d-8a45-c6f237aa780b",
        "cursor": {
          "ref": "01cea708-89ac-4b9d-b8e5-c5e7842b6587",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a2cb2363-3de2-446b-b694-d377489883ca"
        },
        "item": {
          "id": "3bf4aa82-a5ec-476d-8a45-c6f237aa780b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "31d6a702-c67a-4053-97fc-6c5169ac20ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0ad7ca-a866-45b4-b397-8dd512d9d155",
        "cursor": {
          "ref": "36c157ce-4703-493c-b66e-eaa1de34d399",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d01c9082-edf8-497d-854a-5cc8bda814f7"
        },
        "item": {
          "id": "fc0ad7ca-a866-45b4-b397-8dd512d9d155",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "14c89715-d3d0-4f06-8272-e191a15d868c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcdcfdc-4c71-4a80-9d26-649f8f72fe22",
        "cursor": {
          "ref": "2cae5690-d2f7-4afb-93af-81487ed4a34a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "80adebf9-300c-4228-aa36-1872b70bd7ff"
        },
        "item": {
          "id": "edcdcfdc-4c71-4a80-9d26-649f8f72fe22",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c402aaab-56c2-453e-b766-b9462be70106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76996c4-5a78-4288-a7fa-0ba0d497ff97",
        "cursor": {
          "ref": "65d74d8a-9e81-45af-ab02-cd8e4fb03b14",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "542d0eab-d9ed-4784-b406-375c8289b8a8"
        },
        "item": {
          "id": "f76996c4-5a78-4288-a7fa-0ba0d497ff97",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4fc9bce8-cc65-4574-b31a-c9dacf8c8fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018d459d-b993-48ec-8b42-f182a09ac1c7",
        "cursor": {
          "ref": "76e80d65-1a7b-406a-82a6-9a8c7326ac39",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c8471ecd-5c9f-4162-91e5-9714ddda5095"
        },
        "item": {
          "id": "018d459d-b993-48ec-8b42-f182a09ac1c7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "092a251e-d007-4cad-bd50-94f14ada98b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7846a859-436f-4557-b844-c7de66430f99",
        "cursor": {
          "ref": "766741b3-367c-43f9-962a-d3fc2acf738e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea314ab7-07dd-4774-a421-fd85eaa032a7"
        },
        "item": {
          "id": "7846a859-436f-4557-b844-c7de66430f99",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e34f13ff-bb16-4108-b971-0ece8790ddd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72fb6ca-188a-4293-93e3-bd1275f01554",
        "cursor": {
          "ref": "5884360f-e188-4bf4-9772-607fcf437aff",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cc07f477-0168-4c09-822f-1162eed914f6"
        },
        "item": {
          "id": "f72fb6ca-188a-4293-93e3-bd1275f01554",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f98bc863-fd2e-4cb9-8004-459ad1d33ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e6d5d7-3936-4d53-81dc-b96bcdc17e20",
        "cursor": {
          "ref": "40c8b203-e184-4fbd-b478-da1a4f37e21d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "31ad1c6a-c245-4110-9d05-f1e5fadd42f7"
        },
        "item": {
          "id": "46e6d5d7-3936-4d53-81dc-b96bcdc17e20",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "54c3de09-6e53-4774-97b8-760855fe8247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a2c5b9-c78f-4528-b306-ee9ba564694c",
        "cursor": {
          "ref": "909660f4-a718-4004-9323-151f50f0e14f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3d6d8f90-51ea-4e37-97c4-f5b7f2c29faf"
        },
        "item": {
          "id": "59a2c5b9-c78f-4528-b306-ee9ba564694c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "901e3850-9764-4dd5-aa60-fa858a478621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cbe0ec-c806-40a1-b8a0-9e923e7cbb75",
        "cursor": {
          "ref": "227977f1-3fd2-4dbe-974c-4afeb2083ce3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a11a8a54-4e35-4b1e-8133-23192d314823"
        },
        "item": {
          "id": "49cbe0ec-c806-40a1-b8a0-9e923e7cbb75",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b7e38d5a-df2a-4ed5-864f-5f398d90b53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30dc4a5-1ed0-428d-a9a3-9f4552625ea8",
        "cursor": {
          "ref": "5c174025-27ff-4347-9c0e-a8267d8cd467",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "50555924-86ef-4e0b-ac29-3bb6a4d1be3e"
        },
        "item": {
          "id": "d30dc4a5-1ed0-428d-a9a3-9f4552625ea8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3a39251b-a3ff-42fd-8184-3df0332e5fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b5d4ab-f131-4005-9302-a5032a95e257",
        "cursor": {
          "ref": "51d41c79-bb7b-47e3-9ade-fcd0c32ae5ef",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "77a5aa34-1324-4453-a72c-359c8465584f"
        },
        "item": {
          "id": "19b5d4ab-f131-4005-9302-a5032a95e257",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f845b7f3-48f5-4b58-82e5-c03846e7699b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442bc67f-4acb-4d24-a455-144854c59994",
        "cursor": {
          "ref": "55c4b20e-2afd-4e89-80bf-c98ddbd51587",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3660dae3-a63e-453a-912d-8df4561f1946"
        },
        "item": {
          "id": "442bc67f-4acb-4d24-a455-144854c59994",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c28c3c4b-3720-447b-80ca-49cc2c3879a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e928a3dd-14b0-4b33-9d89-92650648ba63",
        "cursor": {
          "ref": "9241519d-62ad-4494-a60f-1463d61faf98",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "18e7f9ab-b5c7-4d2e-88e8-f0778f65f2e4"
        },
        "item": {
          "id": "e928a3dd-14b0-4b33-9d89-92650648ba63",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "60efca0e-1af6-42e5-8822-3ca6677aae17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "da9438a0-a827-4422-96ba-b8c0f56bfabe",
        "cursor": {
          "ref": "f69c9aa9-859f-4075-9b5b-349d26ed1f4c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2e896fb0-90c8-4ec9-b23b-37f9ca38c62a"
        },
        "item": {
          "id": "da9438a0-a827-4422-96ba-b8c0f56bfabe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1faf4381-ab04-42c9-a379-fc607c495cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81e8616-072b-4c1f-a0ea-23942e2e703b",
        "cursor": {
          "ref": "27e74ce4-3a03-4b09-a62f-4f5206222b29",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "456af945-ea56-4ca0-b666-3d902a00d5b9"
        },
        "item": {
          "id": "e81e8616-072b-4c1f-a0ea-23942e2e703b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ba9b06f-3562-4052-97b9-b3488b0e6900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b29880-9896-4927-9991-5dd84220bc52",
        "cursor": {
          "ref": "04ce22ab-05ed-4c90-a374-9550635d0306",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1c935c99-799a-4d93-be77-21d435c49c11"
        },
        "item": {
          "id": "d2b29880-9896-4927-9991-5dd84220bc52",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3332c696-bb0e-485e-9bd7-76acd9fd0dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c121acc-2714-4e9b-8163-ffe97df5b7ba",
        "cursor": {
          "ref": "43e631be-4f56-4b5e-a0e1-f0f1fe8e13e1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "da62d6f6-034f-41a9-a7bf-cff9838a0a39"
        },
        "item": {
          "id": "2c121acc-2714-4e9b-8163-ffe97df5b7ba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e6d41963-cdd4-4cb9-a712-61c8700f8055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f7f9e2-eb03-4f52-b3fb-aedffff72004",
        "cursor": {
          "ref": "37d56160-72f4-4d74-8c63-1e61bdf82636",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3d72ec59-6db9-4e08-a3f4-093a56d363f4"
        },
        "item": {
          "id": "b7f7f9e2-eb03-4f52-b3fb-aedffff72004",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51e2e99f-0848-4eeb-90ed-4c989277fd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc80ebbe-8dee-4f91-a1a6-9aeee147c8f9",
        "cursor": {
          "ref": "d0967713-edde-44bf-ba1b-69c6d969757f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "99b6b6a0-2959-450d-ac00-7ecaf731862f"
        },
        "item": {
          "id": "cc80ebbe-8dee-4f91-a1a6-9aeee147c8f9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5cdf6eca-a4e6-4871-a97d-5631bcef99de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871ca0c1-a635-446b-af71-102bea83b011",
        "cursor": {
          "ref": "1473c84f-cda7-4ce3-aecf-6cf4b500e378",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e5de660e-8736-4ffd-bafa-c2c54e31e3b7"
        },
        "item": {
          "id": "871ca0c1-a635-446b-af71-102bea83b011",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1cc1f9ee-62eb-4ab4-a5e7-f0a55d4de048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ee240e-6baf-4b8e-93e8-d30dee7f9a8b",
        "cursor": {
          "ref": "ca569cbf-9648-495f-8e67-2307543e8c2f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "04144074-2819-4655-8ea6-3ad8e477b0f0"
        },
        "item": {
          "id": "35ee240e-6baf-4b8e-93e8-d30dee7f9a8b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35d16a5b-21c9-4e84-8c01-3ca10233dd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2295df-26ea-4b70-b1de-e46f364216ee",
        "cursor": {
          "ref": "e7fdfbed-c986-4db3-bd42-1ec90f8e5c58",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "93131c3d-878e-4efb-9a67-4382c2b69165"
        },
        "item": {
          "id": "fd2295df-26ea-4b70-b1de-e46f364216ee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6036ecdd-980c-45a5-8c4d-6c4a4f25732f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d77610-428c-403d-9b37-d93f9e9cbc09",
        "cursor": {
          "ref": "73e6f087-dba5-40cb-92b6-9ff82196aeeb",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "079251ce-cb4b-4570-b392-ab8feaeea5fc"
        },
        "item": {
          "id": "73d77610-428c-403d-9b37-d93f9e9cbc09",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e3c487e8-01c6-4a86-ac56-8d01d785665c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b747da0c-8ad5-40b0-a574-8eae02a23ff0",
        "cursor": {
          "ref": "54796c51-1f7b-4fca-8144-dd079c878dad",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ff7c5a92-f158-4171-a3d0-70d106936d95"
        },
        "item": {
          "id": "b747da0c-8ad5-40b0-a574-8eae02a23ff0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "86c163d5-02c9-4bb0-8674-dc1bea2abf02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62926b54-2827-4864-a5a2-720925e901e2",
        "cursor": {
          "ref": "8eb6ce45-f138-4a87-a042-77cdb20bfca8",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5fa2971-6dfd-43a3-b493-c9049fc9589c"
        },
        "item": {
          "id": "62926b54-2827-4864-a5a2-720925e901e2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5f316979-3645-4fc3-a29b-a09b62e2115d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6bff5d-017b-45c9-aa69-203cf86fcc3f",
        "cursor": {
          "ref": "c8cb67a8-d8e5-4a0b-83e8-142e6a8032e2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fea44d46-eb95-4923-81b6-9ee8d29f2f82"
        },
        "item": {
          "id": "ab6bff5d-017b-45c9-aa69-203cf86fcc3f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "67665829-f46c-4675-83bb-1878dedbdbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a58c96-a0bc-4995-8197-bd2163efd11a",
        "cursor": {
          "ref": "7296ba12-d7b0-4981-acd3-1f39670ae340",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "590c418d-0b33-42da-af4c-b1deb37d3a12"
        },
        "item": {
          "id": "36a58c96-a0bc-4995-8197-bd2163efd11a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "efa22adb-ca9e-486e-b106-fd839003f5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d93f4a6-6024-49be-9eb0-dd57b704d012",
        "cursor": {
          "ref": "025dbad0-0b57-4beb-aa63-3e831b948be5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "84d0e45b-643c-4730-acf3-fc0957e23b6b"
        },
        "item": {
          "id": "1d93f4a6-6024-49be-9eb0-dd57b704d012",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4f8c52b5-b7e9-41fc-abff-770c770b43ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e8ed0d81-c776-4cce-be6f-578520f0b217",
        "cursor": {
          "ref": "d2b9304a-7ec0-48e4-b715-fa162252c337",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82c43823-fd0d-40d7-8797-17ba39829c80"
        },
        "item": {
          "id": "e8ed0d81-c776-4cce-be6f-578520f0b217",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fabe3825-93a4-4795-9ba7-528beeb58a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaca30c7-0bcd-4a15-b861-b6101abcb63e",
        "cursor": {
          "ref": "30347e66-8566-41d3-b451-07ed36b7f2cc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a54e1273-2432-49b6-8ef3-eb5770df3eb4"
        },
        "item": {
          "id": "eaca30c7-0bcd-4a15-b861-b6101abcb63e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2bd8603f-0ecd-4d96-b52b-17fd70706046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0073ef-65b5-4f4e-9ca4-0fa3b978a15c",
        "cursor": {
          "ref": "ef739f5c-9335-4c0f-9ea5-36d2dfe6b02a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f63dfa18-1c89-4f34-ab9e-bc4d307ca7e1"
        },
        "item": {
          "id": "4e0073ef-65b5-4f4e-9ca4-0fa3b978a15c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2f1199fe-a60c-4607-a298-c4008be23537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab9e88a-0232-4715-ac12-3a33cb208480",
        "cursor": {
          "ref": "73049961-b10b-4e25-9f4d-94cb6848cec2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6256ecf9-8e9a-4e04-ad32-9d104996e3f3"
        },
        "item": {
          "id": "fab9e88a-0232-4715-ac12-3a33cb208480",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "14057075-5d66-41fd-80d8-318294b656fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8740b94a-fe2f-4fb5-b356-b4e446b4b5d6",
        "cursor": {
          "ref": "c270aa2d-1246-4d3c-a412-24c57a409a8f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "36d578fa-516a-48f5-a7fa-b8ae352e04ea"
        },
        "item": {
          "id": "8740b94a-fe2f-4fb5-b356-b4e446b4b5d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "184c197e-4652-461d-bd0b-8a4f8479e796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45be67b1-a1ed-445d-87ad-c263918a982e",
        "cursor": {
          "ref": "36ee4512-ca2d-48bf-a29d-23a2aede12a7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "16a559db-cd18-446b-bb13-1c57e2861c05"
        },
        "item": {
          "id": "45be67b1-a1ed-445d-87ad-c263918a982e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8c940a19-9538-4064-acb2-4808a486e7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b4e6ab-2e3f-4fc8-b430-773138924e61",
        "cursor": {
          "ref": "1bbff9d9-459f-45e7-ad3e-26cfae172c16",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "82f88ca9-a11c-4612-aac9-2eb6bdb73c61"
        },
        "item": {
          "id": "95b4e6ab-2e3f-4fc8-b430-773138924e61",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cece297f-7f88-420e-a65f-c663e306478a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd84d89-f67c-4aac-a35d-bdb0d014b7c2",
        "cursor": {
          "ref": "ab0bc3c7-2c51-4daa-af44-d06e84e66b2d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e79561f1-c224-4a92-92e3-42a9685738c0"
        },
        "item": {
          "id": "acd84d89-f67c-4aac-a35d-bdb0d014b7c2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a6a055ef-297a-4193-95dc-a2d09ddfd8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0f1cc4-7fa7-4c27-b2a3-a79ad85c2728",
        "cursor": {
          "ref": "ea13b0e5-8fa7-4fe7-8c9a-59736051d3d3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "986cd1d0-ef55-4d14-bc05-960cb729039c"
        },
        "item": {
          "id": "3e0f1cc4-7fa7-4c27-b2a3-a79ad85c2728",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1af4ff50-8e99-42e5-8692-89089363e8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fb63c1-423c-400d-89ad-5871c7537691",
        "cursor": {
          "ref": "d3bfbae0-10ef-4607-a0c7-a77ff55e83f7",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dfb99008-300b-4a50-aa1e-164c8a5de06e"
        },
        "item": {
          "id": "e1fb63c1-423c-400d-89ad-5871c7537691",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c5d18cb9-abc8-472e-9733-3a6e126edf50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b26710-8572-48bc-bdb9-474ebcda65a9",
        "cursor": {
          "ref": "0b8a98dd-d256-4f66-9685-32e671b512e1",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ccf30f33-8bc8-43ed-9b19-2f1259ed0278"
        },
        "item": {
          "id": "63b26710-8572-48bc-bdb9-474ebcda65a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "787bb747-326d-48a0-a052-69a6cb4ec246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73b7f8f-622c-4fcd-bca1-9b8f0d2e3618",
        "cursor": {
          "ref": "4971c922-3d5d-4233-94c0-468f2fecc621",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ef55e5b0-98ca-47a0-9341-c6341bf22f42"
        },
        "item": {
          "id": "b73b7f8f-622c-4fcd-bca1-9b8f0d2e3618",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b33eb51d-94db-4e59-aa7a-eca6c8455b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613f9354-2818-4861-b7ab-646f45c6b310",
        "cursor": {
          "ref": "a77c0b9e-2088-46f0-8a0b-1cc48e6741b3",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a6950b69-5bd9-49d3-bff7-438f4226fc79"
        },
        "item": {
          "id": "613f9354-2818-4861-b7ab-646f45c6b310",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "75d48c81-6317-45e1-b24e-cdf89112d70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42c26f0-4dde-45d4-899c-1121a94e268c",
        "cursor": {
          "ref": "0d5a7045-1067-45fa-8d5b-ed0a2faa37fc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d6b4977d-c832-456e-82d2-a0b14239c2d7"
        },
        "item": {
          "id": "b42c26f0-4dde-45d4-899c-1121a94e268c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0f62d072-cb8e-4608-93ba-54bd2e3eb195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac85790-a683-448e-9c5d-0f84018db70f",
        "cursor": {
          "ref": "47553e27-2b39-4a0f-b501-bfb95a8b38d7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7c6a4b41-fd69-41cc-a1e6-52fc32071294"
        },
        "item": {
          "id": "5ac85790-a683-448e-9c5d-0f84018db70f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6f2740eb-1e08-4218-92c5-cf3628b2252d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3ce824-cf62-4f7e-81b9-fe9889402817",
        "cursor": {
          "ref": "14b2080b-aae2-48ed-83ec-0f9a164c2346",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "880b7bcb-e342-4bf4-a2bc-54625623ceeb"
        },
        "item": {
          "id": "bd3ce824-cf62-4f7e-81b9-fe9889402817",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b64f12b0-46ad-420f-ad65-f9f20600b6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe33af4-60d8-4ffd-ba09-11258fd1182d",
        "cursor": {
          "ref": "bbc70b93-97bf-487e-843f-7c8ced8c6b65",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9c0f88ed-e220-4ac0-bdc1-756274ca0fb7"
        },
        "item": {
          "id": "bbe33af4-60d8-4ffd-ba09-11258fd1182d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "abb9712c-546b-4e67-9803-3c8b7f73ffb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4e44bb-c85f-494a-8289-ebd3fa80eecc",
        "cursor": {
          "ref": "f12d2f5f-b612-498a-ba20-d60739a84ba1",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c2df89f6-3771-4da1-8284-49e814358c3a"
        },
        "item": {
          "id": "ea4e44bb-c85f-494a-8289-ebd3fa80eecc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f387bcb4-055e-4c96-a6ea-1e76fbf9a38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ba2ab1-d375-4dd0-bc0a-a18900221b1b",
        "cursor": {
          "ref": "c1011fb3-a2da-4484-9630-bcd71efdb967",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5bb7013f-f88b-4132-9e3d-0fe56f4df6de"
        },
        "item": {
          "id": "e6ba2ab1-d375-4dd0-bc0a-a18900221b1b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "dddabe51-3087-486e-9e19-83f6c672faa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35e7d06-d861-4656-a5d4-fac4ae692f79",
        "cursor": {
          "ref": "b835b1b0-0fa5-45b9-8aa7-4b5493a9f55d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f127dabf-2732-46a3-a70b-2713c2ebb948"
        },
        "item": {
          "id": "b35e7d06-d861-4656-a5d4-fac4ae692f79",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ea66b274-7629-459e-86c2-aa52ed4e9388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8036e0-1dbe-48cc-9b71-40b15b68bd89",
        "cursor": {
          "ref": "99eb8f41-82da-4108-b829-7bf750183b3f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fc3475e9-70f0-49ad-99dc-9b339408e70f"
        },
        "item": {
          "id": "8f8036e0-1dbe-48cc-9b71-40b15b68bd89",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ee832a2d-ace8-4d2c-a049-65a3390af154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfcbf4e-3421-4529-a29c-c4d26a91c39e",
        "cursor": {
          "ref": "faee4c52-e0c9-467e-995a-3b94641bee2e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "25df524f-10e5-4500-ae1d-1bc512f27745"
        },
        "item": {
          "id": "4dfcbf4e-3421-4529-a29c-c4d26a91c39e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f66bff73-fb49-403e-a06a-214d2ca665ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa78c48-a90a-438f-ae83-5cd6eb41ef6a",
        "cursor": {
          "ref": "a9017c60-ade6-449b-b0ca-ac2eea38bf0d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b7f278c1-64d6-47ea-8755-a4b83e3ec7cc"
        },
        "item": {
          "id": "8fa78c48-a90a-438f-ae83-5cd6eb41ef6a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2bab8271-3928-45a4-8df9-4837c8b09c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cde9552-b370-4fcd-ad70-f045e06059fb",
        "cursor": {
          "ref": "21a74e5a-8292-4592-a9fd-0a7dad05954c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6339d4cf-d580-4df1-9202-8bbf9bed0ea4"
        },
        "item": {
          "id": "9cde9552-b370-4fcd-ad70-f045e06059fb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4928a984-74ef-4b06-891b-2fcb240eed48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1260f1-84a7-4018-a07b-179785980d1f",
        "cursor": {
          "ref": "7b96bf63-2a94-4214-b6bc-de9bd5264f24",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c0481cab-cde3-4e31-b3a3-acbf43c4f2e8"
        },
        "item": {
          "id": "0e1260f1-84a7-4018-a07b-179785980d1f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8ae27eed-51cc-48c4-93c1-a341f200d4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7284f3b-ccd6-4ce1-a1fa-f3a621adc1da",
        "cursor": {
          "ref": "bbceeaa0-fef3-4d41-be28-e3f0769f3d6c",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e1131dcc-59ab-4b16-a926-e2a0334fd589"
        },
        "item": {
          "id": "b7284f3b-ccd6-4ce1-a1fa-f3a621adc1da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7d337e1b-40cf-4afd-bb67-b691d539f2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756f94bf-7d0d-4684-aa5d-e371953b95c6",
        "cursor": {
          "ref": "1dc0f704-7f5a-4683-8375-2ab9c45aa820",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6f0da62a-b9c8-43cf-885a-ef6fa3cd0ae3"
        },
        "item": {
          "id": "756f94bf-7d0d-4684-aa5d-e371953b95c6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ee8c9835-da7d-47c4-b9ae-5d12147e4d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2968730e-f6f7-4a28-8616-2fdd0e27fcc6",
        "cursor": {
          "ref": "1da8d76b-2fb1-43be-8725-f10e7c3d10f1",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "87f2d673-373b-4acd-89d2-3b627f7a18ee"
        },
        "item": {
          "id": "2968730e-f6f7-4a28-8616-2fdd0e27fcc6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a7712114-100e-4279-98d7-e76e92976d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a33846b-4edf-4f21-84fe-4de01e710cd1",
        "cursor": {
          "ref": "e26c23cf-1708-4307-b74f-3bef9c628d5d",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1149a511-4f04-421f-afd6-8263ec244782"
        },
        "item": {
          "id": "2a33846b-4edf-4f21-84fe-4de01e710cd1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "866eedcd-0cdd-4431-9824-a73a45767b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9864676d-3a06-47f7-a54f-f8998aef7c94",
        "cursor": {
          "ref": "8875f394-2bd8-4e64-9404-0167afb404f2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6f40978b-abd2-403e-b7a2-7351e48332b5"
        },
        "item": {
          "id": "9864676d-3a06-47f7-a54f-f8998aef7c94",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c5d31ed3-41a9-4ad6-aa5d-3abf55878890",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e03206f3-102c-402f-bc0a-62c879dd411c",
        "cursor": {
          "ref": "bbc6751a-411e-4ec1-97f7-d6d922dd7387",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "842f0e7f-9393-47d8-973c-1cd4d47c336b"
        },
        "item": {
          "id": "e03206f3-102c-402f-bc0a-62c879dd411c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d377481-926d-4968-82fa-6846659e998f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936d6f51-80eb-42c8-ac77-95cd76569cec",
        "cursor": {
          "ref": "1d2c246c-0881-45f3-b0d5-9c00801c9673",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5c609753-1da1-4dc6-9c2a-9fe61cff9121"
        },
        "item": {
          "id": "936d6f51-80eb-42c8-ac77-95cd76569cec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "af7d1366-a5c7-40df-9edd-5264a5f88087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f228fcd6-d327-4232-bfe2-2797e516025a",
        "cursor": {
          "ref": "45ec5fe6-3085-4227-bf3d-47a1535815c1",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6c2b34db-c8ce-4dfa-9f2c-71ad83f0b85d"
        },
        "item": {
          "id": "f228fcd6-d327-4232-bfe2-2797e516025a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2eeada50-6f8f-4158-90da-a7e77555d6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b547a1f-3a31-4732-bc5a-b6f8968fb859",
        "cursor": {
          "ref": "64148e9a-94dd-404d-ae8c-a6dfe0219eb6",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e2ec1cbe-b1a8-42ab-8421-6f20aed0b9be"
        },
        "item": {
          "id": "2b547a1f-3a31-4732-bc5a-b6f8968fb859",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "21899415-caf1-496e-96b5-599278c878fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feac4611-8647-487b-b957-2e3a9d049483",
        "cursor": {
          "ref": "8c46f38e-f656-4831-abcb-ef1864298852",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "de0f62ba-9970-45ed-b2ed-19146102c625"
        },
        "item": {
          "id": "feac4611-8647-487b-b957-2e3a9d049483",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1dbae20e-9dac-4c93-afbf-ba6c8ecc902f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f992beb0-a0d4-46b6-b5dd-c34fff82bc6d",
        "cursor": {
          "ref": "e91488ce-d461-401a-a31e-71d68de80223",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0a0fb7c6-3d7e-4f5f-a8be-b154a2969e3f"
        },
        "item": {
          "id": "f992beb0-a0d4-46b6-b5dd-c34fff82bc6d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6e542d9d-b52f-42ff-be86-ed7c4a02b3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ceee2e-a1ca-4cae-97e8-bf2eaf359b78",
        "cursor": {
          "ref": "20d13243-de65-422b-bd8a-21e59b9f9b5c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a27386c9-69ed-46db-b37e-714046c8aab4"
        },
        "item": {
          "id": "c4ceee2e-a1ca-4cae-97e8-bf2eaf359b78",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f3b23096-ad31-4e71-aba2-a91db06fc0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9b0646-5d17-434b-988c-ccd487607786",
        "cursor": {
          "ref": "e693e3d4-3355-450b-9c30-890ae473a15b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e37b8411-faad-4519-9cc5-f11a73bf4bce"
        },
        "item": {
          "id": "cf9b0646-5d17-434b-988c-ccd487607786",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "57e6946c-ddb8-45f4-8aa7-9c8e820dff10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8a6c93-ef9a-4072-bc29-f16953bc0a3b",
        "cursor": {
          "ref": "dcba1a20-5b38-44a0-a070-8063dd31659a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "59975550-8b3e-4465-9bf4-c9fc69635917"
        },
        "item": {
          "id": "3a8a6c93-ef9a-4072-bc29-f16953bc0a3b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e0922d97-95e5-4d4e-8f42-25a69acf3980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d0d113-827d-48aa-aba8-67439fab4b6d",
        "cursor": {
          "ref": "83b37cb4-7135-4b63-81a9-f9d2a1286d29",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2885f4d2-f659-4322-9a56-c7d732861395"
        },
        "item": {
          "id": "89d0d113-827d-48aa-aba8-67439fab4b6d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f75a84fc-d567-45e4-a6fd-368aba79b1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182eec82-7a71-4cdf-a948-1608f300dfc0",
        "cursor": {
          "ref": "6beddcaf-d1f7-434a-8953-7b234bccf455",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "925a9ae3-c0b6-4de7-8aa3-9dbdcba84b96"
        },
        "item": {
          "id": "182eec82-7a71-4cdf-a948-1608f300dfc0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3dba8e6c-929b-44f8-8d3a-0154c3017328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7e527d-a709-4231-b3ea-f791daadd150",
        "cursor": {
          "ref": "ac616596-3ef9-4677-9afe-8024d6f5d799",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1c44a3fe-3bdf-47d3-88ad-5fd8382b5dc2"
        },
        "item": {
          "id": "0a7e527d-a709-4231-b3ea-f791daadd150",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b4c42480-6f96-486f-840c-5ea46184b2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001fcf10-cad9-41d7-9cea-ecd10e031260",
        "cursor": {
          "ref": "9f17db45-dcf3-4e18-83f7-f128d88324e8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2ed87223-c529-49c6-9b9b-a59469a421d9"
        },
        "item": {
          "id": "001fcf10-cad9-41d7-9cea-ecd10e031260",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bcb91cb9-99fa-445e-a681-9f9d26058633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143ff308-c26c-48f6-a640-56e6396d32f2",
        "cursor": {
          "ref": "a7c8433e-97c1-4414-bb69-4b3b6b8328b3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "14dc7519-a9df-41b9-8172-eaee487c5958"
        },
        "item": {
          "id": "143ff308-c26c-48f6-a640-56e6396d32f2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e6e7576-c0c0-40ec-83f2-723c8193f0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c674f932-569f-45e0-bf85-70e2b5ea78f1",
        "cursor": {
          "ref": "f2d5c187-885e-4134-8e3a-dd6de90227da",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2f8c3324-b866-4e12-acde-89d7a4ed61bc"
        },
        "item": {
          "id": "c674f932-569f-45e0-bf85-70e2b5ea78f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dbaa607e-f0f9-436c-9b28-99fe6e86cf40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9ee960-a7c7-4103-a01b-2f9017046bff",
        "cursor": {
          "ref": "ad53b961-56fe-4975-ace7-d600d4f8e99e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bf25221e-a4e2-4726-9d03-e86a16dd089c"
        },
        "item": {
          "id": "df9ee960-a7c7-4103-a01b-2f9017046bff",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ecf2cae6-6d45-4428-81db-d94d2662a085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd428900-27b1-41ba-9823-031e1eba708a",
        "cursor": {
          "ref": "136d90f3-3a36-46dc-b40e-f19e66b05e74",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fccef1a7-97f7-439b-9c17-b1a5b6e8a01d"
        },
        "item": {
          "id": "bd428900-27b1-41ba-9823-031e1eba708a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f46d2566-ed20-4df7-bfb2-15ac28a9775f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470573fb-e36c-4382-96c1-5168ec6a6042",
        "cursor": {
          "ref": "8e4f6b1a-ae01-4b39-96f2-f060e680c035",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4c613b53-c939-41d0-8498-0ef9680dbf30"
        },
        "item": {
          "id": "470573fb-e36c-4382-96c1-5168ec6a6042",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dcedb28e-4d60-440c-ad56-3a58440d368a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affd980d-16fb-45a3-b349-00a8328d06bd",
        "cursor": {
          "ref": "e903781c-959a-40b0-8e0f-a0688eef44a2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6fe90a1d-c29d-45bd-97f0-89ef29fab184"
        },
        "item": {
          "id": "affd980d-16fb-45a3-b349-00a8328d06bd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8bc1aea1-be9c-418b-8a7b-2ddaac7df553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c9a5dc-dcf6-4373-89cd-0392eb25af80",
        "cursor": {
          "ref": "08f2bb29-bb05-4f9a-ae93-e5d53629c43e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cebd1532-4fb7-4eca-b56b-b9f99d4d7869"
        },
        "item": {
          "id": "51c9a5dc-dcf6-4373-89cd-0392eb25af80",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75d5cba4-99a5-4866-8e71-e3663028e717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50585bd-59ac-43b8-8d0c-b43ffc868f77",
        "cursor": {
          "ref": "ae270576-77e3-4432-b5ba-34c495c0c7e1",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ee23e2e9-d778-4ed9-ac04-c38bf4ca11a2"
        },
        "item": {
          "id": "e50585bd-59ac-43b8-8d0c-b43ffc868f77",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d8dd0b24-bf88-4ba5-b961-e40033a7dc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a321c7f-56a6-41d6-8fd2-57b9cd437807",
        "cursor": {
          "ref": "2f391b6f-cded-42d6-83a6-901ae6f39d71",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "556a2e59-cab3-4784-868f-144f5f520a8c"
        },
        "item": {
          "id": "2a321c7f-56a6-41d6-8fd2-57b9cd437807",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "95810996-e96a-4681-8f10-ee80f5c5b584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17099db3-833f-47d6-8a40-15778fa99724",
        "cursor": {
          "ref": "18742257-4238-4a56-a71a-4bcc24ee9510",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8a1f39a6-2deb-4f94-aa75-fdf5cf8981da"
        },
        "item": {
          "id": "17099db3-833f-47d6-8a40-15778fa99724",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f7ce4279-a74c-43eb-b180-681ba6216aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30dc92b-75ff-4191-b7ba-1f71bf89cf9e",
        "cursor": {
          "ref": "f9780a80-7da4-4471-a387-50d46d7a3eaa",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b56a08a8-89cf-45b3-a5f7-fffd3d77a0c4"
        },
        "item": {
          "id": "e30dc92b-75ff-4191-b7ba-1f71bf89cf9e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d48d7946-5248-4c2c-8fe5-cf2aa9f9a528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580f52eb-f7ca-4738-b351-7b41f1ff2c06",
        "cursor": {
          "ref": "6492d85b-7129-4572-846d-d030d4fc297b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f3135482-8dec-4f1f-ad4c-30b303922fba"
        },
        "item": {
          "id": "580f52eb-f7ca-4738-b351-7b41f1ff2c06",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ef491af3-078f-49de-a146-72e2c4586f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e6928-2d13-413d-ae90-36abc2e9702c",
        "cursor": {
          "ref": "9110ace7-cd0a-40e6-bc5a-973e24fcbb9f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c8560de6-4c92-4bf5-a131-816887a3999e"
        },
        "item": {
          "id": "c80e6928-2d13-413d-ae90-36abc2e9702c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d8f0e33e-5864-4e49-99a4-12494cf7f68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0cb1e8-732e-4896-a0f2-f9b60bd3027f",
        "cursor": {
          "ref": "b1a6347b-5dce-4e56-9810-3fc85ce9929e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "729b494f-a8cd-4614-8074-e7ff4d2c44f6"
        },
        "item": {
          "id": "2a0cb1e8-732e-4896-a0f2-f9b60bd3027f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1598c129-8e48-43f9-8817-4d6ea96fbdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5aa6df-a4cd-43e7-adcd-22355c94f5a5",
        "cursor": {
          "ref": "40550b6d-28f6-4f8e-8a91-25cd9e7606a6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "91a65cdb-8416-4043-a983-4a5f8814b113"
        },
        "item": {
          "id": "1b5aa6df-a4cd-43e7-adcd-22355c94f5a5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d07279e0-9c4a-442d-825d-53f7ed0ddafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73ad84f-4b53-43cf-b95a-780277d48049",
        "cursor": {
          "ref": "8b64db5e-7733-4c72-a39a-bd22ae6ccf83",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0c67f726-ea32-482b-a87e-d980e84177ef"
        },
        "item": {
          "id": "e73ad84f-4b53-43cf-b95a-780277d48049",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a629bede-d393-4cee-bffb-7f0f19630e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23752cb5-a091-42bb-981a-0a2707db1baf",
        "cursor": {
          "ref": "53fc309e-615c-4ac6-a113-2f41cb92ae2e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f83c15bf-00aa-4856-ba7c-1114274a0973"
        },
        "item": {
          "id": "23752cb5-a091-42bb-981a-0a2707db1baf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "05d61a40-e02e-4f38-b557-34ebd4e37e4c",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "49288852-7f79-4cf6-9fd9-cdba146b51b2",
        "cursor": {
          "ref": "a1fd8496-6603-4042-9575-be8070b10e61",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7acd8ed6-65f7-4330-8971-bf562dc3bcf3"
        },
        "item": {
          "id": "49288852-7f79-4cf6-9fd9-cdba146b51b2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1660814b-5977-4f5a-a14e-8846745bc0cc",
          "status": "OK",
          "code": 200,
          "responseTime": 230,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "07145d43-2ff7-438a-a381-751026d63670",
        "cursor": {
          "ref": "d28257d3-1cb6-4c1a-8273-9ab03888df5e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "394f6cc1-c0e1-46de-a495-301bf3e1662a"
        },
        "item": {
          "id": "07145d43-2ff7-438a-a381-751026d63670",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "34cc48f0-0354-4814-bcc7-51350d1ca94c",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7d8bfbee-d50a-4acf-ba1f-8313c582e2fb",
        "cursor": {
          "ref": "39136b34-38da-4b0e-a43e-4d2cb7fdf376",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1a8fb2b5-3bff-414d-bc84-d3fc542c7537"
        },
        "item": {
          "id": "7d8bfbee-d50a-4acf-ba1f-8313c582e2fb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a1fd5ef7-906d-46e7-9d11-00a7d891cf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deeb9c5-57b0-4e36-8a5a-def9a609f2f5",
        "cursor": {
          "ref": "015ff0e3-d803-455f-bf7e-d331e9e145f6",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1dec144e-da52-4572-9813-bbcf0ee5f844"
        },
        "item": {
          "id": "8deeb9c5-57b0-4e36-8a5a-def9a609f2f5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f23267fc-fd92-4a3c-bd4a-0c84dd32b398",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b9f0f4d9-3bb3-44b7-98e4-b7b28dfc4d56",
        "cursor": {
          "ref": "b524a857-08b5-4d57-be41-9b9a26637e18",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "76ccf799-784c-4123-a70b-3162392026d3"
        },
        "item": {
          "id": "b9f0f4d9-3bb3-44b7-98e4-b7b28dfc4d56",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7d7558b3-9375-4d23-97fa-7c237883ba3d",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "060b28b1-f334-4eb6-8811-297f4a221ab4",
        "cursor": {
          "ref": "aabdd223-7646-4f77-b053-07107261319b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "164c9efc-8a09-43e1-b78c-60aeb1a0d67a"
        },
        "item": {
          "id": "060b28b1-f334-4eb6-8811-297f4a221ab4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "983926da-f9a7-4108-958e-1d76f2ded9ee",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "181df778-4f73-4e8d-a8e4-37b0bac173bd",
        "cursor": {
          "ref": "e5442ad2-3f00-49c0-9d6c-f5dbc8b8377f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "be1be276-3f84-45e8-86db-378472af2e36"
        },
        "item": {
          "id": "181df778-4f73-4e8d-a8e4-37b0bac173bd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccbacfb7-fb75-41f9-ab89-d13468aa931f",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a60dbeac-b3e7-4cb9-902d-80130dc400b4",
        "cursor": {
          "ref": "c740d3bd-efeb-4832-ba5d-613c9e279523",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0010c562-45b1-48a3-a1a3-02f20f3dcf91"
        },
        "item": {
          "id": "a60dbeac-b3e7-4cb9-902d-80130dc400b4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "79166258-0633-4532-9aab-df3f036d8936",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a0e96fb0-0de6-43a5-bd13-03d32d2bd19c",
        "cursor": {
          "ref": "2872ca53-8a60-4e81-bb8a-4dd4238742b5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2a047c18-5d50-4b34-acd6-71859f7a8e76"
        },
        "item": {
          "id": "a0e96fb0-0de6-43a5-bd13-03d32d2bd19c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ea03af36-687d-4a98-85d8-a33e20374371",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "19d57349-55b4-4364-88e0-8c96e3d06237",
        "cursor": {
          "ref": "e3ae8fa0-73b4-4dd3-8af3-fe6136de26fc",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "072cdc00-bff6-49be-a7cd-ee1622404b79"
        },
        "item": {
          "id": "19d57349-55b4-4364-88e0-8c96e3d06237",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0821fc60-1f92-4a52-a262-f1231f0f0960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16f767c-e053-48c9-82a3-b72ba4d771a1",
        "cursor": {
          "ref": "5c403abd-a0ef-4023-9158-61b04890a42d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e447860d-8a80-4e4a-9ab0-7562a8e8f7f5"
        },
        "item": {
          "id": "e16f767c-e053-48c9-82a3-b72ba4d771a1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3ec794bf-0517-4435-bbca-e6e355ad9ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344f4df1-0c71-4d9c-8312-0568c603a148",
        "cursor": {
          "ref": "e7e6e154-a157-48c0-b5d2-91ca6fdbefed",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5eefa0f7-3706-43e8-8d79-fd5d53c9b25c"
        },
        "item": {
          "id": "344f4df1-0c71-4d9c-8312-0568c603a148",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "31c18956-88e1-4699-b7c7-1f827f6efd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc47cb9-6c07-4ab5-86db-c664a67aa17d",
        "cursor": {
          "ref": "ccec389a-c1d1-4b84-9053-140ddad83ea9",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5975c2c4-2030-4736-97b9-683c06b72142"
        },
        "item": {
          "id": "afc47cb9-6c07-4ab5-86db-c664a67aa17d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "35fdc9aa-6d40-41ef-b5b3-be6f0d00cfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a92e90-6ea1-4df9-b8e6-be54c173b715",
        "cursor": {
          "ref": "b36a1e2f-c211-4551-b8c1-5eee49add633",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "87684c2c-c9bb-48ec-879b-598974200543"
        },
        "item": {
          "id": "29a92e90-6ea1-4df9-b8e6-be54c173b715",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c5d74025-3ec5-4358-abb0-70e120f7f497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e686d937-0c37-400b-9861-60ae10dfd209",
        "cursor": {
          "ref": "aa13f194-2e8c-4786-9442-0ff5f515ea2a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0cfacbc1-17a2-4159-ae3b-377a1752a344"
        },
        "item": {
          "id": "e686d937-0c37-400b-9861-60ae10dfd209",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "78e311c2-fa09-421b-b2d4-f75083aea0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dd4f0e-5fa9-46c3-8a6d-6b37f70b97fd",
        "cursor": {
          "ref": "147a00c2-095f-417e-8d66-446bda1418e3",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e3c7597e-b771-48b8-9456-701811928a16"
        },
        "item": {
          "id": "70dd4f0e-5fa9-46c3-8a6d-6b37f70b97fd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d5be6dfc-44e9-4409-b963-e3089cf56ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1699dafe-b804-40d1-ba1a-cb261268c1e2",
        "cursor": {
          "ref": "d987abe6-597a-4c09-9fea-8441a742dc1d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a14dfdfe-33f5-4b4a-bbaf-fdde51ed1eaa"
        },
        "item": {
          "id": "1699dafe-b804-40d1-ba1a-cb261268c1e2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ec79ebc2-51ac-4ee6-8965-362c5bd5508f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70222420-06b9-4228-b260-562cc470ac9d",
        "cursor": {
          "ref": "85e9dc03-22f8-45a3-9c30-fae6eb87a314",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5587309b-d120-4e06-b6a8-e1de1f23eefa"
        },
        "item": {
          "id": "70222420-06b9-4228-b260-562cc470ac9d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c4b37951-4e15-44e8-afa2-64d17e97fbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c080e2-5fc0-482e-a552-3c9fba2d45ea",
        "cursor": {
          "ref": "7376c484-f6fb-4747-8591-ed51007e5a89",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3c5b5738-9404-45d3-bebc-5073c903d395"
        },
        "item": {
          "id": "97c080e2-5fc0-482e-a552-3c9fba2d45ea",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1694c94b-b6c5-43ed-b4b6-766ae466ce70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177853f3-6d5b-496e-8b24-c9e206b974f4",
        "cursor": {
          "ref": "9e469961-39a9-48e4-b5fc-7fcfcd36eed9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7eccd05b-e493-4a81-8c9e-cd5c00cd4582"
        },
        "item": {
          "id": "177853f3-6d5b-496e-8b24-c9e206b974f4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "29fdadf7-6048-4956-8d66-8ff1d91e57c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cc6734-e8f7-42c8-a019-366e8c53bfde",
        "cursor": {
          "ref": "5674c6b2-cd3e-42cf-b2fc-3673e9b48d91",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a3e2cca3-4c76-4d1f-bebe-1e2cfe6b8d64"
        },
        "item": {
          "id": "d3cc6734-e8f7-42c8-a019-366e8c53bfde",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2312e276-b3d6-421c-88e2-d21d277c4c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cfc9ba-1070-45a2-8964-f489fde3dd83",
        "cursor": {
          "ref": "d6834624-f2f5-4497-8573-ad4a61777772",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "41fd07c2-3c28-4704-9414-9cf290463287"
        },
        "item": {
          "id": "c7cfc9ba-1070-45a2-8964-f489fde3dd83",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5612b13f-0d4d-4158-8ec9-8c5e03034bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ec2bdc-b18f-4dc1-905b-de45e72b9839",
        "cursor": {
          "ref": "366ce74d-3ff8-4079-93f6-8dbe49119ec0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5ef85551-d245-4f0d-9f5b-b1d242918dad"
        },
        "item": {
          "id": "27ec2bdc-b18f-4dc1-905b-de45e72b9839",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "04500d24-2bb6-4925-91b4-14ae4fc6b2ba",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "544a635d-1bdf-42ee-921c-5cb14eb7e76f",
        "cursor": {
          "ref": "3cda208d-796e-464f-b038-dfed183bee74",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "48db5c7c-487b-41b6-88f3-fb1015665bfc"
        },
        "item": {
          "id": "544a635d-1bdf-42ee-921c-5cb14eb7e76f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b9a12615-1d89-4787-9028-1585aebcdf9d",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0c8a194f-3184-4c67-b142-6b93d7083dc5",
        "cursor": {
          "ref": "7b3cba0c-96e9-42e1-bc34-b5d210e50d3d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "88ad27fa-72c3-4993-adb1-95e0d45f96b3"
        },
        "item": {
          "id": "0c8a194f-3184-4c67-b142-6b93d7083dc5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "916b4a5d-0838-4811-8d07-39eb86e2a848",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d6ec8aee-f43e-4566-9c5c-3b44b9cce7d0",
        "cursor": {
          "ref": "d3e74230-4c49-430d-b388-82d3c04e1843",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bef7f605-0491-418e-b38a-998ff08c76c0"
        },
        "item": {
          "id": "d6ec8aee-f43e-4566-9c5c-3b44b9cce7d0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6466fb1f-0517-46e6-bcae-5b8d5de0281b",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "baddf981-91dd-4e02-9c39-804d304f77a4",
        "cursor": {
          "ref": "d5f21b47-55d6-42bd-8764-69d89ad7a9aa",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2c605397-6c18-4383-ac2c-875846f0f5cb"
        },
        "item": {
          "id": "baddf981-91dd-4e02-9c39-804d304f77a4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d28cea0c-613f-4315-8095-1bfac93864e3",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4e273fe3-6bd8-4b4c-9a11-bf423c272ada",
        "cursor": {
          "ref": "96182b5e-8ad1-4df0-bd0e-6127af78b6b0",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "794f380e-7609-4ab4-9379-3888919b0f69"
        },
        "item": {
          "id": "4e273fe3-6bd8-4b4c-9a11-bf423c272ada",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "63a6c848-a268-40cf-9674-9e0a11b9cfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4610343-6d8e-44b2-aeba-21d6d13f0ea3",
        "cursor": {
          "ref": "3956f5f3-7ba2-45dd-bb47-e93632a3a194",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "800cdc23-99d6-4b74-87f8-928474d0be58"
        },
        "item": {
          "id": "e4610343-6d8e-44b2-aeba-21d6d13f0ea3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "68e4112b-59b5-49ce-96c4-3e5d621042d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654b47e1-6b9e-41e1-9663-84817a84492e",
        "cursor": {
          "ref": "9cdcdfe9-269e-4d05-b65a-31310b3d08c2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "66cc37a5-dbd1-4dcf-a520-65817fdb1651"
        },
        "item": {
          "id": "654b47e1-6b9e-41e1-9663-84817a84492e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "72a2d536-a96f-4ab0-a6c8-48d117703f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226fe198-1e22-4d8e-91ae-97324e8bb49a",
        "cursor": {
          "ref": "191b5b07-0529-4a38-8795-d790720167fb",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "425f39b0-806e-4183-8039-c8b337d504c4"
        },
        "item": {
          "id": "226fe198-1e22-4d8e-91ae-97324e8bb49a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4224eb7d-e50f-43a5-bef3-c3af7fc8fbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e493c6-3ded-4368-bfb1-9eb5eacab6b8",
        "cursor": {
          "ref": "a5a9ec71-4d39-4c95-ac87-43bcd3b97140",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bc9f836a-50b0-4936-ac4f-770870f6dadf"
        },
        "item": {
          "id": "f2e493c6-3ded-4368-bfb1-9eb5eacab6b8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5e1b85df-27e0-4e96-8837-46257f8fe698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7852f5b5-f587-412a-9d85-f2e5f5c7efe4",
        "cursor": {
          "ref": "94f452ae-103b-442f-affa-c112793f4a02",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d5b4851c-e4fc-4f98-9d1e-0c106b050526"
        },
        "item": {
          "id": "7852f5b5-f587-412a-9d85-f2e5f5c7efe4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "64e88ef9-b612-44b5-bec3-375f261a1a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6bbb4e-7b6f-43d6-aa35-d543daf75cc8",
        "cursor": {
          "ref": "b214cf33-801e-4a7b-a1b1-1ae6f9fe3c88",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43420bd8-136a-48e6-bb30-f4548d2f12b0"
        },
        "item": {
          "id": "fa6bbb4e-7b6f-43d6-aa35-d543daf75cc8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "45680b79-7576-471d-a7df-9b3dfaf4bbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a43c8db-c673-4a7c-8b71-67004bed95b5",
        "cursor": {
          "ref": "3990f9dc-edb3-45f8-8c5c-1b0143402ce2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ec462dc-b9be-4f2c-8bdc-ff818406e750"
        },
        "item": {
          "id": "8a43c8db-c673-4a7c-8b71-67004bed95b5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "402affad-38c7-473d-821f-e5a148eef7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb3b2e7-3025-4803-b3d1-cdbaa95a24d6",
        "cursor": {
          "ref": "57484fae-478d-4953-ae7e-04f500e2d5d7",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2d9fd564-5be1-449d-9549-0856e3f70e53"
        },
        "item": {
          "id": "cfb3b2e7-3025-4803-b3d1-cdbaa95a24d6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f0deeca8-b638-4270-b84a-e5a97082af14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97460656-914a-4b8f-801d-b505fb87053b",
        "cursor": {
          "ref": "0ec84198-1158-45a2-957e-6f71d496923f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a548cf05-9063-44b6-9a97-6c4b1e8086f3"
        },
        "item": {
          "id": "97460656-914a-4b8f-801d-b505fb87053b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d88f7358-d471-4d64-b520-4fcd4df9ec2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac425f3-0918-4c5a-a512-9337e563aa5d",
        "cursor": {
          "ref": "b7bde073-e5e8-4ace-981d-4ddc79ca65f7",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a1455856-544e-44af-964e-cb7da00afbcd"
        },
        "item": {
          "id": "0ac425f3-0918-4c5a-a512-9337e563aa5d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c505b5a6-b758-434d-8fc5-f00c68046239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fab81a1-09e4-449c-8230-56f5e58f440b",
        "cursor": {
          "ref": "055397f2-b14f-400e-8721-58f33a5790ef",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5e8132e3-b643-41b5-8961-90132782726c"
        },
        "item": {
          "id": "7fab81a1-09e4-449c-8230-56f5e58f440b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "80e607b5-a33e-438a-9bc6-71331a9c3a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1cd54f-987b-4084-b84b-62524bdec1a6",
        "cursor": {
          "ref": "db50bccf-0c9e-4f58-902b-9c2f16c884cb",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "89e43d6c-b7f4-4676-84c8-0128068fc53a"
        },
        "item": {
          "id": "fb1cd54f-987b-4084-b84b-62524bdec1a6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5f828905-8f8f-4f03-a10e-1b8102f55b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0500a7-4a52-4e22-877b-1013eff1f8e7",
        "cursor": {
          "ref": "0635ce89-09a7-4866-b5ae-8c79f1ab79f3",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "72d585e0-43c2-4fd7-85ee-1975f727d2e8"
        },
        "item": {
          "id": "ca0500a7-4a52-4e22-877b-1013eff1f8e7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "09476f45-3785-4330-acea-138484e1ef98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4227d6c-b2ac-4327-93d8-d24eecaf177b",
        "cursor": {
          "ref": "ccfe8653-263c-4592-988c-f6c105b484d2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b1915785-cade-4bfe-b4de-a799ee387a98"
        },
        "item": {
          "id": "a4227d6c-b2ac-4327-93d8-d24eecaf177b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8744141b-4572-4e3d-b6a4-42865285dce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522075f4-2f3d-4cb8-9164-a24026680b03",
        "cursor": {
          "ref": "a7ad78d1-7230-4d3e-9d44-8eab88fb0332",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "73d2eb3c-9f79-436b-bdef-e9d845142631"
        },
        "item": {
          "id": "522075f4-2f3d-4cb8-9164-a24026680b03",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d9fed5ee-943e-4324-be36-09a085ba119b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576f3635-6b5e-4aaf-95a8-96df0713098c",
        "cursor": {
          "ref": "1b35afa3-2836-4c27-b847-e1c58cb0b9f1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "24fb2fb8-5ed7-444a-8d19-aedddfa514c8"
        },
        "item": {
          "id": "576f3635-6b5e-4aaf-95a8-96df0713098c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9cfa4e2b-bf19-44e0-b2d7-5575a7a628c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1119c565-fabf-4d3f-818d-4d7bdeb0c3f2",
        "cursor": {
          "ref": "4fe793af-bcf9-4d3a-97a4-e979cbccc571",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "aa244d1d-307c-41af-a314-17335037fc7d"
        },
        "item": {
          "id": "1119c565-fabf-4d3f-818d-4d7bdeb0c3f2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "30d38ac0-bfeb-42db-9dd0-7c15073432e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87599be8-e860-4918-acdf-6f7c7c503146",
        "cursor": {
          "ref": "7351dd4d-0822-4d62-a99a-fc26f191d609",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b50cc6e1-64b6-44f0-8572-01864f74a654"
        },
        "item": {
          "id": "87599be8-e860-4918-acdf-6f7c7c503146",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3fdae9a8-f299-4779-8407-2836c116d06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fb510e-2cc9-41a0-a0b7-86cfedc9bde7",
        "cursor": {
          "ref": "b749763c-d462-442f-b1fe-db97f3184840",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2771d201-2e3b-4072-ae9b-0e5c128d8ddb"
        },
        "item": {
          "id": "d0fb510e-2cc9-41a0-a0b7-86cfedc9bde7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "19b63f13-647a-49d1-b28e-ef2513c4e6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ede228-3714-4c31-aac6-cb5457d571bb",
        "cursor": {
          "ref": "62f0aaec-5e31-4b19-b0a3-25218d5442eb",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "23f1e68d-8e83-4a7d-b146-a9d3ecf0f808"
        },
        "item": {
          "id": "04ede228-3714-4c31-aac6-cb5457d571bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f2c7f263-1e80-4d3b-8be7-244fd802fb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860e7802-6317-41cc-bea9-88579d8b67ae",
        "cursor": {
          "ref": "ec9498ec-f026-4b5b-b5e8-53d66ea9069f",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6528f6b6-5faa-4813-b580-4c6ec82d336f"
        },
        "item": {
          "id": "860e7802-6317-41cc-bea9-88579d8b67ae",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a83b3815-9899-4326-b569-fa072952e418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1ac79b-27e5-4297-94d3-1eba88eb6c40",
        "cursor": {
          "ref": "5aef1157-52f3-4b11-b6b7-789e64911308",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "08a6000c-8681-4411-abb3-d4444a9bc910"
        },
        "item": {
          "id": "cb1ac79b-27e5-4297-94d3-1eba88eb6c40",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ea1439ee-8efb-4ad0-b593-e6c834b0752f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1cf95c-570b-4e06-83f4-a5a528e0e705",
        "cursor": {
          "ref": "6a58cd26-1c0a-47b2-bc07-cc21b41a771a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "656df894-28de-413d-ab47-1dbbce714837"
        },
        "item": {
          "id": "9d1cf95c-570b-4e06-83f4-a5a528e0e705",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5bd6d85c-3236-487d-8476-8c7c851a3f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0cf2e7-6e09-4808-a922-d5758cc8d663",
        "cursor": {
          "ref": "b73eb886-6eb1-4f34-8ec7-a2ab07200364",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e99cea5b-9828-4175-8c36-63122bd0e5b2"
        },
        "item": {
          "id": "4f0cf2e7-6e09-4808-a922-d5758cc8d663",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b19890e1-ed70-4149-8705-6c4c139ffe66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9e57b3-e35d-46b3-ad00-161da50c27b2",
        "cursor": {
          "ref": "dcbf7d1a-ec93-4343-9e20-fae54ed63975",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "dc67b24b-0435-450c-9c4d-a0e7b0a34d95"
        },
        "item": {
          "id": "de9e57b3-e35d-46b3-ad00-161da50c27b2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "494575c7-72bf-4919-bfc4-decb87c80e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca7fb8c-0b6c-4b75-b1c6-3cd3c02310ac",
        "cursor": {
          "ref": "4010f235-c94f-431e-9779-7bd943fa1dbe",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a3f0b08c-c609-43c7-89d2-2c52d54f5c59"
        },
        "item": {
          "id": "3ca7fb8c-0b6c-4b75-b1c6-3cd3c02310ac",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7ffce517-9457-4540-82a0-dd01ab1a24c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedf83b7-9863-402e-849e-87532f101558",
        "cursor": {
          "ref": "da42f68a-0039-48a8-80ce-61915920460a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b6b4f82e-4209-4916-a1b3-3dc0aaa630d1"
        },
        "item": {
          "id": "fedf83b7-9863-402e-849e-87532f101558",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d3633000-fd98-4019-b6b7-503cf679163a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540015d7-5d6a-481e-a415-b1edfa5af77f",
        "cursor": {
          "ref": "f0ef3e7d-2f37-47f8-8fea-a7dca288b9e8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "355f9162-bc0b-436d-a686-84f2f65d246b"
        },
        "item": {
          "id": "540015d7-5d6a-481e-a415-b1edfa5af77f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3926d89f-a464-4e26-b3f0-a759047a5e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801d860-e5ce-4fe3-a611-9d148132c74e",
        "cursor": {
          "ref": "95a5d634-a266-4a26-8834-ffe0a14a39c7",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c59b9551-0af2-4c83-8c9c-2f31ecce6356"
        },
        "item": {
          "id": "a801d860-e5ce-4fe3-a611-9d148132c74e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7482f57e-05f5-4338-8445-0704c7cc8b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8fa29f-7cde-4d6d-8477-a0e12fefbcdc",
        "cursor": {
          "ref": "b253b162-1b46-4a7d-aaf1-39f55b61c06e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b2b46f57-bb53-479a-bfe9-d373eb6ae74b"
        },
        "item": {
          "id": "7f8fa29f-7cde-4d6d-8477-a0e12fefbcdc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "20da1cb3-d5a6-4a99-a351-d193f3b802ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d64f64d-3e47-4d6f-8d5d-48edcbd9bb8a",
        "cursor": {
          "ref": "70338226-02e0-4078-9911-a7761c8158e4",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2ac582cb-868b-4b7b-9a37-8cc8f033b543"
        },
        "item": {
          "id": "0d64f64d-3e47-4d6f-8d5d-48edcbd9bb8a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "081dd439-0196-4cd8-a0a3-02d9b520e9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a7b413-8801-4932-89a6-0145aa59a471",
        "cursor": {
          "ref": "a91ba95f-af93-4913-9037-ea61f67adaa1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ce03bfa8-cbd6-4e9b-8e63-b555f5474bab"
        },
        "item": {
          "id": "54a7b413-8801-4932-89a6-0145aa59a471",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "19ff9c60-5b5f-4196-8ca4-dd175beed8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4563a4a4-fd63-4ed0-bc70-012d1756dc3c",
        "cursor": {
          "ref": "8d034488-6c19-4ee4-8e9d-d405df7e16cf",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8f09c606-4f24-4e67-9f74-40bfbf9c2b20"
        },
        "item": {
          "id": "4563a4a4-fd63-4ed0-bc70-012d1756dc3c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1d03bfdb-461d-4f92-bfe0-c99a325d5e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca407bb-ac96-40e6-984e-0c8c0605030d",
        "cursor": {
          "ref": "09b965da-cda8-41d3-b626-f329fc340e1c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7f147095-641f-40d3-86a3-f5c37dc842ab"
        },
        "item": {
          "id": "fca407bb-ac96-40e6-984e-0c8c0605030d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cee11439-9a49-45e6-bfde-189f08d4398d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220c905b-76c6-40f5-81db-addc1d2e63bc",
        "cursor": {
          "ref": "090d9b47-41e7-4d6b-963e-58170199471c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f5a68b5e-73aa-4e7a-bde9-cda98b63c806"
        },
        "item": {
          "id": "220c905b-76c6-40f5-81db-addc1d2e63bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "49fb49f0-b842-415b-8908-97f67f1f8df8",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a28cf740-3b5b-4612-8813-4e022a6fe5bb",
        "cursor": {
          "ref": "357e1886-4bc1-43cb-8f4b-4d3eef85adff",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f6106e8a-d68c-4898-8589-934306dee2a4"
        },
        "item": {
          "id": "a28cf740-3b5b-4612-8813-4e022a6fe5bb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4466274d-453b-4cb9-b274-673a646d0c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445b7ed-9649-4bcc-8e9d-70947e90d181",
        "cursor": {
          "ref": "63205764-0a47-45d8-a4b1-8adeb9437bab",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0353e07b-471e-45e4-960d-5e5626163b6b"
        },
        "item": {
          "id": "f445b7ed-9649-4bcc-8e9d-70947e90d181",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "70070d96-d308-4ac7-80e0-40e2cbb4e0fc",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "486462c3-088b-4995-9624-641534c99bcc",
        "cursor": {
          "ref": "3a2858da-ddd6-4507-b997-a2db8d90aa48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "63f7cd86-bc09-443c-9529-e5e39a574cb5"
        },
        "item": {
          "id": "486462c3-088b-4995-9624-641534c99bcc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8518ab5f-f545-4c91-9eb9-29e80b86e6b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486462c3-088b-4995-9624-641534c99bcc",
        "cursor": {
          "ref": "3a2858da-ddd6-4507-b997-a2db8d90aa48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "63f7cd86-bc09-443c-9529-e5e39a574cb5"
        },
        "item": {
          "id": "486462c3-088b-4995-9624-641534c99bcc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8518ab5f-f545-4c91-9eb9-29e80b86e6b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55f0507-1f5b-4838-b58c-eefca9ad6d54",
        "cursor": {
          "ref": "84bc6d80-cf4e-4c99-a2e1-3628a944b70f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "44e144d5-72ba-4a6b-afc1-35de06015100"
        },
        "item": {
          "id": "e55f0507-1f5b-4838-b58c-eefca9ad6d54",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8d2d0da7-36cd-41cf-ba63-7e9a668f86fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a6afe9-01b5-4d49-a5aa-7ee178b115bd",
        "cursor": {
          "ref": "c4684a94-0d2e-4be8-b23b-bcf14d1d3bee",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f9ded37b-5349-4e85-9cce-9e07d38fd753"
        },
        "item": {
          "id": "05a6afe9-01b5-4d49-a5aa-7ee178b115bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "10687482-1f8c-47a9-894c-401765a1deda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}