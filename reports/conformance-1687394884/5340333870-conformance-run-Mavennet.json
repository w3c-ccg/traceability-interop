{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7296dcdf-81a4-418c-b510-df774ca57589",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d4920bdd-f503-41b3-b132-75f35f74aee6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6081eac-ca81-47fa-8f2d-bf7836ed6888",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "265cc425-3bb2-4599-97d1-f3b4197a383e"
                }
              }
            ]
          },
          {
            "id": "0768e7c8-9295-4269-bb0f-a780c0c01de9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aeaf15c9-88af-4852-80ed-c85aa99056b3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "795e0d60-b91e-4081-a9d9-dce8558d316a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fbaf53ac-c843-41d6-9859-746edfbe4c08",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cf7dcd11-1cca-4739-ab58-f6246cfb938e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b53b53de-a8c6-4df6-b5df-3272fb2b24c4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f74c8c9-c1fc-48fa-8491-059c15adccaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3476b387-0435-4543-99ef-261ada14db13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07fb6802-e1e5-4bf1-a135-959d876e8dfd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aecaacea-52f1-4caf-9450-c94fd61784cd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ec1859d-86ab-4b07-8f54-807dc6f9a989",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7cba08cc-828b-4831-b832-5b75ad50d153"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72e6bb46-13d7-470f-8a88-1cc240452445",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "973fcb87-1e5f-4650-9852-f3b13464770c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dd37080-ffd7-41d2-b765-0a4744d239e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30d7de22-454e-4ef3-aaea-8fb3e1b41b52"
            }
          }
        ]
      },
      {
        "id": "d9e830cc-ee70-437f-b04e-44083d058a16",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "85787958-803f-463b-b9dc-399f099a31ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "541838bb-677a-41ba-8631-8bfbc57b100c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f863c463-a04c-479c-be41-a80feabf624e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b454a8-832b-4d5c-a6c0-0e5622fac260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cb46cb7-9576-4ec5-be42-53a204f17ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88755ea-1301-4fbe-a071-0a2bbbe4c574",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a493f0-872b-4f04-9813-4f1483ac016b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e2b6ba9-1d01-4150-bf5b-dc69a72ab944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b14f3d-b4c1-474b-9d38-0a14fc894a53",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e0c0df-56d4-43d2-bcd5-265d1a322859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb472b31-b311-43c7-838e-9ea0ba14f144"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b495cba-9453-4e38-9ec5-880c8f81fa80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59dba7d8-3250-40bb-9385-3767886f68fe",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debfd9c4-febf-4b7e-ac60-b071485f2132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "133d8487-5e54-40f1-8626-8b67e91f3f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345255d9-4c16-4136-9244-b9b1be24866d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc99845-09bf-49a5-98a5-831b19a92297"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "60bdb65b-9684-4980-a8aa-ac380d7c906f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65985925-7bbd-443e-9290-bfb0e798734e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03e788dd-8ebb-49f0-84b8-e56654ad1a03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "84b52b0c-66ea-4fd8-9f73-1c6d33d18c40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ca2864b-c2ea-4bc9-b2fc-fa62a2dfb31e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b47297d7-7db3-4bc9-9cf8-d0969ed25898"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b35c22a0-cc33-4400-8082-ff5a1db1aa08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b927f55-0e4a-45a5-bb89-c22f9df602a8"
            }
          }
        ]
      },
      {
        "id": "b24a868e-0fa6-44e4-9733-609d0e5eb7a9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9070b866-5049-4b40-92b1-43d337350a19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75a4b93d-12f1-4a9b-881c-633485d2a43a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "57583a49-1706-4bcc-9b33-e52f30a461d6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9e0f71-4f39-421d-8417-d4efc708cdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59ac3da-1dc4-4a8e-a003-210d4723f6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28e91e2-bfa2-4c22-8fdf-42bb31c3a090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "570f6c42-ab4e-4c51-b076-0757024cfe89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256f7403-45eb-4f7b-94b9-4ade7bf1ce56",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7e0d24-1ae4-4c23-9f4f-18709953bf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb66842-4300-4e72-84aa-c03df3cd7e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7760f740-add5-4824-a5ac-914dd17f9faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b140ab73-d34b-48ee-8db9-8d3315c58ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18546d99-7415-42f6-8ab2-7bf833241b9f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38cea11-a68b-4f96-ba47-beccc274d4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7758666-0f22-403a-a1b6-c51fbc4b9390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec7dd3d-d449-4d67-bed8-a13bc4b6cc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cb8213a-f037-4a9c-9e3e-912426f0be28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917e0164-ba4b-4ede-89f8-366086b652e0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc51be5-001e-45b4-8f47-ba3215db4508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a8c25b-e67b-4bf7-8495-10bcf242c90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e40394-42ff-446e-800f-2496c93de54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40b2676a-3e26-4ba0-9c78-949690580b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4bdf2a-bc14-4419-bdc5-1d6b71cc0c61",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16518a61-adcc-4fd8-aad6-6ca68898b6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bf87c5-c4e2-4258-ba71-8e3fc3321211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3157d7e1-631b-4f2a-8ea5-04bc4ac781b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "287bde89-da82-4242-8119-821e7d824fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9048b0-7e87-43da-8b21-c5768abbafd8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b63a96-136c-4b54-9512-964f2fad658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ac3e8d-03ea-446d-8ae0-6321aaca619d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5607c621-2f91-449b-b326-ab9c9ebc9d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd095af1-a4db-4ccc-b6dc-cc3a9d8529b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e03ae7-2813-43ff-afe2-4dda1efa5727",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c87a6fb-33af-4d5d-8d03-cecc816116f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e55d41b-4d11-463a-981d-7e6fbb2ac504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae64ad2-7ea8-4593-9336-367dece89669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc87b2e-4473-418e-8303-647f2ba1da7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53437d1-c054-4318-b5e4-a94ee672267b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53abdfc9-cf98-4170-ae97-c90c1bbcaafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808f76f6-8cf9-40e5-906b-2b2940924d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed874e0f-4b48-4238-a2f8-c39e1686a6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc2a14d8-76c9-4b69-b1f1-cce309601f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7061a908-f275-47b7-a2f0-8594a69aac1d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91d43dc-fa83-4b05-bbd7-e33425c94b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326ad47d-bfc6-4c4b-8917-2869c9486a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9775f54-455a-449e-98cd-ba5335db2e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70a8e209-8ef6-42c8-8671-501e434c03ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667c9ed0-78eb-47a6-88fc-32dfd9e75073",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869103b3-2bd9-4765-a3b5-4c24b6806e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116817c4-9bec-4b7c-ac55-a26644e661a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9556ede9-4406-4151-8542-f73b444aeaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd58622b-fc4a-48a6-911d-675d94920ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bd3db9-2af4-4b36-933a-2ebc13bdb6c2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d80bcb-e70c-4616-9183-bb48d937f3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad3b169-f688-4b8c-93b8-8fd8972609d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eb2276-6436-4913-9866-a7c91dcd2daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8687b7f-9c34-49ad-8747-46b1a8c7e569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802d8a35-acc1-4539-a92a-ad8efcfd0b5c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765e3a00-1ec9-420f-8444-7f3619f0ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f5e065-e440-47ec-b73b-206ef7491689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a06efad-48f6-45cb-bb03-9cb963cd32cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dab3e5e5-dbce-4a90-8fb6-70095f3398e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fed4345-adc9-4331-b743-d07347536689",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ac6d81-51bb-4b4e-91f1-a4248f8e5278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f588537-f58f-4bea-8a83-1da1a968addd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70542d9e-5338-4a5b-ac72-10034e3a075b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3633f51a-c48b-4871-b9ea-b559bc3df398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2ca907-2c60-4608-8fc9-4d5539e3f628",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9153ab-9021-415a-9fc6-3077676c5d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bb65d8-5f54-4467-86b4-65f84fd78a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc8e9c5-9b7b-45ce-bb9c-b5a5dc9b146a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e063726d-60ca-497a-bcd0-3f89e5e0b9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71d0e2f-3156-457b-818e-9dfe0be11bc7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d956bfea-8f7c-49c1-b69f-50a86a3b2e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb6eecd-8f67-478f-962b-73d9867f29fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82ebf75-64bf-4ab2-92cb-9d40bd5cde9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdf9442f-5b73-43f2-94f2-58731e339594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46145f05-922a-479b-abf2-747b91ff3b13",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a82bf30-4ccc-46d1-b60c-80eafe654aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71b5c04-4a9d-40a8-b107-8dd15ca9c262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b9c545-e357-4891-b5bc-16eb59f60138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a64c75a-d55d-4746-ab94-beb57c81a6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15b666a-ca58-4ea3-bacb-c81aee79af8b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bad282-a6ba-4eee-b88c-77fb18e9e21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2569ab7-2aee-4546-ac06-d98214eee4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8f05b4-4316-4150-80eb-3972b6ff7c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e085763-62ad-49d3-8a0c-c2053583151e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4e014f-e2e3-47fe-b0a0-6e5343bb0cc1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bead74bf-a663-4ff1-847e-a1032faf0d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185dfb70-fb78-4e65-b04f-68be22062ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f648316-4b43-4480-8896-3facb1207de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "63fa6135-83c6-4bd1-b40e-1359554de13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723f3c37-1385-4098-9885-2d832baa45e8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c609b0-b9ab-4286-b930-f333c56af8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd060114-c93d-4716-b2cd-01a304f1cab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a2ecff-7d92-4baf-93da-79438d399aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "155d5493-23b8-4273-bd0b-bc454300bdbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31212d3d-ed30-485c-b2ac-710fb65eb805",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1984e50-7e96-498e-9554-c8c00da8049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8749e8ce-6c27-41c8-809e-b90bf864faad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35dfcfe-117f-458f-99e1-31ad17efd9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d346647e-476c-414a-ae53-24da6a6837cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0935d05e-efcc-48f9-affa-f74b02fa57a2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2699e7-b587-42d7-99ca-3f6a12c0ae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079a3cad-d871-4759-82a0-127a49edfa45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd15175c-3a6e-4866-accb-27b187b55a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b6a7be-112a-439d-a13a-f17f0e4f350d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927948fd-782e-4386-8b5d-ad3eedb4b036",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1110ce-57cd-4128-967e-433fe329e015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa3d307-cbd8-4dd0-9252-d9e074d803c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1efcae-94e5-4b3c-a113-55ce794f8bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a15d6a59-6d24-4556-b324-13743bae047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332835ff-2c24-4187-afbe-e05761c151b1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9275f2e-a7ac-4e15-a079-bf6513cc0d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0424215-16d7-44a6-8fc5-44cfffe136de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04fc8cc-81c0-4ab6-9002-f4515fc8ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43ccfe1e-d3df-4ff3-8fbc-11f0eeaf2427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff9b3fa-5da3-4361-8369-0a1f1b6b9210",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4749cbb-130c-47d3-87d2-e84ee1b599f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392b352d-d801-4068-b844-ced1f36f39d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca8029b-f75d-4bee-ade7-f79990a0380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ceaa38-5bc5-451c-b02d-29c52da71b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00267c79-b20f-4fe0-becc-0194f71df704",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99639662-dbc2-48fd-87a8-1280376839bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdb2e88-e9d6-4ca4-b1dc-9b9fc98c67c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca83bc3-ba3c-497d-a891-70d37c45b722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9f0a91-cadb-4cd5-bc1b-bc4a9cefc766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7351e28e-0bf3-43b4-aa84-5cf12aa3cf2c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0baeb1c-2bb7-49ca-90b4-0edca72fb74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e546a4-e42c-4a58-8579-d0449c894dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963c79a4-6684-427c-a479-f32efcfb1627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8374b656-926b-41c6-baac-9f50b4f225b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72326804-5473-4634-b336-14f15b241def",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce14e3c-6a35-41d5-abee-278f7ef85f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1e4cdc-c088-4a34-a057-4a29ec2bc699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1937ea-b352-4d6c-a5ec-8968edeea334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16de718-6639-4c69-b838-31b663c859ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19e13ce-c2b3-4804-bd20-0fecc129fa26",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e278d5dc-4286-49d4-982a-9a6b47dc1077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30852e81-771c-44cc-92ae-ac4767f09f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3ef8ec-7fb9-4361-a6fc-a990ee98628f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "643de6df-201c-4537-8917-ae82671dc5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cb9b4b-d00f-42e8-bd10-36f32d82830c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdaf9e3-7b7a-40d3-8d38-c73431a3c97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb7a67c-465c-475e-ad22-f44c5433adea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36aa1344-5fc6-479c-b538-554d7d87f121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb905109-7008-4e2e-a565-027cb9ffcf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c726845e-144c-4e90-be62-036b2cc42e63",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f30d6f-e861-40f5-8847-202f2252f4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f15527-ae3a-4659-bf26-f6165dfd7120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ef9807-edad-4484-95bd-c64d9daafa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3b624d-081e-4c43-948d-4ef7729d2e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ca978c-fd4d-46e3-810c-8f385e8aa1e9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72ec561-b52e-4dbe-8200-eda7a7889e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c1b933-6cfe-4be3-bbe1-b5a40a36b2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09452fe9-4b22-400b-92c2-3bc9b44ce5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c83ace-a71a-4148-b5db-cac11f5e68de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcac0580-6599-4f24-910c-89d5896c3c0f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d17a1b-ec74-4e09-a013-39f4582c2469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a1bdf0-2bbf-421a-a2cb-ec7bc678d74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef124be-4663-4dac-94f9-ba8b4859aa6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44efb5b4-7b7e-45e9-90ff-5a339114d15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f47fb0-9b77-4a38-96e6-4679bf622c66",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c10179-c7d5-4149-ae59-64de536dd595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e95c39-144e-450e-8e07-f6fea62fc122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e2261e-7e24-47f5-a0e6-06935fd7f97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "732b94db-5b3a-4e6e-ba37-374ac5279286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94d7033-ee3a-4ed5-a5da-86070fb52099",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7851be64-efda-47e3-a727-467c1aefbb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626f0a17-75eb-446f-a827-e2efa0093ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7410700a-7a1f-4be0-af99-856513097bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb5e23a-90cf-4e5b-ba7e-3db97b4b9545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dad7e0-b43e-4017-87a2-bf969f9c9063",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cee399e-5271-47f9-82a5-c75032373a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c183de14-bd10-4cb2-988e-f380e6c39832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0766baaf-0561-49e7-915e-cd0717cf7e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "95861beb-8858-48d8-bf48-e688b06f2662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae37c40-c361-42d0-be15-6281d2554fbc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b552034a-72b3-4d64-834a-36d158509599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "678a92ea-7679-45dc-aca3-a816e3846688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ea5a2a-5716-4231-b3a8-4e99b0365424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fafb2f02-6101-408e-84f2-1c0bca33a69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5f6be6-e0ec-4507-b060-84d233d068ca",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34da9232-dbd1-409e-b2a6-48d3f86e13ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6047e2cb-455a-4283-baf1-648d1bfcda7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a4c37c-e396-4776-9cfb-ade1ac9c773f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e733434-5c67-43be-ad66-be072b700de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17909a1-9690-44f7-ac84-f54a14ce3e36",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a4f16-c5bd-41b2-aa18-d0c1cad15865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1abd9ae-612a-42d4-9df6-5cad32b818e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edce413d-8d03-4b63-8c94-f61766aa8362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "98e4cfbe-9dec-47b0-9a82-4f77c45444b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6882ca4-a529-492c-9d1a-adc13b9aa2ef",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bd27b1-f3f0-47fc-9319-57b6a2024c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677d27a9-c649-403f-b715-dada8a41a82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32066aed-1ba0-4cc5-b434-8724160f54bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4b2f50-de7d-4943-97b5-a843d71b05b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3736743-2a36-4e90-a73c-cb9d9921e16e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec49d86-0cf7-4373-8ed5-55d24f72f3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43757c0-3d6c-44bd-bfc1-e38f72eeb3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bef9b1-3260-4a03-9f3d-df11e6ba520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9080e19e-74b7-4e57-b020-0f092cacd16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f474373-d9b7-4a13-a1a1-e5aa55640b09",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f07bac3-e205-4164-bbfb-61f028d23de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5506f7ac-bc3a-407e-acf5-63afb85a2e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08561b1b-b6ce-4c77-9687-93e0fc1cb607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "075a5b75-aa8c-4e53-a41d-4433a8fe6848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743fef53-7a98-4020-9a01-b7c3f127f673",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26e97b9-e5be-44fa-ac0a-cc2e92652b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e9e0cf-395d-4be4-9631-55a28952d477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fd4d01-3d14-41c3-a7f2-597559cb0801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf1821b-2cc8-43e2-8ef8-2d3744025e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58029860-5859-4622-a89e-a9c4fea2d4ce",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e7d221-d502-4e37-99e2-52cc0ab394bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df72bff9-c2c5-4be2-a599-5dc035f229f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3281054-e6f0-4672-80ce-86ff82440e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cae4ebb6-6cde-4928-bd0c-cfb072b39926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201ccbc0-fd3d-4674-a908-41df9b39ad85",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095dba40-9673-40f3-a2b1-93fb5fe28e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056e2fb9-a1ea-4864-99b1-8be67a1b67ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b5ce3c-3e8f-4d32-85a5-967995c691d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "778afcdf-3726-4e68-9dbc-0ea77dd8363c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8a1582-75e2-48d5-b49f-5a63835d98f3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638d1534-cd5d-454e-9e48-4403c90dc01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8047f21-eba0-49d6-ae08-ed43a64d4c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b0d2f9-4350-49f0-9644-5e63ce47f283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6233d9f-cbed-4e2a-bc1c-f79b0fe81176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddd463b-8783-4130-9b2a-698da5f3ef13",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f82690f-359f-49c8-9dea-b49ab9c1d7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509d7a8c-ccf4-45c6-8337-5d59f8ec0aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe94f95-65b0-4718-89ae-e6ad20fbc446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6462f5d-5460-4173-9ea1-259acb0ca981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f447a5b-269b-4a17-965e-8f086dd41542",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53b2211-4fe4-408c-9273-89a166d716f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7586b3d-2acb-459d-936f-1585b48f74c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e135af-644f-4392-8b37-63d1a15f2e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44acc15a-6251-442a-8f76-9a66f84ac1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37670ccc-03ac-4e62-819a-cb301b4ca94c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed322d65-670c-4ae0-a829-4af9da09a4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2dc727-7304-4d84-82fe-8c75db0e61d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748436cd-b625-4acc-8e90-e756af017d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91149403-3f3b-413d-abf5-be3d9669fabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9025ba1-ab3a-4efe-843d-ee9dcf03aa8f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71d4f05-e1d0-4c1d-b93f-ffa4955a6de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e15ed3a-5755-4e77-bd28-c0173543aff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b905e-7dbe-4fdc-ab34-44888681d4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18e6ee90-994a-4db1-9fec-5d26271314d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab5e692-ae68-48f4-8b1a-32dd679bfc2f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ea44e2-df2e-4197-9aa6-3ea3b2bb0ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4597cdff-f0ce-4f44-a657-c20aa8273454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b8d8c9-00b3-4d2b-a41d-c9f4f8aa5dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6012d75a-a388-4653-b2e3-c63cb3c200ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a504af4-371b-48f8-8325-7e5e6c1405ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449c196d-a2e3-458b-a01e-60ee938ec455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89104dff-fe46-4438-949c-c3773cb960a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97302d5b-0b22-412d-8a3e-ce05a534288e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde909a9-5154-44c8-b9ef-ee11ec0f62c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d29e177-d2a9-4d37-bcfd-1c50a6bed1a3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e254aa0-58f4-4ad9-bfc4-bcfd668e9e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9673db3-0e23-4187-bcf8-2f485ef37e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206edc7c-bda9-456d-b656-2412bb0a2337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e71ca60d-95f9-44aa-bab4-eba8b3ab0c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb6fab7-e67e-44db-ada3-8e39f34a6b2e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3bf6c1-500e-48c9-95e9-ba4f3152cefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c76a30b-ea07-428a-aa0c-1a30e5ac018f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b5801e-6517-472c-a14a-7339112ff00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f0e519-8d98-4634-9754-5c3f91b81dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15abc704-c702-4e28-83d4-faaf3534098b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34191570-ca2c-4c4a-977b-d39b238ce7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81a9ecf-f2ed-47d8-9f6e-22ffb6ad9cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d100367-a483-4999-b3c6-3c38d12cf281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8352f1-c42d-4bb3-af08-7484d2b313f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0315c7b1-9d60-435e-9f99-384a976075e4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3172beb-2a48-45fb-bf0b-d08ad12386f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b675f21d-dc61-433d-b227-2afe2790c0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef370f8a-52dc-49ea-94f7-8bb890f2366d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "720330a7-d428-450d-ab58-506d2e965145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e0f4a-485c-4a02-9444-10923592608a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796193ab-b9fd-432c-b1b7-940437f3c510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd134fbc-cae8-40c8-b240-db075e27c646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1760bc7-f839-4d25-a605-5ddeda8d2f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f08bd2e8-a7c8-4b7f-b131-0d461a05a753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5673d12-c485-4def-b119-85fa94ffc679",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9441ee48-5fba-400b-81b6-a7777ebadf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d88d33-0428-4abb-9526-4540b5283e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b9fd4-e7f4-4128-860c-49886e5bc93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3aff73b9-be35-46a5-b3cc-d10ecc23c41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e86b7b-0d52-4a8d-a1de-569a73cab93e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39d3a53-1729-4716-b89d-13503619222a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654631d0-b31c-4bb1-acae-bf1aa3459a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dffade3-9c04-4de0-8c5f-55bb5875610f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "831387a3-7ea2-4be6-b5a3-96287cb3335c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c794df3-ceb6-4bed-b66b-879ce365e58c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fd2f03-8572-4f68-b41a-0fe0d4372673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51e75ab-c31c-489a-8079-7b4dee5eb22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2dea19-7c4c-4b18-974d-4c21d715575e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1928cd60-a6c5-4547-aa1a-904dd6958baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dfd7db-411a-465d-a0d1-efc27297dacf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce78a29f-9ae5-4c5c-83a1-fe32c0bda516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a62aa6-cbde-418a-9935-ae1ed101babe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc23afd-df5b-46a4-8414-81b7bf12d107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59f528ea-2cfb-4e30-b412-b284a7aec0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9145f94-adc5-487e-bd14-d0e0137e418c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4bc34d-2e24-4ad7-9659-a6f25ff416e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dc9bbe-921b-4aff-bc52-31895c8cb02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2babe60b-8cc3-4b1e-a097-916c3f918e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c404d9-16d1-4876-a9a2-457e9e3f61a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7107a897-b0ea-41c0-9c92-784d26b9007b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159257f4-e0b0-4faf-bf68-0fdecc5ca9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc8f25d-ee07-4ba9-ad37-fc45863a21b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9314e48-6a5c-49cb-bf49-e346cc329ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fe3733-cc60-427b-b0f9-bc8927f02fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab36bc8-668d-4e6d-82f7-ae16f82ffdd1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ee2757-21a0-47d5-90c8-251c466e167d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971bf321-32da-4fb1-960d-c0d0554629c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0234674d-eeeb-4777-8c18-a4dba796fd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "55192c38-53bb-4375-8cb2-af991da6c9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51507961-7147-422d-a461-0b4444fafad9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4354d2d-77a9-4ccf-81ec-62766fb4aa72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f80d6a6-9cf9-4c5b-b562-ba4bea0c1108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602c50dd-edc2-44a6-a990-15435d7380cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f001fc-5410-4bfa-a071-5048a999a0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd4c94a-5b3f-4b06-9c28-105d09620aed",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496eee93-e77e-401c-a693-a132d664c163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a7f70a-a24c-49fd-9c62-3b976cffe221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91acd025-f60a-42de-8b48-a3ae1fb6010f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "531f0e0b-c0f6-4193-9b91-4c922c5817bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8413ec-109d-46f9-afd3-d2186b751a55",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de21e71-25c6-47e9-a5a7-02e915846861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f4b5d1-6e9d-4359-b971-0adcde6ca302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817a04de-de77-452f-a6ee-eb6d9a75d44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37048b8b-2a8b-41da-8cf1-e2ab10dfe57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef68dfa4-0aba-45e8-a876-fa9efb8da3cd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857916ff-e633-4b56-b66d-ea0b0101ecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28398117-d461-48d6-9043-204acab16c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0aed57-4775-44b3-bc35-d659cb4d4f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e15f1d3-ba36-4eb8-94e1-fba7f8757656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef156fe-0388-46e9-8a30-f05406f738e9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6625b0b8-3c3c-4dc6-9c7e-37a9903bc621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d912180-1330-4ff5-8d85-c91459add785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c4b1b0-ee2d-4da9-bd03-62b8e206a035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "151c1ee5-0b8b-41e1-8395-968272446fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e94d47b-b392-49db-a414-c3fa6d220798",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff236c3e-3045-4e3a-a811-082da1e14fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6000346-279d-4df3-abd2-2fe66a8e1cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7cdcd9-f5aa-4be0-9631-d4367132c355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12badf2f-841e-4f16-ac0a-f82937c98238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0110d8d-2a46-4ae2-934a-2e6ec4d66092",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b653600e-46b1-4468-9fce-1b9f1f9917cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75520aa4-4eb8-4f14-a5a8-8cbff2334239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee493e15-e5b2-4920-aa4b-2a45c89a442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5df4ef69-6559-4a3a-a414-7668c7b2d511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88023454-196c-4bce-b2c9-45952cbf6759",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c18e971-ac2f-47a2-8380-ff45ae1ce2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a4642c-95ef-4c35-abcb-890be1b745cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe55f9a5-cdd7-4085-b4a9-53f4a452b891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb441b95-8183-4366-960b-3ca2f0449f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3279f0a9-965b-45bc-b57d-9cbd4c0c9426",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffca375e-6710-4047-ba86-1a6218ef0584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d870f97-41aa-4527-a7d5-630c1fe8f503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69abebfb-7386-42bd-9265-73dbbb5ac692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7844e7f1-0219-4f11-a910-fc10d8eee212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aded3848-e39b-4002-bb34-8be51c9c452f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d290f453-4fbf-46ab-8be5-ad6cc3c1c8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2c24d7-ae17-4221-9c0a-4f6c0d68a969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d70807f-cc61-485e-837f-4d01833c03c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b29da02-0f4e-4588-abf4-ac7177bbe3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1713b5-793b-4816-8057-52d45799d478",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59289cee-6e31-4295-bb81-61470c3e1a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4d9483-854d-4884-a62f-21b225ba7306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ce6cfb-9b6c-4315-b264-08e6eab334e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3097f45b-5e68-440a-b731-385da9dad6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b6de60-e277-4eb3-8f8c-0e4af615fb08",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15885f4b-50b6-4cc7-80d1-0aeff4a676ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7eebb8e-e34d-4514-b69d-c001211c806c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e6597e-c85b-45b6-b37c-5b3a76dcc381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b35a5925-f53f-4167-9572-ef7a67b67a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4382d5-6fae-4ed0-8a3e-f279e3a1ed67",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1959fbe3-892b-4f9e-8fe0-c25d2b012d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81cae5bb-c369-4a24-8187-8c5c527fe447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0326501e-be89-4462-a165-b7c51184ab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "857fea94-6347-4315-a27d-ba5b23a5c541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212fd30c-f25f-43f3-aa5b-8e7e940222b2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7967eb-9fdf-4916-ac02-f7201d1beb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3ff524-1f72-4cc2-a4b1-aea88ba1748a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f7a7ac-e793-487a-ab25-ac54aa1dcfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a09a2e3d-3d82-4183-a36c-4291f2c42d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce33f10-37dd-4a9e-b214-83b5fc4c9277",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b863d38f-9015-4a48-93c8-ca451d00cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54739ce8-1a24-4226-8b30-f7398d60fc7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824106bb-780f-499a-881a-c15206099b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69153214-0f8a-4828-8523-1b9c9edae656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7bff21-a46c-436b-b705-fb65c2b56052",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c155d78e-ccfd-407d-8e3c-87852d511252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b7c60e-b0d2-48ad-a381-43a5239849fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d639b3b7-9f52-4019-a23d-24ed9b8df563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5ac70d-bb9e-43d3-a2f4-1f1b1386dcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa96457-604e-4b43-b6fe-5c66f3ae5329",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f10916-859b-467c-b690-2b663c9cb266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9331ed8b-c38a-451d-adae-fecdf543222c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a7c5ad-ce7a-45c2-b49e-9ded703c8745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9b8993-89d0-40dd-b332-0b73efbe62bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3884c3fa-10af-4dcf-9dda-761d83ef52a2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d393ccb-7fb8-4920-bc19-ac9d9c4b68dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734cfb57-e77b-428e-bfaa-e4d357b690ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de12bf0a-6c6d-4e78-ab73-c6ccd1614e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeda76a1-5e70-4dcd-a2f9-fef998a81c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee63ced2-2bc4-4458-9635-4f87697280f6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba432797-bad6-4632-8393-a6fd1325871c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21111043-ade8-4afe-a8e1-236c6b53c565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc219f8-e780-4d2a-b2d7-a06ef6ad9ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2689da16-c0c5-4a20-b507-5460ed5eca31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18f5e5b-b9ef-4708-a932-c11f80584931",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f1a366-e44c-433d-a4b0-639ba6968bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92df0d15-8077-41b1-9f49-50bc45d531c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c0f3d0-fd9d-44b3-82da-bd6ced91c68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5916910-a08b-4fa4-ac2d-5a14a9a08f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feecb2f7-a3a5-4af6-a03a-bd737426b18b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192273db-b910-436b-8622-fd331e884272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f293cd12-5249-438d-9ed8-9e09ccd65c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0748f93b-d759-4095-8435-df794eafc874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "773c007c-11c6-4c55-9f25-97fd4246e69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab250a24-bcc5-42c3-a970-70eaaa6e3fcc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db352f8-67a0-4e13-8371-ccddb6789ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cbeb08-d07f-48ec-aece-8b459daddbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3c3fa9-bacc-4a6d-bf20-fc881658da7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e512eea-2245-4dd9-a3ad-a820fe32fd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473cd064-3fe6-4023-971f-3a20bd6da829",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e725195c-d221-4953-876d-269663eade0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21af6556-650e-43e1-81a2-8f396e594a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8b7a51-392d-4c81-b979-f8d0b286eb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "844d83d8-df04-4a59-b8ea-f937911113d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5575798f-c811-49bb-a79a-bb566d088360",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e965d5-63f0-470e-8165-b80995ae2aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7d1cd8-4030-4370-94f4-b90c96a1bbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2ff775-a638-4af8-9595-397619dd2bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bee3221a-1d96-4988-9096-3b3ebacbbb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b663e7-0b23-42fd-9e44-c2047d8972d6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60402c7-bb68-44bb-8543-fdc6f1cbfb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0098f74f-e06b-4cd1-93e4-6a05be037020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d2a402-e946-45ef-b09f-928d43f784ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41b54e0e-6bb6-4567-b095-f44c2181e595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd10c1f-14f8-4e7d-8165-cb9ab030ab83",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93446097-11b4-4b40-8e02-3b88ded0eeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea729e3-daf8-45c8-b164-0f5b0f4b0251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259c2fe8-1202-4d12-b85e-b20c792f4392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c54f78d4-b6ae-456b-b5a6-8b35676dbc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae57321-180b-485b-a5a5-11ae6d4d7017",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff040c8f-5553-44c3-9cbc-14f904b214e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898a3de5-8b86-441b-b34d-4202bd56cec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e56a57-e4eb-4742-b5ed-43c59296242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "898ced5c-4cbe-4c9c-a60d-0a8e6759ab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae74cc3-e783-4b47-8866-8cd5f659db28",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37be9408-45ab-41da-a3fb-538c144915e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70cb5e1-3469-4284-92f4-5863c33bce67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd09a9d-8c40-414c-8b0a-182fa819e471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b06fb6-ca87-4fad-a8bb-85bdeac13f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89daaee8-0443-4f7f-9d57-c6397566131b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19436a1-8fcf-4cb1-9718-d16a0483277b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8a1f70ce-b143-4abd-acaa-33ba5ee40c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08a36d0-5d6a-4e7f-a25e-b894d9543cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "722739a1-f405-4400-85b5-4bee70ea1c24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f68952a0-77d9-4781-bd8f-e5c897f4c882",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c5b6977-0cfc-4c04-91dd-82febdc4791e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b7c652-8d3c-4919-b1f1-6e834bb229c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3ea66b2-6019-4ae4-b8b8-36f1fb14fb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dd2055-48ee-4610-a5ec-356ffffaaaed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b933dac-80d3-4830-a8f0-cc05ceea20e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "644558cb-d11a-43d1-980a-dc4d6af47ee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b72edcc-03d8-4f46-b27d-7f06df35288f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a98fcff-2541-4896-b1df-ea88dfc04810",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe40c3e6-3c51-4955-8227-f3107a124214"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6dba4c83-4e8a-422c-b665-a88fd23ac425",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7412740-b125-4aec-9213-8d2ce11c8bc1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fbc45405-d19c-4173-9375-343669101d2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b8fc2f2-40b2-4e9d-83db-c2c5bf4465f3"
                }
              }
            ]
          },
          {
            "id": "cb6e23b7-7d86-4a13-9ff4-31eaf6b49381",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d4bf7b7-3bd1-462f-863b-14c4a7232fca",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a038d7-ae86-4bac-94d3-6fe0c46167a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c5c9c1e-00ed-4868-9a06-00fa31a2a9ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f875a8cf-2842-431e-8e70-60c29b6a8a06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a79dc05b-8309-4a06-b53c-698cc8839328"
                    }
                  }
                ]
              },
              {
                "id": "4465ed9e-b5ad-4d16-be47-26ef1b7c66fa",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a837ca8-0ee3-4cc0-abf3-28a37eba49b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d562f0b-2ba3-4061-a745-d209e99dcf82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d5eaccb-bc14-4686-951b-3ad2c7049cc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9e7a056-35a7-4a52-929e-365c8b9afe2b"
                    }
                  }
                ]
              },
              {
                "id": "a1669bd4-9183-447a-b886-52e00c2252e6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "319445bb-0a45-4acf-a7b1-40e205a289c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e34ef490-8734-4821-86ad-8553f226c859"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "411338e2-da44-4d35-93ef-98c43bd656c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "021b55b5-4a29-4340-8598-fbde9559ab98"
                    }
                  }
                ]
              },
              {
                "id": "3a8e3c85-ab75-4d9f-aa05-5bdf27295cae",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ad19793-4a0b-4171-a19f-1023f013b16b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5f8f454-31fc-4a5e-a65e-152a793fc6b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a8395ea-2dde-4a12-bf61-c7a950185a02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c2d078aa-c641-4e1f-aaf7-37d5c9dc2091"
                    }
                  }
                ]
              },
              {
                "id": "b86d8025-bf81-496e-992e-a1bcb7e16643",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a890000c-680b-46f1-9d17-edc5abb1a044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3dab448-afe7-4438-afc9-2e47871a26c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8166b19-f23c-45b8-b70c-fc79c518ac0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "39474815-9a88-41ea-a254-480123ed27e2"
                    }
                  }
                ]
              },
              {
                "id": "5cf2c11b-9af8-4793-9e09-66e706e206a7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b4affeb-9d4f-49a3-9be8-ceb34d372066",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f64ab129-a008-4714-a0c1-2da0a6197188"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "042afc1b-58d8-4a3c-9324-b03ebb8de97a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d778fcd6-70c0-4b92-b624-17ddc8fecf57"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bfcebec0-54c1-4496-9402-811d2e084d4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f21f55c1-b2da-4a69-9f8b-a143d31abc95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9508d521-dbaf-4e25-8d2b-469c969d996a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3dbf9f06-e83c-498a-8d7b-778be3a56b20"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ab81fc2-82a4-42cd-93fc-2ff0bf240887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "61bd7d50-6e7b-4ec7-95a2-23b91d559b88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98898fd0-9278-4078-8333-2e0af2afed9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "532abad6-8e5a-45f4-94e0-cb7494dceabc"
            }
          }
        ]
      },
      {
        "id": "b99d9d6c-3a47-40b6-a16d-538cdb2ce602",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "56b42781-86d4-4b02-bda2-0663e0c5470e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "381dddc0-e535-4366-ac36-b9ba92029c7c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "317dbb85-fd52-4e84-bc7a-eec56927f7af",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af533e8c-5f55-4d9a-9b1e-06df2d98d128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83957d76-3dbf-472d-a6b5-ca62a3803871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246865d3-0404-499f-8537-584ff1bc6e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c61b6e9-023d-42dd-9015-da8d27dd1934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a3db87-cb49-4bfd-83d1-1422488d10fa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29812127-3f5e-4d98-9350-a7342675512a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d312c2ac-7f1d-4392-a4c8-a5db930df9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d3a5a9-c555-4111-aa45-524cc9dcd254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d40610-da15-4cb5-8d80-d1a02d9b49d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212310c1-9cad-455e-a98c-f5e3c591be27",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8945f521-fc7a-4d14-a569-48e8be09f538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4d13a6-ee4c-49a4-aa74-d623c6a4abcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c205a3f4-3911-4f9d-9f6a-f382015243f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfd1745-a10e-4696-be19-d2b4b3be0632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec718ec-3a73-4047-b2c1-e5c14541bffe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100200d9-f03d-4c0a-913e-3b19d2d2039b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cd523d-fbd5-4cb9-8666-8917893153be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b27af14-f3f6-4c73-9ad5-436420ca8616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff4a039-1c47-41bd-82dc-24c237f6d74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32493e7d-6a5b-46ee-8762-61083fa0d64d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3ada8b-7335-4f1c-ba9f-5cba265bf7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf7e767-f364-468e-8af7-be7be4524570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8303a6-f992-4355-8c2a-a0a3f031ec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "371f70b3-5f23-48f6-b574-7fa501db5ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0ea65f-ebbe-4878-a8ce-1eeede2a4bc3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ab95ac-9f4a-434b-a1df-2c9105ddaa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543f3146-100e-4c8e-9308-03a5842d5931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa9349-d7a9-43b6-a2de-b682158c1d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a8c13f-79f4-4de6-9345-f47af04a190c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84beb4d-82bf-4dad-bbd5-58955a60b7f3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955e4c98-76e7-4296-aba7-c7cf81e235a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b126246-8731-439b-8eb9-7fff0d5903c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c0fdc1-c6bc-49cd-a5f9-25948ba4faee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f905c17a-ba49-4fd8-98bf-122818cafa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f960441-7f3e-4cc9-9b34-d3c6ad9ac9b8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fda901-efab-4808-8fd5-99fb62697b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1990fafa-b5be-4763-8abc-79c17e56acd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e258572-5f81-4224-9300-4235f8c23db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8b1d65-70bc-4884-a482-54df60f804ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e1f2dd-2b3a-41c2-b1d3-20c3698e881e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be1ced2-dd5a-489c-ba6f-6f7ca7dd5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384222aa-e278-48a8-8b18-0196c357a120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be10ac4-34fd-409c-a12f-92f9d9b84409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f2864f-872c-45c9-9db7-0c817854fc3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbd8ba1-5c49-4681-b7b3-dba077782c0e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc6eca8-c428-486f-86b1-9ffa9a571c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e159395-cb4e-4d36-ab7e-dfeacdf69ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaf4d04-79f7-425d-9355-552c5ae0a1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14e23ee9-b86b-493b-a7ed-ae9ea4ef5e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca01a2a-3e02-4111-be3e-e535bd2408e0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f446de90-3bb6-4c62-89c4-c70c6f5368df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00018d57-9304-469d-862b-22a74e0c9b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f5492d-68b4-4ffd-8531-3fc04b75a7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "05615ac5-e76d-43b1-bb43-ca2500bb23b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7776a134-a7ae-4e86-bd31-5c75f11ddda3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e89c980-d3d0-4364-82d4-0d21897afc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678fb009-c1f8-4d43-91f2-683d66b67b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6b83a7-4f66-48a2-8c76-e1bc6fe2f941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31cf36ca-4c41-4c59-a027-7c3e01a49217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea39a33-e736-4c32-9255-bd6636b53768",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44b2869-d866-43d1-a4be-3e4166031701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb48a8e5-6612-4d4d-aa9e-13a47907e4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996a666c-f18e-4fbf-a8aa-6b25666bcac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a730b3-2f26-43c5-8007-81a2e2ca56c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9706c05-cab1-435a-851b-6a0c34455735",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e34965-15de-4441-b2a1-7d5a299e5654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82996474-1edb-4fc1-b0df-65fcfeeb4a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7411869-1297-4f10-8402-b9b851a26880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cccf2899-b193-42ab-820a-7ffe8dab4843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afa50fa-d8ec-46a7-8468-33940f772787",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7373da5-37eb-453e-b073-04c4f2de4459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64a1e54-5401-4c6f-8d01-390e637429c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264bcb0c-efd5-4b71-bd6f-509b35289963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcded94-d7c1-40cc-b675-d0478bf74bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5245ea-f54c-421c-9753-dc03e5b525d8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455dccd4-e748-4e2b-a1e7-a5d2ee48ad5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d1ac2e-118f-4f21-aa11-012012e7d1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0278555-1a16-4dae-aedc-ccf5d7d0432a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c83f84-487f-4a91-8043-f59987cfd579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de31005-e964-488d-928a-362a18aca40b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da27f157-a30c-4cb4-87f0-45e9672e0fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75907a1-f64d-47cc-adcf-738dd149b977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51ffc00-0373-4b81-ba95-b2b01ecdb219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "951a8a20-44a1-404e-adf9-5c25a35fe8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c1a30f-0d9d-48d8-a799-27a194fe6b01",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faeec35-b98b-4186-a03e-2d8ff5b32885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1757c65f-fd82-45f3-a23a-fd45087180d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48f4bf8-2301-4d8d-a88b-b9fbad251bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed44facb-a19b-42d9-b7f8-ed30b1e7372e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7a84e2-cfeb-449d-972c-1e7b653f92ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7932119a-5d35-403d-933e-8cad75579a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5dc09a-b1f0-44cd-b795-457cdca62810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf9f93d-8495-4f9a-9fc3-2a8a74fd5c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c425bbb-6ce0-400d-9c47-0bcbadaa496b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91087ae7-da0e-4530-99ac-3c5d64d3c48d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8818cc20-88cb-46c3-a179-a996477c5d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9b544d-a8f3-49ce-82b0-872b45039c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b5c9bb-cf8a-4eac-9e4f-a0b89d7b4a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f310950-ed4d-42ed-a60c-12a6f042f32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5800f38e-45f1-40a0-ba9b-57103a34dea7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085b994d-168c-4380-b0a2-f65c40c3f1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0bf220e-7029-434d-8404-9174152cb37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fe1316-2636-4adb-9b12-fe8685ceab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa428aa-04e7-4cc2-8c5a-ffc9c2748f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02962c71-ac9e-408d-ba91-eb9d9e5fde47",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0708fcb4-f751-4cbd-877c-a38438686e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514c1d9a-2912-419c-a389-eba5749b8971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d52be8-73ae-41ba-a8da-72fb466e8677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5518a7-10ac-419f-b2a7-e1b0d1e87905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f560cc78-ef31-40f9-8097-954b11dc49c9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c113e47-a4ac-4f06-b59b-526a1e1495f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0af4e5-bb52-403e-a768-aab358ffa924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d01679-3b3d-431a-9cf1-6c50a6a8a372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b11b70e6-b2d2-4217-b3ce-3d738ca30c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae2ff8a-f61e-4a45-b443-ead2c91265af",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfa0c0d-249e-4e36-9a8e-59cc476483d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f520d061-882f-4d10-889c-099e9f826587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be5afd7-5aca-4b6b-a8c6-74bf57b7c698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dff9274-bd76-47aa-960e-0581f0fe5446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cf0d3e-f19c-4197-9b6c-40e45c0355e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95db0788-1548-471d-bf16-cc5f5ed1079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a364c824-575d-4eb4-9596-22f7c06af97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4ad2fd-03ce-4218-ba9a-f1a11dcd89bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31c54f36-499b-4c8c-a9da-fc490ab8fbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057aa31b-6f76-4709-82b6-5e1c64e78798",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4931fd-a9d6-4f3e-a9b5-a081c8dc9db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e627431-21f1-4ced-942a-302a7e4c8918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1a4258-fff0-42c4-8bfb-d94f453c58ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60bc15ba-d81a-4859-a233-5ca3313e555c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb29118-79a8-44a6-96df-bc4486d6d784",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb65cb02-2081-4795-89af-968dcbc718d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d13e349-635d-4560-a159-c29447488b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1855624-3e8e-46e2-8bbe-4d0b051dc312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3eb331-de08-4940-b000-75b794f9e499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e60558-0102-4de5-ab7b-e6c7f8f75be7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4858040-ca35-45d1-9447-7d01f23563aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc2cab7-afab-4ca2-b9de-23339b637cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0044bb-5e65-46f5-9eee-38dc8eebb329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd02686a-955d-494a-a540-a27a822d7564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0847a82-5f3d-43fe-87e8-09ab7f787c69",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3a3b6c-e2ed-44d6-8739-9d0ecd6df13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc07393a-ca0d-495d-bf47-0fb3165e14d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09720495-c5ed-47a0-8fcc-172c6ef7f5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62610f4b-4bd8-41a9-804e-c4d9a0c89460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c649daf-ab8e-45ac-96d3-c05583184649",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9640f7-0c67-4a7c-a487-165a2abc932d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33866bce-c912-4412-8566-ea42b61a606f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26835ce2-1351-434a-9315-50fa6f4b2c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73dbb32c-e4f2-4466-af4a-ade0de6ba4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4db71b3-af61-42f7-9109-29decec923de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4366df-fbee-470b-a17a-b9075fb2bd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a23e551-ed70-42d5-b158-89f1edd7fb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d15bf52-cb12-4f3a-91a1-c4c9817fdd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc5338e-c7f3-406a-9c13-b8bba721e8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5716b48e-c9f0-446a-bc67-c31962c35dea",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca8b81e-89fd-4691-8c27-f42395044c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7752da62-2058-471f-86a0-1a5692098f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435fdaad-6143-4c03-9c5a-e60ed82a5757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78010eb4-9c4a-42c2-9006-0de5d5187192"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48dae9e6-8795-41ba-852b-8e7446a13a2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05ceb928-ab15-4cda-91c1-f68de4b1d84f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f634fbee-94c7-4d04-916b-3f153a730ffd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9eef1b4e-0810-441b-81f3-82c8a6212b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05fef97-02cd-461b-98f1-5e50439df0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dea9b3f1-c321-4dab-ae86-9f9bbd3ed0ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c844f209-8835-4618-b36f-68a166364f72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dc12e72-8053-41a8-b5e7-506b94e9387c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "854ad24f-4141-4b34-b55a-ce7bc527f4c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de79ec79-09a9-4dec-a605-08903d71a5a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a45af5e-dc32-40a3-a845-267934951495",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5c4ed043-47d6-4c2e-a86a-127d3dcc9528"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "986da627-358f-40de-aaa4-34683cae232c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f384c60-89c3-49fe-81c2-8f8705b5c372"
            }
          }
        ]
      },
      {
        "id": "0a6db141-9fa4-4d8c-b4c8-2b1ea649fdf9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5ef2c447-80b1-4abb-9ff8-1c78d8ba448c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d69d7b5-2a34-432d-95bc-0fe2413f4119",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4012c6c0-5c1e-4073-84c3-2733999ccfc3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e5442a-89c6-45c4-b2e3-4b531a498ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bff85f-785c-499b-8f44-f225a507ef83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b635f2-3676-475e-b02a-33a22bb91dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "afab6510-df0a-40b9-b303-2dde8a790683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b275725f-87e9-42fa-bf49-8ea6360ea79e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43eb2ab4-7e3e-4c9c-a086-9f92b430dc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d24b56b-03c2-4cdc-99e6-36fc555c68c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f11d70-bc8f-41ea-8137-4b0e3c17d28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "534d7366-9739-4d33-99bd-847a95b396c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fde1207-e692-4e76-be1a-e5217700b1a3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4404e2-ccdb-45da-9d9c-a2b3a5bdf762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb2dd22-8fbf-4029-a4e4-ab12bdca1d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b108cf3-ac22-4d1d-9847-58d93d443666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0499aa-b93b-4abe-a935-b7d3a4f9fef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ad16f5-421e-42d4-8513-410fe752b60d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f993bb-da48-4da3-9b55-ca461ed637f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a593dc86-e57e-484c-9586-236670f5edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da843281-97ee-4ca8-a2a7-b6cea72626ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "021ee5f2-2b3f-4a57-b483-87bb485112cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b6b3fd-d128-489f-9fb2-1bcc86a787fd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610eeb22-bebc-4d8e-91af-a38d7ff5e481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed472cf-501d-4a0e-b95f-95b448790c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6947d7e-aad4-4d57-bb35-30cd03da6ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ec94de-aaa2-493a-8a1d-4900ce8f8ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dc207c-56b0-4d13-b902-a18af341c511",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e16d4f-a417-4575-801d-ac2aa7cf6d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f72115b-da1d-4055-95fb-19cd7a42a177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb2d151-ba19-44e8-b917-bcdc9206371d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69702e6-69f8-4f5b-8f67-baa186763063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0261ff3-2bee-4f7b-8ada-50e0c90efeeb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c30d4a-e1bf-47e1-8868-cce1b17beefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1030b7-90ae-45c1-a4c8-e7ac265bfe57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa98c4a4-c7aa-4325-9032-fe9ab89de90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "29620dcd-53f0-4277-b9e0-5dc7ce37e9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f357a1cd-c52b-463c-be50-3dc802b19933",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50388729-66b5-4c54-beeb-178d5e612764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48ed464-eff2-4514-9954-d9dcb91869e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf75f91-1167-4f96-9588-3ac596d2132d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a04121-3118-49a2-bee5-bc4d91c1cf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fd0176-0768-4c6b-adc3-1d7f2821a789",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70efd9f-fe70-4135-b4d4-680114ba8d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711c1a78-7aae-463e-ad59-eb0994e2e9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d797a03-fdd9-48b8-bf71-dca2045c0413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac9c785-7397-4621-ba7f-79981bd58f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b569ce8c-1d82-45c9-82d2-811a8ac36177",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7857668f-ab0e-433e-958f-550331e8578c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386b2ffe-d4a8-4e9c-9eb6-5761bc3b581f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea821114-7e90-4680-99f6-8dda81d9439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d623f148-0761-4019-b7d1-0b3c22f6c893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7bc653-82f1-4875-94dd-06d061b7a9d3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6445fa97-8a28-4fb5-bf7d-2740c6d4edb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8859fe-a7dd-4c69-9924-053882a83764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45be5cd-7289-4ba8-8de3-52a04ab02a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a0710abf-54a7-4ac0-88b9-6e7d6cc0d29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996579a-2556-44aa-9dcf-f51cff2d6f28",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dba2caa-53d1-469e-a179-1324e89c5529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dca822e-a475-4d65-8a92-a59dc082fdd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b4b2e1-25e1-4327-8c87-7fe88cf8699a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdd1cba-52d0-45fc-ab41-6b6e5cb76a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9661b1f2-6136-4bd2-9603-c798a708fe63",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60858753-f952-4c4c-95bb-6427c602cb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d36832-f22b-4ff9-bee5-c88b0080c522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eda00bf-fd79-4920-8847-44a5f737894c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e415e8-f72a-4d4f-a7d1-1c94186dbdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8145a80-e6e3-4dda-9c6b-2619b0038722",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb290cc8-8261-4d6a-aa5e-e2b1be7d7738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9d3f04-c70b-407a-95d4-cd0fc71801ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a0335d-d32f-4a37-b65c-c4dbd7151398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "336e5aac-7cc5-4be5-a204-00ed6beeb7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee57cea-ff5b-45e3-8a75-62ed85e21831",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efbc903-afcb-4133-ae3b-28a5538591fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77806b4-4ce3-432c-beaf-4e48b73f7964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2068b1-e2c2-491c-80b8-e8dff36ab5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8477280-16da-414c-9598-6ffdae942284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46838bcc-09f3-4257-845e-d12f48877e11",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9758e956-9438-482c-9670-959a2aeefe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d180900f-bfb2-4eae-8a9b-9c5deec74704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e576b7d6-4017-4fec-bbcf-23cec0f67f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f023d7da-d60c-4d5c-85bd-0a98a627b9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5801829c-f6db-4832-a062-c6daf09113f7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca71399b-4056-41d8-81dc-9952d3e5fe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95acf98-3a86-488e-a484-6196a6c325cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308e7c9f-64ac-454e-950e-d626b7a34dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b7c186-7f92-4143-94fb-9eea46acd9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bc04fa-673b-44d4-bfe9-c7085545cdb3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b8d561-75fa-48ca-89f1-c8b7c3e07686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc2be9a-80fd-4164-85a3-41ee5fd3b9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fb00b7-44d9-4c84-91f4-10b4dc934d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf35e0a-d53c-4190-89c7-4591f52a5322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0068c322-1a08-4328-97ff-7b08e77e027b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3f800d-baec-4af2-897d-6dc6242eaa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a576b1f-c5ea-4b0b-b7a2-0133dcb52b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9620450a-c6f7-4c43-93d7-d3d7df196b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3a8488-560e-4b23-b446-3bd3690bb714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167593d8-7a70-42a3-80c3-45d4a57598d6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8eb3df-5ead-4f76-9f92-774c27eab2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deee472d-b4c4-4977-b701-60e52b436dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3975ee86-dd41-47dc-a545-366bafe86607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65f4544-1906-46cb-8faa-018025ebe397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15ff5f1-e5f3-4c6c-bf5e-9b08a3a6c64f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c04c63-d2e5-4819-ae2d-7e5d20ffe77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1247defe-ab42-417d-ae03-656247c7ee60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3f6341-2ad4-4d5e-9828-601c2c7a2ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "559f01a2-c576-4e6c-8bfa-51901ae87a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3399271-d3a4-48fe-aa29-f4e1d8ad4eae",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb65e977-7e52-42ce-9f6a-b3db85cfce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad32f4d2-9db9-4c02-8495-82dba4f36be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396dc547-44d5-4d03-9592-c17d7c5c811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4d4265-2dac-4001-9055-01ab32f53732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e92b1d-3d02-4319-b4b6-d76432cd0e76",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a260019-e0d4-4e26-a6bc-52e769487824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094c8021-6046-4bd7-a18d-8988d9bbbf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df907e7-f22d-4515-b700-3753b6fd183c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f4b7ea-3db3-4dea-90dc-9b90abd6b282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a234c7e3-4c4c-4a73-a70a-03d28cccfbf9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4235e225-6705-4154-bce4-33f4f5799a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e186cf-184d-49ac-867f-6e65f78a7202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3111ded0-ef7d-4af1-b5de-27ecf37d9e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bd04ab-45d7-4e2d-b7e6-8b90435cdbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5072d684-9c72-4c07-ac1e-39aac46e8a29",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dad0205-aa81-4263-8707-c5be52cdb230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7c4a65-5796-4e8a-95e6-5f24e5629078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f877ac48-3f22-47a2-b29f-008871f86330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e894a93-599c-495e-ad34-93bfc1a8e82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e87ed65-e2cd-4cb2-b00c-eabff77137e3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0b9a91-ddcc-4afd-a474-8c764225d541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ac3271-058d-4583-a96f-f53f80018a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc3b1c5-9a6f-4e05-b7a9-f93aa4d604d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3da039-a44d-4aee-aca5-32d87f6a93e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0134e836-8026-4bb5-a356-372e77381267",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9966b02d-730d-4926-ac3f-89342bd863d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc095526-7894-475f-a152-72e21c3cf09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cacf3d3-a7e0-4f2b-973c-d1067d54c569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2efd62-5b93-49dc-80ef-60d7968bfa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5928b4-7417-487c-b60b-fabc67224b7f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07b264e-6533-4032-a921-c9a47d99ec78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe176218-01e2-419a-a7b9-e4b41dc97ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9261c04e-0218-42b3-b3a1-1d4191a799bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0b9b0c-23be-47a4-9d24-30e3164854f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b5f6ad-9085-4a1f-958f-189744cbf580",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66256d4-d2f9-4bc5-ba0e-25b60345a122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d4ffb6-aa6d-418f-ab41-42c055b22e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77564bac-6115-4d6b-90b6-2ee2c5d89205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25b1d87-ac31-4b6b-b7c4-6ccfecb0e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f762d7e2-e0df-4af5-b438-026f39a3491b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a54374-cecd-4713-ad2a-b96adf367fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c8297d-eaf9-46f5-8eb1-362e26de14a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a8cb8a-ec5a-409d-b5a6-11092d36fe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "374919d2-8c2f-446b-b1c8-30d165de8a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da82797-2bc2-4212-9c46-2c3534b4c408",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a789c27-ccc6-4de6-83fa-5e5507b240a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbedf514-dcb1-4df8-bd66-48756367b1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915dfb43-95e9-4db9-a342-996659a309b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88186e30-c8ec-4655-a955-54713cab1174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014a9952-8565-4325-aab2-11cb13ff66e6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1304ef0b-8789-4d0f-9ac6-a2e06b6221bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95a60e4-fd78-4eff-b5e2-da02803b8caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5cb963-f308-439c-9e48-e8c302371dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1c83cc-266b-487d-8ed4-543f22ea1ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a126f187-a5b8-4aff-835a-0965e01a3b31",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1878360-a4f9-429a-b531-11880dae231a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7da1bd-2206-4e3f-82af-9aea061b241f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ee8450-3bc2-4367-9712-62161e74ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb02f3c-36a9-454a-a03e-710716ac2d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc3c665-6ead-436d-84e8-89d31bf35f27",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df70a4d9-5fcf-42a1-8993-be031cd6f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df3a63b-c162-47c2-bcc5-6a4925060c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906ce796-fb00-4097-a305-181d58bf7a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4371e7ec-dc90-4430-baf9-da41be02df38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe859e8b-0501-4fb1-8c93-f25e0fdadfde",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5146a8-45b3-4ac3-8ada-6f281120d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2644b4-7416-4d3d-b2e4-54eac6da79dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cfbd4b-b287-44fa-89fe-3dcaeeab8f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b2497b-9404-48b7-addf-58b84a62237e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1805599-0337-4479-95ad-de72fd4929a6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d69df9-1188-447d-9586-fe69e79d55d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f42c87-3370-401d-920d-a341f5d3d1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d79c6-c5f8-4268-9fea-884bbb3f0355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d63bfeb-5ecb-4370-b465-0858fb0ed34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c235115-0e81-4bf1-89e2-db9f4733a5e1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc81ddb5-ff15-4708-beda-402609a10fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbdf1b6-313c-482d-a5c3-f7f5565ba2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01e9e8a-e036-40b7-af65-fd1e34845985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77351e33-ab28-40c5-a6fe-fcb2bdacb405"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c9712c93-575b-43fc-a83e-28aed0fd4c6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55ee7bff-aa72-4cdd-856e-f623bb5716e7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eea327-a9ed-46c9-8cfe-0440978831ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d742b52e-82de-4141-b92c-e550ea5d7972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932cafe5-ae38-4eb9-bcd5-60985cc79f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6601d315-0ff7-4bde-9ba5-765e85394f43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e918963a-a7f3-498c-90c7-0421edbe8dd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dfeee80-5419-4f95-9f4c-7742376342f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3f1eb75-45c3-49f5-8f2b-4b90bbcad34a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95bc5a43-6a62-4cc8-8422-6323f59f057a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72ac0020-ae26-4943-8e32-f1fa8c84468a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f8160b14-ff47-4197-bfb4-2d741c8c120e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41e30aa0-1370-4cb1-aff2-f57277415510",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e712645a-b750-4823-a825-62af14fe2c10"
            }
          }
        ]
      },
      {
        "id": "35250aeb-8232-41bf-bc48-961a4cd38a99",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fddda59f-58ec-4ab1-b43a-67b17e3c3f58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a01700fe-1b69-4ce3-99cd-0686e1ccc7a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "384ece43-279f-469f-a483-e0fc119a5cdb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c681d47c-a3e3-4676-9374-16ad0ba84309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ead1b4-18d0-4f75-9a84-12c472d7ff09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35664b2c-645e-45e5-a4cd-1eb9c5347234",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04ddbe6-5f33-41c7-8e5c-488ea07b5750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f22fb6-a94a-45ff-8000-de5d4b09c39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8dc67f-470e-401a-9cc4-5bf6ee0a2f0a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801a681e-42f4-4cc7-bc6c-47d4219a55b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6137aa64-1f60-4707-a5a5-f3bb47637d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f874135-a725-4d7a-a030-8175a67ae578",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ab0259-f198-4e07-b460-a908ea8ea74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858e4966-5165-4d07-83ce-d46653c38de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc4e2d6-0ceb-4d2f-83c6-fe7cb223982e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b0f34-606d-4f79-a788-59362a844b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03a1216-c502-4095-a022-746eadd4c4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e0ba5e-cbe9-41e6-83cc-48a97c7ccb55",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c0b96b-ec56-4e3c-b347-b82ada47830a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8460690e-38a2-4cf4-b5dc-35b28e1e3f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae2f58e-88d4-4e83-aed5-bca9441d0a5a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7755f5-a620-4c3a-84ec-610c93892a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a05e01-52d7-49bb-baeb-7941a85e04c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1ca2de-2c1c-4883-9ec7-290b9bc6283b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87ccf66-530c-44df-82c1-9a74c6b88083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c504d73c-d560-44dd-a38a-fa6f149f535e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11334a5c-1b6a-4572-8234-d9284a29b817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b5bb42-3b17-43f0-995b-905174210973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54076288-d8e6-46a7-a6c6-52edd8dac80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d88e029-e25f-400f-af55-9f0a61c77a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbd0884-98e9-405b-986b-f773918495ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3011b8d1-9114-4552-b1ae-b83e308ea873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d5b1e54-7dc8-449b-8780-77a768ba5d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efb022b-0f9a-45bf-9890-35e8cb91051e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c82446-d17c-4952-968a-679eb98ac429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab59d32-fea4-441f-88e2-f8431656af2d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b602135-b1a7-40bf-ac03-e828d74c41e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea23a37-e885-4aff-811c-dbb413cfc24e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4d2184-bd55-4af5-a5de-7e6e2b701fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc14c00-edc6-412b-a995-a82ab3dd2782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcd3bcf-30a9-4964-8cb6-856e66c39ee9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688e029e-2400-42d3-8796-63c0088356a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e63fd11-6095-4993-ab74-bb3e3f0742ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8905373a-914b-470c-ac47-ef87de4cf9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1743ecd-15e7-4e3c-8bb7-730b4aade04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb22aff7-d95c-4595-ae8b-d7dda8fb9fc5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6d039b-d90b-4a3b-a018-42f2cb63e8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0090a999-99c0-48cd-8fcb-8144b91d69a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73faec48-2eaf-4149-b9cd-53ccbb0d0a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad436952-57ab-4a88-8ff9-19d48a0d317a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0ba05a-a741-42c7-9577-798c39da12ec",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2201f0c5-12b2-45b2-8dd4-5093cac0a1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f36f2e3-0e14-4128-91ab-065244c7e58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230ecfdc-702c-48c3-8a31-ce96e7d8fd3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46f6202-10fc-4ca6-83e4-e638e87c246a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4339212b-fb6e-4cce-b9b6-cba12d0e0518",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3bd800-0441-4aa1-80b7-67c37c21d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37a20ee-82ef-4725-8f25-58f2a6dec331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b213cad-1212-4628-9d37-3dbfef7092ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f33a66-c303-4b52-99de-7998b4f210d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f06255-5b69-4d3c-a3ff-e7e75f002451",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49eb6b9c-f176-4755-9806-ad7bb1597b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f8d0e0-de78-444d-ac30-bc0a9b876cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f7da69-568f-4da2-b4b9-8c7e88a38313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec1bbb4-08bd-4245-9317-750f35e36300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a403507e-c0da-42e8-a2ca-11438332e666",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9797be1f-5207-449b-9d4c-168efd807b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0f01c7-a3ce-4235-86ff-d499954a9111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6eacff4-ceb2-4f23-818d-62efbffc06ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba7771b-50e3-4b5d-aca3-f6bd2df78e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc2fe84-53d2-4838-afb7-0ac522cda968",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934cd3db-585a-42d1-9175-fd5dd8a3b2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318b6678-a72f-43ac-bb8f-fae08c61c4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd352202-6261-45fc-addd-370d924a0361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb711b2-70fa-4e77-9789-77be07299109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d95a966-a43d-4ee9-afab-5b68e9265e95",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74dc2c3-71c9-4817-bcdf-731709ca4752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3889783-b229-49f6-bff8-395f78d49474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a6d5ba-1d0f-408b-802a-ceaa0fdf0abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02be43b-e6f2-4531-b1d9-928da6ca66e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346c7b48-0b29-4073-b112-203995e5ef25",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0a068b-4398-49d3-acbf-d9f69fae03ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49415f1c-8765-47f4-828f-866f4eca9c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db55f77-d054-464a-ae2a-790b79292c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31abc13-faed-4709-ba4e-ee03c103f70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a118c0-5844-432d-b0d9-8ecad6209465",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cde24f-85fc-452e-bf69-305c12e76506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9aa958-aa24-4fb2-bf42-9cdfb6277012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be28aedf-0d21-4dfe-98b5-ba7d817827b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b330ae-a52f-4b34-a486-19981776d1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a4dfa4-6b06-44c9-a458-d89d88638ffd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfd7171-7ae2-489b-8203-19718ff63d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53efd81-1d69-41f7-8457-2f39798c799b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5563f07-9544-493c-85e8-98c45780ff7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef6eea1-12a0-4d17-81f7-9bf8692ea3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce90995-8375-453b-af3a-7c7c7bc38814",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0f3a74-c95e-4728-9421-9facdd99a4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1f0b34-5298-40d6-9e3c-0a25fcdd7df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de66d730-8216-4f73-8fbe-03ed5d362f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41b7535-4ea9-48a4-866b-e8c6f7ba773c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17763250-55ab-493e-9a75-4c7a8412dac1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd664f9-35a1-49ae-9d08-3dbda46b2a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85b5742-8b4f-4fb0-a561-9ff6f5ad08e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bb8f94-2c66-4074-a62f-218f05953d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff600b7-f033-4a08-bedf-312491d6d371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaf2ebb-bbcc-4ee0-8be4-2d453353fcb1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd12b5d-4e2e-4b48-a05e-4c7a80108202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e411b230-5629-48dc-9f51-009c46395acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee8f711-f6d6-472d-9109-3b3e005d5118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4139810-b00c-4d08-8ca9-d238154a2b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cd77d7-60e4-4ff0-8c19-874d1a823353",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d12d08-10da-401e-a54c-572c49038d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44447351-55ee-4189-a6a6-3108141c302a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692541ef-4497-47c9-847e-06607d06e8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447af37c-3330-4078-9ad2-48a79ae90dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66917dc7-1e46-4beb-91e4-218af9ed7119",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fdaa6d-fa51-400c-b7e3-a16abcd37aca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d69f866-0d3f-4991-8e41-19d6630784b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f5dfdb-3906-4f73-a67e-84eb23cd466c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a3853e-e912-4062-b5e9-7f489d5ed506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d9b732-aab5-4736-921e-a7a54cb60b8b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93c0429-e5d5-410d-9c78-f746dcf55666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3ed31a-4881-4079-b93a-d6a6eb2db57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378289a7-6500-44ad-8209-90950d8cabb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed1a5f9-7886-4976-be91-03ae0e68304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4813f116-75c8-46c6-971b-230c8f216ec4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d6e894-15f8-4f5d-88ad-f5eb8dd0d92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4d6f1b-9e58-4f3c-83d3-382996b2ecf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6503b6b5-048a-42ba-8550-64bf400504d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7975b743-36b0-4852-8f52-c5ff28ff7481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d396e1b-ae2e-411e-907a-b672fd07fd08",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9979cf3d-f452-4bbc-b612-6c07c2a094ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf3d1d3-6f96-421e-af5c-c4c7ce652b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78171463-8ce3-48de-a957-04b74a386501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4c12a3-35e8-4362-b463-6d556372ff28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc370b2e-35a9-46be-8d89-c374181274ac",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee94559f-38c5-4e8d-8870-44ff5a4b1e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4473d81-42a2-4fd2-aef6-2d0845dabbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c991746-4061-47f1-a730-ddefdb511ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dab7435-b0bf-4c4a-abd9-8d50f0cea613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2409b34-7f23-4111-86ea-dbea9fb1b7f0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dec2ff-46f0-4a05-bd40-947620a20724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a08b45-2753-46e8-af7e-dd6e3fa01aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981330f6-dfff-4c99-920d-07e953a1ebab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74937cd1-f459-43b3-bd7f-8f62751ae837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c7d2ca-742d-48b4-ae36-afc4f077a1ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4048c8c8-2a2c-4757-aa14-42ecb7bd6c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e464ebfa-3956-45c1-aa17-e4a8057d5d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe10024-13bf-45f3-a0bd-dcce1f8cc954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49e7f32-cff6-44c3-9173-97131ecd7c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb624b7-c9cb-4306-8406-835132d1b52e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227061c7-5954-4b16-8b7b-9cb1781071c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0ca19b0-6342-466f-8ae5-5711530a6a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb6c378-efff-483a-9d8d-b9d65f740fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afb2026-2a8a-4172-be2e-81945c518068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab8d1c7-65a1-4cb4-9050-6b9e1ccd9afc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c2d6a1-6209-4276-8298-687bbf077f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f3c583-83db-4d2a-b1e6-64d09b1a79bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5541e1d-2c38-49e5-a4fd-6c96d66dc33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0b0e45-43b5-43e8-b778-e1528709229c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338c484e-ce19-4e29-acd9-3719766883da",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29207e8e-1d6a-4bd9-8d96-b63504302b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edb7db5-d37a-4455-b75b-32bfa6c48a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca84669-c263-40f3-a5e9-a7638c8dd845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59286a8f-6178-4da9-8f94-deed3d93809a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f37f59b-d4f0-4131-8f25-fec167340a80",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd12cf94-a807-4188-956f-cf64af439602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c636cf0d-9368-4c1e-9da5-76c28226a9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c8c1dc-8d18-49f4-9b34-09ede31a0e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b87844-e580-4320-aa30-3d5580cf05e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc832318-3701-45ef-a85a-08752578eca9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd20678c-ef04-45c2-8d5a-ea9222f5265f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5df16e-6f58-4176-88da-ec6c9e5278a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b854438-e142-401c-833a-610aaf97b0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a576bb-6e94-4991-affa-376a03e5ac98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec80d64-2e10-4d54-9438-50c0eeb65620",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2d585c-d38f-4237-a226-9e7c56f11953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15dd689f-2285-4a84-b05b-6bacbf0ad6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ef60d0-aebc-4592-b9e5-dbcf4f34dc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3124317e-450c-4911-bb27-d0943b4d700d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6341b5cf-e1dc-4436-9544-bfe2ffcfb9a5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6412ab7d-98e1-4877-8ccd-0575419722c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8140cd-d7f7-4ddd-acfd-5a70d857164b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c977064-f953-44fd-ac80-7f8d1db018d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fad2b3b-823a-4072-b25d-4f2410a4cde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d9836-f1ef-42f2-bd0a-ebb4a9edf558",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df553010-b4bf-4b6a-a87f-294fda3f94ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87157a3-91ff-4f63-b27d-e93fb65dff18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc4c076-4d72-4d3e-9518-436c0a5a4c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974df7c6-c6a6-44a6-8f90-568a3e571229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d831e53-0b6a-4e52-af67-d0a3f99d252e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23f735e-cefa-4de9-9279-dce0d01dd24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6af1842-84a3-4062-93da-6e5d5a3b87f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ddde42-fba0-45d9-a6b0-3bcd9807a53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83eec60d-3da3-4d44-af56-b5146e8eddf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31137c4b-caee-4540-9408-14dc3d9d1d5d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4851a0-7cbb-4996-8c80-3b66e5ff39d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5de13b8-39ca-46ce-bd71-1ee8386336e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee344cd-819b-4d7a-bf09-d8dae3acb92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aacd42-43cb-426f-8d51-c4c9369573dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0958e2a-fddf-4855-ab57-3f5ea166bd66",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0bf619-8851-4270-9edc-31ca29531705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a19637-61b9-4f9f-8ab9-013d84209fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f45bc-9c49-461a-b333-0505c6ea98d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51687990-3624-4203-aa7f-b5d7f522f493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f864ce5-adbd-4130-8e4d-fe28ab3f9132",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03a3a16-2353-421e-a7eb-7970423e271a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648f7752-ae03-445d-9f57-73c72b928c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8a9c6c-f034-4e8f-9d13-ac70452e2d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c1bb36-43e9-4c4d-9a24-c4c269d0e552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902067e0-27fe-402c-8bb5-b0f34bc476f2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b609f3ed-9cca-48fc-9d0f-851e7a879133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3644d762-e84f-412e-9758-e299023aed49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74db3c5-1113-4b39-ba51-ebe6de743862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b6989f-19b8-422d-ab4a-3b17ad3e0ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4ce0e4-99b8-4cfc-bbfc-5b0067f9beb2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509f7b71-f787-4f13-a6f8-a0c02ea31e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2a3b8f-5a0b-4f84-919f-70d841be6e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea63ee-bb12-47ae-9db4-c488f342fe19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1aba036-b1a2-42a6-a55f-3062ff66849b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441e0ac0-d869-4b1c-9acf-3f838b74fb0b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a37ae4a-c08c-420b-8d72-26ded9376cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ba41b5-e2b1-4253-9682-a9bc6c801ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8cf4c9-d9c7-43e0-b2f9-e4e22db2d3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e471afc-ab7c-48e2-b2ab-40e7f78b2014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f72069e-1aea-4086-82a0-8cdb53d9b231",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0448bd-0b74-4508-a0a1-514eb6e19bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c948a745-3d13-4c60-a582-ffc29974a733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2256df-b70e-4e84-9de2-6004d7c9624b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af23537-14ab-4dc4-bfdf-e13d320da147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec8fbf7-c378-4426-9844-0f508ff30299",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2df9543-8226-41a4-b043-6002479dc961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d51954-7fab-4aa5-a5ba-3c63e4cd4c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7591f376-eba4-4b12-8d87-5ff032baf853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18247d2-ad5b-487b-b320-0b60206b3e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205717f8-a6b3-48b5-82c5-92c300f023e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f704c502-4a40-4690-b747-4143f06bd59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbbb36f-c4ce-487a-b184-7493c3b64774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eabe41d-0597-4837-8f84-110c373bcb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6556075-b7c9-41c3-8b93-b941f85f5957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fb559c-f033-4889-b7e8-f8d2b2cc274f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce4a480-9e20-41ee-a91a-0c0820bff2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562f1cb4-fcb8-43f9-9f70-cfcb9b171790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08f20a1-fc8d-43b1-8ee0-8372294a28bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c02247e-f644-468c-ae4f-258919ffa614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b6e59f-1475-4c16-beb3-afd55148d652",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179e8dac-a7d9-483a-92e6-f7622a126fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8ca2cf-142d-456b-8425-68bbc8c58f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aed953d-2f10-4a35-b2a9-c0525a20c58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c033f128-ec3c-4385-8afb-4e334cef4615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83909007-205b-4ed7-9c95-a09a3c7a751f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048f0252-3da8-4088-92a1-e5b4e8c1c24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3720ae8-b5fb-40bc-8b36-85d55310158b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538d47b4-ef46-4dcf-ac43-4ba0cfe6e49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54f00e9-267c-4d0a-a76d-00d8d208790e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59033517-65ab-4ee6-8ae2-ac8a88f92971",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e4ca05-76ae-4197-9640-fbc89f25bdf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d22ced-39d7-455b-af60-04d50801ae55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82a7a99-323c-4931-9862-46b5d53989a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942c1c0d-86b6-40fa-9f36-013c9deda9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480ee830-0e7d-4000-9a5a-4a1479041bd0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6113c9ca-3b03-46c2-b311-780c41eea48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7d4955-e5c0-47b2-8128-2639df96a6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08391a5-971b-4adc-bcb5-ab5c888f7d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b67e70-671a-4b9e-8843-fa3a1a776f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62472af6-a63a-4c0c-a79f-04e1d10d7b95",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dcc5a8-646c-4266-8124-3232fb09aa67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc89541-b90d-46cd-9eff-07a56c4ed484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22caba05-62be-4c5f-bc17-70e71c08786f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8ca285-99a0-43ed-aaf6-5ee2dde2fb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bc8dfd-f2fd-45c4-932f-d5e7cde427fc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c091cca2-5bb3-4b71-ac84-2f29c2fbe93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dddfaab-da92-4832-8e9e-02488db12abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a681c7-567c-4319-a3f8-a2b9b8a2742c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06826ab3-36a8-4694-b429-cf735023979b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2727080c-56b6-4617-ab5e-9f5c5517b7c2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7084b58-5a27-4a92-8823-9766494ecbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2cf76b-cb78-434a-9d9b-de90fc1f0a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0341472-f329-454e-a996-e02e17e06381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2919747c-0c75-4c8a-a0ed-9cea674dd3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f14e55-f20f-4e1b-91c8-ec69a900b6f0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5a4f8c-f877-4053-a8d5-17f28d82e208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ea9ade-9cfd-4bdf-bc66-d5d458715c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c437c0-308d-4424-8f81-6873372569d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca966e6-e5fc-4bdb-9922-28961020562a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3997b69-13ca-46c2-83df-0b1a085f975f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b506e34-2b4a-40bf-80cb-732ac835ba4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab84dca-8c4f-425a-830b-4ee45d5fb82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553310f1-a27a-4f0a-b949-9ec4be070502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce73b9ce-3647-4147-824e-822aad98bf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c9e697-8ba8-468a-b65f-c98e1f9f9a0d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3efa5c-40f7-44ef-98b5-33f9e1594541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c352b45-2a0c-40e9-a786-4107656fbd70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7135ec0e-681e-45da-a4b9-b08675eb17a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c286cdae-bf6e-407f-a1dc-5cb3a00ac80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0ff021-735f-43e8-a9ff-c7d9ccba85f1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d53aed-33fc-4ff4-b194-37dbb2758c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3231d54a-12d7-456c-a015-6e96aee3676f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a13f0d-2b9d-4c19-b296-6b9633591bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46787dad-d9ad-4e7b-b4a3-cb8e92da3868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbe6393-bbba-412f-a33b-1721d752fddb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51430289-f880-4b56-bc2d-1143ee064fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2e1247-517a-406c-9a7c-c19df12ade9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb0a544-78f4-4edf-85fe-5e405b2b7022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f3f360-2104-427e-ac05-f5fd0db0d1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e75c2f-c2c1-40ac-980d-b854c7e01bb2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63194e6a-f47e-46f8-ad5d-7407522b5c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2929a377-8c29-4758-a214-77a606d74952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd4c48a-f707-4d07-82a5-b04eb22a219c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18638d12-c934-4fa1-b599-9db5b416bd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5205c7ff-ade5-4e8b-baec-abfcc532998c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c707ae3d-ee6d-41c8-a33a-d6af7eda61d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe890e27-e1a9-4cd1-aa73-087a0bf0fad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ec9af5-51e6-415b-b335-3e1f6f5291fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef48b1d5-cec2-429a-a17a-9bd3f2973be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3998cfa-b000-415f-842d-c67aee793401",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1c396b-f7c1-43b2-976b-21f5f14566d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee70144-3710-45eb-915f-6a14468b9ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc06ca20-0e0e-4070-a663-67fadcc41776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24b1333-2ab1-44ff-ad3e-4578b4129797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10518ef-cf2a-4219-8fe2-4b7f1a30b3e1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7124f142-1e76-43ea-8e26-7cadc94daf36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b2050b-54c0-4311-8293-bef66f402189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939ecadd-63dc-4c7e-9706-e2f7da9f4cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9642ee0c-0590-49f9-9850-94055c618255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac42fd5-7c45-4427-ac0d-e5b32459521c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb957853-a1ca-49d3-8be4-8dce508627a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056423ed-7f3c-4e93-8818-8abc3814f702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef53d0a1-31df-4006-9368-2444d7175c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd92224c-55e9-4f94-82bd-1438a3531696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a19463f-b690-4250-a122-d8a2fab3b6ac",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5578c8e-e578-462c-a6a2-108061f4601a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbebb25-0d58-45cc-a2dd-a8de9026a64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777fd66b-ada7-4de7-97a2-ae1a934cfb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe4ef08-9f18-4e1d-aa87-6dc5295fcee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9686556-6434-496c-bc2c-d7c99e3b4116",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3642831-fbde-4369-b72d-02d8ced72b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed74997b-a34f-4aed-8726-b6424ef2159f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c0876c-04c9-4478-8f7a-d14e0de18b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959e4674-3227-436a-87a2-b0fc15184123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e291a2c-42cb-4896-924c-4402a05568f4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c134a8d2-038f-4cd1-9436-3b76b2bc2347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8584b9b0-d02b-4383-bbae-1f5c8bac7907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce599d68-9cf1-4ba4-9729-8bb9a2bcc269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc41c039-3848-429a-8d21-b6d588a6c58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e52d23-8dde-4099-b9ef-9cdc010bf7fa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256bbbb0-58d2-400a-b96c-1c0169168199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800b13a0-200f-4a30-be22-44e608b5f110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb096935-c64d-45de-9084-21ba4ab2281e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f56998-beae-43fc-97e4-d11cd9f9a41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439e7acc-7325-426a-bb74-7411149bf061",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faae935-fba1-4c88-8c99-930b148887c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e47f780-13b9-479d-8a30-5558c0245bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d24f1a-abb6-4f7b-885f-171337767f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ef3724-b0fe-42e4-877e-ee9d30e674c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd449d2-cc5c-4376-8078-f4dfca099b7a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeff32c-dca2-4df8-91ec-0f75994a4ecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b1336e6-09d2-4811-b329-40df8e0a9765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf4fa12-f6c5-4394-907a-ccd964f2d142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0528aad-74e2-4989-8c60-8c6091582436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e8dbea-6f7c-42b2-9b37-befa61084b68",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcdcfda-7d30-46bf-8927-d98aaef38162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d05b1d3-dfc0-4089-9b68-a8d903d02848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1dc948-1b27-436c-b526-cff0be14d2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4628668f-78d6-4a39-9b43-4ee830a1919d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc81c47-8fee-4483-87b6-3e34b4c8605f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609277f0-412b-4c6b-bbf0-979445c923f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "591e0227-b1cd-4a26-857a-e77d36cd2901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c803d7-c22e-41f6-8ab0-2c1e55eec6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78c1ce7-efc4-46f3-bfde-eb7d2b28ea38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f900c261-a7a9-46c0-b634-7f9f2a1d55e3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed37dc78-e1f5-4523-be01-bece73b7e9c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "703ae480-dc10-4415-9841-e559aaf1875a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41be1462-70df-4989-b254-f388418de132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b9a757-96d6-4192-962b-68e60a94103e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276eaace-4a49-4a23-8e89-c6ed094d1c99",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554562d8-38b0-4cdf-9de0-5a9010b10c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95760dca-5ef4-456f-a706-3fe3943ceb66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5622cda-2681-4658-a02a-e24ceed1950c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f1b6aa-3754-4efc-b541-b0542a0774cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9008b3-6133-4f00-9eaf-0df0fbc3f080",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdd6535-4746-4ae1-950a-760d309ab087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e103224-74e5-4b2e-a1e9-68f7dc628d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a70440-30bb-4ec4-a89f-d986c616ffa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d18cb36-1132-42c5-b742-f6bdec87508a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ee89cf-16dc-4943-b260-42e5b17990a0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbd407b-3be3-487c-830d-5c89fe6b5a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b3fa51-c950-4373-b172-45ff81fb7a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e2c417-2861-424a-ba06-46bceb073c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635c873d-c979-4cc1-bfb3-a5dd798a3d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2867dbc7-20cf-4d4a-83b7-b0dd8bc3cf96",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f366e8d1-02c6-4270-9ac4-f3d70e4e6889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e0f727-7eb3-44d1-80a5-48e4276ad6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc769e4-3ea1-47ff-9a9e-a406d497c4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b0c327-1f22-49de-aaf3-040df1319054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e235999-1b4f-4698-bdbf-8ef0452e347f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a189a1-335f-4c68-a1bc-4d3134cc8444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "025ad553-67e1-48de-b18e-47dd3b96a0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92dbb0d-3171-4e41-947f-7e6fc6584ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f75e01-db8e-45ab-aaf7-6d5118c9e6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec3e1d2-d731-43b6-b16b-ece188e8011c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270ea80d-6a1c-4ae8-b989-e299c60bcf60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec26963d-e987-4ed9-98ef-dec72bb05bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd38b68c-646b-4bd7-87ea-e1c29dd496e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6f2a39-6dce-4fb4-865c-65d2fee690e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cdfa3f-feb2-4375-baf7-973d4eaa664c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f31544-c741-4a43-9935-d424d722ffec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08aabcd-5e7b-4522-be03-a7a62048db0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e8b558-0075-418e-a368-491d434bd14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bb2f70-4273-4591-95ff-529511f260b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acca590e-7237-4313-b34d-b42155b0a9c9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c836619-1157-4925-bb31-8e1edbbe91a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3a59b09-2a5e-4cae-9b50-4e9e9be48a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2aa0ec2-fc99-423a-967f-16f3520737f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778ab1a0-5c73-4669-8310-6dc1e217e46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c42da46-571e-4d12-b2f9-3048941a017c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c88c53b-2b78-470c-870f-f8aa0e58208a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "154f9808-b223-418b-b633-faa61be3c833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b327bb-cbd3-4747-a16a-56c2380099d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e06c1bf-3441-4c19-a037-7f9e0266bdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c525b4-9bc3-4cb9-aaf0-8a29dd900828",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7340c4-5b9b-442c-a8d8-2d5a8b119012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc647096-a8c7-4936-8b35-d54b85a69c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1f0c9b-f5ed-4dbc-aff5-24a3d830e018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93b0bf7-bd2c-4e26-af6b-09dc0464a2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa49942d-08da-4d5a-b77e-54fa618bcb90",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557919ad-4482-4c40-bdeb-b51a6afba255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25e34040-6c2b-4a26-adbe-004646e1d85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5269b26-b0cb-4bf4-a0c4-559ce7c245e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3957b541-c9b1-47cc-999e-ae292959ed55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f2840b-2bad-4c45-bd2e-cf5a3bf90a2b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711c86ab-fc03-4fb0-b118-ab57e3f54571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ae5f642-262d-456d-bb4f-ca7dd634dace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd5986e-0924-4dc3-be01-530066f48a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b88e33-e7d4-4fd5-aa66-f0e6ee772104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a957e6be-47bd-458c-aa7c-dd91eae6d45a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b54c7bb-cfab-4904-9513-276fd6805b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "542e3c46-9ee1-4512-81be-36bb71fdeaf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dcc07a-a399-4dc6-a5d1-c73b59b5c2a1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ff8e53-c8df-4727-bdc9-51184e082be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3a2666-ef97-47c3-8122-03db85399790",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b51110c-fc24-43d2-bb0d-d4777dd0eee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1759138-f088-43ad-b85d-52486baec594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36a539c-628b-4977-8093-c70d1ca5dffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41a8b9f-b3c2-4a57-b1a6-44e2facde66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316e6aab-8650-484b-9386-c2af8d391470",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5843cef4-5ded-4bcb-8187-f1f6a5d912fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ce65cb-e13b-41f5-963f-7d1ee38f29b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1c601f-8a5a-4d54-b91f-b80adf6882e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17e220c-9efd-42bc-b31c-467df4dabe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3695e2a-be7e-409c-9f8b-a40822cd273e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4696743-4a5a-4857-bf49-90e8a127123e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "922a5c7b-2f21-4520-9abe-f62b6ccd0e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b077d7-d0f0-4fec-bca2-6b11068bb867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429775c0-ad38-4d49-ba87-6a6da5a8d71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff5d5a1-2082-4cc8-bda2-ad9591d44d02",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8559b747-ec10-4497-9c10-c907b9f3fa74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "326a9dc1-75f6-4b33-b37f-1dc335f7849a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54001fc1-48e0-4415-8963-fa65513784c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54408888-efc7-4e30-b240-6e9084f3234d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b93f54c-67ef-44c6-aefe-a784fa9ecd50",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48376459-faa6-4d5e-99ca-a799690d452c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605794d2-fe54-47ee-babd-e1ebec07af4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2df71de-517f-4eb9-b41a-ff37c0fd2466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7025999-86a5-4720-b671-d1e3f4e1281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018efeb5-b9e5-48eb-bb76-0a640b0d5de2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86504b4-6c0e-40a8-814c-491a91df6abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2605bf5d-5b49-4e02-b4c1-c0dd0f7cbd97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8eadd4-61ee-48c3-b09d-2c2e93fd63ab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2a1c9c-109e-48ae-8fe9-4a2b2d35741f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f89f588-2b16-4782-98cd-4e0555eca50b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1a81f3-1c58-40a2-8861-29489a611c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8207fac-0148-415f-9f09-b2b4659bc9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4a45a0-0e25-438e-9933-b64d3113ad8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff27436a-85c6-42d7-96bd-b12f5852ba0e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "166dba4a-3157-48be-a9fd-0cb44b25a7b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d440ef25-a43e-425e-8e11-c4fff8bc3628"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01056648-b5c0-47a8-845e-232e20b2e0bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3bc3962-54e7-44dd-a755-234433ff0d38"
                    }
                  }
                ]
              },
              {
                "id": "5dcc8861-b9e5-4b17-b306-b98b02733c7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdf2aac9-2f7c-459e-a728-0b44e501834d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802ef329-86a8-4a72-944a-b43fefc0e0cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9b2e3762-fec0-474b-833a-785091fcf1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ab7c95-b29f-47cb-aa3c-5e668882294e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de045f82-67c4-4b2e-adda-63d31c1156ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28dc3e47-d5a1-4795-8727-c2efdc1cdec6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05a74e09-2034-4611-b3ac-13fa7461d574"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0aeae87c-e189-4a4a-bd24-928194c44a7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6236b3d-9829-40a9-b20a-d0565c57ee57"
                    }
                  }
                ]
              },
              {
                "id": "dbf5376c-1afd-4d92-8e77-c3bd0a8410be",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "67d7d076-c7f5-4ab8-92d3-53be33ebb45a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55c4df7-8b5a-4d66-bd12-f04b05cc030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "59fd2ea1-7088-4d19-9442-3b0913e7cca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b7e39a-6974-4856-95d0-e4a71024904e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44a5a3b-368d-4cb8-aa11-001e5744a423"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "40e217c0-7ffd-4c13-913f-2398f5da1b22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e81b9ea3-92e5-4756-9258-fa159c893799",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab315569-a880-44e5-8793-92a1247937ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "409bd524-18d5-4160-9cac-f7ae37872e3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a449b324-e3b9-44ad-8566-e78d1ab25bb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "932f871a-8b27-4d98-8362-aa455a9c996d"
                    }
                  }
                ]
              },
              {
                "id": "27f5abb8-c98d-4ae4-8569-1f6240d41cd2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16995274-094b-4da9-87cd-4d139aad90b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a2cefceb-6e63-496e-a309-03bc440ff883"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76e6e357-0804-4104-b5f1-cf90b06231f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db7692a0-83a6-46ff-9a17-b8c88affb27e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3ff87e3-6d2d-4238-81ac-9ace46daed8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "831cb931-8651-4b2e-ac2e-cc0fa3425224"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6a415a2-6f32-44e6-a2bb-e81412e92d2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d7bfa44-7a74-4524-b6b9-f8e306f8929c"
            }
          }
        ]
      },
      {
        "id": "fdf32dbd-e283-4a06-94a4-dda088a41d16",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4a659eec-f47d-46e4-851f-2e3c698c4272",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bc0b495-38ff-4766-afbf-77a5ff5d46e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d2d4366-aeae-4201-b711-ffee3baa4b11",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1df64b4-5e9f-48ef-8709-651bf93159a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c2640f75-afc8-4d4d-a916-766ec8a98b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979ce9f3-f2a4-4da0-a882-508e980794e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a58cbfd-8563-4c92-9e7e-d383e4105fc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "386244d5-c7c6-4a3c-95d6-d2656134adcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99001234-c18e-4299-b5fa-44471b29f58c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f32214b-fd91-477d-8bcb-69ab686417c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2a366f9-f357-4701-9ddc-cd8f519d4d41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b60ba242-a639-4fb8-869a-0f3fcb21fb2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c885a2f1-674e-4310-a00b-81aa1fa7fef7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c263ef6-b4fd-4db1-8469-17612b5b6d9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e05b81d-5095-49ba-a758-ed76c9a64299"
            }
          }
        ]
      },
      {
        "id": "3cd74b72-ab69-43f8-bfe5-df9092fbd7ea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "904f3a68-074a-41b6-b938-b7e6529cc51c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea552040-fb3b-4744-ac48-2289929dd16e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b822e36-6e71-4945-aeeb-f536bdcd72b0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1d9898-c609-486c-b34d-7b238d3948c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10a9b9b3-9b2e-439a-a5d7-7a4579aaeccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf95ec7-f883-4aed-8ad6-84debc9292ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35f96065-ea0c-4447-8be4-08434883c32b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d7c0211-8a8d-4d3d-99d8-80f904b19fd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2acf2d9e-9af6-4f6b-8425-a9a5a78e7263"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "baa40c81-86f5-4953-be83-9600bb428341",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fab667f-db6a-4c38-a7d7-3bc9eb348526"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "760e001b-7817-4935-aeb1-cd8a7d2697e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c9d827a-4cb1-4bed-8e0f-d99202cddbb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e82b4cc-7a76-4f2e-a908-380f54992ec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3ac6c0c-3f02-4023-a193-8eba9001ac68"
            }
          }
        ]
      },
      {
        "id": "b93a6ee8-f611-45d9-848d-187ec891bbac",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "133d6cc6-6880-4640-9a7a-c7e083b49ef7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e00bf01-4b49-45d1-9db2-7cf605880687",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ff46c43-4a4e-4df4-8b9e-9f8e69253e26",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69c5ca9-992b-4b7c-b39f-1dd989856062",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f927dff-829e-41f4-ad01-ae2e384ce761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eef26e-864e-4c61-9fc7-2b2c0b5ef1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4b62f20-94c2-439d-b77a-d67430d489fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fdd836e-9271-4b34-bb89-8e96a31a544f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1271f8e6-b55e-4b77-b0da-8ffd863d4e8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2432131-43f9-483b-8ab9-f88803d60753",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15bcda40-cb59-45d8-b658-0e68378a9b6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "615f41f9-142b-4dab-abf0-6c47aab62b99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1d5a26e-a550-48c6-844e-4cc55324f061"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a677c6e3-c79c-4ae2-ad3f-846f894ac6f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c558d152-efc2-4940-846f-cf508f1074e8"
            }
          }
        ]
      },
      {
        "id": "680e1fca-edcb-4be8-b1f9-39e487428305",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0757843f-f134-4d6a-a9c8-16d7e99d99a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d8e7efa-631e-41a1-aa12-ab6f7983f2a3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "134ade7b-dd31-4775-85e1-3244aa2e6af1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f16954ad-9fc5-4ddd-9a4b-da3af9ea3c73",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7b79804-4466-4906-8493-234def498b56",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 324
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 44.84154929577465,
      "responseMin": 11,
      "responseMax": 1560,
      "responseSd": 91.93142479699382,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687394548390,
      "completed": 1687394573331
    },
    "executions": [
      {
        "id": "d4920bdd-f503-41b3-b132-75f35f74aee6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "db71afa0-02ad-45d5-9c80-c1c18b5c7724",
          "httpRequestId": "5d14b32e-7975-498a-b838-f8568d30677b"
        },
        "item": {
          "id": "d4920bdd-f503-41b3-b132-75f35f74aee6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5c763062-08c1-4468-b881-691f6501437a",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "0768e7c8-9295-4269-bb0f-a780c0c01de9",
        "cursor": {
          "ref": "a5a01872-8b70-4641-9957-2a7937239235",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "955f8bce-5aa0-4dfd-bbfb-338b91a99d57"
        },
        "item": {
          "id": "0768e7c8-9295-4269-bb0f-a780c0c01de9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "65a018b3-59b0-49c6-b4af-f4452ef2d565",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "b53b53de-a8c6-4df6-b5df-3272fb2b24c4",
        "cursor": {
          "ref": "a84fb3f9-6ad7-47ae-b411-c44e0f0b3311",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0accb6b6-e927-440e-b76f-16b7d0cba2b7"
        },
        "item": {
          "id": "b53b53de-a8c6-4df6-b5df-3272fb2b24c4",
          "name": "did_json"
        },
        "response": {
          "id": "246815a2-71e9-40c8-8146-2fd0ddcfb866",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f863c463-a04c-479c-be41-a80feabf624e",
        "cursor": {
          "ref": "ff95b63b-01a9-44a6-80f0-8895faca30d3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "234e1c53-b664-42f9-a7a4-6547190015d0"
        },
        "item": {
          "id": "f863c463-a04c-479c-be41-a80feabf624e",
          "name": "did:invalid"
        },
        "response": {
          "id": "2bc8f29c-dc3e-492f-bd46-c58d062806b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f863c463-a04c-479c-be41-a80feabf624e",
        "cursor": {
          "ref": "ff95b63b-01a9-44a6-80f0-8895faca30d3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "234e1c53-b664-42f9-a7a4-6547190015d0"
        },
        "item": {
          "id": "f863c463-a04c-479c-be41-a80feabf624e",
          "name": "did:invalid"
        },
        "response": {
          "id": "2bc8f29c-dc3e-492f-bd46-c58d062806b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88755ea-1301-4fbe-a071-0a2bbbe4c574",
        "cursor": {
          "ref": "f180f5da-64ae-48f4-9a12-b26bc7cec213",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b024a6b1-549a-4008-b419-3e57f4029ccc"
        },
        "item": {
          "id": "d88755ea-1301-4fbe-a071-0a2bbbe4c574",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "da73a995-3e7c-40ad-b724-5ffa8968f4d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "20b14f3d-b4c1-474b-9d38-0a14fc894a53",
        "cursor": {
          "ref": "0747668e-9047-45ab-958c-437b406db5c4",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "555b77ee-8255-4707-a9ac-ea9454779c82"
        },
        "item": {
          "id": "20b14f3d-b4c1-474b-9d38-0a14fc894a53",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3e864cc8-f2c0-475d-a8ed-089b97d62870",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "59dba7d8-3250-40bb-9385-3767886f68fe",
        "cursor": {
          "ref": "1ad93152-e500-45ab-b102-8ce7467917d9",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "19815818-1aa3-438e-bcbd-0355632d4eaf"
        },
        "item": {
          "id": "59dba7d8-3250-40bb-9385-3767886f68fe",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0cd19c83-266e-490f-adfb-25a3a7598465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "65985925-7bbd-443e-9290-bfb0e798734e",
        "cursor": {
          "ref": "11fed6a3-eec6-4948-87bb-5a086a15a7d1",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91d100c7-e732-4d9e-9907-11d4303b1d38"
        },
        "item": {
          "id": "65985925-7bbd-443e-9290-bfb0e798734e",
          "name": "identifiers"
        },
        "response": {
          "id": "8c718d61-4675-45e6-b24c-502c52a6cf13",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "57583a49-1706-4bcc-9b33-e52f30a461d6",
        "cursor": {
          "ref": "e8829101-2a24-4295-a815-6e38ced355b6",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "75382671-7738-4ad7-b1bb-c53d39e706b1"
        },
        "item": {
          "id": "57583a49-1706-4bcc-9b33-e52f30a461d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a241761-bec7-49b2-946b-cdeae454cced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "256f7403-45eb-4f7b-94b9-4ade7bf1ce56",
        "cursor": {
          "ref": "ab061124-7e94-4259-9f04-7df276488e14",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0a8d0a31-821c-4c39-8580-d946e2431abf"
        },
        "item": {
          "id": "256f7403-45eb-4f7b-94b9-4ade7bf1ce56",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "608e3838-d067-4553-b7ac-f2d74bb06ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "18546d99-7415-42f6-8ab2-7bf833241b9f",
        "cursor": {
          "ref": "954e0453-1249-4d42-a8dd-7da5c31ff177",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e348af26-b7f3-4026-b608-922f91a0a7e1"
        },
        "item": {
          "id": "18546d99-7415-42f6-8ab2-7bf833241b9f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3e710a6a-aced-4fce-b99b-42d3451c6123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "917e0164-ba4b-4ede-89f8-366086b652e0",
        "cursor": {
          "ref": "bcb300ff-ecc4-442e-b1db-4a6ec6ac28f5",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "814c3d94-d667-449d-ba37-9197730b0b5f"
        },
        "item": {
          "id": "917e0164-ba4b-4ede-89f8-366086b652e0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7a078512-aed8-4548-91e6-20ed4a4ba684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2e4bdf2a-bc14-4419-bdc5-1d6b71cc0c61",
        "cursor": {
          "ref": "f1d5bbe4-41b9-4d8f-9814-c913cdd51054",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cebdec15-d6a3-40ff-8e8e-bd719140dcae"
        },
        "item": {
          "id": "2e4bdf2a-bc14-4419-bdc5-1d6b71cc0c61",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0672e99d-4128-403a-9267-814458aa180f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8e9048b0-7e87-43da-8b21-c5768abbafd8",
        "cursor": {
          "ref": "55160cb5-4df1-480b-a66c-4745d906ab46",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d1f4bc3f-c23f-4ff0-a453-5e9ffd2f6ac0"
        },
        "item": {
          "id": "8e9048b0-7e87-43da-8b21-c5768abbafd8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "04d2e6b2-cd36-41e3-b278-6824951b04cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "e1e03ae7-2813-43ff-afe2-4dda1efa5727",
        "cursor": {
          "ref": "76084d05-f400-4499-908f-8792331fb2cc",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c9d406e9-12e8-4f7c-989d-4d8d2d3a34ae"
        },
        "item": {
          "id": "e1e03ae7-2813-43ff-afe2-4dda1efa5727",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "771e4a83-66ad-4692-9318-1ddc5396647b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f53437d1-c054-4318-b5e4-a94ee672267b",
        "cursor": {
          "ref": "1d2d495e-1cfe-4b91-959e-69cf773d7f5d",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a1aa3c44-f536-4264-a8ce-1edc185ca9cd"
        },
        "item": {
          "id": "f53437d1-c054-4318-b5e4-a94ee672267b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c0c83ec3-edb2-4d7c-b149-5e8ed42d76ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7061a908-f275-47b7-a2f0-8594a69aac1d",
        "cursor": {
          "ref": "9e0adc73-8983-49f4-970c-9bbc69b908ff",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "187c28b9-2aee-4f0a-8183-434b1beec615"
        },
        "item": {
          "id": "7061a908-f275-47b7-a2f0-8594a69aac1d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "94791811-7a03-45b9-86bd-79cc3b08c2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "667c9ed0-78eb-47a6-88fc-32dfd9e75073",
        "cursor": {
          "ref": "a7f74a80-bec3-4741-94af-e9a19aa5707a",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b7fee2f4-a229-4f54-8e1c-3564850204f6"
        },
        "item": {
          "id": "667c9ed0-78eb-47a6-88fc-32dfd9e75073",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dcf01c4d-91f1-4244-913b-25643ccbcb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "39bd3db9-2af4-4b36-933a-2ebc13bdb6c2",
        "cursor": {
          "ref": "79c91d6e-5ce4-48a5-a351-ddb136459055",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "98077607-cc1a-4d4b-9432-33ce09b094ed"
        },
        "item": {
          "id": "39bd3db9-2af4-4b36-933a-2ebc13bdb6c2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c1fbfca8-2b43-4587-a68e-fb1870aacfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "802d8a35-acc1-4539-a92a-ad8efcfd0b5c",
        "cursor": {
          "ref": "614d475d-04ac-48c6-aa0c-51e1c2b106d1",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "47024eeb-c987-4614-9f1f-922b9e301960"
        },
        "item": {
          "id": "802d8a35-acc1-4539-a92a-ad8efcfd0b5c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "125e2401-7632-4935-a6d4-942196f8c000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0fed4345-adc9-4331-b743-d07347536689",
        "cursor": {
          "ref": "14cfbd67-e5d6-412d-8982-3c21accf62f5",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a4db9e23-77c0-46e0-b85b-b97b06458c91"
        },
        "item": {
          "id": "0fed4345-adc9-4331-b743-d07347536689",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2d0162a5-6687-476e-a261-d0ba11f511c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3c2ca907-2c60-4608-8fc9-4d5539e3f628",
        "cursor": {
          "ref": "c7b55283-b85a-4407-b85b-8dd70a0f43bb",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "171e0209-8adb-4c6a-b7bb-c921afe42d6c"
        },
        "item": {
          "id": "3c2ca907-2c60-4608-8fc9-4d5539e3f628",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9bd8ba61-ad59-488f-9ba9-5986cdfdee33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b71d0e2f-3156-457b-818e-9dfe0be11bc7",
        "cursor": {
          "ref": "9a1acbd6-969f-44ff-8c5c-a78ad4fa9abc",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "73cd2c97-a8e9-4520-89e0-af778b74da17"
        },
        "item": {
          "id": "b71d0e2f-3156-457b-818e-9dfe0be11bc7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "98a0d1ad-b9ed-42cd-b36f-cd1155453990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "46145f05-922a-479b-abf2-747b91ff3b13",
        "cursor": {
          "ref": "11108d7f-3277-467a-a624-a4650010d4b7",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f21b52d8-067b-46dc-88f8-05a0e976ae33"
        },
        "item": {
          "id": "46145f05-922a-479b-abf2-747b91ff3b13",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ba982e24-c6b7-4189-ac72-e2364e35de7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f15b666a-ca58-4ea3-bacb-c81aee79af8b",
        "cursor": {
          "ref": "e2d8d0d9-6718-4665-af5c-e2151e4eb790",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9826a30f-768a-425e-be33-f81cbd61934a"
        },
        "item": {
          "id": "f15b666a-ca58-4ea3-bacb-c81aee79af8b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9424e8f0-da62-4560-b136-d1cda11c32e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ff4e014f-e2e3-47fe-b0a0-6e5343bb0cc1",
        "cursor": {
          "ref": "a067e840-8262-458c-86f0-482e9e7e399b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "46c8e470-2e48-40bb-86be-e9f62958bf05"
        },
        "item": {
          "id": "ff4e014f-e2e3-47fe-b0a0-6e5343bb0cc1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d8d71fd8-5713-49ef-8f70-37ec5b56f791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "723f3c37-1385-4098-9885-2d832baa45e8",
        "cursor": {
          "ref": "63407ed0-a03e-4d21-903e-501b63562dfd",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aacbe6f8-e9c9-46fe-9956-b3c0e9f46675"
        },
        "item": {
          "id": "723f3c37-1385-4098-9885-2d832baa45e8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a9080b1c-6e3a-4f07-bc6a-447a8538f8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "31212d3d-ed30-485c-b2ac-710fb65eb805",
        "cursor": {
          "ref": "4d9cf1a0-6be5-451f-a08b-6edbc7af3cc3",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "92738570-c5f0-436e-ad3a-99e348a3220f"
        },
        "item": {
          "id": "31212d3d-ed30-485c-b2ac-710fb65eb805",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a148a96d-85ef-426c-acf0-bb62734fd64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0935d05e-efcc-48f9-affa-f74b02fa57a2",
        "cursor": {
          "ref": "50246ae1-a6e3-4837-be72-f001de055243",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "21255d3a-d5f8-4a52-9882-66635c7cf822"
        },
        "item": {
          "id": "0935d05e-efcc-48f9-affa-f74b02fa57a2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1890c2df-31b3-43ee-8dc2-d5805f8306fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "927948fd-782e-4386-8b5d-ad3eedb4b036",
        "cursor": {
          "ref": "bf83376f-f800-42ae-9a79-ffacbc6e30b3",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bdc389fe-dec1-41e2-9de4-1d33f7d6a429"
        },
        "item": {
          "id": "927948fd-782e-4386-8b5d-ad3eedb4b036",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e8f218b4-988d-451a-95d7-fac11c7dde67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "332835ff-2c24-4187-afbe-e05761c151b1",
        "cursor": {
          "ref": "2571a07a-54d9-4a8d-a58f-94590192aec7",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b78482ce-38ea-4c22-b755-62bf580c450e"
        },
        "item": {
          "id": "332835ff-2c24-4187-afbe-e05761c151b1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a0d096b4-8f05-481a-9447-0d8d73129246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "2ff9b3fa-5da3-4361-8369-0a1f1b6b9210",
        "cursor": {
          "ref": "114fd9a4-ad06-4730-ab59-0b6e1fdbdc53",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "248c372b-258d-482a-a5b9-3284cc77fb84"
        },
        "item": {
          "id": "2ff9b3fa-5da3-4361-8369-0a1f1b6b9210",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "71305fa2-9da4-4e80-a0d7-8dfc089b6cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "00267c79-b20f-4fe0-becc-0194f71df704",
        "cursor": {
          "ref": "0808c929-33de-41af-a07c-7c97e7798ee1",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "91b952c1-fa69-408b-afcc-7456ab8f2bab"
        },
        "item": {
          "id": "00267c79-b20f-4fe0-becc-0194f71df704",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1547c18c-6066-4036-a288-0b9a2a4b3508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7351e28e-0bf3-43b4-aa84-5cf12aa3cf2c",
        "cursor": {
          "ref": "bd50994f-5e45-42d4-ad45-ee13ea0829b7",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ff104089-9d39-400b-8cb0-087d198cc74c"
        },
        "item": {
          "id": "7351e28e-0bf3-43b4-aa84-5cf12aa3cf2c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f82f108d-a168-48ad-a4e8-df92f0e2d205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "72326804-5473-4634-b336-14f15b241def",
        "cursor": {
          "ref": "92cc03c7-9ad2-49e0-ac69-97648dcc7512",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "78716d1d-9bfb-4b10-a88b-e239573c69a3"
        },
        "item": {
          "id": "72326804-5473-4634-b336-14f15b241def",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "de8b9a4d-e966-4bba-bc98-6fa116a15fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c19e13ce-c2b3-4804-bd20-0fecc129fa26",
        "cursor": {
          "ref": "0a8077e2-f3e6-471a-b09f-b9a4a8f9a720",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d003e8ad-e978-4873-9bdf-97d888646d2a"
        },
        "item": {
          "id": "c19e13ce-c2b3-4804-bd20-0fecc129fa26",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8d97ff08-8800-40ea-b14c-33e9a75cd14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c8cb9b4b-d00f-42e8-bd10-36f32d82830c",
        "cursor": {
          "ref": "191c75cf-6378-40b8-8a92-5ba16ace5c68",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f0603477-9abc-4d5b-989e-8eae60d4ead8"
        },
        "item": {
          "id": "c8cb9b4b-d00f-42e8-bd10-36f32d82830c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bbcefd8e-5e61-4f90-90a3-750a4ec6d0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "c726845e-144c-4e90-be62-036b2cc42e63",
        "cursor": {
          "ref": "782d0fab-5ed6-4d93-a90d-d787d6f80182",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9b672c10-f456-4826-a3a5-a3d599f4cb28"
        },
        "item": {
          "id": "c726845e-144c-4e90-be62-036b2cc42e63",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d3099488-1b4b-4b20-b988-6f02d43870bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "51ca978c-fd4d-46e3-810c-8f385e8aa1e9",
        "cursor": {
          "ref": "6c161ae7-a2b8-411b-ba73-63f42b2974da",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1ffe2db9-a814-4a05-afa8-3c393b167c8b"
        },
        "item": {
          "id": "51ca978c-fd4d-46e3-810c-8f385e8aa1e9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d7e9a05e-ffd4-4ca4-8293-9b8f605654e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fcac0580-6599-4f24-910c-89d5896c3c0f",
        "cursor": {
          "ref": "b380dabd-876a-4aad-a39d-21d88d4f4af6",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a663a09e-368d-4505-9bff-71e9d8024d26"
        },
        "item": {
          "id": "fcac0580-6599-4f24-910c-89d5896c3c0f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3eba451f-8db0-4d2d-a9a6-565e1e479ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "99f47fb0-9b77-4a38-96e6-4679bf622c66",
        "cursor": {
          "ref": "24a552de-77e6-435f-bfdb-bd76a2cbddda",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1fcec9bd-113b-493d-91ac-98bf055954ba"
        },
        "item": {
          "id": "99f47fb0-9b77-4a38-96e6-4679bf622c66",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7a488ec8-3591-4146-afff-890bd8f0fc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d94d7033-ee3a-4ed5-a5da-86070fb52099",
        "cursor": {
          "ref": "a4cdf5b0-0780-46bf-878b-d2b509a4c17b",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ce333914-f626-4ab6-ad8c-01ecae9aec1a"
        },
        "item": {
          "id": "d94d7033-ee3a-4ed5-a5da-86070fb52099",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c9b2271c-d6aa-49d2-abb8-c75ef6ad7f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "23dad7e0-b43e-4017-87a2-bf969f9c9063",
        "cursor": {
          "ref": "6e03e1e4-2fe4-4701-8238-3533fd4e83c2",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c5649b67-baa7-416a-b461-293c4988807d"
        },
        "item": {
          "id": "23dad7e0-b43e-4017-87a2-bf969f9c9063",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fba562a4-4056-413c-b4ca-3cf28c264590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "eae37c40-c361-42d0-be15-6281d2554fbc",
        "cursor": {
          "ref": "c960c21e-a21b-4740-a378-6a7ce27eff57",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19dcdcc9-2e3d-46ff-b831-0b297e3dd5d0"
        },
        "item": {
          "id": "eae37c40-c361-42d0-be15-6281d2554fbc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "abb73f2f-6d06-466b-b573-92ee13f5efcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2d5f6be6-e0ec-4507-b060-84d233d068ca",
        "cursor": {
          "ref": "bc7e81c7-8560-4ddf-ae13-5fb9ff941252",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00d87b59-962c-48ac-a006-07a1745b9b5a"
        },
        "item": {
          "id": "2d5f6be6-e0ec-4507-b060-84d233d068ca",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "19616abc-6114-49f7-b6ed-eb2544c983f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d17909a1-9690-44f7-ac84-f54a14ce3e36",
        "cursor": {
          "ref": "59467ed2-e84d-4465-bc33-71c349afa4fe",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "44bb8dfe-d651-454d-a2ab-a6cb570b465f"
        },
        "item": {
          "id": "d17909a1-9690-44f7-ac84-f54a14ce3e36",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "91a924b1-5c3d-4b25-8e62-fddd3637d9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e6882ca4-a529-492c-9d1a-adc13b9aa2ef",
        "cursor": {
          "ref": "d572fbbc-0587-4842-88e6-47a801238071",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1996fe22-3c26-4057-9f51-d83889206137"
        },
        "item": {
          "id": "e6882ca4-a529-492c-9d1a-adc13b9aa2ef",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a00adde3-0e99-466e-b422-5d516a0aae1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b3736743-2a36-4e90-a73c-cb9d9921e16e",
        "cursor": {
          "ref": "f50ed7b9-370d-49e1-90d8-939c1cf6ba79",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e83c2b07-9f70-4a45-839a-8e685f0834c6"
        },
        "item": {
          "id": "b3736743-2a36-4e90-a73c-cb9d9921e16e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "06004f3d-f3a5-4848-9893-c03e1835954f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1f474373-d9b7-4a13-a1a1-e5aa55640b09",
        "cursor": {
          "ref": "12de148c-b742-48d5-b433-a7953cf37bf3",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b00f924c-48f2-4019-8a5c-ae168d033353"
        },
        "item": {
          "id": "1f474373-d9b7-4a13-a1a1-e5aa55640b09",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ac53dc77-772d-468a-b627-562257069410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "743fef53-7a98-4020-9a01-b7c3f127f673",
        "cursor": {
          "ref": "08e4c798-83f1-4124-aef2-e20f123a70e9",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ed93f214-fbc2-4271-8058-e1173b8805d7"
        },
        "item": {
          "id": "743fef53-7a98-4020-9a01-b7c3f127f673",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a4884e9b-09a5-4cda-8fd9-14a689775f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "58029860-5859-4622-a89e-a9c4fea2d4ce",
        "cursor": {
          "ref": "6a33f1ad-bafb-41de-8ae8-6a718e67c266",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0931dc98-370b-46f5-b20e-5c065d7416eb"
        },
        "item": {
          "id": "58029860-5859-4622-a89e-a9c4fea2d4ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ba308a69-8c1f-4383-9602-1a94ac563d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "201ccbc0-fd3d-4674-a908-41df9b39ad85",
        "cursor": {
          "ref": "e80ea0c8-9ff3-4fe6-a3ff-fe21e154b802",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "67acfa6d-fa38-4500-b4c0-18e7d3e78205"
        },
        "item": {
          "id": "201ccbc0-fd3d-4674-a908-41df9b39ad85",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "df323b15-cda3-4da3-86bb-bb16dd0ca0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5d8a1582-75e2-48d5-b49f-5a63835d98f3",
        "cursor": {
          "ref": "e7735f04-d000-42e4-9172-136175074ebe",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7bd4dc27-3451-48a6-b9ba-2ef3d1b29e02"
        },
        "item": {
          "id": "5d8a1582-75e2-48d5-b49f-5a63835d98f3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2f1b55f1-3323-4a39-872c-673e63ecbaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "fddd463b-8783-4130-9b2a-698da5f3ef13",
        "cursor": {
          "ref": "41e73d4d-33a1-4020-951d-0842655deb3d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "613b7d0b-7dec-444d-b1ad-6be089840849"
        },
        "item": {
          "id": "fddd463b-8783-4130-9b2a-698da5f3ef13",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bf180f1d-d3ae-4fa0-95dc-152855dd625e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9f447a5b-269b-4a17-965e-8f086dd41542",
        "cursor": {
          "ref": "9c331c80-0d0b-4614-9ca0-25ee51f631df",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c6adcd40-e21c-497a-a9f2-3b0db0635a8d"
        },
        "item": {
          "id": "9f447a5b-269b-4a17-965e-8f086dd41542",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4aaa312c-4d06-4edc-8cc3-b23ddf921057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "37670ccc-03ac-4e62-819a-cb301b4ca94c",
        "cursor": {
          "ref": "dd95c38a-6a05-4972-90e0-b3259a5a9c7d",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "296c0386-175a-410f-99c8-f5dc7ee86f7b"
        },
        "item": {
          "id": "37670ccc-03ac-4e62-819a-cb301b4ca94c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5960f751-4b0f-44e5-b8a1-62f79b567e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a9025ba1-ab3a-4efe-843d-ee9dcf03aa8f",
        "cursor": {
          "ref": "e96db13e-8afb-47f1-816b-4b7cf843ab5f",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "41c7101f-dd86-4834-85c4-4161d73c27a2"
        },
        "item": {
          "id": "a9025ba1-ab3a-4efe-843d-ee9dcf03aa8f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "02d743ec-55df-44b3-a5f8-98db68496460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "bab5e692-ae68-48f4-8b1a-32dd679bfc2f",
        "cursor": {
          "ref": "373dc277-9675-4a47-b5fc-051b66c678d7",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6cd6ddaf-3a08-4d43-9a98-b07b8b9a39c8"
        },
        "item": {
          "id": "bab5e692-ae68-48f4-8b1a-32dd679bfc2f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e181395e-9cf8-4a05-8875-18785f054fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "8a504af4-371b-48f8-8325-7e5e6c1405ff",
        "cursor": {
          "ref": "ec6a1fd1-b4e3-4c93-b03c-8c236050c5e0",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e5308715-48b8-431c-95c7-d29fa55e3b13"
        },
        "item": {
          "id": "8a504af4-371b-48f8-8325-7e5e6c1405ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d4505a10-d020-4981-b3da-28f6a045d71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "1d29e177-d2a9-4d37-bcfd-1c50a6bed1a3",
        "cursor": {
          "ref": "ccb374ff-db89-4dec-9283-32b994c72bc8",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2ec3064c-8ff2-471d-8b93-00b0fe52e2a7"
        },
        "item": {
          "id": "1d29e177-d2a9-4d37-bcfd-1c50a6bed1a3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fc4caf39-694c-44db-9c25-3fd476e4094d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2eb6fab7-e67e-44db-ada3-8e39f34a6b2e",
        "cursor": {
          "ref": "e30d8676-cd46-4fc1-abab-48c3181abc51",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "198c9948-d265-4f45-a48f-217fe1846005"
        },
        "item": {
          "id": "2eb6fab7-e67e-44db-ada3-8e39f34a6b2e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b3b2a4bf-6bea-4503-8592-a7d69dfab8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "15abc704-c702-4e28-83d4-faaf3534098b",
        "cursor": {
          "ref": "6741fc96-13b1-4ae9-8c8c-9bce608d0eaa",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eba75da2-3698-4d4b-94a3-965f5999a939"
        },
        "item": {
          "id": "15abc704-c702-4e28-83d4-faaf3534098b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b1ed5632-145b-490b-8675-0cabd60f4524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "0315c7b1-9d60-435e-9f99-384a976075e4",
        "cursor": {
          "ref": "6866ebcd-30c6-4614-a058-fad475618dc5",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3f6d05cb-5654-405e-aca6-63f543c38758"
        },
        "item": {
          "id": "0315c7b1-9d60-435e-9f99-384a976075e4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "81cfa489-7f72-4e0b-a0eb-ec76b1d591c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "833e0f4a-485c-4a02-9444-10923592608a",
        "cursor": {
          "ref": "cbb88ce7-de97-4499-afaf-8c4710cf12f6",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "496fa046-8256-476f-b855-af8879221ae4"
        },
        "item": {
          "id": "833e0f4a-485c-4a02-9444-10923592608a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "78baf193-51d4-43de-b8b4-b227e9e14d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "d5673d12-c485-4def-b119-85fa94ffc679",
        "cursor": {
          "ref": "281e898b-57ad-4a81-a007-c34287849cac",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f0236991-67dc-4b00-9ba3-0bfb1ec625ab"
        },
        "item": {
          "id": "d5673d12-c485-4def-b119-85fa94ffc679",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2f08faa2-a374-4866-8be1-ae661425347f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "89e86b7b-0d52-4a8d-a1de-569a73cab93e",
        "cursor": {
          "ref": "d1d92bd4-a838-45b9-ac00-80eb688096f5",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8d84b0d2-8cc7-4abf-b593-544f51646488"
        },
        "item": {
          "id": "89e86b7b-0d52-4a8d-a1de-569a73cab93e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5cd0b70d-a277-4c6a-99cb-3558ad7600f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4c794df3-ceb6-4bed-b66b-879ce365e58c",
        "cursor": {
          "ref": "cfff2381-06b1-49b5-b0aa-24b810dbc4d2",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c4ce4187-57cc-42d4-a267-121ffeef4621"
        },
        "item": {
          "id": "4c794df3-ceb6-4bed-b66b-879ce365e58c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1f21b2fa-f7d1-4b5c-bba9-2462fe060180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a3dfd7db-411a-465d-a0d1-efc27297dacf",
        "cursor": {
          "ref": "f6f0f8e3-5537-404c-83ad-8df8bdb2634f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a80bcc27-2be1-4ed5-b405-bd58211bb3c2"
        },
        "item": {
          "id": "a3dfd7db-411a-465d-a0d1-efc27297dacf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "731b33d5-4c09-44f5-bd7d-9c20e49e5e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e9145f94-adc5-487e-bd14-d0e0137e418c",
        "cursor": {
          "ref": "e8400742-f15b-41e1-aef6-5c7f7bc8ae2e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "54ce37ee-fd8a-4db1-9fd7-87b063b388c2"
        },
        "item": {
          "id": "e9145f94-adc5-487e-bd14-d0e0137e418c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "54a5465c-1f4b-43f8-b188-4773dd244075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7107a897-b0ea-41c0-9c92-784d26b9007b",
        "cursor": {
          "ref": "5758647e-518b-4f01-a58b-377dbe7bcd27",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "54d06425-eb5d-4f7c-a8dc-158699d2914c"
        },
        "item": {
          "id": "7107a897-b0ea-41c0-9c92-784d26b9007b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f09eb525-d1f2-43fc-b7d2-6f9f0424abfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "8ab36bc8-668d-4e6d-82f7-ae16f82ffdd1",
        "cursor": {
          "ref": "fd5b0d63-0965-48e8-931e-f29d9efe88ca",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1fde4de2-ba7c-49d8-9fab-98b1d7b2df40"
        },
        "item": {
          "id": "8ab36bc8-668d-4e6d-82f7-ae16f82ffdd1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "20aa1ece-7f3f-4917-916b-58ddd108996f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "51507961-7147-422d-a461-0b4444fafad9",
        "cursor": {
          "ref": "1b9f46d5-9e25-48fb-87a6-282501756c6b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c742e104-12bc-47bb-84d5-f9e3cfb224ce"
        },
        "item": {
          "id": "51507961-7147-422d-a461-0b4444fafad9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "12dddc21-b626-49ba-9c69-c8866417a92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7bd4c94a-5b3f-4b06-9c28-105d09620aed",
        "cursor": {
          "ref": "87ed72a3-eeb6-44e5-b17a-f73d42551532",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1fe6f57f-556f-43ec-946f-4b92a0d406e0"
        },
        "item": {
          "id": "7bd4c94a-5b3f-4b06-9c28-105d09620aed",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a7b09146-1f4e-4a0f-9768-8c31dd21700b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "fe8413ec-109d-46f9-afd3-d2186b751a55",
        "cursor": {
          "ref": "f5be4b9e-587e-4878-9ada-babf1fbb921a",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c5e189f8-a836-4575-996f-759049590c96"
        },
        "item": {
          "id": "fe8413ec-109d-46f9-afd3-d2186b751a55",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "03c11885-7f12-4fbd-9754-05a1226166ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "ef68dfa4-0aba-45e8-a876-fa9efb8da3cd",
        "cursor": {
          "ref": "159a1818-0ba2-41e2-a14d-23abf3859be2",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "60f1c3b2-dc8e-46c8-af92-1adf79dd622a"
        },
        "item": {
          "id": "ef68dfa4-0aba-45e8-a876-fa9efb8da3cd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2a2f69d9-1840-4dc3-a7eb-f67ee96aca20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "fef156fe-0388-46e9-8a30-f05406f738e9",
        "cursor": {
          "ref": "1890f7c2-adb2-42d6-a2e2-c433134fcdc6",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b5d3f409-03c8-45e3-91be-4ca86623ef66"
        },
        "item": {
          "id": "fef156fe-0388-46e9-8a30-f05406f738e9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2e22db10-a039-465b-a6e9-1c6f9e28bdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "6e94d47b-b392-49db-a414-c3fa6d220798",
        "cursor": {
          "ref": "d40236b1-8daf-4cb2-a8cd-b3e68e5cdba6",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "08c6d6c8-2993-44c9-bf4c-a5a0284c18f4"
        },
        "item": {
          "id": "6e94d47b-b392-49db-a414-c3fa6d220798",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7ff5da81-985e-4249-93f3-313e3f806fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d0110d8d-2a46-4ae2-934a-2e6ec4d66092",
        "cursor": {
          "ref": "f9383565-ee2c-4da0-9b44-6f19f1e9d4d9",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "71378ffa-0b76-45ef-be2b-d7a3ad44c278"
        },
        "item": {
          "id": "d0110d8d-2a46-4ae2-934a-2e6ec4d66092",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "13125ffc-33c4-47e7-8bac-837e282ea249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "88023454-196c-4bce-b2c9-45952cbf6759",
        "cursor": {
          "ref": "8d774d1d-e420-4618-8858-6270e08af500",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d58ba93c-e933-48e5-9029-f044af830279"
        },
        "item": {
          "id": "88023454-196c-4bce-b2c9-45952cbf6759",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "324bf57b-ef1a-4e3c-9618-a0a514cd6133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "3279f0a9-965b-45bc-b57d-9cbd4c0c9426",
        "cursor": {
          "ref": "4f2aaf6e-088b-49af-8eb4-04c4c17f841b",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e0de9e71-d9b9-4a68-9f19-00c464b3b7ec"
        },
        "item": {
          "id": "3279f0a9-965b-45bc-b57d-9cbd4c0c9426",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8ae607af-945c-428e-baa2-85cd433446a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "aded3848-e39b-4002-bb34-8be51c9c452f",
        "cursor": {
          "ref": "48e21b1b-fab0-432e-982e-714540902d51",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dfd20c51-f723-48d4-8ce6-c3e808116581"
        },
        "item": {
          "id": "aded3848-e39b-4002-bb34-8be51c9c452f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6c240296-f21f-453a-bddc-99f7c3da734a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "5a1713b5-793b-4816-8057-52d45799d478",
        "cursor": {
          "ref": "1dae9365-7fd1-4176-a969-13db969e6593",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "42670156-f117-4410-83da-9a57334caa4b"
        },
        "item": {
          "id": "5a1713b5-793b-4816-8057-52d45799d478",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fa4d0822-6a79-4945-9649-4efdf271fab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d6b6de60-e277-4eb3-8f8c-0e4af615fb08",
        "cursor": {
          "ref": "3cfc8582-8851-4e36-abb4-d8d4b0930e3c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "30dc5e77-a461-47b4-94d6-a9dcf0b79cfb"
        },
        "item": {
          "id": "d6b6de60-e277-4eb3-8f8c-0e4af615fb08",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7d1bf147-fa6c-4be6-a848-0cc9e2667fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "bc4382d5-6fae-4ed0-8a3e-f279e3a1ed67",
        "cursor": {
          "ref": "619d6692-da0e-427d-81bb-775851a7da8b",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f01f0f39-b9c5-420c-ae99-5e00cd8369d3"
        },
        "item": {
          "id": "bc4382d5-6fae-4ed0-8a3e-f279e3a1ed67",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bbd7333d-7ee9-4a93-8847-1d17d4b909a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "212fd30c-f25f-43f3-aa5b-8e7e940222b2",
        "cursor": {
          "ref": "52615b43-700d-438e-9a8e-e60d0b1ff87a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59157e78-da3e-4ddf-903a-7657a3f46378"
        },
        "item": {
          "id": "212fd30c-f25f-43f3-aa5b-8e7e940222b2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "05dd8143-1449-4707-9f84-c3c501b1928c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3ce33f10-37dd-4a9e-b214-83b5fc4c9277",
        "cursor": {
          "ref": "57af8e4d-a0ce-4eae-856e-5630e8d7fb22",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c272116c-e653-44da-9891-67454037747b"
        },
        "item": {
          "id": "3ce33f10-37dd-4a9e-b214-83b5fc4c9277",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "da2d292a-cfe3-43d3-aa2a-0b2b83027bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "1e7bff21-a46c-436b-b705-fb65c2b56052",
        "cursor": {
          "ref": "46af8992-7c22-4c5b-953e-9e48025107ac",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e31d0913-61a8-41d3-825c-027f7ece8067"
        },
        "item": {
          "id": "1e7bff21-a46c-436b-b705-fb65c2b56052",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "858fc0dc-d3ee-4524-9b67-6f067609efc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "3fa96457-604e-4b43-b6fe-5c66f3ae5329",
        "cursor": {
          "ref": "bd94f048-f47d-45d4-92c2-706aa9d9a646",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f392d909-b192-4dd9-9f33-b855b1ffcdb3"
        },
        "item": {
          "id": "3fa96457-604e-4b43-b6fe-5c66f3ae5329",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3d1a5837-7fa1-49c1-971b-aa8d592d9f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "3884c3fa-10af-4dcf-9dda-761d83ef52a2",
        "cursor": {
          "ref": "a67d7e2e-54d1-4578-9afa-bec2b878d28f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "535686d6-c38e-487f-baea-e4d91703b449"
        },
        "item": {
          "id": "3884c3fa-10af-4dcf-9dda-761d83ef52a2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "61fbcf14-cd75-4eaa-874f-89b8d13c4937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "ee63ced2-2bc4-4458-9635-4f87697280f6",
        "cursor": {
          "ref": "1b1122ee-94f2-4f78-a0e7-85c33a98bc31",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6af337e4-31f1-4321-a2c6-8be8d696947c"
        },
        "item": {
          "id": "ee63ced2-2bc4-4458-9635-4f87697280f6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ee194be1-a258-4570-ba42-058d63cf17df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a18f5e5b-b9ef-4708-a932-c11f80584931",
        "cursor": {
          "ref": "4bafece5-6a31-423a-a2b0-728a322eb59b",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "096a9bd9-777f-4c93-8eb3-3058d01a1a68"
        },
        "item": {
          "id": "a18f5e5b-b9ef-4708-a932-c11f80584931",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ab14ce55-914f-491f-97ea-e1558b2e3dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "feecb2f7-a3a5-4af6-a03a-bd737426b18b",
        "cursor": {
          "ref": "8a87c585-97c5-4e5b-bf3e-2cb8c80fb4fe",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4491a187-f894-47bb-94bd-1e074cce5d93"
        },
        "item": {
          "id": "feecb2f7-a3a5-4af6-a03a-bd737426b18b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9bc98b19-618f-46ed-ae12-a860f74f184f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ab250a24-bcc5-42c3-a970-70eaaa6e3fcc",
        "cursor": {
          "ref": "d2a9fffc-6d6b-4eed-b8d1-fa0459edd0bf",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c11bbbab-0df3-4f0a-9b3b-df2fa5c58e77"
        },
        "item": {
          "id": "ab250a24-bcc5-42c3-a970-70eaaa6e3fcc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ec63a15d-572d-4e13-88e9-6bdf0e1d6816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "473cd064-3fe6-4023-971f-3a20bd6da829",
        "cursor": {
          "ref": "279c8d8b-baf7-4962-9825-c347c85fdaa2",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e623d922-f447-4ce6-963b-247484cf8e06"
        },
        "item": {
          "id": "473cd064-3fe6-4023-971f-3a20bd6da829",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4b504c7c-d388-40a8-8fc3-44ec4640e8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "5575798f-c811-49bb-a79a-bb566d088360",
        "cursor": {
          "ref": "d6c640be-2979-466e-89c9-a86345bef23f",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "93489b86-65f8-48a7-bd92-2bb6c44584e1"
        },
        "item": {
          "id": "5575798f-c811-49bb-a79a-bb566d088360",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c8f2f9a1-582f-4315-b0ad-7ec76d01bf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "08b663e7-0b23-42fd-9e44-c2047d8972d6",
        "cursor": {
          "ref": "9f5f5ec4-6a5c-44e1-ad70-fa79408d876b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "469ab6c3-dbc0-4ce6-ab11-a4dcc7517b88"
        },
        "item": {
          "id": "08b663e7-0b23-42fd-9e44-c2047d8972d6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d0b7f370-0e73-4177-aacc-82ec329cc7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4cd10c1f-14f8-4e7d-8165-cb9ab030ab83",
        "cursor": {
          "ref": "6a7177bf-ef8c-4954-b68f-ba2e5774eee9",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "58044231-f730-4f61-b2cc-f30b1870007f"
        },
        "item": {
          "id": "4cd10c1f-14f8-4e7d-8165-cb9ab030ab83",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "68f02188-7700-4f2c-8e3c-4307bcc24e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "4ae57321-180b-485b-a5a5-11ae6d4d7017",
        "cursor": {
          "ref": "7ea818e3-c8bf-43a8-affa-529741bada17",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4d7795d2-0eb8-4074-8677-ed62ae7defcd"
        },
        "item": {
          "id": "4ae57321-180b-485b-a5a5-11ae6d4d7017",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "03429ffa-adbb-4500-af25-a2557e1aee14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3ae74cc3-e783-4b47-8866-8cd5f659db28",
        "cursor": {
          "ref": "543a51e1-6a38-44c6-8d24-3f540097b2aa",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7725f37c-0fb0-444e-a4eb-717e592fd957"
        },
        "item": {
          "id": "3ae74cc3-e783-4b47-8866-8cd5f659db28",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d9c8e169-7490-4a12-b047-4cda6ff7c82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "89daaee8-0443-4f7f-9d57-c6397566131b",
        "cursor": {
          "ref": "7c4dddf1-2653-4b5d-9bf0-d998a1f8863f",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ef525ddb-061c-47c2-972d-f0247ab72669"
        },
        "item": {
          "id": "89daaee8-0443-4f7f-9d57-c6397566131b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e3836c1b-cebb-4a22-8577-6e23156819c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "4c5b6977-0cfc-4c04-91dd-82febdc4791e",
        "cursor": {
          "ref": "73305075-4b3b-48a0-a4cc-e870191fc2aa",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e080d29e-5a0c-4b36-b3ec-2179a5ca6205"
        },
        "item": {
          "id": "4c5b6977-0cfc-4c04-91dd-82febdc4791e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ca383bf9-0577-48ff-8aaf-ed76374def23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "7d4bf7b7-3bd1-462f-863b-14c4a7232fca",
        "cursor": {
          "ref": "795d9bf8-ef2c-4cd8-9244-a87782092920",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "14295a59-b8ac-40ef-b0f4-c5b1c1c360bf"
        },
        "item": {
          "id": "7d4bf7b7-3bd1-462f-863b-14c4a7232fca",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fb42d39c-5c40-4881-b6f2-0eb535c96294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "4465ed9e-b5ad-4d16-be47-26ef1b7c66fa",
        "cursor": {
          "ref": "249194b3-83b1-4090-98c2-64e9cbde9c26",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "089f86ba-76a9-4b9f-a4d1-49eddf00f64f"
        },
        "item": {
          "id": "4465ed9e-b5ad-4d16-be47-26ef1b7c66fa",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9b358c35-d680-4cb4-8e5b-43c9c86742d0",
          "status": "Created",
          "code": 201,
          "responseTime": 1560,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "a1669bd4-9183-447a-b886-52e00c2252e6",
        "cursor": {
          "ref": "2245ae23-1369-4820-b9e4-32832917c205",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9bb6125b-fa5d-4ee7-86cf-dabfcc6f024c"
        },
        "item": {
          "id": "a1669bd4-9183-447a-b886-52e00c2252e6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "beed0161-dd58-45cf-bf47-2a200306bb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3a8e3c85-ab75-4d9f-aa05-5bdf27295cae",
        "cursor": {
          "ref": "e777129b-8c80-4d9c-a830-89e7214ef136",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3c90be49-c449-402b-820d-5af4c2fa434a"
        },
        "item": {
          "id": "3a8e3c85-ab75-4d9f-aa05-5bdf27295cae",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "279ba2c1-27ab-4757-ad56-581527f1a602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "b86d8025-bf81-496e-992e-a1bcb7e16643",
        "cursor": {
          "ref": "dcb07177-7569-4ba8-82aa-8a77638f79d7",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c6c9794c-0620-430d-85b5-8835d2aff127"
        },
        "item": {
          "id": "b86d8025-bf81-496e-992e-a1bcb7e16643",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d6541a91-9114-4100-80e2-1203178673dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5cf2c11b-9af8-4793-9e09-66e706e206a7",
        "cursor": {
          "ref": "32373274-bff0-4120-9127-b96947e5bf5c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f8482a96-d48e-4b69-a7c2-4e62b1d42188"
        },
        "item": {
          "id": "5cf2c11b-9af8-4793-9e09-66e706e206a7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fe03e651-28f4-45c6-827c-c86a4e4628f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "317dbb85-fd52-4e84-bc7a-eec56927f7af",
        "cursor": {
          "ref": "a2b82c58-002a-4585-ac9f-3bbc7d125661",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6f09f472-0df8-4291-bf19-3243fdee1ae3"
        },
        "item": {
          "id": "317dbb85-fd52-4e84-bc7a-eec56927f7af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dfb47596-2793-491a-be91-a6d440dc146e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "04a3db87-cb49-4bfd-83d1-1422488d10fa",
        "cursor": {
          "ref": "7dcd054d-a805-4c35-ade1-cf7bfbcbaf4e",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "678ffdd5-3681-4a5d-81be-7d3bc351fe09"
        },
        "item": {
          "id": "04a3db87-cb49-4bfd-83d1-1422488d10fa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ed576f5-b424-4c8f-91ab-278bdaed7887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "212310c1-9cad-455e-a98c-f5e3c591be27",
        "cursor": {
          "ref": "8d4b5c91-00b4-48e3-9c98-ae99292a372d",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "63b6b20c-aa06-4cbc-80b5-393dc12a4068"
        },
        "item": {
          "id": "212310c1-9cad-455e-a98c-f5e3c591be27",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "354f7bbb-9e14-4d00-a846-ef962196191a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9ec718ec-3a73-4047-b2c1-e5c14541bffe",
        "cursor": {
          "ref": "95eaa29a-71bb-46f6-9772-fa78c329ee4c",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e9ed67b5-8bcb-466a-bc4b-04bf581e40c0"
        },
        "item": {
          "id": "9ec718ec-3a73-4047-b2c1-e5c14541bffe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f898792-111f-4c45-97be-a374da7ea985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "32493e7d-6a5b-46ee-8762-61083fa0d64d",
        "cursor": {
          "ref": "57ebbaa0-6ec0-4afd-b782-9134c13b71ad",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2c159c41-6db2-49b5-beb1-665e7bc6a4d6"
        },
        "item": {
          "id": "32493e7d-6a5b-46ee-8762-61083fa0d64d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "71f78cef-c61c-45c3-ae96-3cc4bcc766f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6c0ea65f-ebbe-4878-a8ce-1eeede2a4bc3",
        "cursor": {
          "ref": "47780e5a-2641-498c-b7f7-dec08d0cdb8e",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a994339a-20ad-43e6-9327-78565a3a8f3d"
        },
        "item": {
          "id": "6c0ea65f-ebbe-4878-a8ce-1eeede2a4bc3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a916067f-f7ba-4e59-9fad-5d8b7e75d314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f84beb4d-82bf-4dad-bbd5-58955a60b7f3",
        "cursor": {
          "ref": "4383c8c1-1461-4a0a-8210-a4e02538cfe4",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f74fb33f-ca99-43dc-9af4-924d67c3260c"
        },
        "item": {
          "id": "f84beb4d-82bf-4dad-bbd5-58955a60b7f3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d402c6e8-660f-46a7-aa52-5fe8336a0024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7f960441-7f3e-4cc9-9b34-d3c6ad9ac9b8",
        "cursor": {
          "ref": "dee036b7-e308-45a3-acd3-fa578f6a3a1d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "58bc0aa2-64b0-4272-ae61-b896f290a867"
        },
        "item": {
          "id": "7f960441-7f3e-4cc9-9b34-d3c6ad9ac9b8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8dff7d09-9fe2-40cd-a21e-b3af99f732d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a3e1f2dd-2b3a-41c2-b1d3-20c3698e881e",
        "cursor": {
          "ref": "e8d186bf-ac34-4924-8480-68067d8e8ecd",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "054454bc-1d44-4270-833f-c8fe4b4c73b4"
        },
        "item": {
          "id": "a3e1f2dd-2b3a-41c2-b1d3-20c3698e881e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e66ff801-3ff1-4136-89e7-d483100a2192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9dbd8ba1-5c49-4681-b7b3-dba077782c0e",
        "cursor": {
          "ref": "39977dda-125a-47c3-9080-70bb45a6713d",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "43a5359b-f27e-4f96-a5a2-a399e1560471"
        },
        "item": {
          "id": "9dbd8ba1-5c49-4681-b7b3-dba077782c0e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "25f565e7-93ff-4d9d-9153-9a834b7f15f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4ca01a2a-3e02-4111-be3e-e535bd2408e0",
        "cursor": {
          "ref": "1564d9b2-193d-4d29-af05-b1085ba8782a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a04a1738-80d0-477d-844c-74befd82ff53"
        },
        "item": {
          "id": "4ca01a2a-3e02-4111-be3e-e535bd2408e0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66f8a84b-0440-4692-8c52-cd3ec199875f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7776a134-a7ae-4e86-bd31-5c75f11ddda3",
        "cursor": {
          "ref": "d11c5b01-c9cf-4e7d-b9c5-b4cf4e756a2d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "26781eb1-a07c-45c9-9edd-dfb559ccb76f"
        },
        "item": {
          "id": "7776a134-a7ae-4e86-bd31-5c75f11ddda3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a31dc523-d819-436c-8728-2332772d44bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "fea39a33-e736-4c32-9255-bd6636b53768",
        "cursor": {
          "ref": "27973977-6f2c-430e-8843-ae19a6595bb4",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7606db7b-a4c6-4f3f-829d-c34bf1a7e60b"
        },
        "item": {
          "id": "fea39a33-e736-4c32-9255-bd6636b53768",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "52da2a3d-2d26-4e1d-bf7b-d9051aed13bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d9706c05-cab1-435a-851b-6a0c34455735",
        "cursor": {
          "ref": "a4464709-fab8-49fe-bc68-976c874e2d0a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b0a25860-da89-4085-9bf7-845c5cc63ae5"
        },
        "item": {
          "id": "d9706c05-cab1-435a-851b-6a0c34455735",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "48d2723b-daef-4e13-b606-e4955ed68f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6afa50fa-d8ec-46a7-8468-33940f772787",
        "cursor": {
          "ref": "673339b3-0c0a-4382-8f14-658c3c16bf85",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dc3f17ce-4e33-4b49-9bc8-a19fddb8b5ae"
        },
        "item": {
          "id": "6afa50fa-d8ec-46a7-8468-33940f772787",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e9aab549-28ed-4fa6-a732-658d250eb3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ce5245ea-f54c-421c-9753-dc03e5b525d8",
        "cursor": {
          "ref": "b64ff2fe-94b5-4647-917c-dfea4092114f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cb15c35a-2f36-44e9-8ae0-931df49c13a5"
        },
        "item": {
          "id": "ce5245ea-f54c-421c-9753-dc03e5b525d8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2d8aabf9-bb81-4990-877d-705ce1f1f872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2de31005-e964-488d-928a-362a18aca40b",
        "cursor": {
          "ref": "62d5bacc-8a49-424a-a6cf-33b16a528d97",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4ef2a601-3dab-4471-aee1-686d949725ad"
        },
        "item": {
          "id": "2de31005-e964-488d-928a-362a18aca40b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4c78b01c-05f7-4e41-91eb-9f45a5a194a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a3c1a30f-0d9d-48d8-a799-27a194fe6b01",
        "cursor": {
          "ref": "8f9cf4ba-1df9-41e3-bb5e-901631ab79f6",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "67bcf455-9109-426c-a48f-76037959fdd1"
        },
        "item": {
          "id": "a3c1a30f-0d9d-48d8-a799-27a194fe6b01",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c0d9ee15-09ab-4436-8bce-8d8485470b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3c7a84e2-cfeb-449d-972c-1e7b653f92ba",
        "cursor": {
          "ref": "ca7e9278-6e1e-4934-9d78-a0ba99d7ca8c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "57903f19-2fdd-4c2d-96da-42d5ff0c78ab"
        },
        "item": {
          "id": "3c7a84e2-cfeb-449d-972c-1e7b653f92ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ecc38225-ee08-481d-a6ec-c18129e844bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "91087ae7-da0e-4530-99ac-3c5d64d3c48d",
        "cursor": {
          "ref": "1b5794f6-8494-4104-94ed-2bf9ffbf4af0",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "103696be-39e4-4457-94bf-3876bafd0b8e"
        },
        "item": {
          "id": "91087ae7-da0e-4530-99ac-3c5d64d3c48d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "91c3fa8a-4f6d-41c5-a0e1-4feac8da9355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5800f38e-45f1-40a0-ba9b-57103a34dea7",
        "cursor": {
          "ref": "b66b2960-628e-413d-b878-a7f07e128811",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3238ad16-68eb-4c93-98fe-1125b3ea5f1f"
        },
        "item": {
          "id": "5800f38e-45f1-40a0-ba9b-57103a34dea7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f45a9962-c1b9-4265-89d5-6cca46a9f76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "02962c71-ac9e-408d-ba91-eb9d9e5fde47",
        "cursor": {
          "ref": "2f023d33-6cd5-4737-b399-7e33b055b94a",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "94a9d978-5bd0-49cb-9e63-58a3fcb0f835"
        },
        "item": {
          "id": "02962c71-ac9e-408d-ba91-eb9d9e5fde47",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "761b4405-f804-4a0a-be1d-a6cf9c18aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f560cc78-ef31-40f9-8097-954b11dc49c9",
        "cursor": {
          "ref": "ad0da614-627d-41e8-bb97-62675a6b628e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "24e827e3-91c3-476b-9323-84cbc6ee908e"
        },
        "item": {
          "id": "f560cc78-ef31-40f9-8097-954b11dc49c9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "621d7818-96b8-4744-9b1f-6cb3fad4c9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fae2ff8a-f61e-4a45-b443-ead2c91265af",
        "cursor": {
          "ref": "03ef9f2c-77fc-46c5-a937-dbf01f7453f1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "41ef32c1-7c04-472a-87dd-2200815a4b8f"
        },
        "item": {
          "id": "fae2ff8a-f61e-4a45-b443-ead2c91265af",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "44ef66ad-e2fe-4666-bfbf-ea7d25332a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d3cf0d3e-f19c-4197-9b6c-40e45c0355e0",
        "cursor": {
          "ref": "5d641e4d-1837-4ddc-8fb5-bf87234a87dc",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "96ff1126-3ab1-4687-b971-933bbaf7a9ec"
        },
        "item": {
          "id": "d3cf0d3e-f19c-4197-9b6c-40e45c0355e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ef45d58f-6226-4c91-a6d7-fa89fe4e05ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "057aa31b-6f76-4709-82b6-5e1c64e78798",
        "cursor": {
          "ref": "bb2bbfe1-5add-4676-b951-68373d256d70",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "085a3e3b-500a-4b7e-9c5c-ac28875954e5"
        },
        "item": {
          "id": "057aa31b-6f76-4709-82b6-5e1c64e78798",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b82f8186-93b3-47df-8d25-6cd67f505608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "adb29118-79a8-44a6-96df-bc4486d6d784",
        "cursor": {
          "ref": "a8422380-9088-42f5-841e-9426d6d69811",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "777dd5c2-55ef-4474-a442-3eacc61cdb5b"
        },
        "item": {
          "id": "adb29118-79a8-44a6-96df-bc4486d6d784",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c324778e-07b5-45e8-80d4-0e02d7d78d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "07e60558-0102-4de5-ab7b-e6c7f8f75be7",
        "cursor": {
          "ref": "8f9387b1-7c40-45cc-8ff8-8d114a61c36a",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "978c0dd0-2f25-40d2-91df-3271707d427f"
        },
        "item": {
          "id": "07e60558-0102-4de5-ab7b-e6c7f8f75be7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ca980d87-b791-4a2c-a5bf-687fea9f3525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b0847a82-5f3d-43fe-87e8-09ab7f787c69",
        "cursor": {
          "ref": "541c0bcb-7efc-4e5d-b86c-6549c7055e13",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fc8e6eaf-84fa-4526-ae10-556355f47344"
        },
        "item": {
          "id": "b0847a82-5f3d-43fe-87e8-09ab7f787c69",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c2584bae-1e2d-49df-8985-7d6d8e059369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6c649daf-ab8e-45ac-96d3-c05583184649",
        "cursor": {
          "ref": "e6b25648-e465-4a83-bd47-bcbb52677e43",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f107b662-4f20-400d-b9e7-3706cf08d21a"
        },
        "item": {
          "id": "6c649daf-ab8e-45ac-96d3-c05583184649",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a31c92c6-36bb-41da-845d-29387a8b4f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d4db71b3-af61-42f7-9109-29decec923de",
        "cursor": {
          "ref": "67bf53ae-f248-449d-91e2-34b82380ab07",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d4badab5-8d20-4f0b-b7c0-7f4f10abad62"
        },
        "item": {
          "id": "d4db71b3-af61-42f7-9109-29decec923de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6592ab75-399d-42ea-858e-386387e5010f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5716b48e-c9f0-446a-bc67-c31962c35dea",
        "cursor": {
          "ref": "4ea05052-e7c5-420c-b871-9107cec6ce9d",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "606f63de-76f4-4962-a548-552e3158e0a0"
        },
        "item": {
          "id": "5716b48e-c9f0-446a-bc67-c31962c35dea",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "405c1c55-cd49-41b7-bf6c-d668c52e4551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "05ceb928-ab15-4cda-91c1-f68de4b1d84f",
        "cursor": {
          "ref": "faae5914-2af1-4448-96a2-6957bb40bda9",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "395f9832-424b-4cba-8d95-6cd65fbd5961"
        },
        "item": {
          "id": "05ceb928-ab15-4cda-91c1-f68de4b1d84f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a27ed514-7097-4012-ba23-be5052da46bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4012c6c0-5c1e-4073-84c3-2733999ccfc3",
        "cursor": {
          "ref": "aa6a1dab-4bdf-49b5-8b91-fb8d102b3b9e",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2bd33ab1-3187-4efe-aa2b-f645f8d0d751"
        },
        "item": {
          "id": "4012c6c0-5c1e-4073-84c3-2733999ccfc3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5b302046-3276-477a-b13d-efca0c76d447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b275725f-87e9-42fa-bf49-8ea6360ea79e",
        "cursor": {
          "ref": "686f3fdf-182e-45bc-a87c-ead9e9f699a4",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3fb3639f-6399-48f6-82dc-fbdf10648a0e"
        },
        "item": {
          "id": "b275725f-87e9-42fa-bf49-8ea6360ea79e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bb3e351f-f458-40a7-bb24-8eb334e0d32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4fde1207-e692-4e76-be1a-e5217700b1a3",
        "cursor": {
          "ref": "66e5c36d-241a-43db-bf5f-bb1651f5fdfe",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bc3d1143-88c2-4ebd-a640-6bc39f900878"
        },
        "item": {
          "id": "4fde1207-e692-4e76-be1a-e5217700b1a3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "221483e1-03e5-4837-9d7e-6265c5c04f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "73ad16f5-421e-42d4-8513-410fe752b60d",
        "cursor": {
          "ref": "9ed76f10-bef5-419b-9732-97e90d89c208",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4a2366a1-58bb-4424-8825-1083f408e757"
        },
        "item": {
          "id": "73ad16f5-421e-42d4-8513-410fe752b60d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6fa7e01b-11de-4650-9ea3-94f9f2e2cabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "81b6b3fd-d128-489f-9fb2-1bcc86a787fd",
        "cursor": {
          "ref": "700a9be5-3ac6-416e-ad8a-68dbfeff64b1",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "52c9174d-be64-4839-8fab-1e1ff500d4e4"
        },
        "item": {
          "id": "81b6b3fd-d128-489f-9fb2-1bcc86a787fd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2b81356e-1268-4bb9-a21f-3ec18cf0dc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e4dc207c-56b0-4d13-b902-a18af341c511",
        "cursor": {
          "ref": "3b1fe758-58de-4d61-9b4a-c40143481d95",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0ba4aa45-7f70-4208-b73c-d3ca5877059b"
        },
        "item": {
          "id": "e4dc207c-56b0-4d13-b902-a18af341c511",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "318f502a-dea8-40e8-b203-8d133f7c4eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "f0261ff3-2bee-4f7b-8ada-50e0c90efeeb",
        "cursor": {
          "ref": "90ef9298-a767-498e-8069-fce4f3b921ab",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "402cbd3b-bc03-492f-af11-62a7976bb002"
        },
        "item": {
          "id": "f0261ff3-2bee-4f7b-8ada-50e0c90efeeb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a81b6544-ee58-480b-bb53-c979e17ec30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f357a1cd-c52b-463c-be50-3dc802b19933",
        "cursor": {
          "ref": "8d16092c-fc69-4008-8f01-2f3a764aebe0",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b60bf61d-b446-4256-b900-336f8f732120"
        },
        "item": {
          "id": "f357a1cd-c52b-463c-be50-3dc802b19933",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f13a1fce-3c34-4bcb-8af2-e65346a9ad70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "40fd0176-0768-4c6b-adc3-1d7f2821a789",
        "cursor": {
          "ref": "091b09f1-8d7f-4a2d-8fa5-f210d00471ff",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e6b385a7-0b26-4c95-a4da-7022bb0f37f9"
        },
        "item": {
          "id": "40fd0176-0768-4c6b-adc3-1d7f2821a789",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3f247c3c-c80b-4f56-bb5e-d307407b1c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "b569ce8c-1d82-45c9-82d2-811a8ac36177",
        "cursor": {
          "ref": "5171c3c6-6ce9-4baa-bb1e-5d7604cd3de8",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "37093545-37f2-47ca-a2cd-8954709a4f2b"
        },
        "item": {
          "id": "b569ce8c-1d82-45c9-82d2-811a8ac36177",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5dffcb97-d81e-4931-8231-9967b2c3acd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "df7bc653-82f1-4875-94dd-06d061b7a9d3",
        "cursor": {
          "ref": "e3044ff7-f97b-4e94-864f-5810205faba8",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7b2f8c78-ac50-4b27-a00d-87a884f7d423"
        },
        "item": {
          "id": "df7bc653-82f1-4875-94dd-06d061b7a9d3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8c122bf0-8a96-41f0-92e1-11f8d8f5042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f996579a-2556-44aa-9dcf-f51cff2d6f28",
        "cursor": {
          "ref": "47faefb5-73c1-440d-88b0-ad0f5b8eb68d",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8e53680c-fa34-4145-9d07-6a5f19ab221f"
        },
        "item": {
          "id": "f996579a-2556-44aa-9dcf-f51cff2d6f28",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b8e8fbfe-5c3f-4a3a-a512-f424d241ea9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9661b1f2-6136-4bd2-9603-c798a708fe63",
        "cursor": {
          "ref": "409f82ab-91a6-433c-8361-6d2c9e9c126f",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "af5edfd3-17f9-4fe9-a0c4-846050b587e6"
        },
        "item": {
          "id": "9661b1f2-6136-4bd2-9603-c798a708fe63",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9312386b-92bf-431d-bac8-e86b17777c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a8145a80-e6e3-4dda-9c6b-2619b0038722",
        "cursor": {
          "ref": "f96c02d5-cee0-4e21-94a5-4fc8a15c4196",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e5438397-3f00-4d7c-a527-0f7a79c0cba3"
        },
        "item": {
          "id": "a8145a80-e6e3-4dda-9c6b-2619b0038722",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9672a20e-5fc6-4a23-ad0d-9122fd290586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1ee57cea-ff5b-45e3-8a75-62ed85e21831",
        "cursor": {
          "ref": "506884e2-2f33-4409-b4d3-d3ee3eb52ca8",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5bceaeb3-bc46-48f4-a45c-6cfff343ce99"
        },
        "item": {
          "id": "1ee57cea-ff5b-45e3-8a75-62ed85e21831",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e187bdbf-92f6-4248-8921-b9b8f9a3edb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "46838bcc-09f3-4257-845e-d12f48877e11",
        "cursor": {
          "ref": "ee989636-116c-47b2-abca-b4910a34878c",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6eba34ab-c7a1-48b7-bcfa-f6569aadc933"
        },
        "item": {
          "id": "46838bcc-09f3-4257-845e-d12f48877e11",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1505c732-d3d7-40b5-90b4-41175cf77adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5801829c-f6db-4832-a062-c6daf09113f7",
        "cursor": {
          "ref": "65731556-cc1b-451f-b9d2-1ce011ac0218",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5c687dcc-4d6a-4105-8d7a-ce6fd9ab7aa3"
        },
        "item": {
          "id": "5801829c-f6db-4832-a062-c6daf09113f7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "530382a8-2a57-44ac-93bf-904159b5bd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "87bc04fa-673b-44d4-bfe9-c7085545cdb3",
        "cursor": {
          "ref": "73b56cb8-34ec-4aa7-a443-34bcd65a3bbf",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bbec6dd7-3bf4-41e1-9e22-2d62c70ff793"
        },
        "item": {
          "id": "87bc04fa-673b-44d4-bfe9-c7085545cdb3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "98d7a10a-88bd-4344-8eb2-b8b9c440f0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "0068c322-1a08-4328-97ff-7b08e77e027b",
        "cursor": {
          "ref": "ef5e38f8-257d-458e-861b-c43d36e79e53",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a0caf390-c273-4750-b589-42692f9945d4"
        },
        "item": {
          "id": "0068c322-1a08-4328-97ff-7b08e77e027b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b1e0c5e6-cc15-4749-bce8-b789283e0af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "167593d8-7a70-42a3-80c3-45d4a57598d6",
        "cursor": {
          "ref": "0d19de40-4ae3-47d2-b8ed-a8a046e194d9",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a7778573-8485-469f-a19f-2b2a1aa55912"
        },
        "item": {
          "id": "167593d8-7a70-42a3-80c3-45d4a57598d6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "815b1f24-a127-4fcf-9664-77c41cd87a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b15ff5f1-e5f3-4c6c-bf5e-9b08a3a6c64f",
        "cursor": {
          "ref": "90d1a278-3f84-4ae3-9642-439d4f278585",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5a56a86a-3d5f-4fab-b2b4-3f18f2fc47b4"
        },
        "item": {
          "id": "b15ff5f1-e5f3-4c6c-bf5e-9b08a3a6c64f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "34d4cd4a-d395-4faf-a679-7628db3b9922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "b3399271-d3a4-48fe-aa29-f4e1d8ad4eae",
        "cursor": {
          "ref": "91e9b538-0fcb-424f-9d7c-dda6a83ae790",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e63a08e2-a0e6-4ea9-8163-c2831ea30b95"
        },
        "item": {
          "id": "b3399271-d3a4-48fe-aa29-f4e1d8ad4eae",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "532ba290-cc75-426e-ae41-844b147af228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "87e92b1d-3d02-4319-b4b6-d76432cd0e76",
        "cursor": {
          "ref": "a0c16b3c-bc07-43e4-90f3-1e4f5a4ff9f7",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "827b174f-5dfe-43f7-a7ff-04d851fd8726"
        },
        "item": {
          "id": "87e92b1d-3d02-4319-b4b6-d76432cd0e76",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "34a5d998-0d9e-46e3-894f-b0226b0fcc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "a234c7e3-4c4c-4a73-a70a-03d28cccfbf9",
        "cursor": {
          "ref": "18473698-a75e-4371-80a6-84652c5162f7",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "da2ecfdb-8dfb-4aa8-83b0-e898b346e317"
        },
        "item": {
          "id": "a234c7e3-4c4c-4a73-a70a-03d28cccfbf9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9e07760b-f7c2-47d2-9b2a-5453cac4948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5072d684-9c72-4c07-ac1e-39aac46e8a29",
        "cursor": {
          "ref": "95ef894c-1a2e-45fd-8fe3-badaf2d2eed0",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "adffb918-a070-454d-8484-89ea7e2f8fbe"
        },
        "item": {
          "id": "5072d684-9c72-4c07-ac1e-39aac46e8a29",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d724a4df-8e28-4d69-bd96-14a4c144743b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "7e87ed65-e2cd-4cb2-b00c-eabff77137e3",
        "cursor": {
          "ref": "0700410f-cb9f-4660-9e3e-62459fb3974d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c7319613-895f-43b6-b1f9-effe5717e4e6"
        },
        "item": {
          "id": "7e87ed65-e2cd-4cb2-b00c-eabff77137e3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "67dd836c-426b-41e9-b909-14d3c205a4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "0134e836-8026-4bb5-a356-372e77381267",
        "cursor": {
          "ref": "db1a9450-c774-4080-8da9-a6fff12aa5cf",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "77a0b1a3-f559-40ff-97b9-054a4e6e7cc9"
        },
        "item": {
          "id": "0134e836-8026-4bb5-a356-372e77381267",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e04bb5b7-037f-4af8-8c99-c39ab9b274f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3e5928b4-7417-487c-b60b-fabc67224b7f",
        "cursor": {
          "ref": "dc761ddc-1721-4f44-93be-8418ca0ee3b5",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "378d65f5-3fd2-4f6a-ba18-5862d01c91b0"
        },
        "item": {
          "id": "3e5928b4-7417-487c-b60b-fabc67224b7f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f1225812-9840-4a85-a4ee-e628be7b3111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "69b5f6ad-9085-4a1f-958f-189744cbf580",
        "cursor": {
          "ref": "9c53a204-63f5-4e20-a342-92235f30234d",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e4bbb903-7ed4-4d4b-9efc-75218cc56281"
        },
        "item": {
          "id": "69b5f6ad-9085-4a1f-958f-189744cbf580",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a239bc47-a11f-4b44-ac72-9de81d60044d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "f762d7e2-e0df-4af5-b438-026f39a3491b",
        "cursor": {
          "ref": "e807675a-7934-4cef-afda-96c197b45632",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "98b08ec2-9aeb-41f4-a3c8-14b4cbc6bec5"
        },
        "item": {
          "id": "f762d7e2-e0df-4af5-b438-026f39a3491b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "14417d43-e2d0-4b9a-9c62-b36aff454183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "7da82797-2bc2-4212-9c46-2c3534b4c408",
        "cursor": {
          "ref": "84392981-be7a-41b2-9412-36b6a5118d22",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "56d840e9-5757-4c3c-8af6-b975960c6e9e"
        },
        "item": {
          "id": "7da82797-2bc2-4212-9c46-2c3534b4c408",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5759811a-dde6-4423-ac9f-3f932a0c5181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "014a9952-8565-4325-aab2-11cb13ff66e6",
        "cursor": {
          "ref": "ba79cf07-a14b-446b-aa5c-444679913826",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fbcf927b-f88b-4779-8534-1864b96290f9"
        },
        "item": {
          "id": "014a9952-8565-4325-aab2-11cb13ff66e6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ab6a737b-7b0f-4d97-8f4d-8bcc33fe4306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "a126f187-a5b8-4aff-835a-0965e01a3b31",
        "cursor": {
          "ref": "814fc77a-c0b4-4530-a67e-b1bcc11baa1d",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "936cb5cb-619f-414e-ab94-5fab47cec195"
        },
        "item": {
          "id": "a126f187-a5b8-4aff-835a-0965e01a3b31",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2d50b064-b189-42b6-b186-3803d82a584e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "0fc3c665-6ead-436d-84e8-89d31bf35f27",
        "cursor": {
          "ref": "dab12543-b4d2-4d4c-b231-af55cd4c73d9",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f61974a0-6825-45e4-8d16-cd6024af07e8"
        },
        "item": {
          "id": "0fc3c665-6ead-436d-84e8-89d31bf35f27",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c13a4aac-cef8-4866-b309-eacd753d8780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "fe859e8b-0501-4fb1-8c93-f25e0fdadfde",
        "cursor": {
          "ref": "860e030a-bf5f-4a5f-94f1-1be324bff45c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6362bfb8-ef9a-4960-8622-bdc699c9e112"
        },
        "item": {
          "id": "fe859e8b-0501-4fb1-8c93-f25e0fdadfde",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "208acbad-054f-4f8b-962f-b819737b8825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "e1805599-0337-4479-95ad-de72fd4929a6",
        "cursor": {
          "ref": "5295b233-16f0-4187-ac53-0ab6273fec59",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ee344040-cfcd-4c81-8f21-3a7472c86dcb"
        },
        "item": {
          "id": "e1805599-0337-4479-95ad-de72fd4929a6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "dd6f2e4f-bda9-4ed5-9dcc-01c7dcb3525f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "5c235115-0e81-4bf1-89e2-db9f4733a5e1",
        "cursor": {
          "ref": "99a7f91e-aa0e-45ed-a577-8da51d5a22e5",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "71fbc82f-664f-462d-807a-5021f71b4e14"
        },
        "item": {
          "id": "5c235115-0e81-4bf1-89e2-db9f4733a5e1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "59353e59-2bcc-419c-9f0b-6747edc0f77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "55ee7bff-aa72-4cdd-856e-f623bb5716e7",
        "cursor": {
          "ref": "046c5e09-9110-4911-97fb-449242d102d8",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a61528b3-22b7-4720-af9a-d75fd4e1e56f"
        },
        "item": {
          "id": "55ee7bff-aa72-4cdd-856e-f623bb5716e7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3fe89a21-044a-46c7-bd88-98328a02d1d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "384ece43-279f-469f-a483-e0fc119a5cdb",
        "cursor": {
          "ref": "34c4abf7-b64f-49ad-b7a2-73c480e465dc",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6bb22c58-dc81-47cc-ab00-f49a9c0d2d9f"
        },
        "item": {
          "id": "384ece43-279f-469f-a483-e0fc119a5cdb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a60231ab-5cb9-4101-95b0-a62900659d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "35664b2c-645e-45e5-a4cd-1eb9c5347234",
        "cursor": {
          "ref": "c6220c10-14cc-43d2-8a6a-bbf2a1cad7b7",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed3f078d-e7f3-42db-afb3-884c5172cc9c"
        },
        "item": {
          "id": "35664b2c-645e-45e5-a4cd-1eb9c5347234",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c2c26981-e1c9-46d5-9591-767183b29b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "6d8dc67f-470e-401a-9cc4-5bf6ee0a2f0a",
        "cursor": {
          "ref": "60bb3c83-2a2b-47f1-9b25-ef78cd1847e1",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e5e53a7-c247-467a-a64f-91b0faa056a9"
        },
        "item": {
          "id": "6d8dc67f-470e-401a-9cc4-5bf6ee0a2f0a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "87b139b5-4544-4457-b5ad-972221fc6183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "4f874135-a725-4d7a-a030-8175a67ae578",
        "cursor": {
          "ref": "e1ce122a-d129-4c26-86c5-dc78d1d3129f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ec951865-ecbe-413d-acac-83d9428b3811"
        },
        "item": {
          "id": "4f874135-a725-4d7a-a030-8175a67ae578",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1c71c3ab-ff32-4f87-bc7b-9cbe44acd857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fdc4e2d6-0ceb-4d2f-83c6-fe7cb223982e",
        "cursor": {
          "ref": "324b56e2-a87f-4c53-8fed-c7f39f905b85",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5002ce3e-f7d3-4c2c-a0bc-28d1305c5bc2"
        },
        "item": {
          "id": "fdc4e2d6-0ceb-4d2f-83c6-fe7cb223982e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "77d3c58d-44a9-421c-8d0b-51c84b88bb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d3e0ba5e-cbe9-41e6-83cc-48a97c7ccb55",
        "cursor": {
          "ref": "53902f62-b5c0-484d-91b3-a0c507d1d415",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c7739192-8ae5-4036-a42d-a7cae48d95bb"
        },
        "item": {
          "id": "d3e0ba5e-cbe9-41e6-83cc-48a97c7ccb55",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "26145d9f-2dc5-44f8-903a-81eefa176fd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1ae2f58e-88d4-4e83-aed5-bca9441d0a5a",
        "cursor": {
          "ref": "3046a016-9580-4c72-9cdf-3f3e69ff1c00",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5413f703-5a27-4b5b-9476-28fa59ded179"
        },
        "item": {
          "id": "1ae2f58e-88d4-4e83-aed5-bca9441d0a5a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ffe06859-fe94-4b5c-badc-0c7a81571af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c504d73c-d560-44dd-a38a-fa6f149f535e",
        "cursor": {
          "ref": "32b6a68f-2059-4a2a-b898-8d6ad6f5300a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8108884e-ee4c-46a1-8c79-a8a6e9332152"
        },
        "item": {
          "id": "c504d73c-d560-44dd-a38a-fa6f149f535e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "501e6e8d-327b-4218-92e1-88cf144f5ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "dfbd0884-98e9-405b-986b-f773918495ff",
        "cursor": {
          "ref": "5fccc1dc-5f40-43d1-9e35-7e2d9f61c8fa",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "472da5a9-edd4-475f-a36a-f1a50db9b5ef"
        },
        "item": {
          "id": "dfbd0884-98e9-405b-986b-f773918495ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1c778454-0238-49a9-a4e8-2d5820c8949a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cab59d32-fea4-441f-88e2-f8431656af2d",
        "cursor": {
          "ref": "4fe5bae6-8d6d-42dd-9f52-651cee6f1684",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "580f70f4-4b6d-4bac-b4dc-25d72183e103"
        },
        "item": {
          "id": "cab59d32-fea4-441f-88e2-f8431656af2d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7d34506f-a068-4aeb-b6b7-ead79ac4c057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5bcd3bcf-30a9-4964-8cb6-856e66c39ee9",
        "cursor": {
          "ref": "83c2106e-e822-4f6b-88bd-bae176fff9a6",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca15d04f-c0be-41cd-8b71-9988c3c59be5"
        },
        "item": {
          "id": "5bcd3bcf-30a9-4964-8cb6-856e66c39ee9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "206bc6fd-77a8-4526-bcf6-90ec7288d0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fb22aff7-d95c-4595-ae8b-d7dda8fb9fc5",
        "cursor": {
          "ref": "16ad52a5-e15c-4430-adb2-6d582ff09a3b",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b5d7f757-140c-43d9-bcd5-b3b951621378"
        },
        "item": {
          "id": "fb22aff7-d95c-4595-ae8b-d7dda8fb9fc5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9534414b-8e15-4e89-982b-ef4de706ad1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2b0ba05a-a741-42c7-9577-798c39da12ec",
        "cursor": {
          "ref": "2903ad30-77d6-4df2-af03-c43285e1e392",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2ec8c0b9-eeee-47aa-9810-d36f5c5c8125"
        },
        "item": {
          "id": "2b0ba05a-a741-42c7-9577-798c39da12ec",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "58958932-5533-4e05-96cb-bf5ad0312639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "4339212b-fb6e-4cce-b9b6-cba12d0e0518",
        "cursor": {
          "ref": "5777a11a-0c13-4e46-874b-238a00e99854",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "31c01c77-c873-42da-9865-0e8fd26e04fc"
        },
        "item": {
          "id": "4339212b-fb6e-4cce-b9b6-cba12d0e0518",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "338f7f32-0abb-4bcb-bbaa-b13181b183d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "91f06255-5b69-4d3c-a3ff-e7e75f002451",
        "cursor": {
          "ref": "a53b9fd0-c57d-467b-9078-506722fdb544",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "34a23ae2-439b-4cdc-a553-465130697f22"
        },
        "item": {
          "id": "91f06255-5b69-4d3c-a3ff-e7e75f002451",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f219ea0-f207-4760-999d-609a4490be52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a403507e-c0da-42e8-a2ca-11438332e666",
        "cursor": {
          "ref": "331db698-5d27-47eb-8c2f-f0fd5ff5ff9c",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a46d43b9-3cbf-4a88-80f5-edb9ac5f78c3"
        },
        "item": {
          "id": "a403507e-c0da-42e8-a2ca-11438332e666",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "55fc8710-a236-4837-9dac-304e23f0e523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "cbc2fe84-53d2-4838-afb7-0ac522cda968",
        "cursor": {
          "ref": "c3741bf7-391a-47f3-91ba-77cdcfcc74ea",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "003e6904-22a1-4df0-8cf5-97a5dd2662b5"
        },
        "item": {
          "id": "cbc2fe84-53d2-4838-afb7-0ac522cda968",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2743e07d-620b-4f07-81a1-aaa7e703f714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "1d95a966-a43d-4ee9-afab-5b68e9265e95",
        "cursor": {
          "ref": "fb2eb998-e5bf-48e3-b816-654b5410d1af",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "30a8886e-61e4-4111-b290-99ea17519664"
        },
        "item": {
          "id": "1d95a966-a43d-4ee9-afab-5b68e9265e95",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fffd6980-d2fa-4adb-85b0-f339ac38eb76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "346c7b48-0b29-4073-b112-203995e5ef25",
        "cursor": {
          "ref": "d77b94f6-105b-4434-9de6-a1ff6a0d5347",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "67e4f2f4-0d7f-4f19-a44d-3633cea4cb54"
        },
        "item": {
          "id": "346c7b48-0b29-4073-b112-203995e5ef25",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2955ffef-ec11-490e-8c86-223ad0b92775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "24a118c0-5844-432d-b0d9-8ecad6209465",
        "cursor": {
          "ref": "cb98e514-d85f-485a-8f05-e6cbc1dc360c",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2ace4e8c-416f-4144-90c0-e7bb9c48428a"
        },
        "item": {
          "id": "24a118c0-5844-432d-b0d9-8ecad6209465",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4c84ae25-4759-4c82-baba-34ec44723b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "c1a4dfa4-6b06-44c9-a458-d89d88638ffd",
        "cursor": {
          "ref": "000076cf-60c3-48df-b2a0-974c2e3cc79f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8e7dbbf7-aa22-4ce1-8ecc-556cd1bca335"
        },
        "item": {
          "id": "c1a4dfa4-6b06-44c9-a458-d89d88638ffd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d0a0d804-3859-49cd-b47a-9a8fbadf4d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "cce90995-8375-453b-af3a-7c7c7bc38814",
        "cursor": {
          "ref": "379a433b-2813-4e72-9e0e-43787f9824c0",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4e678566-f07a-4284-a688-97be0de467f2"
        },
        "item": {
          "id": "cce90995-8375-453b-af3a-7c7c7bc38814",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0a7ba960-2469-42b6-aae8-55ebeb07c2b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "17763250-55ab-493e-9a75-4c7a8412dac1",
        "cursor": {
          "ref": "95d3d883-151b-4abb-ad44-a908a3e98ed0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "54fc9250-bdb2-4dff-ac4f-329e392c5447"
        },
        "item": {
          "id": "17763250-55ab-493e-9a75-4c7a8412dac1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aa63d273-c7ca-484e-9124-6a1656b59708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "cfaf2ebb-bbcc-4ee0-8be4-2d453353fcb1",
        "cursor": {
          "ref": "5d489c16-e16e-4294-ac3c-70fea5286676",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "64194fb3-b0ff-47ad-9945-2a3b9c8e7cf9"
        },
        "item": {
          "id": "cfaf2ebb-bbcc-4ee0-8be4-2d453353fcb1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "12c45006-94ae-48fa-8289-a4e4cfb4707a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "68cd77d7-60e4-4ff0-8c19-874d1a823353",
        "cursor": {
          "ref": "7d1f9f83-23a9-4ad3-acaa-c134b75b0bf6",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "388cfca0-715d-4432-86aa-34c57c789d64"
        },
        "item": {
          "id": "68cd77d7-60e4-4ff0-8c19-874d1a823353",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "157b1f20-32ca-4fb1-8c6c-e69977eb1908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "66917dc7-1e46-4beb-91e4-218af9ed7119",
        "cursor": {
          "ref": "ae11c3eb-cadc-45e3-81f8-35ebc92a1725",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "dccbc8d3-bb25-42be-8918-9fbdadaefe53"
        },
        "item": {
          "id": "66917dc7-1e46-4beb-91e4-218af9ed7119",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6b63abe4-8816-4b70-bdab-1b5d4e200c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c4d9b732-aab5-4736-921e-a7a54cb60b8b",
        "cursor": {
          "ref": "787793bc-3883-4429-9c09-41ffb3ae42da",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "22643c16-8437-4fb2-a8e5-cff7ddef6b7a"
        },
        "item": {
          "id": "c4d9b732-aab5-4736-921e-a7a54cb60b8b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "577ae8ab-93f4-4ccf-9ab9-17d90d13ab9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4813f116-75c8-46c6-971b-230c8f216ec4",
        "cursor": {
          "ref": "948e3d89-a8b4-4fbf-9fa3-f7f86fbcfc06",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f2fe9500-0e8d-4114-a864-0e9bcf7e13cc"
        },
        "item": {
          "id": "4813f116-75c8-46c6-971b-230c8f216ec4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0fc93540-858d-4767-aec6-edd1de6dbf95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6d396e1b-ae2e-411e-907a-b672fd07fd08",
        "cursor": {
          "ref": "b406348a-5b61-439f-91f2-850e6e207518",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "365733ba-285b-4232-a0b8-96a190b74b91"
        },
        "item": {
          "id": "6d396e1b-ae2e-411e-907a-b672fd07fd08",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b4699149-b440-4f7c-90ef-3efebcb32932",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "fc370b2e-35a9-46be-8d89-c374181274ac",
        "cursor": {
          "ref": "4e6c3e21-23c4-4c3d-aca6-97861a980f2b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "48252baa-1b0b-4ab6-bcf2-d158c5daeacf"
        },
        "item": {
          "id": "fc370b2e-35a9-46be-8d89-c374181274ac",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "35346eaf-042d-4a73-9e49-9b3405b153a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "c2409b34-7f23-4111-86ea-dbea9fb1b7f0",
        "cursor": {
          "ref": "d64d8267-dcf7-493f-9dfe-8c515608617b",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2becec66-dbad-45e1-8313-2b0da53f6d8e"
        },
        "item": {
          "id": "c2409b34-7f23-4111-86ea-dbea9fb1b7f0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6ca6a828-0da5-4c59-8f77-b9e92099e0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c2c7d2ca-742d-48b4-ae36-afc4f077a1ad",
        "cursor": {
          "ref": "09c0486b-79bb-45ba-b90c-b077e2adbcd0",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2c74f24c-75f8-458c-ba72-b469996a03e2"
        },
        "item": {
          "id": "c2c7d2ca-742d-48b4-ae36-afc4f077a1ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ffd5a1ac-9ff2-4561-8aac-e83e6d5a9461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "4fb624b7-c9cb-4306-8406-835132d1b52e",
        "cursor": {
          "ref": "919f7c68-d9f0-4bbc-9462-6b3c1b487b89",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7d0111a2-a1bf-42df-9350-f2ddb8e5976f"
        },
        "item": {
          "id": "4fb624b7-c9cb-4306-8406-835132d1b52e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "60f434dc-6862-4729-9672-b37ea40dcfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "4ab8d1c7-65a1-4cb4-9050-6b9e1ccd9afc",
        "cursor": {
          "ref": "b3928c0d-5017-41e1-9fa1-e854bf1988fc",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9dc6d52f-f31c-47be-adc5-2b53cb474511"
        },
        "item": {
          "id": "4ab8d1c7-65a1-4cb4-9050-6b9e1ccd9afc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ce2571bd-fe66-43a0-9f0b-c417e7d9dc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "338c484e-ce19-4e29-acd9-3719766883da",
        "cursor": {
          "ref": "8013de37-02a0-4295-b764-a688bfa25a13",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "972dc90d-813d-469c-b8ad-bf43fa04d419"
        },
        "item": {
          "id": "338c484e-ce19-4e29-acd9-3719766883da",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "39ba6ebc-a40f-4966-a07d-776f4f6c71b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9f37f59b-d4f0-4131-8f25-fec167340a80",
        "cursor": {
          "ref": "514d0de3-b99c-4ff2-86bf-85a6325cba18",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "21f76624-16ba-430a-8960-fbd2b375beb2"
        },
        "item": {
          "id": "9f37f59b-d4f0-4131-8f25-fec167340a80",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6d910a60-eb6a-41b5-9442-d3ac4f5d53b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "dc832318-3701-45ef-a85a-08752578eca9",
        "cursor": {
          "ref": "f23c5a06-0f2b-4a67-9875-5af75e0447ee",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6f129fab-b6b0-44d3-bbbf-b06c1f40687e"
        },
        "item": {
          "id": "dc832318-3701-45ef-a85a-08752578eca9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d60e1f03-ad81-4a77-be45-843c860ef768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7ec80d64-2e10-4d54-9438-50c0eeb65620",
        "cursor": {
          "ref": "8c4ef3e3-3a45-4c00-a912-a7036b6ba200",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0c0dbf58-47ec-4d6e-9209-a882c6715d65"
        },
        "item": {
          "id": "7ec80d64-2e10-4d54-9438-50c0eeb65620",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a90676c2-5838-4be6-a991-a99452772633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6341b5cf-e1dc-4436-9544-bfe2ffcfb9a5",
        "cursor": {
          "ref": "246f0156-57c8-4ea0-be0a-d84202a45acf",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "938e7baa-559d-4663-8d45-a6eaf0b44023"
        },
        "item": {
          "id": "6341b5cf-e1dc-4436-9544-bfe2ffcfb9a5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "da018901-cfd0-42e2-b6b4-f53b298e0b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "df8d9836-f1ef-42f2-bd0a-ebb4a9edf558",
        "cursor": {
          "ref": "23b88656-7b2a-4fb5-96ec-f754ebdd9862",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "30d0b801-c6b3-4b63-bbfe-d76b6f10ed1e"
        },
        "item": {
          "id": "df8d9836-f1ef-42f2-bd0a-ebb4a9edf558",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7e192945-7652-4e5d-a0c2-d604b25dc592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2d831e53-0b6a-4e52-af67-d0a3f99d252e",
        "cursor": {
          "ref": "06b35aa7-4c2e-443a-bb5e-c67113c5f97b",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6eb45c3c-cdba-4c61-9de7-71fed877841b"
        },
        "item": {
          "id": "2d831e53-0b6a-4e52-af67-d0a3f99d252e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7cb5cea6-cc36-4576-880c-868fde509ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "31137c4b-caee-4540-9408-14dc3d9d1d5d",
        "cursor": {
          "ref": "99318da7-4b0f-4460-b4d8-480666f1b9ec",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5eef3c89-639b-4db4-9e96-1ac52aba0288"
        },
        "item": {
          "id": "31137c4b-caee-4540-9408-14dc3d9d1d5d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "42edbc22-bbf5-4a71-b858-8b248b3273db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c0958e2a-fddf-4855-ab57-3f5ea166bd66",
        "cursor": {
          "ref": "39b0a4a2-d8b0-486f-96da-bfe46c018cbb",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "196fa3ec-4785-488f-8d8d-a453018680db"
        },
        "item": {
          "id": "c0958e2a-fddf-4855-ab57-3f5ea166bd66",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "02490fbe-8309-4d80-8795-84876c2426d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2f864ce5-adbd-4130-8e4d-fe28ab3f9132",
        "cursor": {
          "ref": "97b7912d-c24d-4be0-8802-b10af4ca4fef",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "32b95017-09e3-4dab-9f56-c5fff21bc301"
        },
        "item": {
          "id": "2f864ce5-adbd-4130-8e4d-fe28ab3f9132",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "13380dd5-d591-4381-b163-7d1b3b1f3af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "902067e0-27fe-402c-8bb5-b0f34bc476f2",
        "cursor": {
          "ref": "d92fe5e1-b861-46f1-8edf-a701fc6623b9",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "63ae5f0b-6978-438f-8828-73d5df5e86be"
        },
        "item": {
          "id": "902067e0-27fe-402c-8bb5-b0f34bc476f2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9f6cc060-be90-44af-a9e5-f7d416feb280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8e4ce0e4-99b8-4cfc-bbfc-5b0067f9beb2",
        "cursor": {
          "ref": "13d75374-65a1-4a57-9da8-581afd5d43f8",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fa85d808-4817-4129-bf2b-941ae4bb6d2e"
        },
        "item": {
          "id": "8e4ce0e4-99b8-4cfc-bbfc-5b0067f9beb2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9af1ea81-cd02-4983-bc79-ca907240daaf",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "441e0ac0-d869-4b1c-9acf-3f838b74fb0b",
        "cursor": {
          "ref": "fe4dc7aa-a61e-43eb-ae20-1f9d6ca143c7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ca5c65ca-3146-4085-a9a8-18a1450dffdf"
        },
        "item": {
          "id": "441e0ac0-d869-4b1c-9acf-3f838b74fb0b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "84e3a991-985a-42f2-9d72-039fa9e5d300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "7f72069e-1aea-4086-82a0-8cdb53d9b231",
        "cursor": {
          "ref": "8f28521c-0622-44c0-8139-4753354e3c9d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cfcdcc98-1362-4e15-b763-eded80b81acc"
        },
        "item": {
          "id": "7f72069e-1aea-4086-82a0-8cdb53d9b231",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6a922898-9c64-41fe-900e-17a2cbea5648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "aec8fbf7-c378-4426-9844-0f508ff30299",
        "cursor": {
          "ref": "42d7bf03-5fbb-4077-acbe-41547be6ef66",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43be5b23-992e-4ab2-a772-c4666c78d015"
        },
        "item": {
          "id": "aec8fbf7-c378-4426-9844-0f508ff30299",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f1d843f1-b14a-4a7d-8e2a-c3cfe3e2a034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "205717f8-a6b3-48b5-82c5-92c300f023e3",
        "cursor": {
          "ref": "a0a0a2cd-ac71-4e76-bfa9-ce2b9d5adaea",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bff76de7-3e17-4356-b0e5-1a0743fad152"
        },
        "item": {
          "id": "205717f8-a6b3-48b5-82c5-92c300f023e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "871b4da3-2ba7-4df4-9f53-847aed38d321",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "61fb559c-f033-4889-b7e8-f8d2b2cc274f",
        "cursor": {
          "ref": "b3581cd8-6823-4188-ad0e-07fe3460cc8d",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1ad4ab21-2631-4d8e-9b60-d3705db5dbae"
        },
        "item": {
          "id": "61fb559c-f033-4889-b7e8-f8d2b2cc274f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4cc9907e-b244-4261-baef-558cc0926f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "08b6e59f-1475-4c16-beb3-afd55148d652",
        "cursor": {
          "ref": "2e58363c-be9a-45fe-9c1a-3c6941d64f29",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5b86b025-8fea-4e55-96de-9b4d57bb89c2"
        },
        "item": {
          "id": "08b6e59f-1475-4c16-beb3-afd55148d652",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f4681b8c-3e53-416e-a102-b0d76b2b7ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "83909007-205b-4ed7-9c95-a09a3c7a751f",
        "cursor": {
          "ref": "9081cdce-66eb-488c-bfc7-bda1bef9c2b2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "583fed4a-754b-4551-93c7-0055f82de32e"
        },
        "item": {
          "id": "83909007-205b-4ed7-9c95-a09a3c7a751f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "68e0da5b-454d-4987-bed9-a9343b01cd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "59033517-65ab-4ee6-8ae2-ac8a88f92971",
        "cursor": {
          "ref": "4cb450be-4bf0-432b-ae5d-5b13619f400b",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5cf0f7ec-3364-4054-9a26-9aad1103cb1f"
        },
        "item": {
          "id": "59033517-65ab-4ee6-8ae2-ac8a88f92971",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c449c384-fa62-4593-a418-c8c641712e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "480ee830-0e7d-4000-9a5a-4a1479041bd0",
        "cursor": {
          "ref": "9fe3d92c-9380-4235-bd2e-d59517c93d94",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "523cb665-aad3-4304-8cee-23693c6e3be9"
        },
        "item": {
          "id": "480ee830-0e7d-4000-9a5a-4a1479041bd0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "96d7344e-c3b9-4415-a277-33d803aa8560",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "62472af6-a63a-4c0c-a79f-04e1d10d7b95",
        "cursor": {
          "ref": "4cff3692-df75-4b56-81f7-a87a0f5ca243",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "626dd26a-f0ca-4f31-9672-69931190599a"
        },
        "item": {
          "id": "62472af6-a63a-4c0c-a79f-04e1d10d7b95",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "028c6b96-8b50-4609-a45a-49c7fef194ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "69bc8dfd-f2fd-45c4-932f-d5e7cde427fc",
        "cursor": {
          "ref": "7d5c1847-4341-406d-9098-bc5096676da2",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b808ca6e-d67c-44f0-b405-ffcee7a3cafb"
        },
        "item": {
          "id": "69bc8dfd-f2fd-45c4-932f-d5e7cde427fc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5772f231-f9bb-4f3f-a485-f4a4533e4e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2727080c-56b6-4617-ab5e-9f5c5517b7c2",
        "cursor": {
          "ref": "f9b4ef32-6820-40fa-845c-43f159b656bf",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "850aa11a-ebe8-4f5e-8d29-5280c7a79461"
        },
        "item": {
          "id": "2727080c-56b6-4617-ab5e-9f5c5517b7c2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0dfaddb7-af7b-46f3-8be5-cd128b27d45e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "e3f14e55-f20f-4e1b-91c8-ec69a900b6f0",
        "cursor": {
          "ref": "0ce06a4d-9b4e-4ac8-95fd-078529c119bd",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "747a80db-3205-4348-be54-77e63a63402f"
        },
        "item": {
          "id": "e3f14e55-f20f-4e1b-91c8-ec69a900b6f0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2cc40322-7868-4b2f-ac56-8c920b144536",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b3997b69-13ca-46c2-83df-0b1a085f975f",
        "cursor": {
          "ref": "fdddc23b-2fda-4c25-8215-ec32178c4c83",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "674d10e9-d016-4575-af88-2e4a8ac24979"
        },
        "item": {
          "id": "b3997b69-13ca-46c2-83df-0b1a085f975f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e7cfb7f2-11a3-4499-96c8-248479a9fd62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f4c9e697-8ba8-468a-b65f-c98e1f9f9a0d",
        "cursor": {
          "ref": "2af1d200-9abe-446f-ac41-c48190f52cd3",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d974e42d-22e6-4eee-8c3c-7c1b95ebbc13"
        },
        "item": {
          "id": "f4c9e697-8ba8-468a-b65f-c98e1f9f9a0d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2794c679-8749-4bdd-9d3e-01ac9c79ae08",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1d0ff021-735f-43e8-a9ff-c7d9ccba85f1",
        "cursor": {
          "ref": "6e7f6911-d256-419e-a41c-917dd29dfded",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "29bcd017-1c6c-4345-9a5b-6839579b57ad"
        },
        "item": {
          "id": "1d0ff021-735f-43e8-a9ff-c7d9ccba85f1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b50fa690-4e2f-4d6b-8139-a1d6f89939d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2cbe6393-bbba-412f-a33b-1721d752fddb",
        "cursor": {
          "ref": "88f65e1b-f48f-4cba-a0c0-e8482a70afd0",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fc3809bf-0aa9-45ca-8a7a-1cb9aee867e4"
        },
        "item": {
          "id": "2cbe6393-bbba-412f-a33b-1721d752fddb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8e529b6a-3b67-4ac5-b00d-9d5aa2a807d5",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "46e75c2f-c2c1-40ac-980d-b854c7e01bb2",
        "cursor": {
          "ref": "eb7e00e2-af07-41e0-a4e9-137bf6a7c907",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5f3137a4-f149-4019-b5c0-a89746b24211"
        },
        "item": {
          "id": "46e75c2f-c2c1-40ac-980d-b854c7e01bb2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "22ff172a-5ac2-4aa9-84d9-34b164114d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5205c7ff-ade5-4e8b-baec-abfcc532998c",
        "cursor": {
          "ref": "658e9db2-2999-45f0-a519-e1401afa75ba",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "485f3b65-bc20-4e1a-bad7-bbffb167e0ae"
        },
        "item": {
          "id": "5205c7ff-ade5-4e8b-baec-abfcc532998c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e3a292f3-6643-4e02-9a29-430d9eb44a69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b3998cfa-b000-415f-842d-c67aee793401",
        "cursor": {
          "ref": "cc5b33bf-ca80-497e-83ee-c12012cc17a1",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b8487bf5-85e1-4c5b-aca1-078557ad7efc"
        },
        "item": {
          "id": "b3998cfa-b000-415f-842d-c67aee793401",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ad0bee87-6720-4730-842b-3cad71140f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "d10518ef-cf2a-4219-8fe2-4b7f1a30b3e1",
        "cursor": {
          "ref": "c859f5f3-9b57-4873-adb3-8481a7700890",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "499be783-5195-4a5e-9214-993edceb7df7"
        },
        "item": {
          "id": "d10518ef-cf2a-4219-8fe2-4b7f1a30b3e1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cfba7dcf-9ead-4684-a821-4a9c758117c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5ac42fd5-7c45-4427-ac0d-e5b32459521c",
        "cursor": {
          "ref": "59fef55f-eb68-4f09-877d-acf622a0f7c7",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "89b6c7b8-e748-4db3-aa77-340d0a4b4349"
        },
        "item": {
          "id": "5ac42fd5-7c45-4427-ac0d-e5b32459521c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b1c1af6d-f2ac-436b-addd-eb40b2467f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1a19463f-b690-4250-a122-d8a2fab3b6ac",
        "cursor": {
          "ref": "a0e9ceb6-e401-4a81-8b87-49e516cfd646",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "71bb3acd-cc4b-48e5-9317-65816acc5c3b"
        },
        "item": {
          "id": "1a19463f-b690-4250-a122-d8a2fab3b6ac",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b6d73301-0022-4bdd-bae8-bbdaae372151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d9686556-6434-496c-bc2c-d7c99e3b4116",
        "cursor": {
          "ref": "e3b4a31c-80ac-4001-a540-df7fce63ea01",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "38e91a8c-0239-4703-951d-a075c63fea84"
        },
        "item": {
          "id": "d9686556-6434-496c-bc2c-d7c99e3b4116",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8fd2cab5-957d-4a21-b980-783cac36c02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3e291a2c-42cb-4896-924c-4402a05568f4",
        "cursor": {
          "ref": "51b77d9e-6f5c-4b75-ac96-0c8131e1ed9f",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fb96b347-6600-4e64-b1b9-e6c5317243f7"
        },
        "item": {
          "id": "3e291a2c-42cb-4896-924c-4402a05568f4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "be739c02-4ef8-48c3-9a2c-046cca3e1f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a0e52d23-8dde-4099-b9ef-9cdc010bf7fa",
        "cursor": {
          "ref": "8ee99bd6-7926-4147-a817-1fde09e4a5db",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1c6b3e1f-7f0a-4ff7-8214-eaef9f54a613"
        },
        "item": {
          "id": "a0e52d23-8dde-4099-b9ef-9cdc010bf7fa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "02ab5b28-628b-416b-99f8-ce035ca4d50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "439e7acc-7325-426a-bb74-7411149bf061",
        "cursor": {
          "ref": "18b3d9a2-479a-490b-b504-c3ffa63458cc",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3391091c-c9a1-411f-b339-bef2022c409e"
        },
        "item": {
          "id": "439e7acc-7325-426a-bb74-7411149bf061",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9a18eb67-8bfe-4d25-b59d-5c0a1170dca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1dd449d2-cc5c-4376-8078-f4dfca099b7a",
        "cursor": {
          "ref": "9b47648f-37b6-48d9-a3a5-afb8711d8b67",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6968e314-7b0c-4564-92be-1d949cb4d48b"
        },
        "item": {
          "id": "1dd449d2-cc5c-4376-8078-f4dfca099b7a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5ebf83f6-541d-4087-b1b4-4412472916c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e2e8dbea-6f7c-42b2-9b37-befa61084b68",
        "cursor": {
          "ref": "237b6996-1f20-4bef-9590-eb7b5826f364",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b1cc69cd-6e02-49e9-ac90-f6d37943149a"
        },
        "item": {
          "id": "e2e8dbea-6f7c-42b2-9b37-befa61084b68",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "633dc2d0-9b3f-4ecd-96f4-908997ff3f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "2cc81c47-8fee-4483-87b6-3e34b4c8605f",
        "cursor": {
          "ref": "9e11927f-c075-4021-8c82-c16612830083",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e866aa99-fda6-49da-92f6-9635f5e1d788"
        },
        "item": {
          "id": "2cc81c47-8fee-4483-87b6-3e34b4c8605f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a0790382-23d1-43ef-9a5a-c9792c74222e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "f900c261-a7a9-46c0-b634-7f9f2a1d55e3",
        "cursor": {
          "ref": "e37ce5df-5117-46f9-acd0-43c42f48dd8a",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "36adff12-75f3-40a1-971f-8b1a86336bc2"
        },
        "item": {
          "id": "f900c261-a7a9-46c0-b634-7f9f2a1d55e3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "389590fd-a5dd-4015-aee0-3542e6646ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "276eaace-4a49-4a23-8e89-c6ed094d1c99",
        "cursor": {
          "ref": "3cdd2014-4409-4f1a-8098-b6eefdd87226",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "05bd29ef-cfa0-4644-a591-f25afd7fc9b0"
        },
        "item": {
          "id": "276eaace-4a49-4a23-8e89-c6ed094d1c99",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1eea5cf9-e17b-485f-9519-39c659c8d585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "1d9008b3-6133-4f00-9eaf-0df0fbc3f080",
        "cursor": {
          "ref": "44f5a466-6378-4b56-8338-890df3907b66",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e8f12117-1b24-48eb-8a7f-dd89c279bfe0"
        },
        "item": {
          "id": "1d9008b3-6133-4f00-9eaf-0df0fbc3f080",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "36c5c685-e1a4-440d-a5d6-6b6f602a592d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "05ee89cf-16dc-4943-b260-42e5b17990a0",
        "cursor": {
          "ref": "fea5bc54-d008-4cc8-adbf-b669ba2fc541",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "670f55d1-2553-492a-9329-1c2ecb7bdfec"
        },
        "item": {
          "id": "05ee89cf-16dc-4943-b260-42e5b17990a0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "287f22dd-3cb7-4a0b-8479-86dffa7f32b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "2867dbc7-20cf-4d4a-83b7-b0dd8bc3cf96",
        "cursor": {
          "ref": "78295d8e-0aa0-411d-b2bc-114c4aa00e8c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f5f7c433-1361-400a-ae4e-096ecda92049"
        },
        "item": {
          "id": "2867dbc7-20cf-4d4a-83b7-b0dd8bc3cf96",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c46d7a32-a9bd-48db-b532-81f0f4085195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "1e235999-1b4f-4698-bdbf-8ef0452e347f",
        "cursor": {
          "ref": "e2ed60f3-f220-47ca-8207-cd9710cc1958",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "26566f4d-1187-49c9-93f5-1c5a67e0cef0"
        },
        "item": {
          "id": "1e235999-1b4f-4698-bdbf-8ef0452e347f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fa67c998-61e9-4b5e-84b0-8b9db7efbf7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "bec3e1d2-d731-43b6-b16b-ece188e8011c",
        "cursor": {
          "ref": "15206fd0-989f-4904-9e5d-2af863a71edd",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b70068a0-2232-4df3-a366-6ec22c20c4a5"
        },
        "item": {
          "id": "bec3e1d2-d731-43b6-b16b-ece188e8011c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "92b0630d-9fe5-4275-9e99-f970673af77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "69cdfa3f-feb2-4375-baf7-973d4eaa664c",
        "cursor": {
          "ref": "c8e33eef-7168-4e74-a700-f68c0dec57d6",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f039c527-cdc2-4b4b-9e4d-7f1e5aeb575d"
        },
        "item": {
          "id": "69cdfa3f-feb2-4375-baf7-973d4eaa664c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6fb0c55f-f134-45f4-b784-99277b34ab9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "acca590e-7237-4313-b34d-b42155b0a9c9",
        "cursor": {
          "ref": "d5c3768f-ea63-4fd8-9496-b829070b5760",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e35fd362-ce6f-47ec-a9d7-51c73d494de8"
        },
        "item": {
          "id": "acca590e-7237-4313-b34d-b42155b0a9c9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "569b57a4-2002-4615-812c-92b70fa7bad4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "6c42da46-571e-4d12-b2f9-3048941a017c",
        "cursor": {
          "ref": "db71643f-80ee-4fc3-8799-02f7599a0b22",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7b24bb3f-80b1-4cee-800f-6dab85e2b6c8"
        },
        "item": {
          "id": "6c42da46-571e-4d12-b2f9-3048941a017c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "061e750a-c7ab-4d1b-b0ba-edab88c40118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "e4c525b4-9bc3-4cb9-aaf0-8a29dd900828",
        "cursor": {
          "ref": "19d23d73-0b36-4ad5-93ec-1cb484c20c66",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7c713eb5-77c5-447e-8b57-9459f2bbb58f"
        },
        "item": {
          "id": "e4c525b4-9bc3-4cb9-aaf0-8a29dd900828",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cdb26159-af2f-43d5-9f33-dccf182b71fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "aa49942d-08da-4d5a-b77e-54fa618bcb90",
        "cursor": {
          "ref": "b8702305-271a-4331-a727-7a9db21f740a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "095e80c9-0dda-4ecc-9383-d46e4429b689"
        },
        "item": {
          "id": "aa49942d-08da-4d5a-b77e-54fa618bcb90",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9a042e43-923d-48e7-af45-6c44545bbfaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "44f2840b-2bad-4c45-bd2e-cf5a3bf90a2b",
        "cursor": {
          "ref": "1e8719fd-9b7b-4d98-bc8b-a4c0735ae9ff",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d1459342-155f-4292-a117-cb35c5f0726a"
        },
        "item": {
          "id": "44f2840b-2bad-4c45-bd2e-cf5a3bf90a2b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a4d0d9f0-c90b-4c2c-9944-5c39aa41ce65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "a957e6be-47bd-458c-aa7c-dd91eae6d45a",
        "cursor": {
          "ref": "7de30257-c392-47c0-9798-3022a59fb681",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ad4bfb58-18fb-480f-b90d-eae9940755c0"
        },
        "item": {
          "id": "a957e6be-47bd-458c-aa7c-dd91eae6d45a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4b2115fe-408a-4133-9c05-1dfbfd09520d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "ff3a2666-ef97-47c3-8122-03db85399790",
        "cursor": {
          "ref": "f40a9028-0a21-4f99-85f2-37386aafd8d4",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "082f56a9-0699-4dba-8cde-29b04a800849"
        },
        "item": {
          "id": "ff3a2666-ef97-47c3-8122-03db85399790",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aadc2aa6-5ec3-423b-9d89-90d3d13b78a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "316e6aab-8650-484b-9386-c2af8d391470",
        "cursor": {
          "ref": "774fc699-3d9a-4846-a978-d7346c319932",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ae5dc7a8-2fc6-49bb-bec2-83a28a0dadb0"
        },
        "item": {
          "id": "316e6aab-8650-484b-9386-c2af8d391470",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c48ea75-2595-47f1-b6fe-e9feda40e0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "d3695e2a-be7e-409c-9f8b-a40822cd273e",
        "cursor": {
          "ref": "fa27e49b-7921-4a43-a568-43c777568bfb",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "986040c9-c436-41e5-859e-8c22a59d6984"
        },
        "item": {
          "id": "d3695e2a-be7e-409c-9f8b-a40822cd273e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "18e1cac6-4791-4f1f-b4a5-4d26ed72b4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "cff5d5a1-2082-4cc8-bda2-ad9591d44d02",
        "cursor": {
          "ref": "0ed2c45f-faa2-4694-afcb-c242afcad233",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b4a1a1c9-1249-4971-a27d-ad9b33d2c71e"
        },
        "item": {
          "id": "cff5d5a1-2082-4cc8-bda2-ad9591d44d02",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aae62969-f9eb-473a-8548-883af82abc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "9b93f54c-67ef-44c6-aefe-a784fa9ecd50",
        "cursor": {
          "ref": "7c9bafc9-9f64-4868-b11e-173cac9dc975",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "97ed8fc5-3754-4401-be25-4a633e275a27"
        },
        "item": {
          "id": "9b93f54c-67ef-44c6-aefe-a784fa9ecd50",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a2352f4-b434-4a47-b277-23729596cb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "018efeb5-b9e5-48eb-bb76-0a640b0d5de2",
        "cursor": {
          "ref": "e1421c1e-7de4-4f6a-a977-87abca0ce3ff",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "557c459a-8a19-460b-9abb-74eb6147c584"
        },
        "item": {
          "id": "018efeb5-b9e5-48eb-bb76-0a640b0d5de2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8738e1e0-df8d-44bf-8272-5040e840f7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "8f89f588-2b16-4782-98cd-4e0555eca50b",
        "cursor": {
          "ref": "7facc1f6-92bf-4535-90da-91b2f318f43e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "dc3c80c1-740d-4abf-afa1-a6b484c84e1a"
        },
        "item": {
          "id": "8f89f588-2b16-4782-98cd-4e0555eca50b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bb8d1bad-4767-4ede-a762-4cb87302147a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "cdf2aac9-2f7c-459e-a728-0b44e501834d",
        "cursor": {
          "ref": "8e289272-3a63-43bd-b76d-bf8bfb8a60dc",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9f4b768b-3662-4b0e-b0a4-44697250d825"
        },
        "item": {
          "id": "cdf2aac9-2f7c-459e-a728-0b44e501834d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fe80e8a3-6423-416a-8c6c-2b07d8c99ae6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "67d7d076-c7f5-4ab8-92d3-53be33ebb45a",
        "cursor": {
          "ref": "fd5f923d-ea2c-40b7-b29d-06db138cc7bd",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1fb11cc9-7161-44f7-bb05-dfa2f869917f"
        },
        "item": {
          "id": "67d7d076-c7f5-4ab8-92d3-53be33ebb45a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "74502a0d-6da7-4c5d-b8ec-20e0ae9bd424",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "e81b9ea3-92e5-4756-9258-fa159c893799",
        "cursor": {
          "ref": "8288cac0-1409-428c-93bb-9102427b4ed9",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "35d38489-2646-40b5-a78a-ac88c5ebaf84"
        },
        "item": {
          "id": "e81b9ea3-92e5-4756-9258-fa159c893799",
          "name": "credentials_verify"
        },
        "response": {
          "id": "eee89b9a-56ae-484a-8483-a834357d23fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "27f5abb8-c98d-4ae4-8569-1f6240d41cd2",
        "cursor": {
          "ref": "0cb823fb-3f8e-4018-a491-96e4d04ee77c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e7c16f64-075c-43a9-b9bb-575af163ba64"
        },
        "item": {
          "id": "27f5abb8-c98d-4ae4-8569-1f6240d41cd2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0521d518-2659-4f7c-9eab-c844e47a883f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3d2d4366-aeae-4201-b711-ffee3baa4b11",
        "cursor": {
          "ref": "e3caf7db-db73-49c0-b19f-07c0e7689a36",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d923b81e-a953-42a4-a62a-3477ccdc7b32"
        },
        "item": {
          "id": "3d2d4366-aeae-4201-b711-ffee3baa4b11",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c88cee36-df25-4c29-8748-d0bb8e6d5267",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "3d2d4366-aeae-4201-b711-ffee3baa4b11",
        "cursor": {
          "ref": "e3caf7db-db73-49c0-b19f-07c0e7689a36",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d923b81e-a953-42a4-a62a-3477ccdc7b32"
        },
        "item": {
          "id": "3d2d4366-aeae-4201-b711-ffee3baa4b11",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c88cee36-df25-4c29-8748-d0bb8e6d5267",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "2b822e36-6e71-4945-aeeb-f536bdcd72b0",
        "cursor": {
          "ref": "074be5bc-6655-4bdf-9623-7ac1ed8eaa1b",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "446499cf-4977-4237-8e33-8122db42ac69"
        },
        "item": {
          "id": "2b822e36-6e71-4945-aeeb-f536bdcd72b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d327a0a5-0044-4ffa-b1c0-e4bfc6b89613",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "6ff46c43-4a4e-4df4-8b9e-9f8e69253e26",
        "cursor": {
          "ref": "1dd720d5-7ccb-4bfc-8a25-9919142c4e77",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1fc517ae-6374-4fcb-8f08-8f854453a1d1"
        },
        "item": {
          "id": "6ff46c43-4a4e-4df4-8b9e-9f8e69253e26",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "34355b27-5b8f-4f44-a149-a59359181c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}