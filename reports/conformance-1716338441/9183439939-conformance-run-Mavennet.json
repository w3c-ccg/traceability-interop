{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7afb93d0-cd1b-4df0-ba2b-39ecc2c88a86",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7638d32f-b017-4b1a-99d3-7eb4c2f24aba",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0620ec3-0c64-466f-85bb-6d3bff7d4474",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6d2f098-30b9-4afc-86c1-397e9baf4553"
                }
              }
            ]
          },
          {
            "id": "d4ea31a3-17b9-4aec-9006-bd9a612ca199",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59fa41c7-5f59-4ea0-bcba-21907fd10617",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6c816cfc-c82e-48ed-ab18-30b93bca0736"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f3c071f0-5bcc-47fd-954b-54f4f84ac60d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "079479b3-e33a-42e7-94aa-cde25eca31fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f14ee45-fe0b-4335-aa7f-1aabf226f0bb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "facf1291-755d-4537-8c76-4d2a4d5b3d16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce9c40cb-a7fd-4086-bb8c-82c5e83ad9d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "933b7f0b-8b30-4984-97aa-50c987001401",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9bc0237-8fe0-4c14-b1c7-eec0eb7eac3e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9903309a-5897-430d-8eb3-e6eecd7527a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16ca3b48-f383-4399-bec5-7c05b3fd8780"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "118bd431-ce33-446b-9f2e-a6747c229ad0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "14c9fa0e-160d-4a4f-9684-2e01d76212ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e4fb45f-43f4-45be-ae87-76bc69583540",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60edd495-81ac-4f5c-94ee-61f386683dc7"
            }
          }
        ]
      },
      {
        "id": "526ffca7-a93d-4dca-8e73-756852edb2d9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "644e803c-7965-4aa5-b3d6-2fcff35c79a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07210bb3-05e6-4d78-92a3-f8fc8efe10c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c0fe627-9b68-448e-97cb-309542744cca",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d4917d-ab70-4f82-9717-338c8dc0168f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d3e2468-09d9-46f3-b70d-a2517182c300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a8663a-8c2e-4809-902f-3d5423f6f37f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720fb409-b2f0-4bf6-a69e-6f2b98169571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ef77d78-97a6-495a-bc48-d37b19aa09db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0430dfdd-ab21-4a18-adef-09b703807853",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820578f8-fddc-4250-88a5-e52a654cee74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b638d20a-24b0-4399-b2d8-d1845b6bb64a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "155d6a57-8ff5-4ff9-8712-22d0d0cf9480",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5273f5b4-29d1-42b7-937b-a0be3e210d88",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d3a741-e2c3-498c-84a2-35c196d8e825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f3391a7-9df6-45b8-a359-f8fd67be9ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103e39cd-cf9e-4382-8d01-69444b8f64c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacba66e-efba-4c34-8148-702006ff904e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "519005d5-62a0-41a8-bfe2-3c666ecbc11f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae902251-0e65-44c1-b495-24c41f54af31",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d4d985a-3245-453c-b051-8b8cbb741b2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "75c4107d-d505-42c7-835f-15e954f0becd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31c5c76d-cafb-46c1-8570-5b606535ac58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2ef01ae2-748a-446a-b849-8d4ae93e3ede"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e69319c-854e-41f3-ae07-4f219e089d0b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca0f2b6e-6057-4493-add9-b4cb72f1f2b4"
            }
          }
        ]
      },
      {
        "id": "ba989727-a6b1-44c2-8259-f2788157cbee",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4636dc06-48fe-491d-b6ad-566f1fc0697d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8b61945-060d-4edb-b33f-d255f96ca163",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b66a6d06-d0b3-4c58-8ed0-e32aaa87945c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e26fadc-a181-47a9-b83a-e0636859dc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46ee29c-43a9-40d7-ae93-5af45b8e3f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626edf39-00a8-4d44-bfb1-0e59cb397cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e90236b-fb83-4eda-b9c9-9822e30fee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b059b31-deb7-40ac-a8bf-f629c40f8031",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b186d9-be47-4694-a3db-1fe095a58f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2bb74f-0e64-4a85-850f-a6d6fa5298cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f557dc4c-b0ca-4b22-a680-9bfb91e2f6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64366ad7-5329-4649-8890-b4ecec6e1194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d3aa11-a562-4bed-acf4-1a668fd7d2df",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda50bc5-333a-43b3-a7d5-b70665222f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0b30ce-cfef-4014-bdab-f1f3d4c6c772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3be15b-5f62-46ce-838b-4e4800b45877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58b5b973-2f0b-4f72-b7ef-6dc725a9051b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72224402-fba7-409a-8dcc-d9c4dd9a740c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bb00a9-e27f-4cf6-ad1e-fe48ed8a339c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66cf72a7-7496-46a9-92ba-fe9820fdd59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0856a52c-777a-4755-b950-23a2c1677f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87f5116c-9c96-4605-9444-3086f785aaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f6170c-8a81-4e43-9bd8-001a92e448df",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0e2089-a4a3-4aee-8a85-00af81a6f17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a061087e-18e0-4f92-bafd-cc5d0e984f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6573fa52-b860-4b75-a7b7-8000b57caf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a371e1e-f3fa-451d-be36-d92799a167f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876d2809-f187-47c6-a716-a7e87ac4fce0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc14c7a4-df80-4692-b580-27efb99b675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df05469-f44e-4706-aa7d-abe83a64968c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bacfe9-470c-4b65-95ff-5026f47d5768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6547809-5c9a-4fd2-b5d8-0c03aed72545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18feb43e-5f81-486e-827e-1f018678e002",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7043222b-d4f5-436f-a3d9-798c8e61db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3feb0f-55db-4d2b-b0dd-a33216e49287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a251ed2-5c36-4f31-a5cb-dce5a0f8bf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06c78777-64f0-44f0-8742-2972bed4f11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132a6f28-97b6-4119-bdc4-7688bf6e65bc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4198cf-951d-4eb1-bfc5-3a04d2707490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb87f70-6e0b-45dd-82e6-d6cc85f8b649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91569823-24ba-4347-bf0d-9a355ace6dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8c1203d-96da-4272-864b-049b8187b033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b95db2-9e1d-41e6-87b9-f1f4553439a4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1149916-ec65-45d0-8e5a-9124273f51f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6618a531-e494-4fd8-aa87-f5d6cf503015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffe761b-7e07-4afa-8551-39d5493b987b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55c977fd-e389-4317-b4cd-4293d24b75bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e22120-3646-4967-9f62-015aeb4ce044",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7a1ee1-bd76-433f-8ba8-40d54d9191df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a40346-8a8e-48ed-97d6-9777af90797c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccf10ae-45c1-4ed5-adb7-6b1dfc02f673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1b60a5c-16ab-48e1-90c3-cab8924d8393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a5fe9a-091e-42c0-8e77-3fffede70d7a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fc9d9c-8798-4ccb-a585-b6205c2f865f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfb507d-441a-4d6d-a4a0-ead771c1e729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e708f5f-1a3a-4e9b-9ee3-b7c9b06863c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a822947e-28c3-4db5-8d05-83bea7ed0ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c016930-42fa-4da2-a633-1177601d2964",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af30c96a-a53c-4909-bee2-f003bab72e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c10db0-091d-4309-a238-e001a77e7b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52db8a83-893e-4de4-a3a6-db9b87831fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0caf8bbb-2cd2-4527-9b38-e8baeaad4c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9bcc81-2e97-466f-9b24-598d0ee85ed7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e78d4f-1d00-455b-93c3-9afd86415dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78abf0ae-bc9a-4e3d-be4e-7f5e37b67ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b984ae-554f-42ee-868e-cc0fed14920e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8916db9-8403-4642-9bf2-3741589a31b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27be2a0c-e668-41bb-9280-525eb0ab84d3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8ee7a6-c113-4134-bd99-27b2b1f74f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd035f91-2849-4a87-9821-34064f87055f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83f72e1-0ddc-462b-aaa1-c3c9f853ddd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6496dac3-2eed-4ea3-b7d2-a64f0170a925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c526334-168a-4001-9770-c110e593b5d9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a9af5c-e12a-4eb1-9c22-a4b3f86638d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04005260-5605-44cb-a7ed-a6b74b3f0e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cc7d32-c48e-4d2a-9c08-743ef77f371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4f73f5a-1500-46a3-b762-9225af439967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de473efe-e741-4f74-8acc-24d80fe7f40c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1b1b2e-6db8-4803-852a-0c4f9c963b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e8bfa0-7539-474c-8949-b1dd7e012675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc745d6-4589-4921-8191-e2729242284a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd288517-4b34-4d69-8e91-6d3fc4966ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebde278-1a6f-47f4-93ee-a50cc1e778c9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d1672d-76e9-4cc0-bfc2-8f4fe9e7890e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cb87de-4e21-41e8-8e0b-4dc090bc251f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371b6028-09fd-44a0-9a40-9ff1aa376234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e025723-d7d0-42b4-b626-3b1183408431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4255c915-a8d9-427e-9c2d-86a5b4d4fb33",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa35d4a9-fd90-45fa-bfc9-47e290bf88fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d92e702-df69-43c1-865a-3d05bf19f604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d506f9-b0d0-4c55-99fd-b65e8ace4ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fca870e-d22f-4fbf-8765-4ee5c7ab18aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f835788a-6fc2-4a00-b29c-6e9e0bedf7dc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cae083-cace-4a22-a176-50220b805a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3605c3a5-d8fd-4e63-a333-f8bc1d945c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cec3c0-aac4-4d12-a01d-47e73b36e807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "142b1eff-b4bc-4f8d-abbd-b961c261ad98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccf2bd9-13cf-484d-b360-2637e0828069",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d831d60-60e7-4051-b5b8-c0ec1eae009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bfa1b4-ee24-4de0-a14d-42b1deb520e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98abfcb6-e5a8-4629-9f01-7c1c48d81d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3a2f02-3d05-4d60-abd0-686a1a7641c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e316de-4cf9-42e6-a693-a3f03545d5a4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe94ecf-1ff3-4608-aad5-d1c50f39d496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce02ab4a-c757-4b4f-870f-3f26d729cea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7764b844-6fb5-4944-8baf-fec112de487f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb7c9ff-6da1-4d5c-a35b-9d62c9115d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953e4c9a-f48a-4afd-bfdf-f8b6c4420f75",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074de74d-8e41-40d3-b1f3-2ad9c5323c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07810be8-7e8f-4ae1-8542-2e1bbb8eddc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bae07a7-a899-4503-a799-4a1fdc7f04d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed6869c-fdbb-4d9d-8df6-79efa747ba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a13886a-ac53-489f-9ba2-5af38aa93533",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249e1e72-4eb8-4c8e-a2d5-170fd914e9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107234bc-c1ed-4f31-b1bc-f5f5d947d7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436ce20c-6aaa-4cce-b9c2-55b3f400a6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62efb1e7-4ed7-4e42-ad44-b61e8768e361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3666535d-30dd-4096-9ada-1bf05a410917",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602e7374-c733-485d-b442-2844d0fad494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5205e3f1-e840-44ab-a97a-24f41bc7eefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b5e8a1-8f42-4b03-a69e-a9cf012ee00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b41dd8f4-cebf-4afb-9eb6-cacc4e6f307f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba36924b-79da-4111-95bc-a4e31346540b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6efa15-bcd6-4ad8-8edf-aae61679dfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9295478b-e6bf-405c-b60e-98e95f7331c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef28d458-9240-4621-82c2-95f000b372c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "caaf2817-da54-4d3b-9a7a-c0b76936e459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898a5c0c-d1b5-480a-a37c-c978cd62387f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6134cf9-e7db-43b5-88e7-625039e7ff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95404b08-90f3-4984-b8d8-db7b75ed8787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d185c9da-71ab-4f80-abe2-7619ad3e39f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafd4013-203a-4112-8379-420465af4a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a2a65c-0f95-4ef7-8301-cf7ba36341f6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f0a94a-2b60-4f51-8dea-d27744adb902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ddc1155-faaf-40e0-8a2a-bf4a7603b59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04980e20-6684-4d0c-a6f7-b526faa080d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "801790e5-424f-4764-bd2c-00f16ab958ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff8b57c-dbe0-4acb-93dd-ad15deab0419",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79b505d-d304-478b-8664-eaad6f366ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5dbdb7-00a9-44a6-ba6e-ddb0dd8c4bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93466518-8dfb-427c-a654-b942a7cf5ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb0b7a2-2abf-42c9-808e-9f320a86cb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50812280-57bc-4450-9c07-35306615e990",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce63885-7a7f-407d-b74e-6402c83769fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb22674-6f87-4df4-9bee-3bbcae1bc754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d097d78-47ca-479b-8796-8bea0f815792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3402c319-a7a5-44c6-8f98-3b1546dc99c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce3ec25-1a2a-4530-be32-58c0d0107195",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8386bd44-0c4c-46c6-b98a-0aae13767e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c56255-2b12-4633-9347-7c75387c3123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85e0bbd-e319-4fff-a85a-179975d7417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "76762b6b-5047-4881-aa28-1b513b57814d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55317c4-fffd-413f-b421-fc19e4521a78",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e25ec2d-6524-4c54-952e-1a17c21154b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001e06e3-7bd7-4d3f-922d-c74b02a55e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b34725-00d0-49ad-aa01-b974b3ba80ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dec2bda-0aec-4ab5-80e7-03bb9d6fb653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ccc826-8afe-4c9f-b8f9-f797ee8d6122",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68ef846-0aed-41b7-ab24-e9057160be7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e19b79-3ff8-404f-b40a-5c2e69b8101f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d102597-012e-4e6b-8414-0f27cf8a2acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f541cefa-234d-4308-ae31-0ba82afe34e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94aeb179-a529-4ada-8be5-df97b5638bfe",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a87b34-a007-42ef-b25a-d22524f62a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93eec944-3264-441e-be73-7a43c4dbdeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def6e117-b47d-4fcd-851a-101c58cc3b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a68ef59-489d-44af-b9a5-f6547ad13c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db153e70-52d0-4205-9836-cabff15c80e7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fccd55-8f4e-4ca9-9dd9-c9830e6abfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96728c2-c8e4-4e3e-be17-26174f00924b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62943c0b-9b8c-473d-a0ba-1d804b38977d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2836e2a2-c6a5-4ac3-9f7c-e41f6bd08e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0032cc-a8eb-43b4-a9b3-a1b3208441e1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf8ce83-5604-4e2a-9455-23b92115e3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ceb6244-a01c-4ff0-9144-6f126c8526a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a269306a-ea47-40c8-9dec-aa8c9e9a8435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "656feab0-d5a4-4152-b399-64f8eb470568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c492eed-11ba-43f1-b402-90ec05bfe5fd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ecea07-efe7-4d13-94ff-a77b7830b236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dad8bb4f-6a91-463f-ab9d-aa0f6fa92ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce78368-2865-42b3-8cef-2ee2ca6dd161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89f31410-95c0-4f52-9059-131c43a1add3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2596cb6f-98f6-4ada-8470-d894a6500709",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b96c43-dd24-4ea9-85b1-9a1fa67bc1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbda960-d338-4631-8208-a4c945a01b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e78c5f-6d9f-4db3-9a7a-0c5350dbd1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "277886a9-aaac-4b2f-b794-a2dcc5bb35c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073e4171-38df-425e-8c1c-93c2ec2a354b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf958b8-00a1-4249-9bfe-7482320c729b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a78b8b-87d9-45f0-8871-36a02406357f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96866fe-d6c2-4cac-b40f-64c2590c8d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "94846e57-1bc8-4479-8e77-b276c5bacb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b7756e-4ea9-4358-b62e-952b5fe7109d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684d658d-740d-42a5-b33f-421707a3f5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654ff606-5cf9-4117-9764-abcf484ac06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6cbaf4-7aeb-43ea-8955-5bba94f44b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edbb57b6-e782-4dd0-bfa9-e533c5d146e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef3c3ab-79d9-4b5b-822f-e8b4a157f34b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d2f070-e5e8-4c55-8339-2f41164afb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f725ec5a-4336-4cf5-bbc4-8b44346f4b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf09113-1c12-4253-acf2-46acb5668d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f445d65e-0738-4e6e-b4d8-891eb863b497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1601b3a-95fb-43f9-945b-56f52c278c51",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5727229-6f67-4fa0-835c-acf3c0ffd62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba4d5af-422e-4594-ba53-57405fd6b51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72376f35-4199-4c04-a74a-3d8362d69e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abf23021-ad91-40a1-b6fc-9b9735cf9b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761cb827-f31f-458b-acf5-64bce244768b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569e6cf2-d068-4b55-8322-5e940230a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b71b573-ce1a-4879-aa1e-f07d9879f91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b77c2cd-a58a-4e49-81b2-fd35c239765c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4fa09d-684c-4f53-9971-ca07292ee23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e5c199-043f-4577-9e0f-1fd1a0eb7384",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317d87fb-6306-42fd-977e-ed23051295c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e3d277-71f5-457f-9bda-43695b2e5553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c90b4d-d222-40f5-b0a4-a4d74d4c3c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9d7137-2d90-40b2-a1cf-239bfbd9823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb66443c-d068-4c8f-a801-ff5fadc3cc35",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19918c73-8e7a-4f6f-902c-338dafa6095d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a88416-2418-45bb-87cf-a931399bcd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b719890-a82a-4ded-a434-96c91d2402fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad18650a-c453-463b-a79b-5fe6044addf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7846f385-fd93-4e29-878a-c32aeab9b08f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d720f5-6bbb-4bc2-95c1-ad53d9495d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c18926f-8292-487d-b4fb-b6e48d31f0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9fb4a4-80c4-45bd-b4d5-86caf470f528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e327c24e-540d-4cf2-85b5-cb5f360183b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2005a4-76e7-41db-a123-fcb26789768a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3b5bca-3c54-4ec0-989f-585c49f6bebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af973b8f-f01f-47ef-92fe-dbc7cbfc62d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6af632c-312e-4837-92e6-becf21a3dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbd55a0-b611-4a0c-a805-8609d13931f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f79507-c145-4c69-8af3-26df767a82a7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62022d9-473c-461e-abb6-42753dc89ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2613694e-2735-436d-a553-df7fcd68b4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff17378-cb5f-4c85-aaf7-1f9410331cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a03a60d-01cb-4d63-aadf-4149b687512e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e00bd16-e9a2-4370-989d-475ad6eab34f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab29aee-c467-42d2-b4ac-c0d60e47311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae189955-fcc9-4bc6-8d56-c8505787cf30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c4050b-9012-4d85-b53e-404732524194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95fab364-49fd-4844-800b-d3e0dca95b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287cd207-d6fa-439b-9d2c-eb640cde499a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb3962d-7e5e-4c05-927a-ecd684bc37f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f448f3-598d-4133-8a7e-bacbaaf90485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8989f8-ba1a-4da9-8f5c-7a9c36631772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8f5ec7-ad19-4eb5-83b9-38de897665d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfbab7e-21ac-4aa0-83a5-307c1242b12c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6de1d7-8fb9-478d-b228-e26067987d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de108880-9c7a-4481-8a82-5f5e1d698ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cf264e-ad80-4ccf-b569-38834ad46247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cabe909-c07c-4879-b104-23a8ccabbc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41621a7-b674-4687-a644-8bc747f524bb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c556099-06c4-4527-bcb6-7c0f49e5f737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851df8b5-171a-43b6-b434-caaeaed7c20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59050d4-4159-499d-8da4-eb58deca1998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb43578-14ae-4311-bc64-7c42d4c9913b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a5a908-66e8-4e8e-a326-2dd02f85430f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43297cd9-21ac-4e39-a6e1-23dd6e94edd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d508ecc-b553-4f4d-b480-46a72ba711a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690aa22f-f159-4f2c-838d-d61e427e3961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07099b5a-7350-436d-891b-a3799de1c16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822dac07-5657-4b07-afc7-80588feef153",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3a59f7-723b-40da-8e76-eafcfb54cec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5859e705-b845-4fb4-a4c3-a7eec88e0ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d7ff05-a0ee-485e-9581-b07afba73fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18ea5bd5-a25a-4d02-a465-b30961c290d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ea6619-49e4-458c-9822-f17485544ff5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575848ca-42a4-400c-8c0e-3cdbc9692dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10785536-3af8-42ff-83bb-06af9684ef4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cbe43c-17fa-41f8-bd97-a46b8c0643ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e21dfb-61ff-4fb1-aeff-74f3475d5165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ad91ef-c585-47e5-a4bc-851cef732cc5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e31f36-f858-4539-8463-814bf7154d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b10317a-c1fc-4f93-92ad-943b32b6c881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a26d56b-7cc4-4c93-b62b-893d67090e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "490078a1-9b5e-47da-9a8e-525e0dc00aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fe78a2-39cf-4d89-9920-e0814442f895",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb0c276-b6bc-4219-b645-b34bb48f2bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa36f48f-9c3b-4b88-8f76-90da6515c0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39dfb17d-7f19-4ede-a1bf-4607a6e143ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "971f09d0-2ebe-4212-be0d-e774e1d19270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2b734e-a1ee-4adc-b154-8df3da8069d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c676dad3-1cad-468e-ba82-62079c559264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ecf6c3-25b6-4c4c-8b8e-b4802397d400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82072934-b66e-4788-9f94-53b2008c3ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f0c8f4-4224-45e4-968d-c7ee401fb1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5764de-2c12-4f29-83d6-53dcf52b17cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56247a7f-6274-49c6-8d42-d918c865bba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee18bbfa-7090-48ec-ab3b-b5650fad1c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dea070d-92d2-4efd-b4da-cb3e9fc08565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe5e76b-403d-4764-842c-403e7dea5bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f898d1b3-fd4f-4248-8036-296434d848d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739a04ec-1e71-4987-ba83-699f44e459f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e10a12-71a9-42e7-a365-504b8977ba4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa4afe2-88b0-487e-8b32-94b2bc4a476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7672df-5814-4596-9fa9-31a42fa7282f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3c4e27-c158-4627-a3f9-2439589679b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf029b4-54b5-46fd-ac57-38512223228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8342312-5d70-4b59-a450-8a247e62b91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af33385a-19e2-4116-956e-1a295a841ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0916f23-c824-4693-abe1-8eff1f95e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91a94e5-7292-49ed-b115-9a6c3e233195",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e36296-fab2-4424-b88e-39d9e7d251cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5d575f-7c34-46a8-9c2c-88219f8b14a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81a83ab-0839-486f-9f57-6058698b01ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "520bb948-37f2-4880-9429-bee853c21b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23e14e7-c93d-4a23-a245-9fb4dae59934",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a9d2b5-4c39-4082-9dbb-729decd96441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2656f0-50ad-4b9d-826c-55d335d0dafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1bb3f4-4e30-46bf-a547-2fcf70b5f179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0021949-b34c-40cc-8f51-83d4b564771f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374cc277-febd-4215-a859-5ec5be3b4f43",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bde997-fa2a-47fc-b009-0295982de108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b5b541-80ad-4c31-bac4-d0834625622b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe950825-ecb6-436e-b27f-734880a6447e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5f0a82-820b-43ff-a53f-a5238c1ef654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c22f0fe-c712-457d-8168-29dc8cc5553d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9c0c70-41e2-468c-ab41-93269d521c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4d6a8c-bbb4-40f9-a3ae-f5cff284d54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882aa242-ad69-4f8e-a23b-e5ff620d1f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d95927d8-5b34-4594-8bb8-e1bce19516ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548e1436-bcb6-49b9-85d7-30a2df7e553b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0f4b1e-2239-40bc-a88d-8fe2e9630cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238f7115-ea5e-4dbd-b024-c3674aeea3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8eeb0a-5d60-47c5-bcea-74bd682fff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6e8ac4-5a77-4d40-98b6-04f525b62f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aa0033-eb93-409b-a295-0dd6da5515a8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d0430e-42a6-47b5-968b-37375d73ffce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b2b6c5-63ab-40f7-9f39-423daafff13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8d4a83-9be2-4a83-b4fa-5ee6c22810a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3ca18e-90e6-4b45-9811-03bd1ee8c337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc9aabe-7134-4d21-ad35-723e42c2a567",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628c8686-ab4a-4fa5-8261-d175a13151ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0922b34d-f2f4-4b88-ba86-064615426d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07d33be-4aca-42c8-9224-5dfcbaeea41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7613b430-5b77-4491-8a12-ecbee89da7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9a80d0-248c-4d71-9ba6-d2d326cf9095",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8322e04-c233-41c1-a747-7d3c17d15d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4240a1f7-b20e-4843-a3cd-ab2d395b4c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e62f8a-c285-4dc9-8f64-7557b4814dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc22e2e7-dc2b-4e72-b221-dc6043dbfcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73541160-2155-45eb-a98c-0499e6ccf137",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7b2dfc-29b7-4909-8201-6b61bf07875c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d83959-29ed-4266-8c48-d2f6a0056e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7df4aa3-3ccc-4033-8770-5ff5802b1c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "695b49e6-ac4d-4e48-acf8-9e0a7afd52c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebd14c6-26fc-46bf-86a3-145db567a56c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6d19bc-57dd-4d89-9248-d27d06ac1e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb201c08-32b9-442d-93f5-10df5d2435ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b33b06-60c0-4219-aca0-3144b1109206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "917d18dc-38ee-4326-9619-138eb70a0db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a24bb6a-a843-419a-8ba3-e9ced3ad19f9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64411771-eb9e-439d-89b3-838165637e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42521aa-0a60-432b-ae68-cb0c8f9c88b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3bbf48-6601-4150-9749-8d9764fc6ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7209272b-fae5-49dc-8537-50cb5cebe991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac84b2b-4c7d-4386-b9d4-3fdee248d768",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2621ee02-ab2d-4a9d-a16a-2782a555bcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ed5152-503f-44cc-b7f3-c3e3e7fc44b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113a087f-e4ec-46b2-8cac-df444b7126a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeff59f9-611f-4b77-ae5b-7734d27056a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c6130b-c9b9-4af7-8164-65116c345c79",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc3b013-9e36-49d8-bfe1-569a6ca63389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3aa0441-1d5e-4980-918e-1fd35f1dcf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbc8ba6-05d8-4e87-b048-58231e35c4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76148861-9049-45b0-9427-367abecf4dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6da49b-20a3-4cb6-b45e-0aa3a43ba644",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922417ea-66fa-4476-9f09-754888163ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77fec41-fea4-4851-b3f3-4f2a08cdaea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03deda99-b934-483f-97ea-a493fc4c033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff557d2-f833-429a-9d2a-34ef8c950415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019354de-d551-47b9-a537-363de4e07de2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0bf822-a69a-48d5-921b-28315614585a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0857922-e4dd-4bfc-b4bf-e2a80624e592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ba5004-4166-47c5-baa6-cd9bac476908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75286907-c5bc-4210-ae05-a8277d675ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362b3753-12d5-4585-a5bd-311652781fca",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca47f8dd-c102-42a3-9754-72b8ff7e64a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef06c45b-9dc2-4032-9efa-06512a672f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d551f343-5d65-4389-a503-02ce960a4eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c54de7db-1b11-4233-b7a2-3f94fa91bd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc05771-61ae-480e-b9fc-5aea6584332c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cdd681-a0f8-4d5d-bd6a-138660921cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98715021-1565-475e-9ffd-8dbd6bb48463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1acd325-f3a4-42fa-8bdd-8408bb4174f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df02efb5-f82c-4fa1-87d2-b420c208519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a64ad4b-1d23-42e7-84c7-d40ff513a4fb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeb5810-ee35-4cdc-9cf4-eb8ecdb26cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271cbcc6-0853-4ffc-98db-38f61e830f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ea526b-00e0-4a92-bea5-bd7c6e5e7a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4939a22-9ef0-4419-8d4a-740ba611a75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b129657-67bb-4653-8638-649279455538",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f579c3bd-e36d-40c5-a469-c8d89f6f4c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62237629-db11-47e2-9cef-385c41fd8ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6032f8-d305-4c0d-8c66-e0ece9837cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f92c6d-d19a-4294-a6b4-cdd679d21ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19ca273-a864-4681-b569-d69df7eaea62",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534e49d0-2a2d-4203-8d15-1f2bb7d22514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafde401-1c62-44bd-84f7-75f997e7c50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5bfd3f-5914-42a1-ac48-955f42a4f9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc01ee3-0efd-423b-91ee-bcebc70a5c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a441e13-44d4-4362-86d6-360c4683c4d8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a8dcd0-0d00-45e7-bfa1-92e80376d422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc98649d-08d6-4636-aa7b-27ed577c9c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11db8464-ad26-4b26-939f-211eee1bc48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29215224-c36e-4337-9ca1-39198005edda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c1c0a6-622c-4dd5-9fc9-a16e8131e9a7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6b9731-0d54-4fb5-ba80-265b9a481cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecd8c7e-0dbd-4021-be8a-065b6cace37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a394be-8165-43b2-854d-628ec1a46b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae55f66b-0094-4b7a-b1a2-e4f04043b579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac09793-9c16-407f-ae0f-7b4c43d7ad41",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56338c9a-6c05-4b91-838b-17b684250bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c8df1e-d22f-4ec1-95f6-dfb085f7dc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe2bb40-d18b-44ed-b1ed-a8331760cefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dce73218-21b6-41e5-8c8a-5b1a72aa5283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a81816-fe23-40d5-8092-b8656e84a1a5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080109ef-3e91-47f5-9d63-efba321d8bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7af968-e46f-45a1-83b3-f7bf2e456491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416194c8-82b1-4a97-a886-da39f391a302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70dc52f4-d010-47d2-8073-fad2102474bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ac5212-83fe-4519-9754-5bdb49786841",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b26ea6b-039a-46db-b941-f6d69dde421e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bcf2d31-8e47-4900-86b1-df02f9f64077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608a3c2c-edea-457d-a03b-816dc0a420d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7927cbb4-753c-4ac2-9fe4-329d7d2ed87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9abd27-36b0-4f96-9b47-7960e98c0971",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6c7f2a-2782-4b17-acfa-4c46dda92d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c1d597-cf27-463c-bc30-fe1dd0d38b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cf817d-cbec-4948-9889-20a632a464db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32bcd5d5-dd18-4bc2-b585-d23dd2e6d458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f26ab0-73e2-4e70-af69-db3ce7c0771f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7e5806-479c-40e4-92dd-448b7fd9c935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f81260a-b027-4567-adab-4513d2f6dc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa08da59-b733-44dc-8bb7-54993186466b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb24fb9-2daa-4ffe-ad1e-4978f5a95fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae28ecaa-c61e-4859-9236-6842adc9e3b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd76a0-f710-492b-9fdd-78bb09b3927e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d65e706-00eb-49e7-8bb3-2fe0cccb43c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793947bd-23eb-47ad-8c48-abd0d9c38d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "15a3e5b7-a7e3-4dd6-bdae-2d4d5bcd3368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a31e3a-0299-45ea-98c8-f8f662a5d184",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d759872-fffc-4f29-84bd-8ced3aba419e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f243a9e5-3e69-42b3-9de0-e0098e02ae27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc6d736-eec5-473e-b373-876ea0401ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1201e4-f575-4baf-91ce-722b1cf0e83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ad4015-4193-40a6-b5b9-f68988aaa835",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e374c2bf-9401-4814-8376-9397d4bef618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52f1f9f-1762-42fc-b756-48b649fc8910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b55b18e-dfc0-4520-90ad-217373847a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2458f11-7909-4989-ada1-462c3cd4f029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b1f630-1278-48b3-839e-29a3e16b57da",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d241b0-c247-472d-be07-e87308b1c26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731d7a61-6546-4f33-bf4b-b125a3cc429e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75915864-822b-4454-be7d-abf3d566a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0b3d35-ce42-429b-b294-18ba6e3db0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217e8d8d-201a-49ac-b863-94acad3fe2fa",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87c8a1e-9bca-48ed-9503-24e469da34a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a67d90a5-e00b-4007-9d2f-29721065a01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075adec3-be29-4414-b434-393ec7ba3197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d70a34e3-bc4f-44af-b3fd-8c86ad579e96"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bffae47b-ea17-49ed-a490-872ce052721b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ab14c93-6b2c-4746-b3aa-82226aeb4cf3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4d9819-8e5d-4434-b0d4-217cabc22c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0679251b-28cc-41d8-92bb-5b61c8588f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1464de-3a01-4c3b-8384-b36387a60fd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b8dfb28-9215-4b8d-a049-5a90f79565ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20f592f5-36ca-40e2-83ef-f721a3bb46e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31a65ed3-fa4a-44df-ac61-ee114ba2c30c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31ddd1b2-4acf-4e64-b500-51458dcd37a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6406e6b7-a1fc-45a8-92de-25b488f1cd0a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01453468-6f4b-47ea-a1a1-795ddcbf1f91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "951c8873-f5ff-45a7-ba47-c1cb5b787ac4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b81ecdd4-83b9-49ad-98c8-afd86c293cf9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9974c991-fe51-4419-b1aa-5bbbbe1417cd"
                }
              }
            ]
          },
          {
            "id": "bb8466b1-0165-4e47-b65f-80dad9b77bf7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dfa13f22-3dfe-4f61-b9a3-142a982fe34c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "56c8a6e9-0c2a-4679-9b23-b1172f9a4d66",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044c1900-170e-45c1-86d4-34a4a4c65d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "196f7d07-8bc5-412e-b922-a2c407f63458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14258e05-b82c-4140-8172-c42143471181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c252d8ea-c27b-46c2-853d-218825def8f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50f87323-d93a-4877-a393-bdbea5b883bd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5af2eb9-ce8f-4212-8451-aaf4c3999c43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a3f6d9b-867a-4c6c-bf84-a8902ec0940a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddb2985a-903c-429c-a622-7b2c3214d5d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f0dd18b-6334-4b1b-82a9-a3a6c66c1de5"
                    }
                  }
                ]
              },
              {
                "id": "aa4fe243-49a4-4159-94d5-3a20a45c1296",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8a56af1-4579-4b15-9c14-605c848f0d46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5504073f-782c-4c92-9881-749574ed1f97"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4f94426-ee2a-4a1e-ae69-454706bb313d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1deda8d0-14ca-483c-9e06-27726c9457ad"
                    }
                  }
                ]
              },
              {
                "id": "e93d2e6d-a1f3-46f8-bdaf-862043cd78fa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20299bdf-eaf5-4f90-becb-47f16fd47317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1861c221-902a-4e1a-b298-de2f307c54ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20435690-0f4f-4dc4-86df-004afbc75921",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f29df450-8d7b-4d73-92c1-67b59a8ddeb7"
                    }
                  }
                ]
              },
              {
                "id": "d8d7112b-80ba-41d4-a670-40f45fda2a0f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60edc1c5-2d25-44cb-babd-46cef19ad76c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0082b77-8718-445b-8bb2-bb30e64c97f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bef20a4-59ed-41bd-9a15-00c18db93e45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ced3459e-3e29-4d05-b99f-7d892281aef0"
                    }
                  }
                ]
              },
              {
                "id": "1168ba19-fa59-4043-821c-d2ae7168e6e7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4700ea0b-537f-466b-92a8-2db056023b68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d72bb318-2c82-4446-bda0-d6c12ace923a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "693577b9-7fa3-49b3-a241-98578c7b16f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "063065e2-bbf0-4955-8f85-e91f7955d195"
                    }
                  }
                ]
              },
              {
                "id": "5cb51088-3b45-4a99-bd6b-802b39afc920",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e9887f2-39bd-40d5-a55e-aa22bbe20cd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2a57bac-bee9-4e8a-bbc6-85e788698a79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e93b68df-e591-4e87-bed7-d0c9d4aee6c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a265810-1cdd-4772-881f-f24da3d9175b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "240f70be-4fe0-49bf-b73e-8e40a7a4860d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "faecff53-559a-4fa6-8f83-11570e3d5ccd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0720c3aa-e9c3-4d1a-ba4b-2bc726d9acc9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2d55b72-08fb-44c4-8076-03b8dbe120ca"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce126fc1-e7f4-469f-9532-645ce6ca03f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dbb646d1-e0d2-42ac-8475-329af1002f82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2acf6a74-f66a-4d93-bb5e-906f730dc687",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c4d3f3c-e1c6-48a9-8f10-a2fdba6822d3"
            }
          }
        ]
      },
      {
        "id": "2ede6706-5116-4536-8f54-009b366f259e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "41127c67-5cd8-4611-8731-c67156de2472",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93f1e057-1346-4ab9-85ee-35a915fb0a6c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4daf4e2-65e4-46e3-b992-18cc3c2e5d51",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f02a78-b424-4ff5-8634-0d3724dddfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b599a42c-6311-4443-a617-06747022946d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4820009-7f12-4e21-b1b4-e1fc4c1dfaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "56afdf34-c88d-4c54-af26-74ac58a32b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5531ea7f-b4bb-42f9-abff-f75f86cd2503",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7342c082-55cd-4d91-85c6-efae24ecd8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59cc5212-ddc0-4522-b496-8689b83263c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2e85b8-8896-4788-86b4-0fb518a934d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af59e02-4163-4b85-8483-ba0b1156c381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5828d465-1185-4d9c-bfc0-84cd8d93b447",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3159f2-aa12-470c-ad5c-a1129ca694cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0d220e-ee3b-4e5e-b151-1c8b09d6b3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d5d87f-0c27-480b-9623-9695e28e9883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "635c33be-89d0-420a-9cca-55293a1692f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca21934-12a9-4fcf-80dc-65300051e447",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daab0f2c-b466-4a5c-94f8-a90351b01b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff8b050-7625-49b7-9e51-e02b4956fce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65145a95-b4c3-4eec-8866-2ac37762acb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a26f22-3e1c-48e2-82ef-7d401a2fbe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b232810f-61c7-4238-9613-0ef89609331f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193906ae-178b-4a51-8312-3eb9601aa37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49ebf1b-185e-46ed-884b-0f0a4f0c3e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9563eba-1bfb-4576-a865-53083a7c02e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04f3d9d6-fe7c-4c63-8466-b09a4f0aebfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcf1947-a8ee-4c6d-a42d-8580c43646c8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b99e81-83cf-47a5-a204-c0874aa3712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee8a8d5-ea93-41db-a0e5-900392ae61dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b032ff15-ed92-4913-b0f1-bb57af8461e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c35ada0-5a44-4f8b-8898-e2a945c3c283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae259c0-1e6a-4174-8285-06ffd517fdd0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8279be4c-40f9-4b95-83b6-cae09466654c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a538f2d6-5a41-48c4-ae53-9ccc7776887a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884526e9-4ffc-4160-a5fe-76f515e33b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0782429b-fa93-4213-9f07-2c39bdf6443a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad7cb9e-a540-4db1-89fc-07a65b67acf3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629ac1da-bc4f-448e-ab02-8cc26ccb892b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076705c4-e994-498a-a365-09df836063d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889f77cf-c4a7-43ad-8fb0-a56e1b6b84c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7f133f-8593-4d1c-a9aa-077f919eeb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49a5a26-5bd7-4be4-8e36-9cf180189ff6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b117de-ac48-4b2a-8276-424ef1f51eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d69098-a266-4789-8ddf-ce03429dc803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaec834-84ec-4b30-9a32-e44b255a626b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4db96d9-fa8c-4470-b52a-c3fd782c84ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d790c45-07d7-4f57-abca-4a88e44f2546",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdaadd5-7832-4164-b6f1-4b70ad993fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278542b7-a10e-4001-9147-bbc7f022ef6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36ada9b-a2a9-4d0d-9ac4-509aa2b4e29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed92519-a616-4738-b30e-03ed325e3e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e95d34-14ac-4214-8790-89d2728e43bc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d253abc-31d8-4ac9-9fa7-c01ee98c2567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e57885c-6cef-485b-a01d-45b825697bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd9eaa5-3b75-48b0-b222-3f7824d42eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "711ea749-db93-4107-82cf-a2f587be907a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c90162-6c47-45d0-a5a4-810752c93e55",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c001597-e586-4ecc-b6b2-90bceff78317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024ff9ff-0ed9-4468-b110-7f789be9246b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1182a5-270e-4d02-a2b0-db2fc133392d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "225352fc-1656-4989-9bbd-b5204ba5f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6ee8fc-1fc5-47ec-82be-53e2faec3480",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4607fe-dcd4-4ebb-b2fd-a17d43fddb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b06d0c-9178-40ac-a0e1-b92c6a75be67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b337f3c4-ffe6-436c-886e-3741916d5056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f170de3-f28e-4f14-b3a2-36c4200f9edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cac748-a1a2-40ca-9d15-11cd7aa16b0b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93828f27-c778-4d3d-9361-aeae18301519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cbe81b-e0d3-4c13-98a5-b9b3125c4bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228bf7f7-81ab-450f-b534-d0cbe8cc4f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0eb7ccd-e85d-4166-a52a-f5e0ecebca3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb96b85-70d7-4294-b70c-a64ac1e42b5a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893e2afa-3888-4262-934a-1b9b97cc18cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb4bb03-7c38-4ac3-bada-d071c2235255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7cfcc9-7aea-4f5e-8c91-fac3d4cca3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ff5290-81a4-4a95-bef5-511f449e9487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c303cb47-dfce-40f6-b20b-89891f95b344",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686575e6-0920-4e66-a49c-a4caacc60d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0adb4e05-759a-415c-bf39-e2e80d30e4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f78905-6b6f-44f0-af0e-e77608fc1839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "70b6054d-ac24-447b-829e-3d5dd13cd95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaacee49-c654-4c0c-8745-da175dbd083d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0313c0ab-14e2-4e29-9b42-68c8cb855f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0025f8-e1f6-4f0f-b567-c1e8746ca5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fd2950-0095-4180-b3ad-5adffd807f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d346e7f-0dbe-43eb-b7c8-f181b8a7c887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74a9f71-0e23-4354-b13e-dc57e9f2cee9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dfa82c-cfa1-47cc-8f2a-c2ab19525b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb084e83-7443-4f19-988a-77dfe4462652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ae947-720e-42c8-a707-a7ee25814717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6054a7c1-c3a6-420d-9f8b-d152c9f5ccd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b11551-4478-441c-a1dc-c0d40026d090",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5f0e9b-1b2c-47cc-926b-56bb3d6ade73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f188e461-1c5e-474c-912d-996129afa7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a7852d-e744-4930-8350-94c7708b6ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c3bad6-0dfa-4923-a85f-716fb2dee846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80037855-561f-4f81-badc-33c441de3c1a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b593f8-44b9-4c35-bc21-349bc934712f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3007e71f-4d1d-4268-8555-5fa580f488ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a39e1a2-7d74-45ab-9abd-a3df6b7f7b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0afbede7-f675-4a7f-bb73-1ba79a172169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297f2152-0f43-40f7-8bcf-8186cb0301a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46bbc70-2e45-4316-a3f6-7edcbadce5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35506c85-73ed-4f58-8d60-ed161f4428d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26489148-ae14-4fbc-8f8d-7f876b6bfe3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9453f20-747f-4b53-b891-8c5cc7b214e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7650e11-f8b7-47b3-b7d1-ca4710b35b86",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd05a090-63b3-456b-a994-2f8aafee29a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0f6ecb-32ab-445d-af06-c9cdd397a05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053d80e6-48c9-4f5d-a0d0-0974ba616c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecdc079-a723-4a6f-ba18-901dc5ad8c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25be5c4-935e-4403-8c36-3437ccb34da9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab833ee2-8002-4b06-b2a8-a59c32849eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0103fbd2-c3e2-495d-902e-41ccae46a30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578ca1a6-ad3a-4b54-a347-3dee821fa359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a26ac179-acbb-41e8-bf0c-fdd7ab3fc0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d33adb-d954-42a5-91ed-4e746e12da35",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca242bf-fc55-4cd2-b208-effe5625baca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacd8a58-27bf-4a68-86cb-d0ae49e03b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22900a91-caef-4820-ade1-0320cd79f321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9009591-0dd0-4e94-9568-cee43e0976b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404d1a53-e87f-412f-bc1d-195337646795",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05debf6b-0e44-4945-b464-987afcbdc861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca6af7b-03dd-4955-bbd5-88975ec8b17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e7436a-d2b2-41b4-b8f4-92ee2c2fa121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b34ae5d5-38ba-44b9-839a-25f131a13a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbbe9a7-3c66-46fc-bcc8-e90dc5a5f5d1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935d35c0-cf99-46d4-a789-4c1e0cb1e8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562ca41f-9484-4ef7-b791-9da567141bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a201a73b-a376-4aa6-926b-5b05bbeecb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "291da496-a14f-4bb7-a257-ff8a340da7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20c1710-3b09-4a36-880a-2d3545294f20",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed074cc8-c5ae-4e26-aae3-e900674a25ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7772488c-b86e-4d1d-8ccd-e9749433dac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925b8a74-7d69-4875-8d83-68eceb40e05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf710c28-edf0-497f-b8e1-551058b09e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926b4072-aa12-483f-adcb-91b83edf5404",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72744802-f4df-4f7e-8c5e-3f569cc87813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd69ff3-a6c4-4506-91f7-a923456aa811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46571ad5-0881-41e1-bba4-003151affbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7647b6-9c81-4a16-828b-20761ee3f7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fba44eb-1dab-4b84-9c9b-d042a9123242",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a35460-b836-4463-875f-d499120f0484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9566de74-9ad8-4fd6-808d-e8fcab82f4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b9199f-28c3-4163-9dd4-7e622ffec895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "461eff40-3fc8-4b5c-9fbf-3d5194ca6efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab26c5ba-ffa0-4201-9330-a41b7ef8a2fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8db64f-8632-4929-8bfc-6d2ebaa2d20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2919d165-e0f9-43db-92b4-fc2c52b07c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15de5f3-b2a9-4abd-b1d8-11fadc2d31f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef64f9aa-c33e-40f9-9414-7066e616b3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc61c281-47cd-4304-8ac1-89b07ff36f04",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ecb063-584a-4104-b3c4-823cf2e9a694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a3d6a0-7da4-4e90-984b-99258d21e03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6d6f1a-80fb-4cba-b687-0cf4d95de43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbd5152-c110-415f-a4aa-1ccae6878080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25cbde1-7dfb-45e9-bc31-70380a03ba75",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dfc0a5-2d91-4af9-8063-cdeb0a8dbaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6efe6a-24e1-4fc6-b417-c25a09dafd2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79058ba6-492b-4c31-82db-44b0a2ac4168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8647f0e5-d9e7-4c0a-ac6c-24a2a28520d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821edb77-932d-4b80-93a0-370b9efa3109",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fe893d-3a0d-47ed-bac0-835e536d572b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496cbe84-8797-4da2-bffb-2b2eecf163fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55aa96c-d064-4ff0-af16-ef513b815bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17cbf90f-a953-4cb2-a0e7-b67bac945d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01060c42-7d4d-4d13-a8e4-bd9138ccbb8d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47633abf-3e46-4e84-8aba-81eb0943ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a2074a-4b98-44f1-a3f5-5d161a0a3e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3714c9-a018-498f-a01c-acefcb299a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1807193b-75b7-43a3-8ad0-1ba83dce4740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5233fb89-f605-4ec5-88a1-1862d72fdde4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b26d0e-f90c-46f3-86c1-b346c399aa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f90df91-8bf6-4b7d-80f8-2956c3cb4c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fbb2a7-f791-4549-a064-e5e7f82ee312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ef461a-f7b0-4fc6-8d36-24bc6c2bc1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80fba70-126f-4fa2-883e-b29ad35052e7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852c1e18-d865-44a4-b13b-9d96491c46b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c89369-88fa-4b41-a27a-0a73e202d298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c77115b-7727-475d-8c07-548fab56aacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd30a85-68b5-4ebd-a526-d8b108b7e1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d29f02b-ac82-4150-a809-d248c1fc7f9e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47799be3-1c53-4dc7-97db-88596328ccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d11dc6-49de-4408-8bb4-23e86719cffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46ac8a9-ee4e-4e7b-9ee7-022ad2eaf33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9794ddcf-d424-4b45-9a5a-b521e689ac88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a706c0b-de73-4dca-9f78-4c0f01275e5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6488e3d-b544-4f9f-9df7-23e44a83e06a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d107ce9f-49a7-4925-a190-192eee888b05",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc46e96-0419-421b-b99a-c6c7af1e57d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70707328-020a-4cc0-9fe9-897771e839fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51dd04e1-4bf9-4a10-b822-e88a2c3bd9cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05b5a193-dce7-443e-84cd-a85b504968ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e32509a-2423-446b-ab85-fc78ba6eda4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e76b2814-1905-445f-9960-eb417e46f4c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a899b82f-feef-4b26-9554-cb35a4d9aea7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb33121-766f-4698-bc96-d800c9d9e176",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b161cf81-0d70-4b67-a045-4149d3bb2553"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aea95253-8e39-48e6-b38a-02a379337c02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6928bd3-daa3-4170-9b50-32177adf2436"
            }
          }
        ]
      },
      {
        "id": "5d18e818-a779-4802-9286-49d15760fa75",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "11dc86a2-e3e4-4ca0-97e2-d74b043a190d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f304ff1-1fe6-47a9-8f7e-3eacbb77ca17",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19ee61d6-b820-4054-8c69-b2c60712ec3e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2175579-0a39-4f8e-a53d-1a4086a505d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55e886e-4d8d-42aa-bb0d-6e4638cd0e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d283715b-dbf2-45d4-ae31-976c35896394",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4cf445-1e68-4063-ade1-ea98569bbd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a560de7-d9b1-4110-8f7d-905da52bbc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396c36d7-aca6-4256-b878-6f0a9a9ff901",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62fb05c-6483-4b20-9773-f2a0a419f9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775823e5-cf6b-45df-b955-6bc9bcb1f0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e08edd-e4e8-4c32-a855-14408e514515",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7cc199-fffb-476d-b1b3-eba7e69ae42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d7baaf-d3e3-4b67-93c3-ff20603fc20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b5c552-25c2-4ad7-98e0-d3e565aeb9db",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbd96f4-f12e-4751-a107-493a964e45f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802ba4ac-afe0-4e3d-a4a4-f83773b589c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5298da4f-451d-4ecd-9264-5ad670d6a52f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a09a718-1a69-410e-8830-6d979ec102ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6399041c-cb7b-4185-8644-c64983d2ebb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa9c28e-93e1-4cbc-9e9e-6cfac65006d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80075db2-b938-4d30-98bf-bc645c416ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5eff11-2845-42da-a78a-8ac07ca3fa9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85335379-6eec-4e8e-a04e-f4be9901d7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18efedd2-1018-4545-8f7b-3ad6de6b0f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccefa1e-abda-42bf-9c4f-d697daa4dc17",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a9026a-48e7-404f-977f-d92d13bfdfdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f1a6da-2e2d-49b7-9557-09c90d5b3650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cf9309-1f18-4eb6-b886-ddd10bc47283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca02479-c8e4-443d-aa05-5b06b0c36d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e47fce-70fe-4c55-8bae-62fa08a6cb38",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d592d5-1ae4-4a11-b2da-e64635e8b02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c7c9bc1-51ad-4706-97c0-8e33e6b8d3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed0b6bb-2c0c-4884-96c6-7502e9098d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4279f099-3f67-45e8-8c7a-6af3e90327df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef7117f-a57c-497a-b883-a561b61af2ed",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365c0635-7253-4af3-9e79-c62b97af2335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "861caf10-f2ce-4d29-9dd3-88f9a39effc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227ca6b3-8a9b-49bf-bb08-afd51617ce95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd9d08f-bd8e-4d58-8ef3-651e28decd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5418ace9-db2c-4bf8-b1cf-454cb8c17660",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2973faf3-9688-4785-9807-eab2ceed87fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c6e60f-2b75-4af5-8541-3d5e5ac42833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d533b0-c38b-4096-968f-90cc6d89ac60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0c8fd4-5516-479a-8dfc-acdfc1e36cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d4b35a-fff7-4154-ad71-07c222af7ec2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8406e1b2-dfc3-4fca-b852-78eee06afa54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee9af48-37ad-4591-83e9-30931afee276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ce5cb7-8686-40dc-b939-3072740115a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986cdcbc-899f-4630-bac4-e3e5c00f7191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c923c7-2f8b-4b94-ae6c-60c33f264f7e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e8cf19-73ea-49e4-af1a-44049c46e6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4160cdb8-4c45-4200-877c-4ce16bf3549a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12884545-64f4-41b9-8b9a-496ed4463302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8b9fdc-1a2c-456b-8ffa-a2dc95dfab97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e400ad-343e-492f-a3b8-02542001c20d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0788c30-7acb-4064-b7ba-57653c86fac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3a83434-78c0-43e6-b183-93dd2792fcab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9b6425-671f-4149-a388-a17dd5a2deca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198aa8ab-8662-42d4-b02a-67f95bf4d63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b21af2-7f9a-4d86-934b-593c857153ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d169811c-5c3f-4c5c-b8ca-906521f75ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f61250-b666-4f05-be34-507c8df1ded8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed4f94c-cc2d-494f-9c10-17263cc44ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1211a896-27b5-48c7-b92c-addb1cf7de4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c600289b-4319-415d-a46c-5a7ec196dac9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f968fd-644d-4c03-ae5a-945843f7488e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4857a4-52ff-462d-a519-f64a4d8dbb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fdeca2-723d-4212-ab26-22f63bf7c4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b15bb96-1c8f-429a-a7a5-d150bff27f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339da805-7b25-4bd7-aa1a-0c2e5bee59bb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1190b9a-0a52-4d8d-978d-96d0cfe2645c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c81ce3d-7064-4219-a2c9-c3d04e72554f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d5f336-000d-48c7-afba-43078a10dcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555fb87e-2f9b-4773-b772-6203542e392e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74285ef-fa0b-409e-88a7-041b1b1cfd17",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb39a227-c53c-4d23-a4e0-b239ebb13105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf9f71a-ffde-4067-80d3-cbff70a969be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deed43cb-77f0-42b0-809f-3b9c418de99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dd38d0-f92c-4cef-bdf9-9c13e8b17e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16793968-9129-49c7-b3fd-2c0c1258f172",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e0a323-583f-4a80-b470-b47f921093f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb1e5aa-7537-4b60-b216-e73cf94dc22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401d5ee4-8584-4fac-8324-b852305cdad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe0d42f-59b8-4ce8-82dc-ec86489be660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d58cfd2-28ff-40c1-acfa-33c789df1eeb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f346098a-5d30-4269-85dd-6aee6c0fe1ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a944f1-e0ad-41d5-96e4-6d39a2bdcbcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ced127f-8cc9-497f-afa1-225c66f727a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9f3bdf-1c8f-4f91-94c4-dc91bb06d414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c382f5-901b-40de-8cf7-052eea5827c9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65c350e-63d6-416a-b985-5a24c4fe02de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835bb402-4d4c-47ee-8caa-dd1c28d1211c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e4d5ff-e07b-4892-8961-35677a7bc09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22d48b1-99c3-4ca0-8ef7-ba3faca07f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41e8fd0-448a-43d9-bb49-083cbc7bf969",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e2cc84-fcea-4717-a8af-883d86b0172f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b38b463-00b0-45b3-8e11-aa7f0e0066f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184a42b6-8688-4594-bbeb-8b7b8fd819bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffaadfd-c3f0-4ebf-9b4b-e7b29fcacb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da06415-f43b-49d5-860c-d44d57e78e5c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eb1ded-e0dc-4b88-961c-af975f1d4648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93d8400-8811-4530-a166-bf53064962de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d660e0a-b3ca-46e2-8a22-2af73248e0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d2c934-eb5d-4f38-bfa7-a49061713cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f752515-a21c-40a2-8d36-c14005012d7e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd849f83-29e4-4c44-8daa-1d438116283e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30cb8ce2-2dc3-4d8d-8e4c-8448d7f2a5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d40e4c6-2ffb-45f2-b9ab-1cec9297deb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b358bb0-7369-4101-9a97-28dfa1e8ee0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad10f69-2d17-46cf-bc31-978e2f8567f5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a296e478-aff4-4de0-8cf4-71d16af218d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9329e5-f48d-41b7-89e5-3dc5022f0ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b7c564-9b29-4a41-ad59-159434343497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356696bc-bd64-4d77-baf8-84bf8aa5dcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532f3e74-a167-4e31-a607-fa9054bc177d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1856e692-c2f6-460f-b5f7-b5966c6c1f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "562a139c-54be-42e9-91be-a7f66ab8fb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78069056-ed76-4b0b-b58c-db6d563b7f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3428f194-da09-4f94-af8f-733aa1f420d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01a0d98-0d41-4052-a3db-013c925873a5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b7f81a-a464-4440-a261-9d6a84fe83e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1257693c-dae5-4894-8eb3-1ea27eebe9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1f1c54-b42b-4fb6-ae30-d307284f132e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3becfe-c7ca-44f4-a1fb-557531ad2b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f776c6-6451-4ec0-80b1-ebec99cae89c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546f3bd2-ef23-4e43-99e5-501b72ea78b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ab755e-3e4a-425d-bd40-39f246a4c642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34991cba-947c-48b9-b4bd-9f0efbf053d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88baf0bf-d177-4031-b2a3-837e982362eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e70a4cd-6b9d-47fa-8931-54d498f589a6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44518726-cad6-4524-97e6-9f2ec225eb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a88a99d4-3502-486a-93fe-4c55eb1ad3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36e5b41-e5f0-472c-9785-3e02e4165265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6535c95d-bd6c-4515-8fdd-eee2a9fa3a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64e7386-38d1-4512-bda9-dc277cfa27a0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f55b9b3-2336-45a8-adbb-7e02bc7682e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fdb366d-e0f8-4fd8-87c5-af6efcb7b34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f82cd6e-5fbc-4a6d-9c8b-eda37bdcd071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3be2d4-84ae-4baa-aa12-fe5b981bf9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81aaa348-5a0c-4430-9e89-d6f1c349ed09",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98635796-b658-478e-8d66-94abcea7ac1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad48ca71-915d-409f-b62b-b6fc0d329287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ea18f8-af64-49b8-ae27-d7c7dbcf327f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52908512-9f96-45f8-8953-c0b09eda823c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851d0a1f-c185-401d-acc2-94f8026a827d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d0ca60-a66e-421f-b6b2-2c4727ecfad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5fe8d6b-a929-4b16-aa61-b7cf7b223e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918abade-0121-4bbc-8662-90173b791821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d777f0d-d5f0-439b-ba14-d932898b9dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d9738f-e70b-4bcc-a4e3-f0c780397ac2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95184bfb-a897-4fb2-b6ed-6a02a59bdf5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af7d9b2-5b13-4129-b9f1-fbb4c838eb00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a221f5-1615-429c-8c29-001b0aab0b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fe5831-8e93-477b-b7cf-65035c16ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d32986-0c97-403f-9b38-47b2e02065b5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3dd0bb-4476-4759-ae98-7e1f0201ec29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ce12dd-4d47-4de1-8553-fb4acbcd4ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e4394c-60bd-4051-81c0-feabf98d95c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0fa31e-723c-47dd-a290-c576ae8654e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0e048f-e5dc-41d1-8eaa-6002cd111ab3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbb60d8-2b0f-4d3a-a916-8b6c903806ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9867613-8a95-4186-a29d-1e347a351be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9182d45-8353-4ece-8a37-f7968074c985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66842a60-eea1-4493-8ef1-7f3293dde2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd3b07a-b346-4d3e-a1b9-60489ca3d6eb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9b3388-0939-4597-8086-c24a9652c919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac6c575-ee05-4c63-a603-a21c6a0b1ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce1a063-640d-420a-96d9-d124ca0a4692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a20f24-8c7f-4dc0-8693-f3d345a6f945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dbf921-d022-4682-a239-33a18cdb943e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe91082-53d5-47eb-846c-715ecfcbe534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49de07a6-66bc-43a0-bc19-2040aad883ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cecf46d-ad07-4cc3-afe2-610f397c0113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53441b9d-a8b6-4449-89c5-58f9be69e3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2353084c-38c4-42d9-943f-328a7582e5f1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132b14d5-1685-4fab-9f8b-6191a08f8623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfa0a0f-09e9-410e-9a45-1115917aa28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4c60a4-7941-4658-a1e8-f53b25599fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc2ca4f-a14a-49b3-b9a9-f8f352db6a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0e18f3-52fe-496a-a71a-bee02155d775",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd401320-019b-4e14-a6b8-d8dfaa38b4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54a49c8-d962-4db6-bea4-ecfd5f923125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff6bcdb-106b-4c02-85ff-960622bbf169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df4437a-6472-4e4e-a673-793c7291d6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e89d66-f1b4-4b18-987b-9ea344d704d7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337e3f0a-1cad-46fd-a359-3e6f45b5224e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9ccaeb-b4b7-4299-9057-cd58e3ef7da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32ff209-25ed-4b5c-b5ae-1714e63ea4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a37f05-eadb-41c0-a846-f7baadf7a595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf799ee-0bc7-4a84-a3fa-a7aa263b83d7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f9cdff-fa94-4767-ae8c-46f4b3f05931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9356f8-9587-4fb8-a2ab-2f76a14b215d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a163c1e-0643-4738-8740-e3fe4e2e3a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23cd4c6f-024b-41e1-b4dd-bc84259ae4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140d8fce-3fd0-4576-b781-88dbafe087e2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ecf176-9218-4ce6-adda-570946b40708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c9bb9e-1285-44eb-9278-b85816c7b18f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f1a8e-0554-4e10-8292-597935cdbd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f157497-60ff-4977-8e36-8faf1c496926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db44299-227d-4717-9a20-30015e087a21",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60a68ab-921d-4885-8dcf-4e814233c2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc117f8f-3c1b-4dab-93ee-0f7a68fa8eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ea9b0f-d590-4405-95e5-3a06e5de720f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb48b3d-92d6-4bd4-8c44-0c2c7eb225e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e993f12b-9b2e-4595-aa92-02d3812c6f38",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290aff4a-3e4c-46e0-ad55-33e732b8979a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daee6479-c427-42b5-b832-2696601be546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf4c2da-c4d7-4463-bb24-07b774abca49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9867db62-de1f-4b5e-bbdd-455b2bae4f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb898d6-816b-4e4b-85b3-4f12805e3bef",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e68995-41d2-4be0-b2d0-30602b4a499b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a409a3b-6fb9-4dae-86c5-8feabd319549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df84a095-0faf-45d9-8504-83ff9933153c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ec68c8-66db-4b02-9c9e-b89dc131eafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be92cfa-beed-4284-863b-25b06c0df7fd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961d76f2-7e04-4551-a910-71b4a45b4285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c691c0f-3648-406a-8b8f-9f99f731fde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ae66dd-c69e-4b49-98c2-306719ee54fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85809b8-3181-40e6-abbf-0a773920aa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd68754-05a0-4263-8012-75fd1cbaa1ff",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a762f69a-1e83-4d3c-ad3c-1f6bc38f64c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ab6542-afdf-435e-bb98-bbd360157896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1866b723-1050-4030-893d-b8c2a6946a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d416c667-2eee-467f-8063-e3cb925d9286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891b8259-2289-4226-a7a7-47a976107e9b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443ac754-bbac-4014-b7a6-ecdb1facb399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f46dc08-8f3b-463e-9b50-1885694efb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2de117-ce9f-46b3-9951-98e8491ef107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dac192c-62d4-45de-becf-17e65317eee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cbea29-754a-4c7d-a2bf-54cd69e77281",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862c98b7-8b5e-4237-a0ae-a5aec0fe5da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77194e4-c541-451d-9785-14a16404c650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6ef267-2d98-45ee-9c2e-4bf57fd13dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f063ba-58c0-441b-8f0a-d2d5194881ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3964aacf-7e8a-45a2-97e4-87aeed2fbe44",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd12b64-6dc5-421e-b925-c46cbfa23e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f13ab3-9b14-47e3-8ea9-f2273f56f7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8312429c-5ef8-45b8-ac03-954db72bf7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbdcd47-84f9-454a-b8a0-eb093e65e856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8133258a-8a5e-4705-af5c-8d7661ca285a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c93e19f-3ad1-498d-9890-9d0964d9c734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87c2674-b7b2-40f0-a3d4-6dc6b0b8f053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c75c21-1f03-4bb8-bee1-2385f9b34e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1896f5-b07e-4e11-b7c7-3a83970f639c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acab7342-9bf6-40a1-9f68-01566e8329b1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f1fe90-da8b-4f87-972c-2f7605d87556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486542a3-dc2d-427d-b56f-0fda956775cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a7f7c4-f4e4-47a7-9e79-6f3cbd34227e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa89fee1-2533-4268-b7a5-f0a2efc85dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37eb22e5-22da-4012-9b20-97599cd69c0b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a670ae-c816-40d7-8bc1-f9c70efea351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd678db4-421b-4545-a7d4-e814583db8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93324e0d-c33c-4088-9cae-dc516f221dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52db5ae-523b-4742-9060-6aeb56a88cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa850e6-9d1e-4e5f-b516-8b660df80fb1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f96b79-a68d-4faf-bd79-6d5ce9b1c456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c607c54c-8f23-4636-b14f-9d4e12f5c90f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629bebf6-d81a-483d-98da-b1fe38aa4de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e361a1c-9716-4f63-99a2-34aca0f61866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd79c469-9bf9-42ff-ab6f-62d654cf3718",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cb228f-a79a-400d-acff-3312beb69204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68819cb-dfcc-4c2e-9c76-4d18b8f87965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac499fb4-d292-45c6-8d6b-391be2149f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a571a15-20fe-4f37-afb0-c6c2229c2a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a792510e-a771-48fc-be3f-f07dee8cfc54",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8dc255-290d-4095-9afe-0cec998a2d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb7efa7-22b7-494c-869d-cb298f0b0599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ac1d0b-8709-40d9-a445-01ff85382745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b349a3a6-20f1-47da-be55-fd8a69880ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb6f8c5-9199-47af-9b5c-3f5576419a52",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6941452f-3233-4aef-a7e1-ed172f7ae78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6934a49-90df-4cca-9f44-9e5468022fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ba923b-7da0-43ac-a656-0360237d36d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d922b4-0366-473e-b484-af15f9549696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ee4082-e895-4234-97c6-5ea67b4ec30e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd50b0c-7c0c-4a6e-a30f-81337c8bae49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1da3922-8d9c-413e-8a29-1d39349fc3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12c50eb-3878-429a-976f-00405621325e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ee90a8-77ac-4439-afbc-5124031daf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a0d042-9055-4240-a06f-bf9c2c08fe4b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cf8ad7-4f32-454f-9d02-4129f9d2b551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9e64af-e8dc-4be5-a2fb-2c2bd00ccfd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db716bd-4e45-497e-b85f-01f0b74e1257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add4e598-52aa-4fad-88aa-e2056ed75e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026483db-0e43-4f99-af86-ffa1b31c87a8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f2e7af-ab01-4b74-9131-9f55f0b2013c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed845a96-be39-4a8a-85d9-3ba3cad80fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60815a5b-0c86-4645-a588-139251327534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974188cd-eb47-4019-94fc-f48cfe8ceace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c73f575-34d5-41cc-bf7d-e5828e30bcb5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab94326-ec77-40b3-9f07-e855bac176b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95516977-25e7-4f65-a64c-dc92892213de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcce880b-d158-41fa-8fc4-77c79f3d5042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d749eaff-e1b9-4ff8-a537-0843cdb600f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efd27c1-0f92-4d56-9944-61cf7dbf8b29",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f2892f-720f-4efb-9780-1c240db4cc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb2bbf7-6b6e-4925-b08b-56b2b19f1413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484975e4-0345-4925-b10b-6945c67ab00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e376c864-5dfd-477f-8983-9349347cfdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4d33de-9131-45ad-a49d-54dfae5bba8e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b69fcd8-5011-4c49-a465-0b741f09935a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7222dd-f20d-4849-ac46-bed107e4161e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a1edc9-42f8-49b3-8ab0-a2b894aee04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08f9700-5256-4640-b8c3-8fc73a8bf648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12cefb5-26d4-451d-b7be-ef02e14af7cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0282aaf4-edbf-4013-8a08-82b174a47c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "360c4b12-c7e2-4c63-b468-d4269df6d9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896c6851-658a-4f28-b29c-5e1ce7ad67ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e013d675-6718-4bd0-b972-740bb2587e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6786f566-5b5e-447d-b003-8ff27b35acab",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94a3d87-cc11-4c46-9c06-cdc6b0b822bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c865e1b-352f-4351-9aed-7d31a4ba2512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c4126a-0e52-4574-8b12-a80114703274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f1b759-a7fa-42ec-ad18-f72911bdd206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d9e3b9-d274-4066-b09f-ea7fbcf15126",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b3dc86-9a1f-4e2b-ac69-8b895bf4e82b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fcee3a-4e27-4d6d-8327-8babb2d1d552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eedb6b-8d40-4028-801d-19ae60144281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6605aa-bd10-4345-a37e-514d26527a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5307c1-96b0-432a-bac5-2e80a3a6611b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74342bb-5f4b-4c25-a6bf-7352d15fc44e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec23f8c6-5756-4ef9-b23b-4d302844f219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61442e13-5d89-4cea-9b72-0dd511f435f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe90840-f709-4a8b-bd7e-da501c3de68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a2bc91-0cf0-4d3e-a114-4e3ebb8b7cec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ac29b4-a3a7-412c-90d6-ece42f4d0685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0302a5c8-f272-4348-9b72-31573944e47f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99753456-31e0-480d-bcb6-6f932194082b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063f7267-c241-48a6-987d-bacaff06c520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692cbfe1-8f7d-45f5-8750-c4d9c8067c34",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1c1f6e-d8f9-4ad4-bd48-a7282e5a24bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c51220d6-6682-4337-83d1-8ceb0b73fc2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27667b7b-11c2-4d47-9b6e-6f543a9e5ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4e6a8e-a942-4181-98c3-6cd077ec3833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeb1fc2-1b01-40e2-b8a0-9b5c72c8bec0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f9e92e-faca-4e4d-b5be-740bcdc6a90c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb0f62e-6bde-4567-a99d-a28f510e5878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefaa66f-4761-4b6a-bcc6-1fe962451da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b407e3e1-1750-4972-bb78-f0116f432832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd4e901-39fc-4190-ab95-32dc491cf893",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3867c2bf-892c-4c87-b7dd-4e8dbaf35677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e614985e-4750-49ca-b5df-4ea28055b1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7d763a-dfb4-4f03-b077-48758e022b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a18622-eb76-436c-a23b-fcb979610ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00606f7b-59c2-4cf0-ad55-9e989aeda6ef",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe730dc-c79a-4db2-a462-312cd29abc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff932705-9a10-4a0f-903d-b70e3d836ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7678f8-1140-4034-a506-a7727db5c96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ef1df2-8e85-404d-9699-d98e7019e8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4bfb57-d950-46ae-8f60-28e72b82d16c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d944f0-1c95-44ff-b4c7-4bbbe452c9d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886d7925-2946-4c80-97d8-01582da76546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a9dd11-fae5-44d3-83ee-73020fb17cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55109bfd-cee9-4c4c-8bc4-50807d419f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec61a84-33ce-4a30-87a2-003c91bda70d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56980ba7-6e2c-4c50-a722-c837f20817d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d10eb7-01de-4792-8f0c-e6cd4a27154a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863ab5d8-e077-4231-82d1-6b8ce2cb32e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fbce0d-1686-4c80-8aae-2b50f9f8677b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd91742-f0cd-4c8e-9549-5a8bda9b2bdb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcd5118-c037-4935-bed6-b3c5cc615088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88368d7b-18d0-4dc3-863c-97d2115bf37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3397594-b50c-4b23-be7d-b169d2a6deab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27fb49a-afb2-4f0d-8ccd-fa6b92008f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a69146-1ec0-49f2-a958-232652f58b4a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041e4c34-9fb4-44d8-adfe-2d82d56bc6d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d63ffdb-a7a4-4273-b76e-d93a90a0aead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919ea08b-604d-4263-a717-e25b18bbf1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99bb7a26-faac-4796-ac56-81b26b4b1c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a258319-cd81-4abd-b82f-b2cda19e2482",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2e5ee-9d42-4c3b-832a-1486f5f0a3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4c1a963-b205-41d8-aa59-3d9ea09ffe38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8477c2c4-797f-4bae-a6a3-a1fd42876a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aba923b-237e-445f-9414-292713c36775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86e6c98-6b5d-431b-a47b-258a4df313ff",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faae899-c382-4589-8041-78b6bf677213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78cf3737-d189-4e07-ac11-5cda2e4ecdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5394fe6d-ffc8-49aa-ae90-5e641f838173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f267f5d-10b8-47e9-8702-71accdcb5d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb86eef8-14c8-4860-9531-bb79266b1a0d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b59911b-c995-4e15-8213-fe992e7e77cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d0de78f-b4de-43da-8777-a618e03278dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf666a7d-7150-4cfe-a0a4-330b99cbd1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2902e8-98c1-4bbc-8f76-41b9dee8dbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ab409c-cf82-4ca0-a255-74755b24fb48",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d862026-ca92-4577-bc8d-eb42935d62d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d759688-f8a2-4521-938f-81d93e884ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68c9c4a-f3c9-4463-8046-7a7e35ab582d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81daa3e-deb4-45c0-8b96-bea5878e5a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbf6e85-ac1c-4e6f-a233-bbf8c8e3429d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a96cfb-6aea-4d59-8445-d74de04cbd32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb1a74f-c162-4680-98ce-c697436daf37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded52957-57c9-4daa-b89c-745af689830e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad1b144-6da3-4c49-920f-0f27a4370595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a23fb8-9e12-4486-b5f7-6e69dddc439c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac442e61-ab6a-49d5-8abb-7b0a9c71fad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa3a77ff-53ca-4aad-a713-58af94db8312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3434b3-3650-45c2-a4a8-2a9fe6fc75ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf392917-3384-4110-a761-2d0c33e61241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693995a4-f76b-4fc4-8e22-82b442bfac5f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed43cae-1f47-4dae-aacf-242df87357e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "951164bc-6dd5-4d28-bb83-25b2fc9ba4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2065e5a6-3def-436d-a479-201c2dfc40b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985862e6-356b-4fca-968e-6ef8d96e56fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206454c0-1c0f-4f75-b323-0617efe48ad6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6b1e48-3c6a-46d6-afc2-82692df053be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59638216-1dc7-44af-bb3e-7cfb2683ae37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48498e13-3036-4e21-a3e8-f49bb48da777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1059f60-bc91-403c-be93-0d6361ed10ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16a4d99-fb7f-4ff6-bc46-9ad9ff1419f4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5002da88-1bf7-4d75-b97f-b316b57ef795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd6d7985-3ac1-46cf-bd74-a7951a458d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a244e38-717f-45d3-9a7c-49f5ef01d0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d24e566-d22a-483e-b860-45f8e681c7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabe19f8-faba-4cfd-9dda-d266815224c7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ba8394-e025-442b-8c3c-23eeccae5c2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b14de7f4-12a9-4a6e-9948-6d5e3325a96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2325abcb-61b6-40be-86d2-b0c197b0da44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "009f2e86-bf34-44d5-b213-8d18fad39d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a232f07-c80e-4b32-b4ce-96032054fd7c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22b6a56-6fb5-4e30-9ede-d31e90ee779e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c10b38-62d5-4c64-8d6b-f2ef7faebcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8af7c02-247e-4532-9ee4-23ac69c854aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7606d2d-5c01-4463-a92e-c4b36dce26e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115cff8c-60ab-441f-92fa-538647126122",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968f3094-f7fe-497e-b2ec-541ba91205a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8944897-bb34-43f9-8591-4a5561021ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7595f1-c153-4fb2-b0fd-f1895813740d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d5d67a-a670-456a-b60a-6bd07948b0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b18d940-95d6-4bf6-a676-1ed5a746082f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74871ef9-e50e-4815-9c70-22411d3583db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0f905d-e169-444f-af53-4f4097914895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85adcf6-b391-4cec-b46d-8e5a13dea170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21fa5db-ab9c-40c5-8519-689f4209e195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaa7ac0-589f-45a5-8f9a-6bdebbc4c0bf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f58860-b6a3-494c-b38d-1a6d24f51b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc248e81-b0dd-42dc-bb28-bf39531f0586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb9ea55-3ae1-4d60-9fd0-3929f2d12100",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33c5f82-380a-42c5-bb7d-f065ae3b1d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375d2672-f390-433d-9d6e-e8ca38c1a3ef",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503b5cd4-985e-4326-a638-da5d7a41b5ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ee2129-52e4-4ee8-8409-25783726e543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0db621f-65ee-470f-84b1-8a0b55238675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dabc4d7-4c1d-4e25-8356-c41ccd654af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc895ee-3214-47f6-8832-3c32ec2da820",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b84fb5-1983-4c1a-970d-878568da8c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de306ab-bff4-4442-bdde-e4d367888ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457c97dc-efd0-4de0-809c-cf78ba183cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644a28b2-0885-4087-a16f-524143b6a903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f17de2-aca7-4248-affd-1846ac856404",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241769cb-8e11-4539-a052-234c5b3eda75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74270428-c680-4eb3-9e77-2c7b84d7a6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486df0d4-ff6a-487a-b6bc-6bfcce3770a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50319737-f3d1-4406-9b2c-bc0b030bc059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2b9199-0058-49ad-8780-ed3c5a29fe87",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41959242-88f8-412e-a1a4-969b1e8003b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5802f7c5-4029-4dd9-b627-80521b0d4979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a96ebc-7993-4ee1-8efc-a96c2adf7e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed6bb04-9438-4d0a-bfe8-bbf7bb4190ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bccc509-aed0-4792-b737-41709e38abc2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac17547-dc61-4f24-b35c-ecba0112311f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4d380b-90bf-4354-90e3-5bca5a26f983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a759ace3-854b-4ea8-9359-5387af20fcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4d2ad6-cea9-4fd9-82bc-451e470b561f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf19c9a-dd16-459f-8749-347f2fbe80fa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c5c7f8-686f-44ff-91fa-35121d742be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5f9cd2-1d02-453c-84be-2f807ea835d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470c63e5-bc65-4948-bd4d-594aa0cfbe57",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bb90d9-a733-4528-9979-2794e847ab80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87206c44-5ea4-4600-b9c3-96390254bb58",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ab1991-9371-4f87-a8d1-1140731f2dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a999ebe-ad72-498f-9036-30041f42e067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f76432-b3c7-4f18-8645-677ff04667ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53cea2b7-6630-49fc-a0f1-6ee96b9de03e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c93d9dc-0796-4b3c-ad00-894ae3c82f71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b476ad8-aed9-4ada-868e-b9eb1a0d2906"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "189ff358-6277-48e6-9fcf-7c40c782cefd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "325650a6-44e2-41eb-ba66-4992d1a92030"
                    }
                  }
                ]
              },
              {
                "id": "d3a716a1-b80b-4c30-99b1-59abe6d57e04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9acb394d-f888-4f53-82e1-624f795af7be",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895811eb-fc0f-49b3-813c-f1b78e5817a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6524e16e-a3b6-4b16-b154-7c0f9ecd219a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a058556-bb2d-418c-8536-b14559c2c1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5f752a9-76d2-4e27-af88-3ae6499b24d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fc00b1b-281f-4662-8b08-c7df40b61945",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8551e2d9-2a33-41f5-a266-54c4bbd25f2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d6203da-3155-454f-afb4-39792508468a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c224174d-7535-40b9-93a3-f0f2fe1afd49"
                    }
                  }
                ]
              },
              {
                "id": "56a179d2-4aa9-4d23-b65a-13008e898c2d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d70c27b7-58c6-4c45-979d-cb7fbb63183a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc900eb0-ef76-413a-a7e6-35ba0ea28ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ce00d72e-00f3-4a1a-bcb1-4215c36a2ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a1d088-2909-466e-a62f-d572320fc489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d12e96-a5d7-4a18-bedc-ef7c386eaff9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "89535c7f-1582-42b4-b377-d5ef0b41a056",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2baf5fc8-8ab2-4b8f-9f63-418fc76aadda",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23e43ee5-a632-42f3-ad57-9e611ef5dafa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8cb61f87-d91a-47e5-9c18-191e5a6e4927"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6bad457-88ab-411a-bfae-dd5ca82b163e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23ca00cc-98ec-4332-a24b-c41ad1134494"
                    }
                  }
                ]
              },
              {
                "id": "70b47a70-596d-4c96-82d2-1d24ab7b5712",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64db6550-65a9-4b52-ad35-459e42296939",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c8bd08e0-b2b3-457a-854a-7400aaa41f8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "142b0f43-3879-49b0-8176-c0f0c4b6128a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ee62812-50f9-4353-b0b5-4ab3fa811ed9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "351a2c80-479d-4544-8b60-91f42843c856",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "320ef595-42af-41bd-a64b-cb242fd537b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0583c21e-6b55-4857-9da9-fe170578c359",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91d0d2c5-be0a-4ec8-8915-ab9cf926745c"
            }
          }
        ]
      },
      {
        "id": "29c2c404-59a0-4d82-ab9e-d3e748d870c4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "43859c5c-808e-4952-9696-ca8817cfe35f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abced374-25d1-4a08-b24c-af96cb7e1c5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a24dbc6a-70e6-4040-b461-75e30c01b113",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16be4690-ea94-404e-a751-10fdb0cc9867",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d243d1e-fdb7-4045-bc5f-17066342228e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0315c3-4f94-44c9-b916-80a8237586d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caf70312-55cc-4cf7-936d-b5c4247b682f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47e30731-c7c7-45dd-936a-a92cc1b8e73c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cad54a26-0ca8-4cd4-ba73-977a8c22dc05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a822bdb-8a95-4d82-adcb-ef56b08fa0e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7edd3d4-1d98-480a-a60a-d10f5d31da51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "004e9e54-cdb5-474b-8c17-65bd02038dd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1d7f7de-e2c6-4207-9aa2-a21d6cbb3583"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f602847-dae4-4a3f-822a-05ad92a2509c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe288f0c-d5ac-4add-98a8-54e1925a8c4b"
            }
          }
        ]
      },
      {
        "id": "28017e95-2fdb-43e7-9d55-7f3fffacdcb6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dcce33bc-2990-4588-8a0c-a0fbec1c56e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8da1d457-81b1-4734-8631-46bd632f3c6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71c29a2a-6175-4d65-9a13-e46fa0f2e6d7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7546be-31a1-4b8d-b1fc-d6348fcf399a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "922fa485-53fe-4fd5-b0de-099046f47bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2420c1a8-e27d-480f-a8b6-b667d0d69b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59df218c-6559-498f-b213-81c043e60a27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "229f5193-946f-457d-a912-182b52aebb62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f6ca83-befb-4b57-9e6a-28c21c923d84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97df98de-c0ac-4a01-9f72-7ce1c9b28915",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a53bd89b-f753-4d33-ba64-04c2ef026255"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59a0aecb-454e-4bf5-9fe2-4dc42417e2fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac659407-a9a3-4fdb-afb8-bc89a3e4102a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a954606-f117-43f3-953b-793f6b1a359f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1af19e2c-d95b-4619-afb1-a58c8a54e607"
            }
          }
        ]
      },
      {
        "id": "2939cf97-81dc-4d55-8dfe-3aeb3b009b9c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ab6c4e88-eab0-4369-928f-6513e7ba583c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52bc7aa3-934c-4d2d-8202-827575d96121",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a79bad1a-124f-405b-b057-615bb1ef1358",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f39c44-72d8-4f79-9aa2-89c5371794ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be13f2c4-26c4-4a05-8780-af10d8b2a031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dc6a08-8a13-4aac-af98-e17511d5cdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "494e92c7-a4de-4602-9c5b-5665c65b57ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8178f6c5-f7c8-4a20-b97a-873591adc424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5654c261-cfbf-4215-b87a-df1854fabd79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1925e426-5148-4e78-8b2c-b527a10033eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fc3274d-bf6c-4c9b-81fa-9ac2a678d713"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e331ec2-a78b-4a55-85d9-662d9dcfea4e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ba52d5c0-15cf-4f2c-9349-5e962b8e1747"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bbc9810-73c2-4589-a079-636ba14a0f15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0ff8e84-4050-409f-be7d-3fafa635e762"
            }
          }
        ]
      },
      {
        "id": "1d9bbf2a-4756-4e92-91ec-1b5ae243ce17",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8095e0dd-bc17-4e7b-9449-7705369ffea9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80bcb5ea-3a32-4a9f-bed1-e73d020e95d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d37028fe-6979-409d-b429-94bcb3e7f2ae",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16cef42f-20ed-4c37-a02c-14c04b5f69ce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bea99fc-3f81-410e-a918-277fac1e431a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.900793650793645,
      "responseMin": 11,
      "responseMax": 608,
      "responseSd": 78.64226114161109,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716338202042,
      "completed": 1716338225077
    },
    "executions": [
      {
        "id": "7638d32f-b017-4b1a-99d3-7eb4c2f24aba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6cef7ad-8833-49a2-b9c0-21e5dc1b747c",
          "httpRequestId": "4c6c7f32-0f6c-47a5-b558-8eb1aa656514"
        },
        "item": {
          "id": "7638d32f-b017-4b1a-99d3-7eb4c2f24aba",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ad7682ed-44ac-415a-ad3a-fec763a7ac89",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "d4ea31a3-17b9-4aec-9006-bd9a612ca199",
        "cursor": {
          "ref": "8e6a585e-784c-464c-b53b-442324aa0ff5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e4ef3fbd-0c12-475e-9d97-0587ad9b2674"
        },
        "item": {
          "id": "d4ea31a3-17b9-4aec-9006-bd9a612ca199",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "08fcea89-92ca-47eb-baf8-8e970e5adf3d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "2f14ee45-fe0b-4335-aa7f-1aabf226f0bb",
        "cursor": {
          "ref": "5810c392-3c53-4219-bd34-d88f1f563b33",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3fb5195f-613a-46f7-8028-19fade62795c"
        },
        "item": {
          "id": "2f14ee45-fe0b-4335-aa7f-1aabf226f0bb",
          "name": "did_json"
        },
        "response": {
          "id": "e653d13c-8005-4a78-945d-7db108594dc6",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0fe627-9b68-448e-97cb-309542744cca",
        "cursor": {
          "ref": "af61b5d2-7da3-464c-9b5e-384ef8477018",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d1b3556-4a29-4bf3-8aac-9dc49acf732f"
        },
        "item": {
          "id": "3c0fe627-9b68-448e-97cb-309542744cca",
          "name": "did:invalid"
        },
        "response": {
          "id": "befeb220-63ef-4c54-bbf3-7bab648426b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0fe627-9b68-448e-97cb-309542744cca",
        "cursor": {
          "ref": "af61b5d2-7da3-464c-9b5e-384ef8477018",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d1b3556-4a29-4bf3-8aac-9dc49acf732f"
        },
        "item": {
          "id": "3c0fe627-9b68-448e-97cb-309542744cca",
          "name": "did:invalid"
        },
        "response": {
          "id": "befeb220-63ef-4c54-bbf3-7bab648426b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a8663a-8c2e-4809-902f-3d5423f6f37f",
        "cursor": {
          "ref": "b154ca0d-1006-4e34-86b8-a8aacb4c2a98",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2c635a92-19f9-437a-ac6b-3110e89d6817"
        },
        "item": {
          "id": "40a8663a-8c2e-4809-902f-3d5423f6f37f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f5b42d1e-7403-448e-bbad-96d4702747fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 298,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0430dfdd-ab21-4a18-adef-09b703807853",
        "cursor": {
          "ref": "fc860ea2-9fa6-4d23-9c01-66f53919e52a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "061424fb-2124-4b43-a6f6-2e2440685bbc"
        },
        "item": {
          "id": "0430dfdd-ab21-4a18-adef-09b703807853",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "141730ed-26a4-4228-b314-305d7c89b3dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5273f5b4-29d1-42b7-937b-a0be3e210d88",
        "cursor": {
          "ref": "928e3e00-792e-4c31-a3e1-c601fb63e093",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "634c387f-480a-4542-8125-a1e5a337f263"
        },
        "item": {
          "id": "5273f5b4-29d1-42b7-937b-a0be3e210d88",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "091693df-5de8-4da2-a639-b1f7d31cf64d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae902251-0e65-44c1-b495-24c41f54af31",
        "cursor": {
          "ref": "a3190ec3-2e76-467f-b896-5c773efd5351",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "519fb025-9037-4404-94a0-b50b0711228a"
        },
        "item": {
          "id": "ae902251-0e65-44c1-b495-24c41f54af31",
          "name": "identifiers"
        },
        "response": {
          "id": "75d4e7b6-948d-4974-8057-2d44b8ea7e3b",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66a6d06-d0b3-4c58-8ed0-e32aaa87945c",
        "cursor": {
          "ref": "87fdae99-0a99-4e98-b032-a32549174217",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "60d0490e-b921-4fdc-bfb6-86097587acd3"
        },
        "item": {
          "id": "b66a6d06-d0b3-4c58-8ed0-e32aaa87945c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "eb9b115b-1b27-40ab-83a8-9f0fe48b91e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b059b31-deb7-40ac-a8bf-f629c40f8031",
        "cursor": {
          "ref": "9d4ff4d3-54ae-41b6-b806-1ca27d537577",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6778cbc8-5435-40c7-9805-78de5464db4c"
        },
        "item": {
          "id": "4b059b31-deb7-40ac-a8bf-f629c40f8031",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6f7f43cb-2fae-4738-86ea-e69b83df18ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d3aa11-a562-4bed-acf4-1a668fd7d2df",
        "cursor": {
          "ref": "7da89be8-7e68-44d8-9c1c-e0142d360a16",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "88510524-13ad-4440-a41c-b8e1d05db612"
        },
        "item": {
          "id": "97d3aa11-a562-4bed-acf4-1a668fd7d2df",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "847c81c4-9af7-44ea-8c79-dd8c1b741f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72224402-fba7-409a-8dcc-d9c4dd9a740c",
        "cursor": {
          "ref": "98f8fe16-f77b-467a-a577-3c03e56e0d41",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "52bd99f7-19b1-464c-b7c9-5c6469381892"
        },
        "item": {
          "id": "72224402-fba7-409a-8dcc-d9c4dd9a740c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5314db0d-07f6-467d-ba8f-be0a0e9a0216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f6170c-8a81-4e43-9bd8-001a92e448df",
        "cursor": {
          "ref": "116e7487-ffbe-4f13-be3b-cbc1c72a7487",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "402eb0ba-9b30-4d97-979a-dcf23f7fb02e"
        },
        "item": {
          "id": "b7f6170c-8a81-4e43-9bd8-001a92e448df",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "246fdee3-8ac4-41ee-bdf3-4b25691339c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876d2809-f187-47c6-a716-a7e87ac4fce0",
        "cursor": {
          "ref": "634ef680-0010-492e-8868-1653a0073263",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4dd9a0cd-54a1-4bc9-9a00-b87ec6b65356"
        },
        "item": {
          "id": "876d2809-f187-47c6-a716-a7e87ac4fce0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f3630386-3914-4c5d-8298-3f82541a6539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18feb43e-5f81-486e-827e-1f018678e002",
        "cursor": {
          "ref": "7476d28f-eaeb-4214-93a5-fd74418dfc56",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8aaa64a3-1752-40e2-8b0e-01f6c98c8b89"
        },
        "item": {
          "id": "18feb43e-5f81-486e-827e-1f018678e002",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8fcae203-cae8-49a7-b2b1-c25a84c5144e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132a6f28-97b6-4119-bdc4-7688bf6e65bc",
        "cursor": {
          "ref": "3f95f3bf-9f79-4898-8c18-31cd23c11707",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dbd7e019-21af-4f2f-8857-6d2da8e2d996"
        },
        "item": {
          "id": "132a6f28-97b6-4119-bdc4-7688bf6e65bc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "32b036ed-8ff0-40f5-abe3-b0c67ec0490c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b95db2-9e1d-41e6-87b9-f1f4553439a4",
        "cursor": {
          "ref": "6299e628-1b9e-4611-a1ce-867c1959d737",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d1c4318c-ed9a-46de-ab8d-96f3f1e70826"
        },
        "item": {
          "id": "00b95db2-9e1d-41e6-87b9-f1f4553439a4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2681e731-86a6-4a84-bced-a0defb6815ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e22120-3646-4967-9f62-015aeb4ce044",
        "cursor": {
          "ref": "5de5ac6d-3f28-454f-a206-1f6608eb9b96",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "268163da-4b62-4ff6-9658-38fe9590db53"
        },
        "item": {
          "id": "f5e22120-3646-4967-9f62-015aeb4ce044",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "64ff1865-5f38-47dd-af7b-2f2e8014ef59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a5fe9a-091e-42c0-8e77-3fffede70d7a",
        "cursor": {
          "ref": "a25d29e1-40c6-4bc5-ad68-b217b4aca567",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f15ee884-a14c-4b43-85d2-15087763840a"
        },
        "item": {
          "id": "20a5fe9a-091e-42c0-8e77-3fffede70d7a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3e1af75b-4839-4559-9f42-91fa5666016c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c016930-42fa-4da2-a633-1177601d2964",
        "cursor": {
          "ref": "4a702462-0c5c-48df-ba64-7d9a17d546a8",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "17cc9532-69f3-410f-a05f-8b81d3507251"
        },
        "item": {
          "id": "7c016930-42fa-4da2-a633-1177601d2964",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7ae476c0-f594-45a8-a6b0-c8f03993ac53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9bcc81-2e97-466f-9b24-598d0ee85ed7",
        "cursor": {
          "ref": "7b371550-cc17-43c7-a403-a5792b458f71",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b3584b48-cb13-4642-a60a-3333afa95b4f"
        },
        "item": {
          "id": "6d9bcc81-2e97-466f-9b24-598d0ee85ed7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "16d5da4d-2229-4514-bb26-cc84f4a35123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27be2a0c-e668-41bb-9280-525eb0ab84d3",
        "cursor": {
          "ref": "d373feab-171b-46d6-90de-684a3ae9cb62",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7340093d-4354-4f5a-8136-ca3845051c60"
        },
        "item": {
          "id": "27be2a0c-e668-41bb-9280-525eb0ab84d3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "971ca172-14ad-402a-b2ea-a8a03cad14f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c526334-168a-4001-9770-c110e593b5d9",
        "cursor": {
          "ref": "c1f6f6f9-ae71-4ed1-864a-d00a44e4fab4",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "073679a0-48e7-4a7c-b833-db9579fd775c"
        },
        "item": {
          "id": "9c526334-168a-4001-9770-c110e593b5d9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "41122fda-2de9-4ebb-97d2-b1f3937fdc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de473efe-e741-4f74-8acc-24d80fe7f40c",
        "cursor": {
          "ref": "77081048-d0dd-4156-9124-06c19799e7c9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f4041a0c-66b6-40e5-8656-04436f56a51c"
        },
        "item": {
          "id": "de473efe-e741-4f74-8acc-24d80fe7f40c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3551b75e-14ce-45f7-865e-d47d020d2fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebde278-1a6f-47f4-93ee-a50cc1e778c9",
        "cursor": {
          "ref": "fc0f9424-0ab0-44af-bbbd-edcee33e55bd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "32334fcb-4e72-4cb8-9868-e822ae152ef6"
        },
        "item": {
          "id": "1ebde278-1a6f-47f4-93ee-a50cc1e778c9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7019f5ea-0d5e-4a2f-82ed-fd77e1876587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4255c915-a8d9-427e-9c2d-86a5b4d4fb33",
        "cursor": {
          "ref": "3d1d2e36-daae-4dc6-84b3-8c4ba97ae683",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e447c370-1bcf-4266-b145-9f986fb3e3f8"
        },
        "item": {
          "id": "4255c915-a8d9-427e-9c2d-86a5b4d4fb33",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "faf27d3b-711d-4210-90cb-a9ba164164a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f835788a-6fc2-4a00-b29c-6e9e0bedf7dc",
        "cursor": {
          "ref": "986e1241-3942-471a-a891-5d3b103add54",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "47382c91-d133-4d7e-bf91-32d38540ed80"
        },
        "item": {
          "id": "f835788a-6fc2-4a00-b29c-6e9e0bedf7dc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "09aaa66b-2c73-4972-8b30-e1623faa5b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccf2bd9-13cf-484d-b360-2637e0828069",
        "cursor": {
          "ref": "f340c33f-659d-41db-b086-1944419663b5",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8df24826-b51e-4fed-8274-a5f1c85bda23"
        },
        "item": {
          "id": "dccf2bd9-13cf-484d-b360-2637e0828069",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "740755d7-ec8f-4d0f-bcf0-85c77ddfb30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e316de-4cf9-42e6-a693-a3f03545d5a4",
        "cursor": {
          "ref": "c27ffdbf-b6cf-4c43-a571-ae78e5c072d3",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7be798fb-2898-4aa0-9d5a-1b757a100db8"
        },
        "item": {
          "id": "a0e316de-4cf9-42e6-a693-a3f03545d5a4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e69edd1c-83fe-47f1-acc7-6e8736b94143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953e4c9a-f48a-4afd-bfdf-f8b6c4420f75",
        "cursor": {
          "ref": "50ed6d2a-9373-4f1c-b962-6dc1d29ae1bc",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7be6139c-67af-4b14-a813-205a2cbde392"
        },
        "item": {
          "id": "953e4c9a-f48a-4afd-bfdf-f8b6c4420f75",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ce1f1666-8ff3-469c-a476-6d214aa894af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a13886a-ac53-489f-9ba2-5af38aa93533",
        "cursor": {
          "ref": "052619e7-d2b4-481b-b28a-240f6f651648",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "56acd210-86d2-4e52-8256-3f173e04d2a8"
        },
        "item": {
          "id": "0a13886a-ac53-489f-9ba2-5af38aa93533",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "80e276d8-1aff-460e-bb06-099408eefbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3666535d-30dd-4096-9ada-1bf05a410917",
        "cursor": {
          "ref": "feba4585-0667-425d-aef0-edf8843f1422",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e602b1f9-ce41-48b9-9d67-c4d20a179da2"
        },
        "item": {
          "id": "3666535d-30dd-4096-9ada-1bf05a410917",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e92450ab-38e7-405f-b25a-1127d156151e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba36924b-79da-4111-95bc-a4e31346540b",
        "cursor": {
          "ref": "71d30cbd-003f-469d-8768-a290c42001c1",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "109e9644-43c6-4cd6-b559-0594978f1716"
        },
        "item": {
          "id": "ba36924b-79da-4111-95bc-a4e31346540b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "08c333f3-aafe-40cb-97c2-0bede1b83118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898a5c0c-d1b5-480a-a37c-c978cd62387f",
        "cursor": {
          "ref": "8b51ca66-42df-4559-8985-661bfad27f85",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "97261e94-8a9a-4fb0-af6d-5942d8ad568d"
        },
        "item": {
          "id": "898a5c0c-d1b5-480a-a37c-c978cd62387f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2a8f78b0-894f-457b-b4d9-9c3dcd4c88d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a2a65c-0f95-4ef7-8301-cf7ba36341f6",
        "cursor": {
          "ref": "4e6c4d8e-0f92-40aa-a5ab-d055f88ce69d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1429b3dc-2c97-408c-909b-9202d2e7d801"
        },
        "item": {
          "id": "e1a2a65c-0f95-4ef7-8301-cf7ba36341f6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "40b0be71-a027-4b1d-bbe9-ab16637e8b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff8b57c-dbe0-4acb-93dd-ad15deab0419",
        "cursor": {
          "ref": "f520bbdc-0faa-49ed-a67d-7a84033b5ee3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "59cb1429-cea7-4902-a14f-abda4ad8c905"
        },
        "item": {
          "id": "8ff8b57c-dbe0-4acb-93dd-ad15deab0419",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b7b2cff3-3e65-45a2-9cc9-fc6709b3d2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50812280-57bc-4450-9c07-35306615e990",
        "cursor": {
          "ref": "d86f61db-c2e8-42e5-8a6a-77fad8e21599",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1a617130-23a2-4581-b1ca-b6eb0e90d9e7"
        },
        "item": {
          "id": "50812280-57bc-4450-9c07-35306615e990",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "01fd04f3-896d-48ab-907e-57b97025c511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce3ec25-1a2a-4530-be32-58c0d0107195",
        "cursor": {
          "ref": "5ce5b7c5-bc16-45a3-8b4e-c76ed21488c2",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "94b54132-a358-4c41-9f04-7d9b2080aedb"
        },
        "item": {
          "id": "0ce3ec25-1a2a-4530-be32-58c0d0107195",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6354de3-f1a8-4cf0-ae45-c4c98a30a2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55317c4-fffd-413f-b421-fc19e4521a78",
        "cursor": {
          "ref": "b131f934-97c2-444f-93f0-ebaacd0cd9d7",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "006fcd20-31dd-43eb-981a-203a529e4f60"
        },
        "item": {
          "id": "f55317c4-fffd-413f-b421-fc19e4521a78",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cadb25a4-bc14-41d9-8682-5300ac18f0cc",
          "status": "Created",
          "code": 201,
          "responseTime": 608,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "48ccc826-8afe-4c9f-b8f9-f797ee8d6122",
        "cursor": {
          "ref": "27430978-49d8-4ad9-88c5-e3c1eaaf64e2",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cf9934f3-a5ee-4ee6-a1c0-5e94945b2801"
        },
        "item": {
          "id": "48ccc826-8afe-4c9f-b8f9-f797ee8d6122",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a1d94bd4-f98b-44aa-b429-dc3120f4b53b",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "94aeb179-a529-4ada-8be5-df97b5638bfe",
        "cursor": {
          "ref": "959ace51-0993-459a-9f67-42e3a7f5f656",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f7a91ea-91c6-49d5-99f0-b019366e6581"
        },
        "item": {
          "id": "94aeb179-a529-4ada-8be5-df97b5638bfe",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c94e6994-2f13-472b-a86c-996f11bfa142",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "db153e70-52d0-4205-9836-cabff15c80e7",
        "cursor": {
          "ref": "cacc0678-a4aa-45b0-bbbc-f7cda6d5b07b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "faf5507c-e6c6-47bc-8af1-1eff5406750b"
        },
        "item": {
          "id": "db153e70-52d0-4205-9836-cabff15c80e7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6ee2bce7-9680-47fc-898e-96d4aaafdfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0032cc-a8eb-43b4-a9b3-a1b3208441e1",
        "cursor": {
          "ref": "e5f8e762-7210-44af-bd05-ceb1d1d70339",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8b392a20-4761-498b-a409-baf6924cedba"
        },
        "item": {
          "id": "dc0032cc-a8eb-43b4-a9b3-a1b3208441e1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0a7b37fc-399c-4aa6-a254-da6a4a4925f6",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8c492eed-11ba-43f1-b402-90ec05bfe5fd",
        "cursor": {
          "ref": "5aea280c-9911-4d84-a89a-d80224e0b153",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "81015d18-f364-471b-a998-900f19641a47"
        },
        "item": {
          "id": "8c492eed-11ba-43f1-b402-90ec05bfe5fd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b47d370b-e135-4669-b356-fe469b000071",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2596cb6f-98f6-4ada-8470-d894a6500709",
        "cursor": {
          "ref": "7354f65b-a835-4394-86ad-6d989587aed5",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1db85e69-1728-41d4-aca5-09258e74abc7"
        },
        "item": {
          "id": "2596cb6f-98f6-4ada-8470-d894a6500709",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "80d1796a-c2ca-43df-9503-9182c85764ae",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "073e4171-38df-425e-8c1c-93c2ec2a354b",
        "cursor": {
          "ref": "6494ac0f-7910-417d-85cc-3472d38f1705",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "17c65bbe-8b74-42de-a5a4-99f390734982"
        },
        "item": {
          "id": "073e4171-38df-425e-8c1c-93c2ec2a354b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a8f76d0e-fca2-46ae-8d40-720082032faf",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "04b7756e-4ea9-4358-b62e-952b5fe7109d",
        "cursor": {
          "ref": "257d02ed-1963-438a-b639-7ce923547f50",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "64f50887-7d1e-4408-ba77-f4ce0f74f633"
        },
        "item": {
          "id": "04b7756e-4ea9-4358-b62e-952b5fe7109d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f1b53f76-6d2b-46e3-977f-5e04e20e2fff",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0ef3c3ab-79d9-4b5b-822f-e8b4a157f34b",
        "cursor": {
          "ref": "df9c584c-558e-463f-87a4-69bf14fa3f82",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "55ebfe79-db66-48ad-aa21-f7546bb1dda9"
        },
        "item": {
          "id": "0ef3c3ab-79d9-4b5b-822f-e8b4a157f34b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "505a3581-6a7f-4107-9968-077838812301",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f1601b3a-95fb-43f9-945b-56f52c278c51",
        "cursor": {
          "ref": "69b6b510-cefc-44df-968d-e92302b0c139",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e86e9061-dcd2-48ac-adf9-7b62fbeb6477"
        },
        "item": {
          "id": "f1601b3a-95fb-43f9-945b-56f52c278c51",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7000d18b-8513-4b48-bab9-483a8128a84d",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "761cb827-f31f-458b-acf5-64bce244768b",
        "cursor": {
          "ref": "e8b82da4-a4f9-4ffb-9836-8e249fe62864",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4d17f15e-3fa4-4060-8c27-241c6635f1b3"
        },
        "item": {
          "id": "761cb827-f31f-458b-acf5-64bce244768b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "40f52203-5e6d-4db7-9cdc-fb69c6e95f76",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "47e5c199-043f-4577-9e0f-1fd1a0eb7384",
        "cursor": {
          "ref": "75403f32-de06-4ee8-b65f-6620a30580b2",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5f774952-1d80-4ce1-a513-a955bc37ab74"
        },
        "item": {
          "id": "47e5c199-043f-4577-9e0f-1fd1a0eb7384",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1f7f6e5c-fac0-484d-bee0-381a94f41c73",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bb66443c-d068-4c8f-a801-ff5fadc3cc35",
        "cursor": {
          "ref": "97b89146-719d-4b48-a845-14d2c1b8cd29",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bba23cba-1220-4da2-a12e-68d0ba956435"
        },
        "item": {
          "id": "bb66443c-d068-4c8f-a801-ff5fadc3cc35",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "796908b9-2bd5-4cb1-a074-79da2e551154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7846f385-fd93-4e29-878a-c32aeab9b08f",
        "cursor": {
          "ref": "febd87be-c87a-4bd4-a879-1e531350801d",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6dbaeed8-8629-4d33-98a6-31612da72206"
        },
        "item": {
          "id": "7846f385-fd93-4e29-878a-c32aeab9b08f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c6dd5193-56be-4f2d-9c2d-23032a301a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2005a4-76e7-41db-a123-fcb26789768a",
        "cursor": {
          "ref": "a1f1aa11-9ab7-4cfd-9fad-d21db815557b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "49e79b5b-087e-431f-b552-da8550af36d7"
        },
        "item": {
          "id": "9d2005a4-76e7-41db-a123-fcb26789768a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "beeed2bf-aa84-40cf-87dc-2529768cc3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f79507-c145-4c69-8af3-26df767a82a7",
        "cursor": {
          "ref": "ead84ee7-d5c2-4ae3-b1f8-918d8ea49c4b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2d6dcfc3-3e55-4ee3-9563-ce5acfb7c210"
        },
        "item": {
          "id": "e1f79507-c145-4c69-8af3-26df767a82a7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d464ea05-0b01-40bd-9076-465a17eba36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e00bd16-e9a2-4370-989d-475ad6eab34f",
        "cursor": {
          "ref": "75a1fa23-cbf4-4d70-87d4-375db01e1a5c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9511d2ff-2944-427f-8916-d9c74b8a88d9"
        },
        "item": {
          "id": "5e00bd16-e9a2-4370-989d-475ad6eab34f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2a7ff87d-dce7-4b84-82dd-17d41dbfca48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287cd207-d6fa-439b-9d2c-eb640cde499a",
        "cursor": {
          "ref": "294c3ea3-73c4-40ff-b488-121d29bd19fa",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a0e5a809-9baa-410f-8aec-44b4b9826bbf"
        },
        "item": {
          "id": "287cd207-d6fa-439b-9d2c-eb640cde499a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fa807223-6581-4076-9e50-4ae61fa911ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfbab7e-21ac-4aa0-83a5-307c1242b12c",
        "cursor": {
          "ref": "da1b17d0-945b-4f93-a03f-66988146a284",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d661c648-787a-4954-bffe-7aa75e35952b"
        },
        "item": {
          "id": "5cfbab7e-21ac-4aa0-83a5-307c1242b12c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "29281ca2-6bb8-49a7-a8f6-7ca71cdabe28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41621a7-b674-4687-a644-8bc747f524bb",
        "cursor": {
          "ref": "f66c4900-7b08-487f-8b88-3e2044d092e2",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bf64e870-0ef4-4273-b06f-2ba2b32049aa"
        },
        "item": {
          "id": "b41621a7-b674-4687-a644-8bc747f524bb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "74a892fa-3ecb-4ff4-b147-8d67344a2da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a5a908-66e8-4e8e-a326-2dd02f85430f",
        "cursor": {
          "ref": "969a4f5b-311e-456b-a1bd-8cd49581b7ff",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "09233800-1aed-41b8-b4da-7d8d622d8e43"
        },
        "item": {
          "id": "e3a5a908-66e8-4e8e-a326-2dd02f85430f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0e30a23d-1fbe-4069-8f9d-2c2aa70e1eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822dac07-5657-4b07-afc7-80588feef153",
        "cursor": {
          "ref": "aa799330-1879-42c3-8917-eb9b899f3c42",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "45b5b789-47a8-4293-8791-1334e2ab3115"
        },
        "item": {
          "id": "822dac07-5657-4b07-afc7-80588feef153",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0136758e-3204-4391-837d-6c3a1500052f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ea6619-49e4-458c-9822-f17485544ff5",
        "cursor": {
          "ref": "a261f4ee-2b76-40eb-8a03-fa81dd0f7d7e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "297657af-e2c6-471d-8d7e-d4e2c23a501c"
        },
        "item": {
          "id": "d9ea6619-49e4-458c-9822-f17485544ff5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "70a2b0b0-7b12-40c9-b290-fa01a011372a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ad91ef-c585-47e5-a4bc-851cef732cc5",
        "cursor": {
          "ref": "6cffa015-bd40-48a1-b3dc-5955e6db8178",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9123e563-76c0-4e88-be7f-90f8c68e4cc0"
        },
        "item": {
          "id": "32ad91ef-c585-47e5-a4bc-851cef732cc5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e52a7cbd-87e2-4a6a-861f-8f2f1c6ea7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fe78a2-39cf-4d89-9920-e0814442f895",
        "cursor": {
          "ref": "f8601962-9d74-474c-ae44-36d6cb02b19f",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a13b520f-70cd-47f7-b409-3979e1f430cb"
        },
        "item": {
          "id": "51fe78a2-39cf-4d89-9920-e0814442f895",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b9205905-ace1-4e3b-94af-ae126f1a4334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2b734e-a1ee-4adc-b154-8df3da8069d0",
        "cursor": {
          "ref": "b26d5db3-ca75-467f-9895-90241d2566c7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9fda522b-e034-477c-bafb-085becb1eb2c"
        },
        "item": {
          "id": "ab2b734e-a1ee-4adc-b154-8df3da8069d0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e3c90b65-2f8b-4ea0-8ae1-5e24e8bd05ea",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bd5764de-2c12-4f29-83d6-53dcf52b17cc",
        "cursor": {
          "ref": "ac5723ad-98b3-43eb-b79a-26c3af64f31d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4880e985-1e4e-44ce-9b72-205eb7905b29"
        },
        "item": {
          "id": "bd5764de-2c12-4f29-83d6-53dcf52b17cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fa8686fe-7345-47a5-9374-c12d49d6cde5",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f898d1b3-fd4f-4248-8036-296434d848d8",
        "cursor": {
          "ref": "94b3be86-471e-4f21-827b-5099c2d96dc6",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1173ec3b-4fba-4d17-83df-bc700bde6028"
        },
        "item": {
          "id": "f898d1b3-fd4f-4248-8036-296434d848d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "544078fa-3e62-4603-8e68-d4434cfdd3d5",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0f3c4e27-c158-4627-a3f9-2439589679b4",
        "cursor": {
          "ref": "6165fadb-a0d6-44f7-ad8f-507ecb457a88",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9b2277ca-d9f8-4242-8312-12d7c9419771"
        },
        "item": {
          "id": "0f3c4e27-c158-4627-a3f9-2439589679b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8db3ae20-b4b0-4ce2-83cd-22e39d20897b",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b91a94e5-7292-49ed-b115-9a6c3e233195",
        "cursor": {
          "ref": "60f752d7-107c-4978-98ed-66edb9502e7f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "062718a3-296d-4b39-920b-c057f5b9dc2a"
        },
        "item": {
          "id": "b91a94e5-7292-49ed-b115-9a6c3e233195",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1232c814-97b2-4b1f-afd7-87a3364c8aa8",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d23e14e7-c93d-4a23-a245-9fb4dae59934",
        "cursor": {
          "ref": "85bd0a6f-b0fa-4549-b727-809135fd59ee",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "240e8f29-5363-4b13-ab5e-641a15319afb"
        },
        "item": {
          "id": "d23e14e7-c93d-4a23-a245-9fb4dae59934",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5827217c-c5e4-45d9-9d3c-09e08f139bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374cc277-febd-4215-a859-5ec5be3b4f43",
        "cursor": {
          "ref": "3c28ad22-416f-4ea8-b027-fd376962a8d0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "62a608b6-c262-4da0-81cd-81a3a474c4b7"
        },
        "item": {
          "id": "374cc277-febd-4215-a859-5ec5be3b4f43",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "17fb8cdf-51f7-4e80-8855-0b10a18835a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c22f0fe-c712-457d-8168-29dc8cc5553d",
        "cursor": {
          "ref": "22c1f05e-f876-4904-b288-bff0d219604e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "88080ddc-c601-4148-9095-6298e7b62965"
        },
        "item": {
          "id": "1c22f0fe-c712-457d-8168-29dc8cc5553d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "09795701-65a3-4fdf-b7ca-8b3b6cd5dc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548e1436-bcb6-49b9-85d7-30a2df7e553b",
        "cursor": {
          "ref": "78f1021b-046d-4f29-a834-8575d196ac14",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "efdafc43-5bc9-461b-91e4-ac9025a0e54d"
        },
        "item": {
          "id": "548e1436-bcb6-49b9-85d7-30a2df7e553b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6c403f4d-af3b-4127-9cef-703cab4bb429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aa0033-eb93-409b-a295-0dd6da5515a8",
        "cursor": {
          "ref": "b177d212-0de8-4cf2-a3d3-376926f6b44c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5dc306b5-dfd5-4659-9926-39063860be5b"
        },
        "item": {
          "id": "88aa0033-eb93-409b-a295-0dd6da5515a8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eeac81e2-3da2-4a3b-93d4-487c108b2ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc9aabe-7134-4d21-ad35-723e42c2a567",
        "cursor": {
          "ref": "d7a55749-8db9-40d1-9d7a-1b10c1a0e468",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ff3ab7bc-4ebf-427e-bb00-957a3f3cf42c"
        },
        "item": {
          "id": "bbc9aabe-7134-4d21-ad35-723e42c2a567",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5b311c34-17b6-4dc8-9f38-00ffe19bebb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9a80d0-248c-4d71-9ba6-d2d326cf9095",
        "cursor": {
          "ref": "1c21e7d1-22b5-4f17-a3c8-4ae18b5af424",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1646400-3e00-40bc-b164-5ba58d74d47d"
        },
        "item": {
          "id": "ab9a80d0-248c-4d71-9ba6-d2d326cf9095",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9085b2df-1d6c-41aa-abf4-4cd5a8613479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73541160-2155-45eb-a98c-0499e6ccf137",
        "cursor": {
          "ref": "af56ae3a-bb7a-41d9-8f2c-54c839c90898",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "241376a1-1e1f-4cab-86f4-775d546246ea"
        },
        "item": {
          "id": "73541160-2155-45eb-a98c-0499e6ccf137",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b45c619e-ed3a-4939-a634-632f44cfd0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebd14c6-26fc-46bf-86a3-145db567a56c",
        "cursor": {
          "ref": "8baa670a-cf96-4037-996d-fdb0bff22bc6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "93113ea9-e75f-4cba-9552-3cd31352e585"
        },
        "item": {
          "id": "eebd14c6-26fc-46bf-86a3-145db567a56c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1c576c24-f409-4b5e-9771-56e15abc2d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a24bb6a-a843-419a-8ba3-e9ced3ad19f9",
        "cursor": {
          "ref": "0d49c967-c918-4a35-8130-863855d7ca12",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "61b1396a-1987-440b-8c8a-e21d0bd2e537"
        },
        "item": {
          "id": "3a24bb6a-a843-419a-8ba3-e9ced3ad19f9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a48d1f2e-4e23-4a29-bd29-035e723721cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac84b2b-4c7d-4386-b9d4-3fdee248d768",
        "cursor": {
          "ref": "762a91d4-dbd7-4f59-80f4-51ae8dac9a75",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "37b284df-34c1-4055-9e3a-b814591f32c7"
        },
        "item": {
          "id": "8ac84b2b-4c7d-4386-b9d4-3fdee248d768",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "006dc442-537e-42ab-a03c-2a91e883dc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c6130b-c9b9-4af7-8164-65116c345c79",
        "cursor": {
          "ref": "ff41cfc8-adcb-4708-acbc-096f959a0b79",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "86236256-db14-4c08-8efb-04f57f43e4de"
        },
        "item": {
          "id": "18c6130b-c9b9-4af7-8164-65116c345c79",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "04baa714-d7a6-484c-abaf-b8e971ced015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6da49b-20a3-4cb6-b45e-0aa3a43ba644",
        "cursor": {
          "ref": "caf7b741-b4a6-4d6a-9a55-3700dd2e22a8",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "723e4d1b-a4eb-4575-a07a-621a4d99e3e6"
        },
        "item": {
          "id": "ce6da49b-20a3-4cb6-b45e-0aa3a43ba644",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d6d2b3a1-bbef-4932-ae2a-94cf0d70c7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019354de-d551-47b9-a537-363de4e07de2",
        "cursor": {
          "ref": "3d51ddf6-7352-41bd-91f1-9d610bce87a4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fd9219cc-c891-4605-983b-858c17f7ddec"
        },
        "item": {
          "id": "019354de-d551-47b9-a537-363de4e07de2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cbb55f8f-640d-4ca6-95f4-ea127dd70338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362b3753-12d5-4585-a5bd-311652781fca",
        "cursor": {
          "ref": "aaf10f1f-d780-4cf0-a1d6-52ee4055abca",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0784b528-c091-4297-a761-3030f497c5a6"
        },
        "item": {
          "id": "362b3753-12d5-4585-a5bd-311652781fca",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "accc3a83-550f-4caf-ab1d-196b04b05edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc05771-61ae-480e-b9fc-5aea6584332c",
        "cursor": {
          "ref": "dfb5566c-05e5-4bc5-8ea8-94b03e4701b7",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1a18c812-8262-43aa-a3f3-d23e4d58c120"
        },
        "item": {
          "id": "8cc05771-61ae-480e-b9fc-5aea6584332c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d7e84911-4419-4ee1-8c97-cb7874560610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a64ad4b-1d23-42e7-84c7-d40ff513a4fb",
        "cursor": {
          "ref": "ad39e3e5-8832-4e21-8b28-fe74b27a0b3d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d8dae94b-2d7d-4752-b8da-c8d37f842b92"
        },
        "item": {
          "id": "6a64ad4b-1d23-42e7-84c7-d40ff513a4fb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "98f50e23-e3ae-4148-8e03-3c94b3309120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b129657-67bb-4653-8638-649279455538",
        "cursor": {
          "ref": "bbe83e4b-d728-4ecb-a2d3-07cd7400db59",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "85a53985-dd15-4dab-84c5-df8fbbea9e4f"
        },
        "item": {
          "id": "1b129657-67bb-4653-8638-649279455538",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c716bfe0-102c-462d-8ef8-7b343d53834d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19ca273-a864-4681-b569-d69df7eaea62",
        "cursor": {
          "ref": "bb562694-f822-4dba-b748-f1211a4b3511",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "abd76d33-716e-4a74-bb6e-f017079112e0"
        },
        "item": {
          "id": "b19ca273-a864-4681-b569-d69df7eaea62",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "643dda5e-007a-4a31-bf27-1f1ab17c0a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a441e13-44d4-4362-86d6-360c4683c4d8",
        "cursor": {
          "ref": "6164243b-6988-426f-82db-77a9548458ce",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "61cdd1d2-fa54-4746-a61b-588429d66997"
        },
        "item": {
          "id": "6a441e13-44d4-4362-86d6-360c4683c4d8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "81d4422c-4f79-4869-b0fa-134bf635df77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c1c0a6-622c-4dd5-9fc9-a16e8131e9a7",
        "cursor": {
          "ref": "e0197a16-3e66-4d81-870a-0b7866486ac7",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "111481ca-c0e1-41a7-a214-4e4e320e6253"
        },
        "item": {
          "id": "36c1c0a6-622c-4dd5-9fc9-a16e8131e9a7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7e868943-34b6-401a-a7c0-85a5af5e1320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac09793-9c16-407f-ae0f-7b4c43d7ad41",
        "cursor": {
          "ref": "0eeba6ff-af32-4e91-b19b-db0c94f5354f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ab272fe7-60b9-4ca5-810f-c292a1049de2"
        },
        "item": {
          "id": "5ac09793-9c16-407f-ae0f-7b4c43d7ad41",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9ac0606f-9837-4aa3-85e8-cba5317135f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a81816-fe23-40d5-8092-b8656e84a1a5",
        "cursor": {
          "ref": "93375304-26d3-41c9-a076-fd021fe7fbfd",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "aee2098e-f905-446b-a7f2-193b6ce7c0c3"
        },
        "item": {
          "id": "10a81816-fe23-40d5-8092-b8656e84a1a5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "91db2c16-77e0-4300-89d7-d25ebaf473a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac5212-83fe-4519-9754-5bdb49786841",
        "cursor": {
          "ref": "da9507d6-0cea-4ec7-bf7b-eb899aebdb50",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2b1663f0-0a37-4144-a937-4c706be9b77a"
        },
        "item": {
          "id": "b8ac5212-83fe-4519-9754-5bdb49786841",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b2ed46d7-e04a-4852-b37d-91ac02d7e1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9abd27-36b0-4f96-9b47-7960e98c0971",
        "cursor": {
          "ref": "cf6e524b-8481-41e1-92e8-d2346cf51f47",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "920c8c24-7048-4740-971c-f8c7f8b8247b"
        },
        "item": {
          "id": "bd9abd27-36b0-4f96-9b47-7960e98c0971",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b208bc34-9538-4f9e-983c-90c189b91d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f26ab0-73e2-4e70-af69-db3ce7c0771f",
        "cursor": {
          "ref": "0af930e3-ca6a-4ea0-90b3-9edbed547064",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "db5349e7-ee66-46fe-a0d7-f045a7e6cd05"
        },
        "item": {
          "id": "67f26ab0-73e2-4e70-af69-db3ce7c0771f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a269466e-24a5-4fb1-836a-aa83686ebcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae28ecaa-c61e-4859-9236-6842adc9e3b1",
        "cursor": {
          "ref": "aa0f7bba-9136-4e6a-ad8f-3d55e735c458",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ea2241c3-8ec3-4316-8505-0bb7601ac723"
        },
        "item": {
          "id": "ae28ecaa-c61e-4859-9236-6842adc9e3b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c824176b-6b7a-4b7d-8d92-65776b385e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a31e3a-0299-45ea-98c8-f8f662a5d184",
        "cursor": {
          "ref": "d0e3013f-76bc-4b60-b2b3-27292cb2207b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "876bda51-ef06-4232-b817-9406c7322938"
        },
        "item": {
          "id": "f1a31e3a-0299-45ea-98c8-f8f662a5d184",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cda6bafe-b312-4760-a92e-c920a0b246bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ad4015-4193-40a6-b5b9-f68988aaa835",
        "cursor": {
          "ref": "f4377a65-0f87-4827-84cb-1717c4eebc60",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "37e74fec-7045-4533-aed8-82c6de431402"
        },
        "item": {
          "id": "57ad4015-4193-40a6-b5b9-f68988aaa835",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5a74de1d-5b12-434b-b1de-982dcc21c71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b1f630-1278-48b3-839e-29a3e16b57da",
        "cursor": {
          "ref": "058d6ac9-e992-49b1-91eb-fd7b08a1204c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "88b3ef7b-5348-4351-9784-c52d54991ae3"
        },
        "item": {
          "id": "57b1f630-1278-48b3-839e-29a3e16b57da",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4049023b-3365-487b-b76e-e6b138190e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217e8d8d-201a-49ac-b863-94acad3fe2fa",
        "cursor": {
          "ref": "77cad634-0014-4881-8747-21bd1d662cd9",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "657d04d8-866c-4c46-86d8-4740357fdc80"
        },
        "item": {
          "id": "217e8d8d-201a-49ac-b863-94acad3fe2fa",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d4242ddd-0dd5-442b-b433-ca9459680bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab14c93-6b2c-4746-b3aa-82226aeb4cf3",
        "cursor": {
          "ref": "aa920647-61a1-4b9c-b8c4-64ab7fbeba79",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "313f1c1d-ac39-4930-8185-9cccb26cc0d1"
        },
        "item": {
          "id": "4ab14c93-6b2c-4746-b3aa-82226aeb4cf3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "65fe2a97-fe95-4d39-83a1-8a2230f35776",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c8a6e9-0c2a-4679-9b23-b1172f9a4d66",
        "cursor": {
          "ref": "b5c34f2a-224f-4758-8958-a731a50e837e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "476df5fc-6924-47bd-b28e-664859c4871c"
        },
        "item": {
          "id": "56c8a6e9-0c2a-4679-9b23-b1172f9a4d66",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4e62c9f9-e96f-4113-ab4d-d194e9a838d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "50f87323-d93a-4877-a393-bdbea5b883bd",
        "cursor": {
          "ref": "0fd5a46b-56fd-4b8f-8010-14ea2d3d5fbc",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7839c8b6-0956-4f93-b79f-f5771d3db393"
        },
        "item": {
          "id": "50f87323-d93a-4877-a393-bdbea5b883bd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c93925f9-b4df-435f-966d-add8c5b23d82",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4fe243-49a4-4159-94d5-3a20a45c1296",
        "cursor": {
          "ref": "954301ec-83c6-4b10-9cf5-5988370dd5da",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f8699919-8a14-4ec5-a76a-990f07e89e52"
        },
        "item": {
          "id": "aa4fe243-49a4-4159-94d5-3a20a45c1296",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "54e68094-20a4-48fb-acd9-06ec0c6a4284",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93d2e6d-a1f3-46f8-bdaf-862043cd78fa",
        "cursor": {
          "ref": "6d3c50fb-154c-4e40-93b5-98ccdfcf0aa5",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c8e8903c-2296-460e-803f-72257056ca6a"
        },
        "item": {
          "id": "e93d2e6d-a1f3-46f8-bdaf-862043cd78fa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ba9df6f3-381b-41a3-9593-d360fd03c7f2",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d7112b-80ba-41d4-a670-40f45fda2a0f",
        "cursor": {
          "ref": "539c7215-df7f-49b8-9b46-5e6acdb6c11c",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "66d3f455-9414-414c-ae5a-8dfce6e7297d"
        },
        "item": {
          "id": "d8d7112b-80ba-41d4-a670-40f45fda2a0f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3fcd0ec2-d6f2-4b73-aa42-2a1cb86f9cbf",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1168ba19-fa59-4043-821c-d2ae7168e6e7",
        "cursor": {
          "ref": "5492a3f6-2e66-4009-a884-d66e9d71021c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0a3f00a1-cac7-45d4-998c-30a2f9860312"
        },
        "item": {
          "id": "1168ba19-fa59-4043-821c-d2ae7168e6e7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "50871f2c-f521-4a93-a74c-182523f1e77c",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-22T00:36:55.193Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-22T00:36:55.193Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5cb51088-3b45-4a99-bd6b-802b39afc920",
        "cursor": {
          "ref": "b879a293-92d5-4f73-a707-f5622f93e3a6",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "98f91229-c3d5-475f-b988-0727a8270e8b"
        },
        "item": {
          "id": "5cb51088-3b45-4a99-bd6b-802b39afc920",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "230ca3d2-fb05-4146-81c5-7e8621439b00",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4daf4e2-65e4-46e3-b992-18cc3c2e5d51",
        "cursor": {
          "ref": "d5eca0ed-6d42-446b-8c92-2534eb8f1990",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a8c0298b-6033-4351-8ffa-e0f7c24e2fd5"
        },
        "item": {
          "id": "c4daf4e2-65e4-46e3-b992-18cc3c2e5d51",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5d8e18bc-ee69-469a-8e73-205167f5ab65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5531ea7f-b4bb-42f9-abff-f75f86cd2503",
        "cursor": {
          "ref": "35c89601-9666-4e80-ade9-93cb08ffe014",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ab5ffa22-8f72-4e04-b19a-085ead77d90f"
        },
        "item": {
          "id": "5531ea7f-b4bb-42f9-abff-f75f86cd2503",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16673235-059d-48d0-bd27-e9e4107f5ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5828d465-1185-4d9c-bfc0-84cd8d93b447",
        "cursor": {
          "ref": "f6a81b74-7afd-4abd-9129-89c3d5cd8d40",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b65902c7-3104-4343-bb4d-cd54305bc270"
        },
        "item": {
          "id": "5828d465-1185-4d9c-bfc0-84cd8d93b447",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f225907a-addc-4458-8b88-8c1eafdd20d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca21934-12a9-4fcf-80dc-65300051e447",
        "cursor": {
          "ref": "02ef00d2-5bdf-4824-8f3b-fd1abf3706ca",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "682e3042-4488-4cec-a29a-a2b980060a58"
        },
        "item": {
          "id": "5ca21934-12a9-4fcf-80dc-65300051e447",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8cb32c03-1b32-4755-8a22-e6f240fc1f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b232810f-61c7-4238-9613-0ef89609331f",
        "cursor": {
          "ref": "d6ae8e05-3ce3-40b1-b891-6743934d3c36",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "becc022f-6f35-4813-b792-ffb15ae994c4"
        },
        "item": {
          "id": "b232810f-61c7-4238-9613-0ef89609331f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "02be6590-a364-41e6-81e5-7e2b72822685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcf1947-a8ee-4c6d-a42d-8580c43646c8",
        "cursor": {
          "ref": "0de0f182-1906-4351-ba81-7a5512729301",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "236ce969-b283-4716-a9f8-2c436d95034f"
        },
        "item": {
          "id": "4dcf1947-a8ee-4c6d-a42d-8580c43646c8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d2ce7097-db3e-4a71-a1b4-fc4080ee2742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae259c0-1e6a-4174-8285-06ffd517fdd0",
        "cursor": {
          "ref": "764ae345-b437-43e2-ae50-a22fdfdaaa72",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a7671788-8c13-4aa8-aa68-f7bd48894e0a"
        },
        "item": {
          "id": "5ae259c0-1e6a-4174-8285-06ffd517fdd0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d6fa7415-0c36-482c-85c7-5efa2a3b0ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad7cb9e-a540-4db1-89fc-07a65b67acf3",
        "cursor": {
          "ref": "a66d5d2e-ad2a-49bd-939c-b492b9fdbfee",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "92df7f37-351f-4e90-911a-0603a92dd1f4"
        },
        "item": {
          "id": "bad7cb9e-a540-4db1-89fc-07a65b67acf3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "51da90fc-ca90-4858-ae70-4eb35c86cd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49a5a26-5bd7-4be4-8e36-9cf180189ff6",
        "cursor": {
          "ref": "7f53ac06-adb4-48f3-912c-5f2414021b70",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "40b24c9b-0d75-484c-b8c4-795410fac7bb"
        },
        "item": {
          "id": "e49a5a26-5bd7-4be4-8e36-9cf180189ff6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8e74d160-1b09-4fec-823d-8bcd39fb649c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d790c45-07d7-4f57-abca-4a88e44f2546",
        "cursor": {
          "ref": "01ea6803-e264-404f-8a3d-f08ba7da145d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f709bce1-e4b3-4753-8bb7-f196efd9509f"
        },
        "item": {
          "id": "6d790c45-07d7-4f57-abca-4a88e44f2546",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "24acfadd-eb35-419b-b807-218d771e7011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e95d34-14ac-4214-8790-89d2728e43bc",
        "cursor": {
          "ref": "063eed27-7f27-4360-9dce-7bd844565917",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "838ee365-8b57-4e12-a92d-6acc0ae97ccd"
        },
        "item": {
          "id": "d4e95d34-14ac-4214-8790-89d2728e43bc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5f5b4a53-4df8-465a-9f5e-398303435764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c90162-6c47-45d0-a5a4-810752c93e55",
        "cursor": {
          "ref": "80ec5232-4f05-4e07-a69b-099a624ea6fd",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e40d3888-2f98-4062-aeaf-7c2943222d0c"
        },
        "item": {
          "id": "55c90162-6c47-45d0-a5a4-810752c93e55",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1e5c39de-08c8-4d17-b7f8-02a5853292ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6ee8fc-1fc5-47ec-82be-53e2faec3480",
        "cursor": {
          "ref": "0565860b-d906-435f-ab8b-c95b6cbb822d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "85be4262-c3e8-495c-8c8e-0c460eaefe22"
        },
        "item": {
          "id": "8e6ee8fc-1fc5-47ec-82be-53e2faec3480",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3e9e4b1a-e933-4d0f-aa7e-f9ae21f9a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43cac748-a1a2-40ca-9d15-11cd7aa16b0b",
        "cursor": {
          "ref": "436fc254-4430-41d9-8412-ba1f9bb6cde1",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dff2a152-717e-49b3-a902-e1ea12c68490"
        },
        "item": {
          "id": "43cac748-a1a2-40ca-9d15-11cd7aa16b0b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bd253d45-e74b-4369-89af-fe3f2faad359",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6cb96b85-70d7-4294-b70c-a64ac1e42b5a",
        "cursor": {
          "ref": "052a82c5-f9d4-4e13-bfd0-9244d460d2fe",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d88a2efc-2819-46ec-a0be-28dfc5203dac"
        },
        "item": {
          "id": "6cb96b85-70d7-4294-b70c-a64ac1e42b5a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3dd9e7f7-4f70-4c48-b739-f004591c0dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c303cb47-dfce-40f6-b20b-89891f95b344",
        "cursor": {
          "ref": "4421b2d5-e8d7-432e-9bcf-918f5ab8547d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8815f331-a224-467c-912c-2d8edd3816b3"
        },
        "item": {
          "id": "c303cb47-dfce-40f6-b20b-89891f95b344",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e5ac0425-2105-42fb-bf34-5e7c96cb9daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaacee49-c654-4c0c-8745-da175dbd083d",
        "cursor": {
          "ref": "83132502-0e54-4f31-ba97-370f130a3791",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c480774e-5ae6-4cfa-b516-93a145542e7f"
        },
        "item": {
          "id": "aaacee49-c654-4c0c-8745-da175dbd083d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5f8f453c-2fe7-4aa1-a171-cd336ef1dd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74a9f71-0e23-4354-b13e-dc57e9f2cee9",
        "cursor": {
          "ref": "18ad6340-a1fd-49a1-b612-dc4b43262e85",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "83be5553-7c05-4dcf-9a70-b018f425f55a"
        },
        "item": {
          "id": "e74a9f71-0e23-4354-b13e-dc57e9f2cee9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e4c72f7a-6fa7-4283-aae8-01b2fd058045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b11551-4478-441c-a1dc-c0d40026d090",
        "cursor": {
          "ref": "87c8ed70-d197-4c6f-bb42-b00b17d9105b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5c046ab7-451d-4822-b5ad-8c4aa25bb93c"
        },
        "item": {
          "id": "33b11551-4478-441c-a1dc-c0d40026d090",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f75cafd0-9ac3-4c02-8ddc-60b7d6aafe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80037855-561f-4f81-badc-33c441de3c1a",
        "cursor": {
          "ref": "630feff3-8f7a-42cf-8607-1cd974102584",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fe006469-f783-4332-bda8-7a3938f8746d"
        },
        "item": {
          "id": "80037855-561f-4f81-badc-33c441de3c1a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ecea1996-cf0b-4172-b929-e00990e8d699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297f2152-0f43-40f7-8bcf-8186cb0301a8",
        "cursor": {
          "ref": "2139a3a5-3881-4746-8e74-231e26d2637e",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a16b15b7-09c4-412d-b9c0-46d7ec146d21"
        },
        "item": {
          "id": "297f2152-0f43-40f7-8bcf-8186cb0301a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "53306259-3e36-4fb5-b794-ccbc886b3e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7650e11-f8b7-47b3-b7d1-ca4710b35b86",
        "cursor": {
          "ref": "907e54db-ac85-4103-93fd-ed7f201bf2fd",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "da02a639-830c-42b9-8a7e-ee8d3079e489"
        },
        "item": {
          "id": "b7650e11-f8b7-47b3-b7d1-ca4710b35b86",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cc12598b-2e5d-4b2f-8f04-dbf90a4c36e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25be5c4-935e-4403-8c36-3437ccb34da9",
        "cursor": {
          "ref": "d42b26f4-99bf-4741-9609-e6a0f16ab3d4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c9309c05-e241-4315-85a7-c9fc64c10348"
        },
        "item": {
          "id": "d25be5c4-935e-4403-8c36-3437ccb34da9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "015048ac-817b-4daf-becd-47ca1a1e33eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d33adb-d954-42a5-91ed-4e746e12da35",
        "cursor": {
          "ref": "8043cb56-f46e-43a6-86e4-3f07c0abd968",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "848f9bf7-30c3-4c03-a751-cf69449833a2"
        },
        "item": {
          "id": "78d33adb-d954-42a5-91ed-4e746e12da35",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d93bd6d1-49aa-4d0d-bcc7-8a99968e4333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404d1a53-e87f-412f-bc1d-195337646795",
        "cursor": {
          "ref": "8acc0fc7-e134-4de0-92da-566f9bf139b5",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a42aba1d-e754-4c33-9893-8659b27b4283"
        },
        "item": {
          "id": "404d1a53-e87f-412f-bc1d-195337646795",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7f59f2fc-9d94-4241-9352-cc4c5d7ee08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbbe9a7-3c66-46fc-bcc8-e90dc5a5f5d1",
        "cursor": {
          "ref": "4c4757a9-1aa2-4c0d-babe-f9dbfc181ef0",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0ccd3e98-c32e-4bfe-8a28-c4a3492487eb"
        },
        "item": {
          "id": "5dbbe9a7-3c66-46fc-bcc8-e90dc5a5f5d1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "24e3b7c4-97a7-45f3-aeb8-563b54ab1326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20c1710-3b09-4a36-880a-2d3545294f20",
        "cursor": {
          "ref": "1179b5f6-6c31-4af0-8e3f-c4fc9399fc3a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ca26b6a6-54bd-41e1-a90c-90ae607e3f22"
        },
        "item": {
          "id": "a20c1710-3b09-4a36-880a-2d3545294f20",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5945c94e-0955-4f19-aef2-bfae64fb9aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926b4072-aa12-483f-adcb-91b83edf5404",
        "cursor": {
          "ref": "dfa92e28-b5fc-4e38-b9a2-395f088776a0",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ed2059b3-79a0-41d1-826d-f3fe39763181"
        },
        "item": {
          "id": "926b4072-aa12-483f-adcb-91b83edf5404",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28e2c10d-19ac-4200-ade9-7031549ce25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fba44eb-1dab-4b84-9c9b-d042a9123242",
        "cursor": {
          "ref": "f9dbcb8b-2603-4ff9-ad11-3386ded3cd24",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "15ae49f7-05a2-42b8-9c3d-fdb1f29c794d"
        },
        "item": {
          "id": "3fba44eb-1dab-4b84-9c9b-d042a9123242",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5937cdfe-043d-4f3c-8a61-3a2f4cbd5a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab26c5ba-ffa0-4201-9330-a41b7ef8a2fe",
        "cursor": {
          "ref": "de30820c-6f2e-49f2-87ce-99c4f9a88dd0",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "57f781fd-215f-41bb-b412-8e1072e9f637"
        },
        "item": {
          "id": "ab26c5ba-ffa0-4201-9330-a41b7ef8a2fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "84a3714f-20c0-44dd-bf23-15227eeb37b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc61c281-47cd-4304-8ac1-89b07ff36f04",
        "cursor": {
          "ref": "324603e5-a1a7-46be-8eea-156493817fe6",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c0ac66a9-29c2-428b-a14c-8aa9aad2178c"
        },
        "item": {
          "id": "fc61c281-47cd-4304-8ac1-89b07ff36f04",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "af138479-2a45-4847-942f-bab7d83f03af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25cbde1-7dfb-45e9-bc31-70380a03ba75",
        "cursor": {
          "ref": "9a87bae8-cfb3-4566-97a0-048e3796bf50",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "60a10900-e93b-4388-97a6-0cf8083383bd"
        },
        "item": {
          "id": "f25cbde1-7dfb-45e9-bc31-70380a03ba75",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1b6a748a-2c67-4df7-8e24-eb396cede779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821edb77-932d-4b80-93a0-370b9efa3109",
        "cursor": {
          "ref": "94e0cde2-9cc7-4111-85eb-2691db81d616",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1a6da38-22b4-47b3-90cb-b08cacded4a2"
        },
        "item": {
          "id": "821edb77-932d-4b80-93a0-370b9efa3109",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "95cca462-78c9-4cf9-904d-978f7ed11222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01060c42-7d4d-4d13-a8e4-bd9138ccbb8d",
        "cursor": {
          "ref": "c33ec1fb-4769-4205-b15e-88cd6a70d5ad",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "66eab0cc-e871-48e6-b125-fae1f08e5683"
        },
        "item": {
          "id": "01060c42-7d4d-4d13-a8e4-bd9138ccbb8d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "909ac929-ea8f-4eaf-ab45-3e5a11f8145b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5233fb89-f605-4ec5-88a1-1862d72fdde4",
        "cursor": {
          "ref": "c41256e9-df3d-47a9-8efe-5fe277dd5c7e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "319cf7f1-50db-49a5-bc28-4a3786c005b3"
        },
        "item": {
          "id": "5233fb89-f605-4ec5-88a1-1862d72fdde4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "45afe8f7-a4fc-49b8-89c4-42a1e462677a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80fba70-126f-4fa2-883e-b29ad35052e7",
        "cursor": {
          "ref": "8f691cb6-5673-43b2-a1b3-386be5304af3",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7385ceda-6900-46e5-a412-53c2e4ce26ed"
        },
        "item": {
          "id": "e80fba70-126f-4fa2-883e-b29ad35052e7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b9a6b69b-3d8f-4f13-88b6-b0274b0d6b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d29f02b-ac82-4150-a809-d248c1fc7f9e",
        "cursor": {
          "ref": "4717bbda-7c33-4e02-8ab8-66327f225e44",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "acad53e8-dcf7-46e1-b424-76cbaa73bd2e"
        },
        "item": {
          "id": "5d29f02b-ac82-4150-a809-d248c1fc7f9e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c11cdf90-e9be-4c7a-bae3-f9b8e1cb954d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6488e3d-b544-4f9f-9df7-23e44a83e06a",
        "cursor": {
          "ref": "516e0dcc-8cff-4015-bbf6-9f53e3dac6bd",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b1db62ba-5459-4e7b-80df-a0f8afef031a"
        },
        "item": {
          "id": "d6488e3d-b544-4f9f-9df7-23e44a83e06a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "33f47269-902a-4794-a1ef-35e372c1ee4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ee61d6-b820-4054-8c69-b2c60712ec3e",
        "cursor": {
          "ref": "1318c050-d46d-49db-b749-9974be5a165e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "36f06d6c-31ed-47c6-b9ab-270c8a24c0ff"
        },
        "item": {
          "id": "19ee61d6-b820-4054-8c69-b2c60712ec3e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a634ded9-1738-4b4e-9fa1-f29eb671eda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d283715b-dbf2-45d4-ae31-976c35896394",
        "cursor": {
          "ref": "9fc3927f-9641-480b-a30d-6c4a0dd36c15",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "98197467-7410-4eba-9bf5-0068801b7768"
        },
        "item": {
          "id": "d283715b-dbf2-45d4-ae31-976c35896394",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "84e33a4c-dc8b-4d02-a275-c2fbb5551222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396c36d7-aca6-4256-b878-6f0a9a9ff901",
        "cursor": {
          "ref": "e49e24e7-2cfd-4d52-95f6-133fbede703e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "31fa8432-a06f-4dd8-b9ba-db8de7fcb08f"
        },
        "item": {
          "id": "396c36d7-aca6-4256-b878-6f0a9a9ff901",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0e7e3309-b6db-4eaf-a3db-7e6c9d01b93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e08edd-e4e8-4c32-a855-14408e514515",
        "cursor": {
          "ref": "8da47b7e-34f9-47dc-b794-12de79d811df",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2dabe40e-d9d6-4e86-a5e5-df672582d8e7"
        },
        "item": {
          "id": "c2e08edd-e4e8-4c32-a855-14408e514515",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2518c56e-0284-4cbf-a733-277f39e0ccad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b5c552-25c2-4ad7-98e0-d3e565aeb9db",
        "cursor": {
          "ref": "7c930468-70fe-4bc5-a06e-c0ca899c60a3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6de5019d-db64-4480-bea5-11b0edec8fc6"
        },
        "item": {
          "id": "d3b5c552-25c2-4ad7-98e0-d3e565aeb9db",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0dd5b9d9-95d2-4c65-bca8-74eca163cf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5298da4f-451d-4ecd-9264-5ad670d6a52f",
        "cursor": {
          "ref": "0a641275-d205-4661-8331-4099cb19d98e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0fe67981-38d7-498d-b31f-eabaf88327ad"
        },
        "item": {
          "id": "5298da4f-451d-4ecd-9264-5ad670d6a52f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3a0ae1c3-ddc2-4401-8c20-e0f4ecf59d5b",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "8fa9c28e-93e1-4cbc-9e9e-6cfac65006d0",
        "cursor": {
          "ref": "800a8ea0-f4c0-4136-b237-8b269acfbbe9",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e2760853-6309-4871-888d-ef4ea436516a"
        },
        "item": {
          "id": "8fa9c28e-93e1-4cbc-9e9e-6cfac65006d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "42777f1b-d681-41ed-8350-3c730be64374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccefa1e-abda-42bf-9c4f-d697daa4dc17",
        "cursor": {
          "ref": "3422d4b4-74f1-4592-baa1-2f29342744f9",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ddb09490-d8e7-4787-bde2-f65f5811a370"
        },
        "item": {
          "id": "fccefa1e-abda-42bf-9c4f-d697daa4dc17",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "49fa72a3-7473-4a55-bb3f-f05e77f4e26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e47fce-70fe-4c55-8bae-62fa08a6cb38",
        "cursor": {
          "ref": "43f45072-0b55-4edb-a06e-38068bb4f7a0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6b298e9d-e119-4512-9035-519ef1a26f19"
        },
        "item": {
          "id": "e2e47fce-70fe-4c55-8bae-62fa08a6cb38",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "57840023-56cd-49b2-a20a-7c8436feae02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef7117f-a57c-497a-b883-a561b61af2ed",
        "cursor": {
          "ref": "c881c1cb-d1d1-4580-b31c-a1355ad89caa",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e3a45f9c-b410-4c37-8cc7-b0ab1dba7815"
        },
        "item": {
          "id": "8ef7117f-a57c-497a-b883-a561b61af2ed",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "68fd348b-73f1-4b2b-89ad-b871bf0d1d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5418ace9-db2c-4bf8-b1cf-454cb8c17660",
        "cursor": {
          "ref": "02906ed7-180f-4cfb-8437-e9e0e8e45a51",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f68d07d7-e397-4f6b-9f50-578535e59bf3"
        },
        "item": {
          "id": "5418ace9-db2c-4bf8-b1cf-454cb8c17660",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6d523067-3cd7-46aa-8de7-c0833df96364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d4b35a-fff7-4154-ad71-07c222af7ec2",
        "cursor": {
          "ref": "c6e39867-5f41-4dac-91cb-0590c8befadf",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a64defe1-d307-4975-88d2-c53d170f0df8"
        },
        "item": {
          "id": "b5d4b35a-fff7-4154-ad71-07c222af7ec2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dfd79eca-90fd-4ae2-a7e3-7854101928d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c923c7-2f8b-4b94-ae6c-60c33f264f7e",
        "cursor": {
          "ref": "62222a8a-cca7-4bd5-9784-09112215ad23",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "038ffa97-b5bd-4dd2-9a00-ec04ce51735b"
        },
        "item": {
          "id": "c3c923c7-2f8b-4b94-ae6c-60c33f264f7e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f5394a56-fb34-4afe-99fd-a7d6e35d585f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e400ad-343e-492f-a3b8-02542001c20d",
        "cursor": {
          "ref": "e561c3dc-b345-46e2-a1c3-7fc64132288d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1d4901e9-d143-4a21-a558-702b46db249b"
        },
        "item": {
          "id": "c5e400ad-343e-492f-a3b8-02542001c20d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "75f9637d-e408-42dc-8343-d137499d85e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b21af2-7f9a-4d86-934b-593c857153ed",
        "cursor": {
          "ref": "113769c5-5122-4a15-b23e-afe1de557c55",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5f65c897-2573-42a0-a8d2-3485e49a825f"
        },
        "item": {
          "id": "23b21af2-7f9a-4d86-934b-593c857153ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8f0155b9-9335-447c-9641-c4db95af9c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c600289b-4319-415d-a46c-5a7ec196dac9",
        "cursor": {
          "ref": "7c8fd0d8-c849-4a26-b9d5-aade62364817",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1e27c7fa-191f-4d9e-94af-c710a0f62575"
        },
        "item": {
          "id": "c600289b-4319-415d-a46c-5a7ec196dac9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b84301a0-dd6a-4c49-9cb8-3bb68b6fc9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339da805-7b25-4bd7-aa1a-0c2e5bee59bb",
        "cursor": {
          "ref": "7919284e-bd62-4635-896f-2b35be3572cd",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "637f53cf-5ca0-486c-a866-51875199b2fe"
        },
        "item": {
          "id": "339da805-7b25-4bd7-aa1a-0c2e5bee59bb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "038cee30-e1b5-44d4-864b-5dc9f5d1a477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74285ef-fa0b-409e-88a7-041b1b1cfd17",
        "cursor": {
          "ref": "33a66cc0-3773-444b-b762-af932681b793",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "03fb14d5-b73e-4328-a846-09962edb80c3"
        },
        "item": {
          "id": "d74285ef-fa0b-409e-88a7-041b1b1cfd17",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a37e491b-7956-45c4-9a6e-bca2092c4005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16793968-9129-49c7-b3fd-2c0c1258f172",
        "cursor": {
          "ref": "2e3b64d9-ffc9-4339-b968-147c3f9ae9fb",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6a24e598-1c9d-4da5-bb6f-40020f0843f9"
        },
        "item": {
          "id": "16793968-9129-49c7-b3fd-2c0c1258f172",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e33835fd-f8c3-4dc2-b693-433189dc0550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d58cfd2-28ff-40c1-acfa-33c789df1eeb",
        "cursor": {
          "ref": "2a327007-27fc-4bbc-b974-c486e599d765",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eb77ae2c-dde5-4fcc-aba1-ebf037f4426a"
        },
        "item": {
          "id": "7d58cfd2-28ff-40c1-acfa-33c789df1eeb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3f13541b-9b05-4e55-8841-204b80cef801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c382f5-901b-40de-8cf7-052eea5827c9",
        "cursor": {
          "ref": "74e40ac4-f38f-4fd1-8fa1-db970a85d307",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6f0e8fb-c8a7-44ee-9e50-1662b2332b8e"
        },
        "item": {
          "id": "02c382f5-901b-40de-8cf7-052eea5827c9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0a0f195-7171-4961-8132-394c8f056280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41e8fd0-448a-43d9-bb49-083cbc7bf969",
        "cursor": {
          "ref": "2f0c0c41-18e6-40dc-976a-fba2a986e1c2",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4b2c0eeb-9795-4b0b-8f64-85fef39b7c97"
        },
        "item": {
          "id": "c41e8fd0-448a-43d9-bb49-083cbc7bf969",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6497ca4a-dce0-48bf-9566-8008ec6eaac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da06415-f43b-49d5-860c-d44d57e78e5c",
        "cursor": {
          "ref": "0ce5fa06-8c76-41d7-81c6-6766c799442d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6561ec9d-bd4e-496c-8a9b-4a87ff411a24"
        },
        "item": {
          "id": "7da06415-f43b-49d5-860c-d44d57e78e5c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "68786e66-2fbe-4c99-afed-cdad4c80ea1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f752515-a21c-40a2-8d36-c14005012d7e",
        "cursor": {
          "ref": "5a01d72d-a0d1-43e0-ac0d-91e2c9429a7f",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0049c056-2ff0-48d1-a42c-90e66765e45f"
        },
        "item": {
          "id": "7f752515-a21c-40a2-8d36-c14005012d7e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "028505e4-c8be-4020-aec7-b9c5ec41cc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad10f69-2d17-46cf-bc31-978e2f8567f5",
        "cursor": {
          "ref": "2065dee6-3c7a-4c02-8f08-58d305bdd653",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3fe6b868-8887-4a8a-965b-6b0122994187"
        },
        "item": {
          "id": "bad10f69-2d17-46cf-bc31-978e2f8567f5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d826c629-4f1e-431e-abea-9352347ccdea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532f3e74-a167-4e31-a607-fa9054bc177d",
        "cursor": {
          "ref": "10f68022-41d0-4c2c-9a06-d25db49fcfb7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6ae4dc8e-3a22-45e6-b28f-de77d30dabfd"
        },
        "item": {
          "id": "532f3e74-a167-4e31-a607-fa9054bc177d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e10c620f-ca56-46a9-bb6a-873d92442595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01a0d98-0d41-4052-a3db-013c925873a5",
        "cursor": {
          "ref": "4826b13d-71ba-4796-abaa-9419345168fd",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ce3330f-6706-415b-b27b-bbf7a6b20531"
        },
        "item": {
          "id": "d01a0d98-0d41-4052-a3db-013c925873a5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8d5153dd-f6da-471d-912f-e0c1aa54bd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f776c6-6451-4ec0-80b1-ebec99cae89c",
        "cursor": {
          "ref": "19665a92-c26e-490e-96af-2249c040be30",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "64233cbe-bffa-4c4e-969f-5af7db7f3cc3"
        },
        "item": {
          "id": "37f776c6-6451-4ec0-80b1-ebec99cae89c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8d9beb1f-21aa-4777-8624-50c3709d9839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e70a4cd-6b9d-47fa-8931-54d498f589a6",
        "cursor": {
          "ref": "c8d8df7e-f8cf-4028-9f75-2e29bde21cd4",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e424748e-b917-49d1-9e0d-3400212ebe82"
        },
        "item": {
          "id": "0e70a4cd-6b9d-47fa-8931-54d498f589a6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0617e545-d472-4ae0-8e71-a6bc18ef469e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64e7386-38d1-4512-bda9-dc277cfa27a0",
        "cursor": {
          "ref": "3f5a3604-409e-48c9-87d7-56c60f079f36",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e4e34801-0ce0-4d4b-9b6e-ad9afe7bcb1c"
        },
        "item": {
          "id": "c64e7386-38d1-4512-bda9-dc277cfa27a0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cca9cb7b-40dd-4ac4-98e6-3b5ed063e1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81aaa348-5a0c-4430-9e89-d6f1c349ed09",
        "cursor": {
          "ref": "b61fae09-f04b-43c2-93a4-ea382682076f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "329c09a5-3875-4a1c-81d5-39d9d7aad63e"
        },
        "item": {
          "id": "81aaa348-5a0c-4430-9e89-d6f1c349ed09",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a14f0a5b-546e-4175-8a75-5c4b4399b025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851d0a1f-c185-401d-acc2-94f8026a827d",
        "cursor": {
          "ref": "00585833-fcdf-4a8d-a024-b20e373ae1a5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "700c4d31-b12d-4acf-9d78-c9ef040d2d37"
        },
        "item": {
          "id": "851d0a1f-c185-401d-acc2-94f8026a827d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f8ca221a-2d46-4566-8b29-d017680ad79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d9738f-e70b-4bcc-a4e3-f0c780397ac2",
        "cursor": {
          "ref": "0cdcf009-0311-4278-9f72-218e27ec8292",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "129b3729-0595-400f-8993-6ac071ba9edd"
        },
        "item": {
          "id": "02d9738f-e70b-4bcc-a4e3-f0c780397ac2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bccd5b50-28f4-4dca-baf5-60f51709cdd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d32986-0c97-403f-9b38-47b2e02065b5",
        "cursor": {
          "ref": "38027ed4-da7e-4614-bb10-b826192ea34c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "80c1b1de-a7c2-4fc3-b978-5ce6233aad58"
        },
        "item": {
          "id": "d2d32986-0c97-403f-9b38-47b2e02065b5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6f2ebd0b-27f8-447a-8c88-22d69f47b609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0e048f-e5dc-41d1-8eaa-6002cd111ab3",
        "cursor": {
          "ref": "494d3158-84a1-479d-8298-f6bfdf6f0fda",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "21eae1d1-38ce-4dc0-a0b6-a80c84684a12"
        },
        "item": {
          "id": "cf0e048f-e5dc-41d1-8eaa-6002cd111ab3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0b28bce3-4cb4-444b-b5cf-11bb449f03a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd3b07a-b346-4d3e-a1b9-60489ca3d6eb",
        "cursor": {
          "ref": "46f276bb-e7e7-4a65-bc55-7e58dfad90c1",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "44f78f87-ad4e-4097-9504-a417a6987cbe"
        },
        "item": {
          "id": "bdd3b07a-b346-4d3e-a1b9-60489ca3d6eb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fd3936ed-da3e-44ae-b59b-52e7dc94452f",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c1dbf921-d022-4682-a239-33a18cdb943e",
        "cursor": {
          "ref": "2db0ca76-80da-4cde-a631-25bda72f3379",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "663f5477-d3b6-4b86-915f-b117f49d9c89"
        },
        "item": {
          "id": "c1dbf921-d022-4682-a239-33a18cdb943e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "675e3689-6ff0-47d5-8afb-ff5e97a34989",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "2353084c-38c4-42d9-943f-328a7582e5f1",
        "cursor": {
          "ref": "a0b2df4a-50be-4f6c-8e23-6900c717e1ab",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2e41742a-bf25-4765-ab2f-a53cbb7ae6f1"
        },
        "item": {
          "id": "2353084c-38c4-42d9-943f-328a7582e5f1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4d32ff85-5ca1-4137-a375-ffdacb0f19c3",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cb0e18f3-52fe-496a-a71a-bee02155d775",
        "cursor": {
          "ref": "c129ee03-bfef-4c80-b7ca-69a033175824",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "36d05e98-d10a-44da-9a0e-74cd4d817178"
        },
        "item": {
          "id": "cb0e18f3-52fe-496a-a71a-bee02155d775",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9e5cbb62-f061-4808-9095-da049b3db0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e89d66-f1b4-4b18-987b-9ea344d704d7",
        "cursor": {
          "ref": "1e19cd6b-f232-4be4-8228-d692ee444c9b",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "915ecdc0-8ba7-44ab-bf0a-603b4e375818"
        },
        "item": {
          "id": "b8e89d66-f1b4-4b18-987b-9ea344d704d7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "789861e8-2d08-4a3a-a733-4b7c0ccf3b65",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "edf799ee-0bc7-4a84-a3fa-a7aa263b83d7",
        "cursor": {
          "ref": "f4d74db8-fc72-4b26-baaf-579682756c9a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9d6a194e-1a0c-4f89-a244-a55b0a7a13db"
        },
        "item": {
          "id": "edf799ee-0bc7-4a84-a3fa-a7aa263b83d7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f22be105-8700-46d6-a81d-fa817281b6ac",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "140d8fce-3fd0-4576-b781-88dbafe087e2",
        "cursor": {
          "ref": "2b960c90-d8b1-4067-8539-0c0c65a10612",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6c329cce-ffaf-43bc-8e5c-3356b2663061"
        },
        "item": {
          "id": "140d8fce-3fd0-4576-b781-88dbafe087e2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b98765c2-9e72-4210-97a8-3a412354917a",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0db44299-227d-4717-9a20-30015e087a21",
        "cursor": {
          "ref": "82fc4511-b507-4233-8341-06c28cf332b1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e5c5c3a5-3776-4838-a3b9-e17b435b8b9c"
        },
        "item": {
          "id": "0db44299-227d-4717-9a20-30015e087a21",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8d69ce93-3ba5-4cc9-b45e-c7ba723f79de",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e993f12b-9b2e-4595-aa92-02d3812c6f38",
        "cursor": {
          "ref": "f16da8c3-a1cb-4513-ab61-f4f12339847f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b88138dc-e2af-4d47-ae8c-709c9b612421"
        },
        "item": {
          "id": "e993f12b-9b2e-4595-aa92-02d3812c6f38",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "821625bd-85d3-4bbc-8dfd-d946a5074e7d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7eb898d6-816b-4e4b-85b3-4f12805e3bef",
        "cursor": {
          "ref": "d6b665b6-2a4b-45c0-bc47-03da2b7363c5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7a00ed9c-9bd9-4836-a883-151b9875cd9c"
        },
        "item": {
          "id": "7eb898d6-816b-4e4b-85b3-4f12805e3bef",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9fe7db10-2338-4874-b254-61bb2e4ac801",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2be92cfa-beed-4284-863b-25b06c0df7fd",
        "cursor": {
          "ref": "3717fa07-3a4b-4773-996c-8334b60332d9",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "721ff14d-e3fc-4289-99a1-32a29d86b64c"
        },
        "item": {
          "id": "2be92cfa-beed-4284-863b-25b06c0df7fd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bfbc15cc-028c-4b2d-8926-3df58747e98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd68754-05a0-4263-8012-75fd1cbaa1ff",
        "cursor": {
          "ref": "746a7faa-76f6-4eab-9d8b-92a375c5c73b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b41d0648-1b53-4a4c-90c4-02875c10635f"
        },
        "item": {
          "id": "3cd68754-05a0-4263-8012-75fd1cbaa1ff",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "43bc1e76-4bae-4fee-8f2d-cac5c34eeaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891b8259-2289-4226-a7a7-47a976107e9b",
        "cursor": {
          "ref": "80a931b4-534e-4573-bca8-0f69072d1afa",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37c37430-34f7-44df-ac3a-48b7e462c82d"
        },
        "item": {
          "id": "891b8259-2289-4226-a7a7-47a976107e9b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "aabe0170-ebaa-4b53-9368-30ed2009a59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cbea29-754a-4c7d-a2bf-54cd69e77281",
        "cursor": {
          "ref": "0b7b011d-4082-476d-9e04-023f354d1667",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "569c0d36-e946-42b1-a3d0-f9e26e562393"
        },
        "item": {
          "id": "85cbea29-754a-4c7d-a2bf-54cd69e77281",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7eef8dc4-4cc1-4882-b68d-a5d85599e8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3964aacf-7e8a-45a2-97e4-87aeed2fbe44",
        "cursor": {
          "ref": "afad43a4-50ae-4790-9f19-25fccbb19712",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0f73456c-234f-4561-b6ad-e638fc54af1e"
        },
        "item": {
          "id": "3964aacf-7e8a-45a2-97e4-87aeed2fbe44",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bbf371a8-e175-467f-9c31-4f44f1864992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8133258a-8a5e-4705-af5c-8d7661ca285a",
        "cursor": {
          "ref": "da04eb88-f090-4fb9-a032-2b726b9d3533",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fdd4de8c-9c19-486e-8837-38426e28b75b"
        },
        "item": {
          "id": "8133258a-8a5e-4705-af5c-8d7661ca285a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0a7db81-569c-4c66-9151-7b6ea7419de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acab7342-9bf6-40a1-9f68-01566e8329b1",
        "cursor": {
          "ref": "0962e561-9bce-4b61-9811-568872ec0c78",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "90036f7b-332e-4c30-8cc8-3142872b49a3"
        },
        "item": {
          "id": "acab7342-9bf6-40a1-9f68-01566e8329b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "48dab973-82d6-4809-a00f-4459b5068f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37eb22e5-22da-4012-9b20-97599cd69c0b",
        "cursor": {
          "ref": "30a3661e-855c-4aa2-bd99-99eab2dfbd3c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "30f0d973-7c15-43f8-819e-9e2062305104"
        },
        "item": {
          "id": "37eb22e5-22da-4012-9b20-97599cd69c0b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3ed69a94-7655-4795-8e1d-fcc025729951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa850e6-9d1e-4e5f-b516-8b660df80fb1",
        "cursor": {
          "ref": "1c416bf4-b109-4e8e-88ab-fd996008b06a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9e4395c8-3067-4c6b-89de-76f66404707c"
        },
        "item": {
          "id": "aaa850e6-9d1e-4e5f-b516-8b660df80fb1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "97a77141-1a6f-4f05-bc08-7072298ced29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd79c469-9bf9-42ff-ab6f-62d654cf3718",
        "cursor": {
          "ref": "42f98c59-04d5-4af5-b36b-1a2638fe1f64",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "57f9e389-c4d5-4cb8-8e6f-4bd9cf229693"
        },
        "item": {
          "id": "dd79c469-9bf9-42ff-ab6f-62d654cf3718",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cdedb7b9-4d06-40dc-a221-f44388b7c816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a792510e-a771-48fc-be3f-f07dee8cfc54",
        "cursor": {
          "ref": "d8ae7bec-007e-4037-a3f9-f7efe822b348",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cbf79d9b-e359-464a-9214-b51729929128"
        },
        "item": {
          "id": "a792510e-a771-48fc-be3f-f07dee8cfc54",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "63e8fdd0-fcea-417a-b072-e1f81cdc928d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb6f8c5-9199-47af-9b5c-3f5576419a52",
        "cursor": {
          "ref": "b9953ee5-2cfc-4caa-8dc7-8280ede72fb7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a597fb04-a3a8-4bad-a5a2-e71a0a79bfdc"
        },
        "item": {
          "id": "6cb6f8c5-9199-47af-9b5c-3f5576419a52",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "88cf08bb-fe53-468e-8573-55feff5616af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ee4082-e895-4234-97c6-5ea67b4ec30e",
        "cursor": {
          "ref": "30475ba2-d97c-47b7-8ea5-265f1a6149af",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3fb257a1-91ad-4b6e-87ff-c743306aecc1"
        },
        "item": {
          "id": "41ee4082-e895-4234-97c6-5ea67b4ec30e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "477a2075-c693-43bd-bb27-c2b0aa84f888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a0d042-9055-4240-a06f-bf9c2c08fe4b",
        "cursor": {
          "ref": "9be3d4e3-9fc9-4e88-a50d-ef758bb29ffc",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8740fc2b-2f0b-4681-97d0-c22356e7c15f"
        },
        "item": {
          "id": "75a0d042-9055-4240-a06f-bf9c2c08fe4b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d2a1248f-5b20-45a5-ac3c-ebaf0dd23a91",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "026483db-0e43-4f99-af86-ffa1b31c87a8",
        "cursor": {
          "ref": "e79b3d07-aedb-4fac-9ca8-6be665091de9",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7077b8fb-3522-4052-b206-a37a495b4e61"
        },
        "item": {
          "id": "026483db-0e43-4f99-af86-ffa1b31c87a8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "787e333d-499e-4850-a2b1-a3501be191e1",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2c73f575-34d5-41cc-bf7d-e5828e30bcb5",
        "cursor": {
          "ref": "b82a6470-3a08-4e3e-a749-3bc6dac02083",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b37d44d7-2541-4079-93c6-637e2e246b6c"
        },
        "item": {
          "id": "2c73f575-34d5-41cc-bf7d-e5828e30bcb5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9b11fe21-4cdf-49e5-a6b2-d3e2fbe1ea16",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "1efd27c1-0f92-4d56-9944-61cf7dbf8b29",
        "cursor": {
          "ref": "374045d3-8114-4ddf-a962-88459efeab39",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "82b8c713-218d-401f-97a5-de4a3257c4fa"
        },
        "item": {
          "id": "1efd27c1-0f92-4d56-9944-61cf7dbf8b29",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a56c8f30-6f16-4568-bd8f-53fea775b1be",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8c4d33de-9131-45ad-a49d-54dfae5bba8e",
        "cursor": {
          "ref": "5397faa1-ca64-4e94-a410-241b4e6d179a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aab123f2-c5ad-499a-81c2-68c6ce0e0ea7"
        },
        "item": {
          "id": "8c4d33de-9131-45ad-a49d-54dfae5bba8e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4342ae4c-d9be-4b35-86f8-c012a5d6449e",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c12cefb5-26d4-451d-b7be-ef02e14af7cf",
        "cursor": {
          "ref": "a22846e1-74ef-4e48-b242-1894b56316b0",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f5dcd4b2-786d-452c-a0f4-18a8d5f5a63d"
        },
        "item": {
          "id": "c12cefb5-26d4-451d-b7be-ef02e14af7cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3041915e-8bac-4735-a705-feac633a3bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6786f566-5b5e-447d-b003-8ff27b35acab",
        "cursor": {
          "ref": "8a239aa3-f352-461b-bd81-4bebc3f0db17",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ccb4874f-8595-439b-b481-431dc522d6a7"
        },
        "item": {
          "id": "6786f566-5b5e-447d-b003-8ff27b35acab",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f87ed487-1aaf-4065-897b-140bcf7de2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d9e3b9-d274-4066-b09f-ea7fbcf15126",
        "cursor": {
          "ref": "1311e06e-d2f4-4bc5-85ff-5223142d07c2",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8d01efe7-5726-48a3-b806-d96032d07e82"
        },
        "item": {
          "id": "e3d9e3b9-d274-4066-b09f-ea7fbcf15126",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "156f6d2d-fd97-4752-98f7-ae3f72b830e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5307c1-96b0-432a-bac5-2e80a3a6611b",
        "cursor": {
          "ref": "78162b88-1dcf-4e94-a9bd-22d278885daf",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d623134b-5e3e-40a4-bf5b-8e22c9507be9"
        },
        "item": {
          "id": "9a5307c1-96b0-432a-bac5-2e80a3a6611b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5c2b37f2-6b3a-4d67-b9d6-ee460e775ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a2bc91-0cf0-4d3e-a114-4e3ebb8b7cec",
        "cursor": {
          "ref": "ff561aa8-93a8-47cc-af1c-8ccabd9c982b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f8cf6a03-09c2-474d-ac74-0de3d5cb415e"
        },
        "item": {
          "id": "24a2bc91-0cf0-4d3e-a114-4e3ebb8b7cec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c02d4475-4730-4101-b599-5982afe93e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692cbfe1-8f7d-45f5-8750-c4d9c8067c34",
        "cursor": {
          "ref": "2c805456-2d30-4e79-bef2-e638fc1fb719",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3bdb57f2-a7ed-46a4-be99-b6f2475cb64f"
        },
        "item": {
          "id": "692cbfe1-8f7d-45f5-8750-c4d9c8067c34",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "56b688ff-0f26-44b8-b041-0e467fd14ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeb1fc2-1b01-40e2-b8a0-9b5c72c8bec0",
        "cursor": {
          "ref": "beef9f30-ff80-48b6-9d6c-8f17f2892f96",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8200289b-6645-40fc-9123-65679151d903"
        },
        "item": {
          "id": "2aeb1fc2-1b01-40e2-b8a0-9b5c72c8bec0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "71b679ba-7a68-4a74-80bc-42af8f363edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd4e901-39fc-4190-ab95-32dc491cf893",
        "cursor": {
          "ref": "064a0b32-531c-420c-9ee7-93004561b912",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f69db25e-99b7-4b97-8e5b-1699f9aa73f5"
        },
        "item": {
          "id": "5dd4e901-39fc-4190-ab95-32dc491cf893",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "86a120a6-2d9f-4bb1-bff0-10fcd7fd56cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00606f7b-59c2-4cf0-ad55-9e989aeda6ef",
        "cursor": {
          "ref": "027801bc-abdf-4824-83c8-60de7998d6ee",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "02933ff7-e3e3-4d62-8cd0-21d6199968f3"
        },
        "item": {
          "id": "00606f7b-59c2-4cf0-ad55-9e989aeda6ef",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9e5e5d29-39f2-4ad7-a444-d333910979d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4bfb57-d950-46ae-8f60-28e72b82d16c",
        "cursor": {
          "ref": "94e1efe6-eda4-4e7a-aa8a-f410c56f7683",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b97af34b-46f5-4062-9041-7808733e5291"
        },
        "item": {
          "id": "dc4bfb57-d950-46ae-8f60-28e72b82d16c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d72925a6-b00f-4b50-aee3-43df06ad5d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec61a84-33ce-4a30-87a2-003c91bda70d",
        "cursor": {
          "ref": "994440a1-8b8d-4829-9e23-98152dc9f7ce",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3012ff56-90e2-4531-853b-5e1fb1fdd3b7"
        },
        "item": {
          "id": "dec61a84-33ce-4a30-87a2-003c91bda70d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3b1bdae5-4ad3-434e-aa7d-182187d8607c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd91742-f0cd-4c8e-9549-5a8bda9b2bdb",
        "cursor": {
          "ref": "55d94923-be39-4619-94d6-7b5a4812c781",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0a6fa998-4e9a-4b06-958e-44534bd5a974"
        },
        "item": {
          "id": "6bd91742-f0cd-4c8e-9549-5a8bda9b2bdb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "72c5f16e-082c-4c3a-a095-36095ba0108e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a69146-1ec0-49f2-a958-232652f58b4a",
        "cursor": {
          "ref": "f9e38af5-9054-41a8-89e4-803f07d8da75",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0dca4a95-c86a-4244-8d51-193490f19e23"
        },
        "item": {
          "id": "02a69146-1ec0-49f2-a958-232652f58b4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "33772427-023c-46b7-904f-e2c2e233bad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a258319-cd81-4abd-b82f-b2cda19e2482",
        "cursor": {
          "ref": "60bf4439-5128-41d5-85f6-d76a04fa833f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "28b83bf4-1671-4277-a759-9a071d8e096c"
        },
        "item": {
          "id": "5a258319-cd81-4abd-b82f-b2cda19e2482",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d23144b-21d1-4ff3-825e-35091bac2863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86e6c98-6b5d-431b-a47b-258a4df313ff",
        "cursor": {
          "ref": "5a98225b-f758-4603-99f0-cdf790fc04df",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d2f55155-4acc-4ae1-a42c-b43424b1be65"
        },
        "item": {
          "id": "a86e6c98-6b5d-431b-a47b-258a4df313ff",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dcf4a332-9304-471a-95fa-a3be074a9059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb86eef8-14c8-4860-9531-bb79266b1a0d",
        "cursor": {
          "ref": "d465776d-0cff-4492-b0d2-fe3a9926e967",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "731448fd-c4ec-4cc5-9af6-02e9136a14b4"
        },
        "item": {
          "id": "cb86eef8-14c8-4860-9531-bb79266b1a0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "efdb53f8-77b9-4ec9-b8ee-f51a653f3e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ab409c-cf82-4ca0-a255-74755b24fb48",
        "cursor": {
          "ref": "ebac76c4-c9f5-4c0b-bf28-47c6013ab301",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e7cd56f0-a18c-462c-a4ae-92b74b1ddc4e"
        },
        "item": {
          "id": "75ab409c-cf82-4ca0-a255-74755b24fb48",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "97cd61ed-40c0-40b6-a19b-e7a904ed1c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbf6e85-ac1c-4e6f-a233-bbf8c8e3429d",
        "cursor": {
          "ref": "a25dd6b2-792d-4e9b-8b19-8db65c12b656",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9a6c3d4f-b919-4fd6-8a65-37c83dd15e97"
        },
        "item": {
          "id": "3fbf6e85-ac1c-4e6f-a233-bbf8c8e3429d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "50f8093e-e0c7-4ef8-b5a3-696eaac63fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a23fb8-9e12-4486-b5f7-6e69dddc439c",
        "cursor": {
          "ref": "8754fdd6-6171-4465-af0a-79ecf9d6267d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4920de9c-eaa1-4c02-9ce5-48c924870d18"
        },
        "item": {
          "id": "c3a23fb8-9e12-4486-b5f7-6e69dddc439c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f55991c3-6bc6-4674-9f37-1290baf59c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693995a4-f76b-4fc4-8e22-82b442bfac5f",
        "cursor": {
          "ref": "18fdb6f9-54ce-48aa-83aa-ce4f28177b7b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c54d0b4-7588-4666-bdaf-7d219d7d8a9c"
        },
        "item": {
          "id": "693995a4-f76b-4fc4-8e22-82b442bfac5f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b25624fc-c720-4b80-95a1-57d003f38030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206454c0-1c0f-4f75-b323-0617efe48ad6",
        "cursor": {
          "ref": "01745fb1-911a-40cc-a08a-ea2b2621d2d1",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5a93205d-8293-4622-8b32-6636f5311bba"
        },
        "item": {
          "id": "206454c0-1c0f-4f75-b323-0617efe48ad6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "259b6051-a579-4602-b18f-4e5c474bdb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16a4d99-fb7f-4ff6-bc46-9ad9ff1419f4",
        "cursor": {
          "ref": "86878489-847b-4410-896e-81154fa2ac11",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6b179561-c9b8-4b97-aff2-09c5c154c6a6"
        },
        "item": {
          "id": "e16a4d99-fb7f-4ff6-bc46-9ad9ff1419f4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "61c1f673-1fde-4bd9-8f91-6e7807c6af04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabe19f8-faba-4cfd-9dda-d266815224c7",
        "cursor": {
          "ref": "48715b96-671e-4a05-bb50-247c465c2793",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9fa861d7-ce2c-4393-a639-b0af0f553403"
        },
        "item": {
          "id": "dabe19f8-faba-4cfd-9dda-d266815224c7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8b7ac15a-d7d7-4bef-9de1-6fc0e32eb246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a232f07-c80e-4b32-b4ce-96032054fd7c",
        "cursor": {
          "ref": "47d56456-e140-41e9-a189-4521cf0098c4",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8159bc26-ffc8-463a-acf6-6f8d131e65ab"
        },
        "item": {
          "id": "4a232f07-c80e-4b32-b4ce-96032054fd7c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5970f7d2-a750-43c2-9b33-89ac9b215f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115cff8c-60ab-441f-92fa-538647126122",
        "cursor": {
          "ref": "a2a873da-b2f8-489a-b8ad-336fd42ecc7f",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ca9b50b8-7ce3-4341-8f33-861f69a4a81e"
        },
        "item": {
          "id": "115cff8c-60ab-441f-92fa-538647126122",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "decb7a4a-576a-457e-af75-776eba6cde4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b18d940-95d6-4bf6-a676-1ed5a746082f",
        "cursor": {
          "ref": "22a0b026-3c27-4823-a140-779eaf53ff41",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e8d40c88-def2-4da6-a066-d39bb46079b5"
        },
        "item": {
          "id": "3b18d940-95d6-4bf6-a676-1ed5a746082f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c18ce840-2323-4378-8aca-a486d2915a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaa7ac0-589f-45a5-8f9a-6bdebbc4c0bf",
        "cursor": {
          "ref": "cabec7dc-69bc-4a1e-8e53-f31ee1ba681c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8da252ec-efcd-4728-aa8d-ed6bfcf0ed47"
        },
        "item": {
          "id": "2eaa7ac0-589f-45a5-8f9a-6bdebbc4c0bf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a2bae59c-0f60-4940-8b4d-144cb0bfc146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375d2672-f390-433d-9d6e-e8ca38c1a3ef",
        "cursor": {
          "ref": "faed0c5e-589e-4806-8311-935869ca637e",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cb12d5d7-b0fa-4ccc-9915-5f6a831e84d1"
        },
        "item": {
          "id": "375d2672-f390-433d-9d6e-e8ca38c1a3ef",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0f92f55c-6751-4ea7-9ccc-0872a2f42ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc895ee-3214-47f6-8832-3c32ec2da820",
        "cursor": {
          "ref": "6e33d0d7-d15b-4b73-b71b-088241af897e",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4809275a-8894-4db1-bd91-d021b8e20fb6"
        },
        "item": {
          "id": "4cc895ee-3214-47f6-8832-3c32ec2da820",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f7e57557-b12d-4e67-881c-dc3bea39f8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f17de2-aca7-4248-affd-1846ac856404",
        "cursor": {
          "ref": "1d301205-0c5a-499a-a0d6-3f370428e5f5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "569f18c6-ecd7-42c8-b954-7256ed6df452"
        },
        "item": {
          "id": "e1f17de2-aca7-4248-affd-1846ac856404",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7b4e657a-f7b9-49b6-9ac2-53189ec9cca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2b9199-0058-49ad-8780-ed3c5a29fe87",
        "cursor": {
          "ref": "c0b8ffe2-9372-4c93-b87f-c3fbd585fb15",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2ef9f81f-5a5f-4c88-b79d-8aab5d16408f"
        },
        "item": {
          "id": "4a2b9199-0058-49ad-8780-ed3c5a29fe87",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a8be91a4-a160-44f6-a1f1-2541ba8deec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bccc509-aed0-4792-b737-41709e38abc2",
        "cursor": {
          "ref": "76f69510-236e-4ed5-9ff6-4ebe59d1e340",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0f9b317d-d0bf-417b-ac45-281b585f746b"
        },
        "item": {
          "id": "6bccc509-aed0-4792-b737-41709e38abc2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a64aa3a1-baeb-4f39-8fb4-f484f0f8fe21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf19c9a-dd16-459f-8749-347f2fbe80fa",
        "cursor": {
          "ref": "34c92d60-e5c8-4e75-8305-a0eb5318ece0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1f56629a-2271-4823-81ba-71ab74f89cd9"
        },
        "item": {
          "id": "1cf19c9a-dd16-459f-8749-347f2fbe80fa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c72924e8-e196-449c-9f19-ce212eff6353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87206c44-5ea4-4600-b9c3-96390254bb58",
        "cursor": {
          "ref": "ab220a8a-3b1e-4c53-872a-e47266c3ec3e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "30792dda-d808-403a-ab40-c719ea20037e"
        },
        "item": {
          "id": "87206c44-5ea4-4600-b9c3-96390254bb58",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "58cdee42-5f69-4a12-b708-28b539b7b8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb394d-f888-4f53-82e1-624f795af7be",
        "cursor": {
          "ref": "1082c1fa-b7f2-4340-ad9f-cb095fe8f7dc",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b94a9557-b445-44c8-b5bd-5b73d158a7a0"
        },
        "item": {
          "id": "9acb394d-f888-4f53-82e1-624f795af7be",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "993853a8-9f49-42b1-90c4-f3cc282ae4d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70c27b7-58c6-4c45-979d-cb7fbb63183a",
        "cursor": {
          "ref": "1fde9f19-8197-4dc0-8a6d-70945f25ab4b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "65ee07f5-106c-4702-b606-a00eaaede340"
        },
        "item": {
          "id": "d70c27b7-58c6-4c45-979d-cb7fbb63183a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "03a8a690-8112-4192-8f19-8cf7b6d30a49",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2baf5fc8-8ab2-4b8f-9f63-418fc76aadda",
        "cursor": {
          "ref": "51bce3df-8725-417a-b714-76f644fc8de7",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c1b86a29-5f46-46eb-9648-3540e451dafe"
        },
        "item": {
          "id": "2baf5fc8-8ab2-4b8f-9f63-418fc76aadda",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fcb3f2a8-bbd6-446e-8f86-b75748b94a07",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b47a70-596d-4c96-82d2-1d24ab7b5712",
        "cursor": {
          "ref": "617d61af-83c4-42dc-ba19-1e55b9dec64c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bac58afd-ec5d-41bf-8449-ea304f55ec68"
        },
        "item": {
          "id": "70b47a70-596d-4c96-82d2-1d24ab7b5712",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ec55c182-fd67-495c-bbfd-a215623167ad",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24dbc6a-70e6-4040-b461-75e30c01b113",
        "cursor": {
          "ref": "c2ec5759-856c-4ab5-8ae1-fb432806c42e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2cef5dfe-86b6-4c3c-909f-97a7bf039756"
        },
        "item": {
          "id": "a24dbc6a-70e6-4040-b461-75e30c01b113",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d8d883e6-99b2-4bb7-b309-2e0d2e9bff3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24dbc6a-70e6-4040-b461-75e30c01b113",
        "cursor": {
          "ref": "c2ec5759-856c-4ab5-8ae1-fb432806c42e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2cef5dfe-86b6-4c3c-909f-97a7bf039756"
        },
        "item": {
          "id": "a24dbc6a-70e6-4040-b461-75e30c01b113",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d8d883e6-99b2-4bb7-b309-2e0d2e9bff3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c29a2a-6175-4d65-9a13-e46fa0f2e6d7",
        "cursor": {
          "ref": "5007fc70-9d2b-491a-8d19-c8ee8a28a648",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "17f13c79-c5b5-4927-804e-85efb9dc5b11"
        },
        "item": {
          "id": "71c29a2a-6175-4d65-9a13-e46fa0f2e6d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eea62e42-f391-41ed-84b1-1c1af846e62e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79bad1a-124f-405b-b057-615bb1ef1358",
        "cursor": {
          "ref": "21400184-eb81-4191-b39f-55d87ea3bfc4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7b3b8c4a-f425-4f76-bd19-9b1696ced749"
        },
        "item": {
          "id": "a79bad1a-124f-405b-b057-615bb1ef1358",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bd42c1b2-224d-4214-91b7-9fe7134f0fa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}