{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d60a7b5e-c969-4222-838d-c2759aa2aa64",
        "name": "Clear Cache",
        "item": [
          {
            "id": "96334ad2-e162-47f4-b184-529a235edfba",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4f62d4db-fcb4-4ae4-8042-c868517bc180",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c772ebf-5289-4581-9cb5-a09495eabaf6"
                }
              }
            ]
          },
          {
            "id": "816e4323-947f-4b75-9789-602a6b5f665b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "365f1a9d-49a1-4677-944a-f30e98948c61",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "78bedc3c-540d-4cad-9ed8-b2fc1c49b5f0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b025628a-28a4-459f-bc82-7b1a0e369223",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e81b7b93-16d2-4c94-95d6-736770a24793",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9bfc7994-87bc-4b7a-a923-ad58f97054f4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da2029b6-88ed-4b63-8aed-c2e101e44dc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33e98add-3879-4dd2-a824-69fa1e7af929"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b377ac0d-99e5-4026-b74a-b4e04d587c8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a08ebf7-bbd0-4af5-8f64-8b9d0a41d33b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10497efd-cc58-44d4-aa53-3339313ad6a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43c82ef8-4ef7-4d09-9e9b-154c22573d9d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37b38ecf-ab4b-4d06-a49c-182ac933a2e4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "54d89b34-ba01-4615-a59a-2b3868e3a90b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8dba02d-0156-456e-9dc1-c435467ad7d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c3450b7-6969-4069-9d2e-4f48e3e676ed"
            }
          }
        ]
      },
      {
        "id": "a1ae8a38-87ca-424b-b6e9-edc9fd02bbaa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "16b14eb9-edca-42d6-b18e-61773afdd4c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7bf77fe4-bfdd-4a9d-a8df-b194f387403e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a13b17a0-1d2b-4971-8452-b13af1d73405",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3433d232-aaf8-43e5-a24e-b9b71ca0cc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79c9c339-bea3-4547-9c37-0ab85dffe798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a67a63a-d45d-4a13-bed7-33cf62c4dd27",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53dacab-5d56-4f07-b253-98c8cf63ae2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce656654-8fd9-4bb8-a105-8775b78adaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400dab26-2d5e-4427-a633-2b7423955764",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f638aa-bbd3-47b7-8303-c827abe50f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0010ec0f-fc49-4c14-aeaf-15fabd0293b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4ac36bd-b79c-4f85-b4f0-ac9d275a0fb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "164cfea1-256e-4fa6-83ae-f04234ff009f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadfcdb4-cb31-47dd-851c-ad42cadf64b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7023d9a8-1eae-491a-879b-380cd3706562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eed147-4f5f-45c3-9795-a2b25c9a7953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c66b249-1d45-401d-9f2c-dcdef0540445"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6464186e-c3a9-414f-9c57-21924db570d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b34dce49-fbbc-4cb9-9760-12be7e99173a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "496cb9fc-ce2c-4667-a328-93868600f56a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7fb478e4-bf0a-488a-93f3-b1edc3ce765f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7fa97df-ce53-415f-bd90-4cb373ce504d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9aff1758-2bd7-4861-b04c-9fc6d82ceacc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab2ee45b-3a89-402a-849e-d487b0f4e4ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd3fe5eb-58a7-4903-93c5-557fd4e1f89d"
            }
          }
        ]
      },
      {
        "id": "a83f4b81-be4f-4f60-8f67-be6ab7c75044",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "03d834bb-e137-4ffe-9a42-936113cc7410",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58a682f4-a635-48a7-ab8b-84fcf7e97325",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e522f705-dd89-413a-a3f1-8c02e0014f82",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cb4ec8-80ef-4eed-8ade-56d1bcbcdba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a473e81-7d53-4da7-919d-46f6cfdec364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea7b723-fda7-470d-86dc-6b64ad8f0cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "775aacf1-c17b-4839-b8fa-bc7152712bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e16da0-f914-42bd-9a31-1add8da3606f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613149b7-7d3d-44db-9a17-3afd9ee4f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096ac123-a7ca-445b-8606-9002b8bcaa0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35a2daf-a0db-47a6-a490-3437a7244873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1d986f8-c0c3-4ce5-b9b8-bf6d3b39dcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa2befc-0b90-4e38-a8c1-f456d1d0ff6d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b463c111-a768-4c4f-82e1-7bea0fa22e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cf5ca0-98a6-4295-85f0-e25544427360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b056b9-3818-41e5-baf9-c0af026d5784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63e08ff8-1c12-44a2-8a7b-57686664fd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059a762d-783b-4520-82bf-c2edae5aa356",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b8c945-2e9d-4f4f-a128-1b46e74d057b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079d2eb2-83d0-4452-860c-a6a1d868235b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e61d0c-4a2c-4c01-80d3-7b21513a0606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd66afc1-b357-4d6a-8c21-286f9939c3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28408419-92ba-47e0-aa9f-3e1e5b8426fe",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d03adc-e497-4fa7-907e-0a534a67a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02543c7-5c64-43fd-8f72-de98e8eb8470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65416cb-2614-46aa-9526-2e0ef2c8e4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a0a089-1969-40a7-b6ac-aa32ac202bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f46d4e-1254-4dd2-82f4-8c23b9a53631",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39c405a-cd6f-4cc2-9ae7-05d6fb9fb748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6627ad7f-c50d-4d95-9408-bf567554123f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff3458-e844-40b4-9693-f13d60590f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dae30797-6ba7-421a-a980-3cfa9d97024d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d34ba-04b4-4086-8307-cdcc53d3831e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b0cda4-5d54-4b01-969d-04f7d85d13d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2244181-6e8a-42dd-939f-a7756f13f870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d36374-4a1d-48ce-8494-ae510a699074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aa72035-ee33-42b5-a05c-c9a609c4ebc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e0716e-65ed-4fba-b6ca-fb76e596becd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c086cfd-6e89-487c-9b27-6ecf2fedae7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21503153-d875-4e53-8794-f6e45dbe743d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b885770-af79-47b9-8807-ef0210156e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f71aa18-30d2-4bd9-a7f9-ecc67f7d8239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029767b4-5fd7-47f2-892e-377adeb4f9f2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66bf32e-9779-4c75-b6af-d85810f092ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46101fe0-67e0-4a27-bcab-95df19129165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee371ab-3115-419e-9536-ccf16bc524cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d051a9b2-f2d2-409d-8179-9efaa975e9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da83544-f91a-4f8c-a818-e5e9802b4491",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d585abb-ced8-4df6-a852-3617b6121f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e7e98d-f6ef-4d3d-ad0f-558422f2d94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736283bd-e5d8-4fd0-beb1-69bdd8ed358f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9efe4be6-af40-45bd-8796-7db5d9862f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3dad44-4e33-4236-8d81-12f910751a8f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a4f88-c313-4d31-b319-5cc519556afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f90d20a-378d-47cb-9255-8129e3908515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b4a2bb-1b52-45e1-840b-9f96dad8d781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a35a00d3-10b7-4331-a6b1-ad0186c901d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b0a9e3-c7a4-43e3-bfb5-01d03593e45f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60c9444-f420-47f8-ae70-6101f3e9c447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03292525-250c-41ad-a511-84f572f3eed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3d89a8-6e36-4238-ab22-6b8af6c26630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5cab899-19c4-4fd2-84b5-55ad2ca1bc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17505823-51ea-4c66-bd84-e2d9b000de7d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34784c5-03ec-4827-955b-6dd28cfeebd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c4c421-433f-4dbb-a217-24741ba3a200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1f47bc-05fc-4453-a008-4a5891e534e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c91d34c-8877-4b4b-8c24-7b28cb08e648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f172266d-f99f-4002-a18d-8c328766e7d5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905b6151-3f03-4611-a402-7fc4c158df28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb322b3-5d8e-46d9-844e-573f58d6ea95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7717a7-f4f9-4162-b4e6-93a4c2f46683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72373769-75e6-4471-b05e-9426c412f62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e83aee-988b-4a6c-b2df-63ae98f43ac4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e65f89-d16f-4590-9754-0c817480d35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552ec7af-4ba4-4bca-ad58-524b2bcb54e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b662b095-35b1-4dd3-a253-138377b0a646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3186cc2-ab8d-4f26-91f0-bd2e4796c675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e969d4-a270-42be-8a8d-cb5251e302d4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f6fb02-c171-4094-b749-35ab43aeef91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ea1c4c-ce92-4b9b-b0ee-dc3ab971b2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164b5a8f-3dfc-40a2-8bdc-d2994195e044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9837fe8a-ab58-4d38-b7b4-df3d919b0092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a23d41-ac63-4e0a-b897-4162e46b975f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2fa60b-56d0-44f7-83fd-c2e2629bfa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc5d175-3077-4de2-b5a6-d85486f633ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5268514f-50ca-4cd3-b892-4e1c1f0578e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e7aae81-5d8d-4ad8-8e98-0ed20802f163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f31ba8-b63e-4c08-97f1-67ee7cd71022",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377a1135-e902-4c59-be38-aa0b4205aafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c394fc-1d95-4ed5-8501-2177b95faa89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ac966a-f0a4-4ba5-b115-9922bfa4a487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6fc898-21e9-4dae-bad1-9d3925999037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d45744f-b874-4a76-a866-29961dc5547c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cf617b-5f2e-4950-a1c6-01b3843e739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04d34fe-3107-4c34-ae7f-d1505be9ae59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287f7a62-f92e-4a45-b269-db0b930fe0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f545305b-c613-4c2f-b42e-a1b28404dcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d749c7e-1c0a-4cb8-adc1-ca553a7144af",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec057b0-1676-4e85-93c7-9cb3e9411b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cbc8eb-b654-46dd-8bca-0a72752fdc1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a70f67-3c05-464a-a6b6-f67524374953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53ecdc6a-07f1-4b45-a830-4d5a262c66d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6249e7-a07b-4d45-850a-a96a5983778c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d19a3f-8daf-4f8c-9606-6ca58339dd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bff7b52-7425-483d-9787-6e50ef0b02d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47551352-2204-44fd-9b84-1f669955989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cec0d2fe-130e-494d-8edd-2cc96584141f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecb6117-47b5-4469-9d52-4ff6791023fe",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c270ae-dc1d-4656-9292-f97161033204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28263c98-6c83-4ceb-b9f3-760e170b73e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58e6acf-021b-4da6-9556-eaaeb41e7d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3df85c-2bd1-4ba5-8db3-2edb686257a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51214acd-e027-4a75-a844-4512faaf198b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ed0659-329d-434a-8d02-efab8b8c1063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df87691-60cd-4570-9066-4efbfde36e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38579f41-5ee8-46bb-a316-bee64f079e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51fca04b-a8de-485c-a7d3-1bad0c23ad56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42fe686-7ad7-42e3-9714-0b0fe02b157b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db235edb-648b-4aff-8619-50f1e0ec5fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f751c088-ab41-4a8d-97f5-e303a886e1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d07aa91-3b02-4d38-98d6-dcc8382cd3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0708ba37-f96c-4872-9bff-85780f4e8ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6780070-85df-40c0-b724-e1f25b69a58a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e9c7d7-a218-4215-a0a8-dd9701dc33c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3548ee0f-4592-440c-a1ef-942e0ae5f204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd369dc9-257f-469c-aa0e-2b923fcb1514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "045cd317-ba0a-412b-9ed6-d00dbb3f32b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eff6fe4-8a55-4bd0-9d73-1a4d088cb01c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fe1084-6649-4fcb-a789-0c894a31e105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ead11a-ee42-4095-ac29-78c3ffc4d9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0d4cc6-2fca-4b8f-968e-2cbfcf42c72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "938ef5dd-bb6b-47b5-9b26-f5cc9bc22470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30264719-b056-46b9-a011-9f99f9a2738a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ecf37b-5d14-40fa-92be-535b1f1abc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0797017d-9bf7-44e4-bfce-a837267ae80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec9f1f0-9b2f-464f-b3a5-f0a20ed24837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05c4d92-9dba-40ac-8373-d07bfbff436e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75da9248-82a4-4afe-bf02-d6d4fd8c2a60",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac52b3a8-7fb1-469a-bcdd-f6e10ca417b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ba3529-8ffd-430f-81b3-fa92fde450c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef8170f-c3e9-4d12-b8dc-29e1ec790062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb5c3c-49e1-426a-9d47-26a54410201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e6a71c-128a-42b8-9d35-b4bea0427727",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3127459-e455-445b-a1c1-d9eec130a24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9638d53c-a550-4060-a73e-2a02a5e9d303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbde10af-f313-49c7-bfb7-00ddce59beaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d7f3e0-8562-4241-9ced-b0513faef92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2188a43-879e-45cc-a6e2-1d029ff4739f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b8a78c-51df-4d20-a252-99a442bb97e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d82cb9-a712-49c1-8cfd-f081140688ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b193ece8-6374-46e3-9ed7-19022a3a672d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d871f12-7148-4fe7-9dc6-528ec79ad8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8af600-6e2b-4afd-b8a1-e475202e0f78",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406653a8-edc5-497f-b5ac-431a2e8de1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c37f5c2-898d-4f16-bc8d-cb6a1448badd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a679fe1-2f73-4693-8ec0-15a2c38a749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e1a3d2-cfe6-4dce-a538-987c9050b44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd66f992-8484-4057-a363-7ef49597c337",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8074157-7f6f-411b-acf6-083ab61f69ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8394e77-5462-4602-a58c-842e0aaed9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4f072b-3f8d-481a-8246-808be6077532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0757fe59-4039-4afe-859f-adee0079e551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a813bda8-1f44-4fef-899c-c4ef96b4d3a3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c091afe1-5421-43bd-94fb-0809a168bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f96ea8d-b20d-4585-b5f3-9b036c84ec4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e8df3e-8b46-4145-a249-15e34b8b4e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b73d903-c2ad-43c0-9e4d-5d50ddb2aa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecf106b-25aa-4a3d-9cb9-27e9bdb9a352",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fa4f60-c266-482a-9e30-aeba62ff62d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230a8554-cf88-40ee-ba8e-4d093b9ac355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b3ff6e-f1c9-420c-a2e9-eac3f5fce55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc332fbf-c206-4c75-aa3d-517809720e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71df981-c831-48fa-9d12-8d3cae58b617",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ca1b3b-2f8e-4b6b-bec9-33d4ba4016eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea310ff-c57f-4924-a4b8-bb32a51b6762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce3c019-c800-4908-8c21-8aea4d2ed928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "da0f97f8-9d89-4748-ac6a-6ad588ff07eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4355fce-f9c4-4b3e-94b4-326786e096dd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fcd287-0763-44da-ac27-6eea2ba52c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4622753d-de00-48d8-a991-864bd9356fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b7265c-1a4b-46ab-88bd-654ba4811772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc12db7-ccd0-440f-9774-e3fbc864f73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb65f31f-96b7-41d2-8b7d-d40e7ed3700e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bea761-7d8e-49e2-9b60-d29a9f16e544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a340c5e-9a3a-4247-a49a-ee0c2d258845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48bda6a-8e03-4b1a-8535-a65a8835d301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ebcd75e-4116-4276-97bd-3345c0b0b79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67227233-9538-4f13-81a7-d818004a75a4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3c627-283f-4e0e-8c0a-424de43bda55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41e4c06-8407-45f0-b1b9-5747e202bf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7199597-a410-4c0b-9b28-0fb32fd99cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef51432f-2eff-46de-b022-dc9a06a03825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eb6af0-384a-4b52-aa45-f9023ebce587",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca9ddff-b5c2-46b9-b756-69cad1265ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c2719c-3d74-4212-9914-a07b294442b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d01dd0c-d6d2-41ee-bd1b-93348cc0be1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09f7bdf-7b09-4dac-952f-ce7c23caaf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85758d06-2d65-4ca3-856e-aab9ff92224c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512afaa3-7184-4750-bb47-ac73efaeb85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8231e3-0660-4d65-94bb-21e1edf98c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685b7253-50aa-41a9-906c-8f35aabcf572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c18ccd-7e5b-43b6-b19c-6385b6d8f0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2387a3eb-29c1-4a96-b050-97fc50439706",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc04ea6-1a60-439c-b6b9-7af464a446e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa646db-f511-4133-9862-6d04fff40892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33203f8e-4ef9-4e60-8a29-4cc5b0546819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cc8caf-b3ad-41d2-b683-2f47b64b7192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c436bd-1723-4749-b839-439d45143bc5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628af3ff-89f6-4fda-b8f1-73579beb4718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c51f809-54ab-4b10-bbb5-1f9039b9203f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0be0ae6-033a-41f5-952e-cd2b2fcdee5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "52f64f78-d70d-4ece-b626-c63c1240ad62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eacea14-8b62-4455-bce3-4148245fc2e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2599ece-c03d-490c-a8c7-b203d206933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3202919e-99f3-421d-996c-5d5c3ea352ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26af08bc-c124-4ac0-8e8f-09b2da0f9860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4822e24b-3f98-4576-b5f3-35e66afc0219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ceccc14-e91d-4d81-8a3a-e89f83469254",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c888920e-817b-4ae6-9a00-f723f4d5a11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea8c39d-01b6-443d-aac8-bfe29c699239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a871c809-3cc5-4803-9d16-559a0feb14e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4e32a2-5e8e-4fcc-8b8f-673900026675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eefcabf-3672-489d-a5df-68b412432430",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bba97ee-a7e9-4492-a63a-9f280bb31628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881b05d7-2865-4521-94c3-657659edd13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9051bd66-f298-45d0-a70c-6bc9a6226053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79edef15-ac8c-4382-b127-315d71e6a9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7df1ef9-790e-41e9-b3dc-a09893bfe2bb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1543d78-7c26-4a43-af59-f4c178be243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eaa6258-dfa2-4e6c-889d-8b3f42dd5fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189f1eef-5353-4c64-aa17-1b8139397e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d677927c-7518-403b-81a5-fa9c94bff6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f09424e-70e5-49fc-9498-dde58852bb47",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c41f64-0fee-496d-9589-3cc872521e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac31ac42-70cd-4127-9797-9ca36ad0c904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d974b1b-6e46-41fb-b502-c420be5192ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66069113-7939-42fe-b061-0f5a6e543c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd25740-31db-46dc-b17d-ce6f70866cd9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675da59c-9d51-421c-83d7-e74cee96a763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23caee1a-5a46-4385-afeb-df412ceb6f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8070e469-1f98-4ee0-abce-16b2b0911603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c34ab1-db22-4215-b7ab-9c4440e89e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdd4e58-1549-4bb0-a773-16277a7172d1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f214cf5-98a3-40c1-9da3-f572c8de9b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741aadb8-9442-4c8e-8a9a-8f5e8ac0ce0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc09a830-8d53-4540-8077-52ae937d13d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41f7ae4c-88f9-4d61-a109-6be3c1d1ec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa26c6fb-afbe-42f8-b51e-2c30deb6c50a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e5a2c2-783a-4be0-aba8-9ce1e5f56dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140bccd2-7753-465b-8849-ecc0b045d010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a0f20f-f452-49f4-bad3-786ae5c0e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "694fd0fe-1a4b-471a-9fc9-a20708a359ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6488386f-371b-4f0b-911f-d4bdced9a50f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3247154d-baaf-428c-8951-a42c1732300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88877e66-e25e-4ad6-9e3a-8baf45155fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cd6aeb-056f-455d-9f80-b76b14757ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3738a96b-9b7d-4c13-8d47-7748f98bda84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856cc774-6411-47cb-ab79-c2e1d9669b24",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72e60fb-6967-4369-a2c3-6073361058b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b349bff6-0694-4db9-9eb5-7df88c6daed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a86467-446c-4d67-81ab-3d09119a4414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "316d7fec-aa73-4f02-b479-6accc993e2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6f7201-f069-4363-ba61-e92667cb818e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98453334-8f89-45de-818d-5ec2dda7522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92acea54-1d5e-4e34-9a9c-6f74aef95772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09246b9d-8417-4347-8756-1d71666e06b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dad27ae-0c57-49b8-ba19-e8b99d5818e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09016da-edff-42c6-beea-528d87502963",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbf8aaa-84c3-4e6c-b615-25dd3007d873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c56b9c-3380-4607-a58c-21bb02976124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3942a3-67b4-4107-a7f0-98e4057e886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11751705-7a91-4773-a35e-3f5d92d06f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd057a01-6468-44cc-a8cc-df9add90c523",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c26f70a-7b1e-4890-b1d3-caad58fcb536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38016f35-68f1-4d0b-909e-8332e477e346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2e4fe9-f419-4d2f-aa64-66a02a1fce11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37ae6157-1337-4ddf-8b72-bf6e14cc572f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33988031-58c9-4bed-8b04-10bec1d1acc9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae22ebf-10b3-4099-9e46-513bb0b8d87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17293dbb-7f9a-429e-b44d-88ffc21a454c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f78c495-ada7-4e4b-bef5-ba1191c83403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6c636319-8bd3-423f-96fb-97edb674051b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5e4933-dd0c-43c7-ad16-78379528497d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d2bfad-5a54-46ed-8875-4263af80f1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68236186-8c6d-4775-b06c-1afb189af34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da137b6b-c3e9-4589-8509-3a3e629c12d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9807ce-fef1-4776-b9b7-f78043dc52a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f2e7ec-5b63-4a46-8df8-0832ce02de1c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5c43dc-e794-417d-8aca-3ed289fbfe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5af5af-c279-4cb9-adb4-559fce43661b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aa1766-3356-4192-b46e-ffb2d27d9afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a21860-5591-4300-8f99-85e0d3d2b300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24477f1c-d766-4b8d-8d4c-032d6f195d0e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddfc01d-6cf2-4ce0-8735-7345277d07dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38015d3c-617f-44ee-a661-96fcf032038d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3638813e-9d13-49a7-b862-6d937d5890ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a95fb882-e4a0-4c70-a335-c3cf985fdaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c7d35e-fdcd-41a3-8005-d606b23fc135",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4fea8d-dadd-4689-a884-7c9c45c4ee23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb08530-e6c2-4353-86f4-77dee1266ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5dee85-efb4-4678-b6a2-9638689c71b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c86926-e842-4bdc-be82-f9b2bc81ad1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d10c82a-5dd1-4055-9be4-fb1f3772172b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e670b295-bd9d-415e-81c8-64d200a4a469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426dc0ee-cd4a-4d91-b1f6-1a483a65c4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd4441b-6464-45dc-90ac-33e6dc5f7896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a736cd-c1b6-4d64-839d-0abf05a92a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4799054c-2f89-42a4-8227-c7697db2142a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526bffc1-df20-4b0c-80d0-0a763050d828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9dbae3-f6e9-4461-b685-81566b13b2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0555d5-eb12-4cfb-928a-8522b65de80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1de91ce-d291-40fc-bcb4-a88833588623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c45aec-a866-40c7-9b5b-9fa332139fa9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022e83e8-fbfe-415f-89a6-c3add960d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7457a688-76d2-4b90-8455-ad384a107734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675ff24a-9c40-42f5-a24c-ba3cc8df44ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a50196-fea2-4d9a-b5f9-048c61ef3b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4091d469-c367-4cd7-ab2c-619d63425a05",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160f4160-cf49-4bd9-ad03-32a91439891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d189e75e-9956-4080-9da2-e71748030546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5776696c-4cd6-45f0-b1b7-4f6637eec783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bf4bb2-d3ad-435a-b510-59cd48c49e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922cb7ff-8228-4796-9d41-cbd8a29eefa9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3e6fc3-f432-4d7e-b6bc-566f39f78c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58940b5a-e221-4e6a-a82f-109df1297b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac59aa6-5f59-4402-9df8-1d48cf48cc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8acfca79-312a-4bff-b43b-7ee9c57b9b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2ceacf-cc41-4f98-a249-db63b00d445b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b191fdd1-08ee-48cf-bccc-a08896b65d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7daa8769-e49d-4da9-b5fb-9c678c141a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba85e12-a83a-4e83-8634-f382960ba6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "666e4bd6-1a33-4443-85fc-65ec6c2f1a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8016e454-e2d6-4bc3-ab0b-d97d5886fcd5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88caeca8-cbdf-47f2-beba-5c2c74252c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e10561-5722-4422-ab71-dfaebfbecfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89eadad-125e-4ef0-a33e-2d359ac625d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "417ca457-0457-4e85-ab78-7b4940d843d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5f90c1-a970-4fea-b3d5-1d0b89952a88",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca73b060-347a-4244-af5f-3f8a8e8f80ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adfc1c2-52ff-404e-b59e-7a8d2c1b341a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f085ff-0a4c-478a-9920-a7cb18d7658d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae8e1ac-d0af-410f-a143-096564445b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3497c04c-9d27-4e89-af5b-a6539bc4b89d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf1c8a-a8e5-4404-af64-89e642dbf1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50ce8ec-1aa5-4459-a218-48139e1e79fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ff5b4-2440-4ea7-85f7-1a17a709047d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "556c8ca9-f8a9-4400-81c4-544c9b01a5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ceb628-6c6f-4710-8b00-bcaa3314599d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c254059d-3158-4e79-810f-cf5739c41a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e1a229-4b62-4bef-ab5f-c9734c1b283d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f5f83a-7c78-4f4c-a8de-fefe3e335ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e834db3-5309-49a9-adc3-d51ce0b6a31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07dd828-87f6-4ac5-a3a3-dec5d0a88057",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b16f66-141d-47d9-ab43-ed4d39c865b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f50815-d5f1-4e3a-b6b1-14a4c935eca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416a2129-1c4a-4a0d-850e-0838d4cd3935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "176a91fc-a103-431c-8bc0-6ece8d77167f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee20bd02-0545-4d60-8f2c-8974890af65a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2dab3c-e637-4b34-bb17-548385e482c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78805ce5-6e74-412d-8426-a954b42d016e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd33ab5-4de6-4872-9d0d-7fae894fe408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1044d66e-6f86-41f7-9a4c-699efda90c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9defe288-ddd7-4935-ac7f-19b605689715",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82338ee9-b403-4659-b940-a647c16d5681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499e208f-ffdb-489c-9fbc-81beb82ab57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd99bc9-2c96-4bdc-a527-53b7f80a6c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf4bde6-6e83-43f4-be3b-c89e5b0a582c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be577073-e36f-4484-9069-bc09a677b80f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce907b0-170d-4601-a8aa-8a8bf3e1718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99b1640-dc35-426e-8ec6-83e60e77a582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bcca5e-6d0a-4c74-ba20-1698f875db90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fffc9831-072b-4cc8-bdb6-a41096f9a69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07052258-160e-42e0-a530-0f370d0907f8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739dc706-6f79-4bc7-aefb-e4fc9a287eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404913be-40e0-40fd-bb22-1a890dac661f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5f36c5-83a9-4bbf-a478-7a5f22dd4df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc4e6cf-d83f-4680-8fdd-9f30f40a7ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03ee429-7542-4fd1-872d-494e5396821d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6cfd6e-0022-4fb6-b218-2e337e0235a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711928c6-ebd7-42b4-b1ce-66c224129c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e70cf4-6d1f-43dd-ac38-3adefef797e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a1f3e1-adc6-4af7-af2e-95b398873f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b203cff-4f83-4be9-8b52-a77a0ac4c325",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2df870-2304-46bc-8725-fe6c9dd3ed29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc79fc8-9442-4317-aea5-4c5099fb6e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c0077c-4cf4-4f70-b0ec-5e41fbeeb079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "654cd255-fd80-4324-8d19-4f50a62697e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfea05b3-1835-49cf-85b6-324b9aa75255",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ec078e-6609-4d3b-9327-8fade8e6039c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb98eb61-3c1c-49da-b936-334c621cccf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905cf0e5-dcbe-425e-817b-191e57a884c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3023d262-12e3-4654-8815-90fab8f63648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78322ec7-8a94-43ee-a52a-396123825372",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040e0bdc-b540-4ef8-8609-4a4e801e8b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf518d21-8f2f-44f0-9f1b-6c36cdcd4d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d657acd9-ada2-440d-b724-d01af515d341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24ac5afa-3495-4fcd-a078-e14e09dedab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bafd00a-5f47-4e6b-a580-988848af6c5e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d0246d-4aa0-45dd-ad3d-4e392e7242a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786b69b8-688c-4218-9524-f107f6df0a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd230647-efb0-42a4-903b-3bffe6781099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57c6357a-42c3-4793-bb3d-134296c0bccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9307e641-8566-4496-9b16-ce5064036e5b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9b8f5b-7785-4a8b-a0bf-c87b605e2a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdc35c2-a500-446d-a989-78f612868eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1954dfc3-d8b8-4143-b058-5e1cd5d8231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ee41b8-d1a5-43d5-af5e-92d2bf922101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bbe2b1-37f6-4f1e-8240-ef7855098389",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36522618-8a8c-4d26-94c4-b6e3daa1143f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3410cdf9-4345-47b7-9f43-209f2099216f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b4ed8d-b8e7-4991-8d68-89712f9307a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ce28b9-d625-491a-8802-167f8b7e752f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f3125c-0142-4121-ab92-78005c0c076c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a7c1c2-46e3-4161-a71f-e35bc9274f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7830ccf4-dcf3-4388-9d79-657b3aba7b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55152eef-86ff-4ba9-80c2-c434fd48ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef353e3-b246-43c4-8340-d186dd9a0409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5565c1-3aee-453d-8c14-455f228a7699",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea456c3a-3f26-4241-965f-0723964c54e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f63adfc-89a4-4dfd-a6d2-4fd43de8574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fc8941-f1f9-4c4a-b47d-e5282993fa54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60a261ae-bafb-4f33-9e6c-01fe8a1cc913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a532deaf-3838-44f9-a772-253f2740ff8f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27b722b-6d3a-46cb-bafe-64223abc5e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c205f963-ee9b-4b7b-9124-b9418621fa5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde155df-eed5-45d1-8cc2-e064c93e9ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0bec3d51-a75c-423a-9485-0946dae62c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab57efb-d34b-4736-b2b6-d18165bb8e85",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7ac219-4dab-405e-b444-d2eddf74f94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5876387e-c7e1-445c-a729-66c574ef20a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6bd49f-1f43-42fe-94fc-8d4d802b2408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab79c253-cb08-41bb-b947-e32d472a3647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98512064-029e-4e35-b546-972a1baede65",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9901b6-d907-45da-a457-bbb558781a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83dd3e3-f0aa-4922-b84b-9fd379d2c2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468c9c04-2f3d-4756-8965-320de294bae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7e31e3-8809-418c-9a5f-e8b008a2b25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1e3a21-72b7-4751-ac09-c7540d4d74c7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9110352c-e1f9-4956-a3ee-dce211fb566c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba609294-92c3-4a44-853f-cbe6ed690a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9dc9d46-de40-48b9-80f7-1ca38941f399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfe582e-c6f9-49a5-a9de-e209b8142ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d43e057-93d5-43a9-ae21-f6147b2034ac",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d158660-3072-405b-83af-b53843ba7665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1d530b-6a74-48a7-ba80-653f205f19c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf118fcb-4822-472b-9129-59b3d52f5f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "531520a5-a829-4a1e-9b8a-8c7ea4a1a339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9089969c-4dad-4699-8aee-df9ea8f7db92",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133f6a7a-3761-4c56-a14c-798e420c5fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc928fb7-de13-407b-bf21-210ee8905b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42782dee-97de-4dfd-99da-99f398c75e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "75aa1db5-5573-4a30-9ef7-3db3152a9c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4687b658-13e7-43ec-8d54-f2aee7d4ed57",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb8c15c-88fb-4484-a473-84de556dd69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6880b9c8-4804-421b-827c-2d6b1acb84e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3d5fa8-3949-49d9-a7f2-b7e777d2baf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e2881f-f3d6-4929-ab2c-53a666fca86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba8e6d-38dc-4d7c-bb04-78c6264bb5e4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1df8651-8d9f-42ff-b480-dea20c8e64d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a116294b-f2f9-4dcc-ae30-185e5b20aa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d69583-470e-4630-9557-5a5e1ddeb694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8e3d2a-de16-450e-850b-e0ceae31981b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76cac749-64f4-4d17-8856-3f19abcc527e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30b5e474-1865-487d-ac30-2f2e2f6a8bd4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1e9001-1e6a-4ab2-a583-bb33c7c5326a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d18c1aaa-25b4-44a6-b82c-65d2e8166189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768cf4fd-a4f3-4b57-a0e6-38119e81f86a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e82742b-9320-4f69-a81e-9a247f01cbd7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8115fde8-5423-4ca9-8fa2-a42cfc66dcf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29e083df-2673-414c-9414-27d64ab28781"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b46740a5-e083-4d98-8ab7-62ef8e7c501a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56db5bc4-637a-46bc-a452-3d853049891c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fb55b0a-a377-49bb-8c3b-9d32b86ff166",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b73424a-e0cd-43b0-84a4-ce83be4fa7c0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ed3bbb6-7dbf-476a-ac69-1f825f0a1e23",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b319a73-73e6-43da-803b-a33f8e2286ed"
                }
              }
            ]
          },
          {
            "id": "fbe895f2-3daf-451f-ae8c-bf7e9c7dac00",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1101463-9634-4186-9d15-1a725e70a401",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "3ee65afb-626c-4c05-a1d4-513cbbb3625e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f57878-1028-4609-8d47-5f67ce4e845b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0f547751-5464-402e-853d-47f056290091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a03901-d413-4253-bd18-de7eedd7c5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515e1e7f-9314-46b3-98af-e2748f1fc9e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cc2c0834-f946-4a78-a7f0-c9c2df366437",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "402d8b88-49fa-4313-8bce-73855243a4b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8339ebea-376a-46cb-b2bd-18cfa84a353a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebd89bff-6dfa-4677-837b-ff8f9772a113",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6162505b-a5c7-4bea-b254-9d918c59b56b"
                    }
                  }
                ]
              },
              {
                "id": "0e1e46c1-1ef0-49cb-826a-b7611fd12799",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "166423b5-3bcf-499b-8a5b-60512eea2db0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d13b4efe-94ff-402c-85e1-b0c43c9a4613"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d809d2f-ee69-418b-9e64-17800653d178",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d6e5515-d03e-4d43-939e-287586cd3d9d"
                    }
                  }
                ]
              },
              {
                "id": "2be530c2-ae7f-4d31-b9e4-f36d0d223fe5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1fb2ce0-f17a-4175-b846-54b3fcc13150",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb65b569-27a9-482a-ad95-98860891646e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8eefe9bd-6886-4ba6-8370-21b08c6d5770",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e80aa7f-3ec3-4f40-b970-b29489754b5c"
                    }
                  }
                ]
              },
              {
                "id": "7027fbba-f57f-42f4-a77b-a6fe1b0e4811",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0ef6911-1b6f-464d-88cd-8bae8eaba14f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e7533cb-eba7-4258-bcc7-6dec8bc891e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d2a9719-b87b-42c7-a7b5-4e120011d4c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d156af19-93ad-4a9b-bed6-e16ebde5c4dc"
                    }
                  }
                ]
              },
              {
                "id": "1afa5ab2-1edc-4abc-b26b-79cd9900f9d7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b264c064-8263-4eb6-aaca-70bf0830ba2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b4848b8-89e3-4233-bdeb-4df5e11bf7b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf420fd9-265f-433a-b0fa-0ef968083d46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "edb22a52-abed-45a2-8995-3c22cd5fdd78"
                    }
                  }
                ]
              },
              {
                "id": "4d434ab1-ec88-4131-8f67-f9fd1724d7e2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a55343ae-2f0e-4158-9f5f-ae8884da1e4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ea4b38a-ac0c-4499-8d7b-e6634eebfd26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "730271a5-6ab4-459f-90f0-ca8f60460d04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b345e2fa-8a28-49c0-a06b-846e284614be"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80133a1b-11ec-488c-ba2d-d8e282ad623c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca5956c8-e4b8-4f4f-bf2f-ec541d055c7e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "50e5c7de-1791-4aac-aebf-b25335c929e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30cc2394-1460-43c9-a838-501c2e73e592"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e697964c-5137-4fad-9cb0-fb630764bc3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6b543f3e-4abe-4b84-8f4c-ec3841749bbe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71846420-6c2c-4458-b52c-5301aa5c0510",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b772b4e9-1b2d-4166-a832-768758ca1ab2"
            }
          }
        ]
      },
      {
        "id": "3b41ce1f-9a84-4e7e-8bd5-67a6ee3c210d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f3363ca6-6b70-475f-91a6-187087fc1378",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3702dcc0-b182-4b92-b44f-879d182a417a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fa8dd2c4-6f07-4251-953f-48502d871669",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7756df-ff42-4315-8a93-0f59d9b0fec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b75cbb-1989-41cc-b18f-d30aa422772a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad1f28d-79f1-48e8-829d-ec4007139215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2099640-4dec-4014-bd72-908576123c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc50f6c-4e85-493e-a3bf-4945b3653283",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadf1cb7-289b-45bc-8e9d-fd94f113cac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d217bf-1306-4f3d-8885-9d51af1c72cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc207174-77b6-45f4-aeca-c09ff7da4a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02ca7c60-b47e-4f29-b59d-5d137401dbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861dc718-39a5-44d6-aedb-c914520b64f7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b2d1d7-25ff-4f6b-950c-44f420e42e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c429e69-58ff-4f39-b5ea-052ce3bbed8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb3594d-c51b-4cda-9a2e-1d0ff22ce69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3d6059-ea3f-4853-b359-18e68df79ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4148505-4252-4fd5-8550-2c75b9892574",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dca3dd8-593e-44b4-abc7-fa6ad2aa0655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733974e6-cabf-4da0-b071-435631646ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a9433b-e0d1-463a-a4f9-1bec5112a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fac2d64-a489-4e54-bd0a-8be167834358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bb5e2b-b31d-4b2d-8b6d-d5b9c0a8cdf8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3094d7a5-eba2-4f47-80e9-ac7293171c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6414e98e-f6f4-4247-b62c-be6b45455c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6d2fa6-d086-4a59-b040-2099fdd683c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76fd2bc-aff9-44b0-8279-34db9a915b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b238c3ff-7475-4f37-9a50-748055deacec",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2d68ec-c6c9-4234-bbd5-43ff8b10011c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5422f53-d8dd-48db-a94d-8c8b83507c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3305bd3-9663-4a9e-b702-62691af7eac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd86910a-8720-442d-935e-ed9f71de7ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67023b8-58fd-4ce6-a557-e94793d81dfe",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f8b5b6-5de8-4c3b-84a6-59d3eed57a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d3d73d-2cda-48d7-8b78-c13a2ed71bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4091493-29a7-42eb-ade5-73c6002eb7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e668043f-b0fc-4f48-8483-b7d5e0335204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e0e12f-8062-455d-bef6-eea652edc9c9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396681ee-b9d9-4a71-a679-689b7a3701d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8cf1d6-8ffb-4e17-9e94-8011b7938341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35f6696-79ce-4306-a222-9e948a7ec1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd952d4-1bfc-40e6-9649-c0c2a0d0855b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998e11d0-7250-485b-b24b-662c45f4aa50",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86e6d04-e39d-4971-a7ef-79d389ed1cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017ba344-8d9e-442d-8f35-825d687d26b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf224c44-4099-4690-9092-8372957a1f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2602cc-0007-4ba6-af6e-bf375a54789f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27e5356-e08b-4120-8cc0-34a695dae885",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c010286-08f2-4022-ae45-7aff43e3f330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1b157c-0c44-4e22-b79d-8bb55640f868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1361e9-c948-4668-882d-6b6e510fbd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "804a173c-b2d1-40de-995a-01feb4ee7d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833382a5-9b6a-4546-9c77-6e7dffe78514",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d009a4-b50d-48ea-acf0-44c5638905f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91f3db4-99d3-4d28-8fc8-130cab1c3d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e904ca-6c1b-4971-aacb-c424bd35e897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f928729a-3ba0-467d-922f-14318b509335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbdf766-fff5-48f5-a95b-46168cbc251d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c4d4be-1a3b-4a3d-9818-57316be2be82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ba8d2-1243-412e-9ed4-3f42312f8bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aeb497-e269-4b95-96eb-61b769062c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "442bacde-d695-479e-9d06-893cab0b22e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b93e54a-3e7c-49d6-af20-4102b6d6bab8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b136a108-f4fb-4a1f-94f5-97e71e65312e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0393c3-019d-4e0c-a4f8-38974ed51ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea23235-77c0-485e-9c84-62f09f3697b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58cff749-e096-4ba7-9515-6d11716bd6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c84208-4fe7-4b21-aad3-6d3191457ccc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc88df0-d970-47fa-8e14-15cf8f7980d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75940b1-dc0a-4d60-bb90-08dd7e7f7f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145379ab-9e7f-425f-a1e8-aaa1c8b0093e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d5e60d-e3c8-4f04-b724-92305ca43771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f20140-c718-41dd-80ad-722f2ab65eca",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618445b1-49fc-4e12-bc63-d1fc44f6340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa07274-1f4b-4fcc-be35-fcf87762d544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da30d4e-c764-44d1-b4ab-8d398d730dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3686686b-1353-4611-9022-d0d9f824c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ac3315-7ba3-4aeb-aff9-2b9c534e52d1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a53d61-4e2e-480e-a2bb-7df24dcd3728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9057f2d-34ed-41e9-b323-24d3aa91a45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4fc2e9-2f61-4015-b14f-7ab569e3dd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1952ab0-eab2-4e30-aaf6-bf5f2a3160e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85147c6b-e5c4-4f54-b0de-3bfa0e41f837",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cea4c50-0b22-4b51-9363-5a18c8973609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8453c88f-7d72-420c-99f4-88cb876cc590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588fd97b-f4ab-4507-9559-01003325da2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0443c388-7367-4d5c-b889-8caa0c7a079d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a2c7b2-cfa8-4702-962e-658e0b494627",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155d68ee-3dbb-4483-ab76-f6302461051b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981425a0-3346-4719-b436-cf4fe76b71fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277863b7-df48-44ef-a8d6-56271926142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e817e17a-9ab8-4257-823f-bf25f9fdb239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087d2b78-9ef7-456d-a3b2-b8e68aea18d2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bce611-961e-409f-bf89-cb935177c93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9302ba78-4d79-4705-903a-ce89ab42a27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014c4d10-bf47-4ad1-88f7-d100eca4104f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c946d4e9-1fe9-4f07-87a4-0fe3e27aea6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e95e10-452d-4802-b4cc-821c00eb4476",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342b4005-1896-4bb7-8aa0-dc62cb9a3e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d3f34f-d1d9-4913-9ee0-3cbbd198ec6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4df68f-bfd5-4798-a57f-7a59452251e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c24455-48b1-4feb-bd20-f489b71a9ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f8fe9c-ad65-4473-abe6-3ab25da3da9e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208d7fa1-110b-4e5f-8205-32047e14bfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df40d01-f3d5-40ef-aec7-8f6190b31637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e49ab8-250e-4359-8cbb-291eafd26884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65b79b0e-5aae-4523-8a3e-9645697b407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9ef5f4-59b2-4ec5-a2e5-135eb0a1c6a6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b0698d-32f4-4d15-b774-22912b9bdcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b256cef5-368e-4336-b727-57110b5b6dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd87ab8-c30d-4042-9db7-a3e08c1751cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "790c9694-af3b-43ba-a4b0-15d8e1df7481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef609645-c386-4218-a896-e207222b48ff",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a774eb7b-dc98-4661-a99f-98bc227c8472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f02a6b0-d2ae-43b5-bbea-1ffb97a630be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703be281-a637-40de-b7b9-d4e5ad12feb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ef794b-7c4d-4b8b-b5f1-c3e66dc2d226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23970bcb-d4c2-4634-b8d3-ad9d84396494",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af875f10-e680-4040-8d8a-6f6353f16214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f669b561-799b-460c-ae66-6f89bc7692ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfe16a3-d151-49cd-a06f-d7a96e813a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8c847c-7c2d-4aa1-adba-0b690459d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288b2e8a-aa7d-43bd-b5aa-7e317e1147c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cbfcb1-324d-4e12-aa77-b73234ecc1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0bdeeb-d0a4-4987-954e-28d11d078f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10bab82-c299-416f-ab60-70f43e2affb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91529a7-d58b-48ec-99b9-c26a7d067756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14e9970-a0ca-48c6-8ec8-8687edd4ca67",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee03287-47c0-4b4a-a2c3-8f0da5e34e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978bfad0-103d-4e43-872c-382ab2b021a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8061f7a7-b859-48d8-b0d1-cbd8dc2c7d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b7e0d1-00b4-4b45-8ce2-24831960f7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bf6aa3-15d9-4f03-9807-552842f94cb1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639fabf0-f220-431c-8892-5736eac0de91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f672b9-86fc-4cfe-962b-b469ae14e518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34cd938-756a-4b53-9ea1-03afe1424126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16d3ad2-a4c4-4801-8e8c-2f7608654f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf44bd7d-432b-4f77-91d8-5f6f04ecd0a2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0239449b-ecdd-45ad-b2c6-0866a93bf7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b38eee-1450-4283-81a0-976e170e67ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78c3626-28a1-499a-a15c-db35df8bd791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9592b0a-cd70-4e8c-9659-b0c2b88865be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf1df95-8b6b-4741-a7be-5647b8cc3d83",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714eb98a-c3ef-4109-be5c-468e6a702681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f0f777-8b40-414b-89a3-13511de7ef2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4562c519-8995-405f-8d46-6ee135cfe118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c55d3156-bb82-4807-8e9b-496a768ee3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7e0cc0-977c-494f-83ee-663449a1702f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17903c6d-c75c-4117-8f55-1f8914e4f720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe193e3f-c582-4a5c-b152-1e95081b6a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bc25db-e265-452a-87cf-78c2818ede9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6d4830-d851-4639-8c82-ec29ed98290e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80ef7ae-b52e-419c-91e9-d81be5b63aeb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17277f39-6e43-4bf9-b2b9-4d097cf343d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204ef032-ae7e-404f-8758-9c4548eab0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3401c7-562d-43ed-9239-c627ac8fbd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2a9d03-cc79-4d50-90af-ae185e59b615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25ca39e-88b5-49e8-8003-562dc25dbd60",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22797aff-bd38-4917-9ad8-7fa399e75975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac54da3-7387-49b0-aed0-c70a99d50af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acec7972-d58c-41d5-9664-3d5b564ab3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e36879-4d1e-46e6-93e7-d91819d5cf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082d3959-daf2-42dd-af1e-62d7aad1c270",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56e72b2-afab-4f5c-9b07-302bab5159e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f049e1-3f95-4f1f-b831-01583cd9aa74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5152375f-adfe-4229-97d4-b8f0586f561f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9267ed2b-f335-4dd0-b711-31718b787684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcc764f-9a80-432a-84e2-b5b6bdfb951b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d442ed2d-9727-4532-b9d4-2ba34eec8705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35633d1-785b-4fa3-854f-efcc699d2f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbad0510-a8b6-4cbf-a3b9-0fd39a0b7b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaca730f-1311-4718-a0ef-6e3011153d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53076f37-5f6e-48ba-a944-500bc3ecea7a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343ed3c3-0353-48c2-b10d-c5424046c1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ef2311-4b1e-4d3e-b00e-fa5eea88aa96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcca2dbe-8050-4193-a9a4-5e77ce32b415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb79fcb0-1be1-416d-a22a-824b9dabda08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac410fec-542d-4e2a-82cc-d5b018ad5f5f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a6a96-816c-4db7-9ecf-963de6d0dd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cbd845-9fbc-4d3a-b80e-067f73c0767c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f02dba4-9b3c-4a3b-8219-75cf14f73ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3b0f2f-da6e-414b-8cec-5117d0ff4414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a20d54-480d-42c4-bfee-8521ce746034",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7134eea9-7967-4671-a25d-ba872a49b87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3964af-cb42-4400-bf15-9f89716f5a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49883fa-bee6-466b-9ed1-9d835f65e207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e93815d7-324e-4494-b906-e1f6740d20e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71823b0f-c921-4aef-8b0e-fc95c51363a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32c9b63d-9ba4-48ae-a1aa-d82589bbe142",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d41b10-c2c6-4df5-abe8-80bf6e1a763c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "209afe07-56f3-4a3f-b20f-9960ff1964a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c34e7c-d4af-4e99-98ae-5badda7ac4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b212495-1e3e-4539-9e5b-b09aefac766a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6291adc-4114-4b3e-86fb-b2d91e4c4291",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d69297b8-7e98-4bd7-a33a-a7478d8a5db1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1923beca-3fcc-42d2-ba01-c6490293dee3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f537d76-c2c6-49a2-8ae2-bb718f396e02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0f852af-aa64-40af-ab98-53e1f8719864",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71835537-6c36-438b-9469-7f0d7541f1f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "467e47aa-1a7d-4723-a143-0bf1d63f9a53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ca78e79-6cb5-478d-9698-d7122783ae7e"
            }
          }
        ]
      },
      {
        "id": "78d13f89-dcbf-4c07-bae5-37dd632098b9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ff1f27bc-0845-4c60-b49d-6f1f3ab23302",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51ca10dd-d0ce-4be8-96d3-7775ce220318",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "150f4155-cc64-4c6d-97d9-dd88415f40fd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cb29de-4816-45b0-89e6-7e30f050b5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971b56b9-4fc2-443b-acd7-00e9d6414cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bc417d-c0bf-46f8-adee-1c55c49fbc64",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0623c9db-8518-4d7a-91ed-92aa88054002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9cc82e-14a7-4165-9f46-68fe4b4448b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d12648-1b28-407e-877a-9f5f14a764a4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182f9725-3d52-40d2-b995-308ae92cfebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e66441-fdad-4611-a394-7d97b22018b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b47fb4-7214-4375-a6fb-fe8c9ac29590",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9594153-dc84-40b6-bed7-d517c53e6e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9f23fd-c04c-48f8-b6ad-b366b1e910a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52090d35-2490-499e-a3cc-bab64f29466f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4b1182-d607-475c-bcab-e63f5d88632b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21967bda-d725-49c1-aa75-413835c99661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7def4f9-06f6-4ef4-a36b-3a98fcf501e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ae991e-21f1-4dd0-895c-0507f4d94b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1664e4f-a81f-4520-8ee1-718c3cd2aebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ccbee7-90fa-45e2-b5bb-4c82c4865d93",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4733bef-6035-474a-82d8-6cdddd6e87cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd71dd7-4e46-49ff-8d38-d9a8a7816548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b434b6-bcde-470d-bee6-9a29c980711c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fb80d0-08f0-4928-b8bb-53cef30b8d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4414a943-ee48-4d83-a8b5-a08cd650e6a3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac119b5-2a6d-4d5a-b684-db6786a88c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a05a8f-76f1-4a3b-ae27-370420fdac39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b029c67-469c-4400-8aed-5071c09a560c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b02192-6165-417d-b32d-ff041ced6b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0194a8b-f2e7-4595-8561-f18f04c24dde",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5788eb-8510-4871-9a52-614bd1877757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e24cf7-4d79-4b2f-8b55-ca46903cb7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1375f6b8-aa4a-4f2a-bea1-2048e577214d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df02f8d-64b0-46c8-b170-e1c3d7019916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a7433d-c38a-4a96-a510-d5dfa7b6638d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4a943f-9b40-4850-b4be-c5373510e04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71bee3fa-78d1-468b-a306-737c457e7f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb0b7a4-d9c7-4351-9ad2-9541406eb5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc584473-63c2-44da-9c4c-3496f0aae47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8001c2-3eb8-4ce5-8ad0-c69308e8161d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285600a0-c889-4fbf-a6b9-a5546dd8915b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c36558-c26d-42f3-9d27-4e1ded0d370d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e744b9-f15d-4914-89df-085408da97e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63284618-89ec-4f40-be11-ad21d5738ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621cce1f-63dd-4170-a782-2a3c4265aa60",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0b3a7c-4721-4bf5-99c1-94cc28600363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a3d9a5-a737-4883-bd48-5fa4346777b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8486c6-cb0f-46a5-8b5d-a88f34b47a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a04f8fb-9262-4c59-8f87-f4f42ec8518c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decf88c0-66fb-4833-b655-d45504409f36",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19338883-73ef-4cc3-8cb6-08ada8bde7e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7376a03-be2b-4e2c-91c0-a266dc8aceac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3dfcbd-da55-47fc-bc9f-c954c69784ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7227d4-6ba3-4c1a-81dc-2302f9b3d04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04c2e46-bfc3-45f1-924c-4ae8d2765158",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c2f159-d9b5-46c7-95b7-48a19728c48e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea682baf-abc1-46d7-b5d8-07a0d81206a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26e0107-b515-40a0-914a-9d871eb5b0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee432785-4fcd-44d1-b485-58d2f5744723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2e5684-4109-40be-9aa2-8c0e7ce3d0ab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c29447d-719c-41cb-a116-647aabfabfd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a355c9-3aae-41cc-a80d-d281f790768b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca0717a-dad3-4a7e-8996-001430f7f05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db26ed7-9a35-4cf6-b56d-ef3644e89704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c158f2b9-e21e-4f6f-bd2b-db4b26855d49",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf63e5f6-4941-425d-a49a-e3ca796fa841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eff87242-aacc-47d3-8026-74902ce7cd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6cb998-3525-4bcb-be0e-43029931c298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9f7e39-a99a-40de-9035-ade01ac12dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c60629d-e42b-4769-be4c-a59297df9720",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb709ad-48fc-4849-8ed8-baa19094079f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6319a648-c3c9-444a-abd6-892984888e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bbb1d1-c0e6-4874-80b9-6393bc54489d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ab45b0-3543-4c52-9aa0-398841bb8216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4161d7f6-c2b3-4430-8b9f-9d71e2f87c53",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfc4ef6-f568-4e8d-9595-5c39527673f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5631c954-e211-4063-add1-8b5c38e1f5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53891215-a771-41cd-aa3b-8d11d6531564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef10d60-a030-40b7-88ed-f7387ee20cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e87e50-c2ee-4411-84db-67fdf12662af",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ae0ca7-145d-40f5-995e-88bc7a9cd8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b49bb79-8e8c-4c53-b113-17f041c5af36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c919c13-88ee-4ca1-932b-f819983bc499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a620087-7038-4cc5-bd05-34b5f5cca285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8b1744-d4ee-4594-ac6b-433ca5c2b066",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07771ab-4d85-4d31-934e-7949957aef9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c5da9d-a96f-460f-8d67-c37cb3df62c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be3b483-321c-4fec-95f9-e80fb4753243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bd5914-b31a-4448-a82e-c0397c4b1519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dd3971-8e65-4cb2-9141-cb13c0bb03fd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f473dcc9-5cb1-40d7-82e9-381d9c598480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6ce486-8a91-41ce-94f2-d6f36bb67a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58db653e-be05-4c35-8fe6-f0759692be33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f068dbcf-3f89-481f-96cf-f88a3b6eaafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a604453-9c95-4588-9bab-9b4280a3e1e9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71338485-da68-4d4a-b6ec-c118c12e85c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487c18c9-94ac-49c9-b7d0-0c3b2d2a0db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d95ce5e-3f79-4fa4-b194-b4841ede547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d49f92-7474-48ce-ac9c-dc5dcdd4bf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db07878f-1529-4e02-913e-16da20e9c2ae",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3a14ed-1a76-4a1c-bf05-1c4cec7025ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba73dd3d-b0b5-4a56-8b52-0c6a033bf6e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194ba7dc-3852-408f-b813-4aa9bad4b7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2892d98-33da-4478-935c-9eb76b1de055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f47f03-b3ca-498e-a325-d25b8976bf1c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8c7def-e83b-434d-94c0-1e0dbb25ffa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e73c183a-a726-4de1-a3e6-4119315eb702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7fa3db-822f-49c2-b84f-4c412ab932ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1f2dd2-ac2e-47e1-b41d-e4ffeb8d0aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5cfe48-1e7f-431d-a692-0ba47c6e3371",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e98682-c3d0-40dd-b068-2f249595c685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b95b53-51b0-44ab-bf5f-ea107ed92b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2d948a-aec3-4440-a9cb-1b07687b8b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14d642c-8b98-4954-831b-5ae3e92e7e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a2481f-282a-4648-a914-53aabec14cf7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394c0b82-be34-4d83-b803-aa8965f97c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b96a28-e493-4c52-859f-ba128b1f8635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a815a3aa-c2f0-46d4-b3a3-938efbc11de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c95b2b-7df1-43a6-ae17-1115c7776e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c52675-c8d2-43bf-b290-724a7a4644af",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee86f1b-5377-4978-8bee-6759c0c5e51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "063c42e7-57fa-410b-adb4-c33ccf345247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d67e55-086d-4cd3-b626-4e3c4c46149f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210fb1dd-2a13-4030-911d-e66e3137919f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bbb854-685b-4b26-bc90-2bce6f1a8598",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3eddad-f33d-444d-9aa4-597779b49e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20748b0-7aec-4795-987a-c41177819d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f645773-f285-47f8-9f82-cb4ca3fbc5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f6a6fc-ff02-4e4e-b269-6334c1ea0d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c464ffb7-d06e-4ff3-8fd2-cd292ed4ead1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ee0d93-0872-4428-b393-dd66b79ac4bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b9b8457-4fa4-4e7f-8a12-2a7229e8f1f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06487ccc-a1dc-463f-8e11-d8464e6f1876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388307aa-24e3-4003-aa8a-d8fa5d55b4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac36f744-8a7b-4599-89f2-62aaa0b926f7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09b62b1-dfeb-40f2-8688-552547fdda5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "564411c0-b451-4d69-b16c-0bc80fdb97b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59326692-11b2-41df-83b3-cd2bc83b1a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb21585-3157-49f6-836d-510e84256718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb87b38-04e8-4025-898d-d73fe0f1aeb4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bcfdd0-5669-4d42-8f5a-0d03f2fb1397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8680aae6-385a-4610-9d8a-65e71f95b64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46f354-93a6-41f1-9d69-0ad7dbfc1360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae1720f-08a7-4774-b272-501fc434c3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddfbb1a-1672-431b-b671-cee529c405cc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c9beca-d2da-45ed-b32b-95bbc4626620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "598cc566-af8f-4612-b0df-6f2374108ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d1b9e6-9cc0-43ac-8719-1c6f5e300daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c529050-79a6-4b4b-a639-bd5c0ae63d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa8e4a4-42be-414c-b219-a65f4c9e2a1b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841ccf0c-afd0-4e12-9dcd-d735f539ba68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05b8496d-cfd6-43be-b5aa-82c34137004b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba38965d-9655-443e-8609-7fc3f93bde67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c65e028-a996-4f1f-9c52-1d069db01879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297c018c-7c65-47b9-bcf2-81adcefd7b20",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc203e02-0453-42f5-8c52-e1579c2dbc5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323aadfb-1f61-49ac-a09f-8ddc3c38c4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b91935a-daa2-47a8-b031-c74629a145b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5050458f-08ea-468e-92ce-a63046337671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d347cdb5-adf8-48a5-8fe2-8b61ca679183",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0afcfd3-cc8f-43c5-bd0d-0b25ea7fe218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d30970-ad6c-4479-8099-c6231a2fd78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b472c01-8e50-4806-9ade-20718afaa9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b12b27-66c3-4e54-bed7-0038e6956ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb8f540-cc09-4539-864a-fc103b4eb899",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834185fc-50e8-4a51-8028-cfe76d7e0b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581a59d2-58d4-4e91-94b7-8407e7eb93a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5eb510e-b78f-44bd-9a82-bad64595b41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfe071a-1c22-497a-8398-c376ff120f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b54d945-12de-4940-88bd-60b6a68aaea8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bc0815-0985-4e60-8d02-c33591c4e81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9226ab2-f9d5-4f53-adf3-c0b126a40e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fc42fc-bd58-49b8-b109-d812825eda3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1813c8-46b1-49f0-b4ea-980a047aa9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7839bcd-562d-4952-87bf-b0491a769bc3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3975ab1d-2cda-4baa-ac32-3cad27b691a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbc94f5-7a5d-4772-8557-8e5bf809ba50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8c231b-33b4-49fe-90d3-eb6710d3c133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687b2cc2-0670-44fb-8c07-55509346e409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca63d28-7272-4936-993e-53e25050e7e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222ed763-b201-4e2a-b2d0-68263856624c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b57917-f427-494f-b356-ab9cebb5f3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0f951f-aee1-407e-9434-5591613de265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e96ce2-489f-4585-8fc1-6aa9f1cbd836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee233bf4-0714-472b-b8fa-d6d9b4a73c8b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45086736-8969-4ac6-8836-42c9106fc62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c0e830-68da-4904-8e69-1d2ce0f09a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db35c582-4f89-4d7d-ad55-6db246c76e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09138013-8783-4767-aa8a-2a4c585a3a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7059de59-c3eb-4e08-bc39-ada374434b61",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea9611d-5579-422a-be58-04c786d6c567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fceb109-e2e8-41c3-a04c-6ff44df24311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2474e240-2caf-4d9a-8192-ad6018327dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7af7b1-cf44-4b02-9593-15d198e66768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983e514e-9f9a-49b3-9214-2f5a905f270b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d278a1c-6f38-4c62-9c5e-248b5f09138e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5beeac-f72d-4e31-aaef-10592fa77da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4942d7e0-0c85-4ac0-a3dd-3ce64f1df579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff0813a-7182-4d66-81bd-e703ba90dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccd22dc-a0e7-42d7-883f-7f72358965fc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2dabbc-db2c-45ab-9e91-acb50dc90bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751803e6-bf55-4674-bc01-b203c7687416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8406af07-9cea-4e2a-8723-657edbffa28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c8e310-dc26-41b4-8e7d-de1a44dc03f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68defebc-b7b9-4fcb-a0de-d2df525faa10",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623c3345-0f37-480c-944b-b0acd6dc8275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a32faa-55ed-41b1-8bfe-1aa1aa935c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "080c7e15-7c33-4352-ba84-455c570f4261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702a51d1-5ab8-4476-9614-a75d535c9955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451334f8-a084-4936-a566-fdfbdf17ff9d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6322ee8c-5078-4a74-9eda-b3be68326a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e105eda7-49ad-48f0-80fa-28e3889d8159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8aa8b3-3db2-490d-97e1-4c7376c44ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459a754a-21a5-47d6-b4ac-45bcd71179bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc05ac73-ce6b-4f5d-910f-3bcc47c75593",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd07562-96d2-49ef-b876-cceb2ba5e341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2fa829-66d5-4e07-86e6-a0160bf8fc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1429b7-92e3-469b-9984-6e946676f7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a954f0-62fc-4f6b-b569-adcce8dd92df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a0ebaa-89ef-4227-988e-bec65f556266",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fb6746-959c-4092-8244-e7c127707f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14888a96-ea8c-45ac-8405-3d4045169f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5629fd2c-c792-4fd6-8411-a7216d4db60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cd4774-a65f-4077-b4b6-c8f47e13d9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ac2658-73c1-49a1-9236-7ef1c29b79b7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df76483-70cf-4891-a332-9fbb3d3d58eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf5267f-3603-4af7-af7d-5a41c10d764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2faf69f5-ec14-43c5-9944-bc6a4c42b8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a077d608-6be1-47d8-a9cb-5788e72110c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485763af-2fba-4642-8649-0c46fd87792f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b207a4-0c5a-4f87-ac1b-60d83fa65e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f77f78-1172-42fc-bb68-e241a93895f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1c46fd-a7b4-437d-92cc-ab5d49985236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21540185-7233-4eb9-a418-4fcfb1bbd7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a40027-d311-4b1f-9c3b-0d95a26b770e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe5f371-5a55-47b5-a643-bdead0d33a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17df6356-cf38-4312-9254-c3fc5ffca7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce94343-9154-4d3e-a826-ee006b5c276e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba43ab5-6443-463f-9f21-33c673adc2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ee2bbf-7a3a-49d5-9b6f-7db42a655751",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8704c1ce-c5d0-431e-8fe6-0f91b2c618ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3942ee50-87fe-471c-8654-ee3a3ada8c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa6f98f-d1e9-4d88-a238-22c737c8c16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af649c4-3eb4-4404-bcf6-4855d0f1146d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2210a3e-592c-466c-a7e7-25801699a9dd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103c49ff-db63-463d-b1a3-e1407fb09429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5514a427-496a-4d41-992e-0cf39fb5a191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea87c04-5613-4b8e-8292-a28940d086a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1043d5d-e5f4-4c12-82ea-458d2ed8702f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85607567-e9a6-449c-b5c3-81fc2d21d5ff",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6425c9b7-cd3c-4d4c-a82a-79c25cd7f124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e2c15a-7835-49f6-a895-6b4f6dc40b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941d2823-b32e-40f9-9f37-46863a91155f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e04a7d1-cbe5-4e00-a7aa-2cec28a926d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a191df8-80cc-40d0-91b7-dc0834ea3a5a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bbf88a-b0d7-4f5a-9b90-69ee13487aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ba4be4-13ed-4a57-8bae-67b6912d5436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab372f96-1a83-486d-8e82-c1ce94168302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d6d7f4-2d7c-4e6b-8c15-bedab68b17dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbaf214-482b-4aaf-8dcd-71d28af2b68d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14461e2-54f6-45c6-af08-6bc74f71072a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774e2d18-6cc2-449f-adf9-121d7ed95927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27e8af7-e574-4287-8f3e-eb99df14843d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0038bedd-ed26-4873-9288-c78e73f422c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b358504-d9de-4828-8c81-838d0d5e9b22",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ae7f96-a128-489b-89cb-0826f041153e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940b02a4-4a14-48cf-8e52-47c61a3fe2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d74e13-6761-413d-bf19-d72501d99e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c409a462-8c1b-4f87-80ee-ae9682bf966c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72ec806-c4bb-4ee9-a9f1-d33923f3923f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e222244-ccdc-4e67-92a4-31d1a0422b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b09042b-7204-45bb-ab42-aff19dd0eab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d2a049-a36f-4dcb-9009-d004a12e94fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4619b228-f66e-4a2b-9fe6-372111864132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a69115-5795-411c-be12-23a678461640",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195153ca-0bf9-4abd-8886-3e370ea550d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867e6838-a4cf-4900-b9ec-22cef1dcfae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9483185-e2c9-4989-99de-475bec7ef659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c846a035-838f-4b27-8199-4084f73d9d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3446c77e-c276-4826-bc81-28b5f3f6b264",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeaf9681-e8c1-4f44-8764-57b202e53178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a6369a-cbcf-42af-ba93-ae74fd5e0878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca2a9b4-ec76-4443-9985-3e7a4fa4aa47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2974ddf4-90a6-4fe3-95a2-2416f7130e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9f6f6d-4cc8-4b20-8aec-b31cd7f84fca",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af673fe7-05d3-4ac1-b044-a45d77110fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dff3d6-af4c-407d-889d-2c6a40d3d4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5493703a-c62a-4c23-9b9c-0df372bf95bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce38c3f5-cd95-4a91-a558-db89777c9730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdd9a0c-bd1e-4256-a1e7-a7e0ec28383c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca26b5a-635d-4099-b9b6-12a8bd6c553d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f395b85-547f-4ac0-bcf2-bd0ba9f90a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc87bb9b-5529-46b7-9c00-78af9d3f680f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bac28d-8993-4fbc-9f1b-7d28215e1c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506844f4-7d07-417b-a48a-aea689dcb613",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce37177-3176-4c3e-a1ee-ba077eb56efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5064f83b-fce3-4943-9682-008ae5c20b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1030a00-315c-49d4-b90c-adcd81d527d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5dae3e-279b-4daf-afad-d7262b3c092d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbec7f4-217d-4a71-bba0-96fc2b36223b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25c4236-6c77-4ca9-b03c-927682999e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8257bf8-97a7-4a73-b600-f5b80e3a01fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04465085-b833-4ddf-9ef2-2a7b43af3d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d8e83c-eba3-479e-b569-495b00353eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46c27f2-3031-4257-a5c6-bc98ccfe0f91",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3771fd83-52ae-4474-bc43-fa597976b69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5feb4cbf-119f-4a9f-9fac-56b826a78e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510e31df-edcc-4ced-8f1e-d95523d0e922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a235fba-7421-40e0-af73-52d2e3c3dba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed607666-ef32-462b-af67-b9e1d6793438",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9743ec-b520-4828-bcda-22a3aac9ddd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50bc8dc7-c52c-4572-9db9-22f62efc4da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b140e12-8e19-4bb8-b1e4-4c322f2f3002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79dcf6aa-81cc-4f5b-9473-d500e2cc4ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac43723-db61-4038-95bf-f5843ae13f1e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd00047-dc24-444f-b930-50147104e808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e6f0d5d-5d69-4cb6-aeb1-8edd5d042e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ed98b3-5931-43a3-b96f-1bb5d9476f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038ea3d5-227d-4ecb-9395-50bebf336143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89df502e-a8f8-43ff-86fc-b6316545cc07",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aec81e4-012b-4fba-a4d5-bb6830bd2543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42724f3c-6190-4239-8867-8764af5eb49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ceced20-ff34-46d7-ad90-6a6267a30f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe22f29-ba5e-464a-ae3f-c3fe014c2c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d373010-f1cb-43eb-8dd2-cf3fad0709ba",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1497f61f-f879-4164-ba7b-239fa4667980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac6336f6-66ca-4746-b0ec-cc3e3ad14972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad977af2-55d4-49cd-a6ea-d230eb92809b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467f061e-d98b-4c48-906a-dd8e84a2aec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f67c92-916d-494a-ad56-8eec3f38a1a6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99511f17-6580-4a3b-a553-755f967995a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d095c622-9530-4af9-8a0e-f55a11b7d7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10102133-9d27-4cae-853f-7341a5ddc352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2125289-ed00-4bb6-9c00-fc808ba29252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3c2c60-bcec-4b64-92a6-a70acfe5a631",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345902b4-b427-4b69-98dd-5d365389a120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba881ed3-46c5-4e83-8b1d-f7b1c1b90ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3cba0c-9c0f-4642-8647-6c306a7a7fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a23ddb-ee6a-4c25-a94e-d018ff37d89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede1e0d3-60e3-4ef6-89e5-ccd30f580e20",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e052ed44-5e12-4e0f-8a51-fd15d517e971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a096245-33ce-4827-9357-94d49b7323e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986db928-fe94-41ea-8cae-e0e79f7e15a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923b49ba-b2fb-4b56-8c88-7a3ef9d02f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b399d67-26b8-4c21-b2e7-dbc05a979968",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ecff05-2dfc-488f-866c-573e0d24cd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31118b69-4874-4a73-aa18-1d172a72e2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49b1f7e-15ee-401c-8e3d-29bc6703252d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7929c8-b933-4954-90da-afa685c9000a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3157ce05-080e-49e1-b5dd-bbaa3d3f540e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cc857b-b678-412b-9f2c-5b48eb2938cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "184de61b-3eff-4a4a-aa59-697e14844b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9319139a-8702-4646-9d35-0d62b7107205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3dc8ddf-c86a-4d35-8e53-ff73fd839970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070dacef-7a69-43a4-a5d0-87ce06379a5e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2692757d-d336-460c-a621-e8f92872fa32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcda60b5-9935-477e-9391-5898049f81ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc1d90c-e29b-4689-acdc-bcd421706deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72756b77-7199-4da4-8ec5-da64530ff79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071e1898-1d68-446e-a708-a6ccc5ce115c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f807ea7-ec0a-4737-89fa-d45a74b1d498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f06c315-5274-46f8-9426-193807ebf51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4094c6dc-28b1-4fc9-bcb5-3f4cb0fd2296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb2e009-9d36-48e0-be6d-fd20dfb462af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba73198-9c93-4e86-9746-dd1d8321558f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f371f0c5-d1f8-405a-91ef-b940a37d9916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670cae8d-d775-46ce-8dbb-81d26fdb24db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a591680-dbbb-4e44-911a-a0fa9e2b3fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbd59d2-79c0-4340-a78e-3ce9390944ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fb980e-8b44-405e-b439-87236ae9d69f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5e55ac-6eb1-4244-b79d-7a6d4cf603fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb4d87b-4fb4-4a3b-ab38-1660c62aeb41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fd9d57-a975-4abe-a96e-cf61d9fef781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609caa18-a338-4cfe-8005-73a9385e62d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1305cc11-3e9e-454f-b7a5-18ec04c23c54",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cbc2da-f40d-41f4-b855-11d64a2c65b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "070a01db-65e7-4164-b5a6-ce0a7bf0e224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b23a672-8e49-4b59-be32-76df454b96ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5a131b-2f18-4a31-872d-da842d1c7fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c24dc3-e345-4399-b3f3-b22c9b68876d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfd9f62-c44c-4fd4-a4fb-9628769fe576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004f5c67-e407-4062-88bd-62af8dde4549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdab0e7-92db-40d1-abe8-a8b1db373dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade347ac-39b2-4c2d-9c5d-b70f6e0dea12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a6a30f-060b-49de-8316-823a6e07e6bb",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086e9c65-3af4-458b-a5f5-6247664da54b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6044f042-99a3-42ab-b26e-7fc9cbd7fb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3569831f-e30f-4683-822c-575a57b00911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741d2aa5-f048-4fd3-b65d-f9971831e465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e449ffa0-7233-483c-9d5d-c9e3cf41290e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56938132-8dd2-41db-8455-57e45b1ec5ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12574bcb-a82e-4610-a6d2-6716221388c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7977ff-e8fb-4987-9883-5f979a856eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a10a106-ba11-4b9a-8916-4dc106b65c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5952f1a1-1852-4a8a-b808-2a63be55ceeb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efbe78f-dff1-49c0-a23b-db7834d40b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b996a8eb-9b45-4be4-aaf2-d9f7104b1bc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929dfe4b-daef-42ec-855e-78e0cf56e9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ea73d0-d60c-43b8-b611-2c9a56ba2391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd36102-19fe-47f0-b6fd-94d00d8d97b1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b39486b-1bf4-456d-8bef-612aa750e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd4ea177-49df-4c53-964f-066dda76b0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e80450a-8fcc-4fed-902c-c1bc7bc515d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b2ec83-bc11-480e-9008-27354d6de67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b1c0cf-1e0a-40f8-bf43-da3d1b5bae24",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905f7f8a-1d7a-48e5-9251-60af8840c908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5846ba73-4df4-4328-ad26-016200d6570f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f749e6-ea64-4b8c-800c-2733a03b938b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae8261d-c427-47c4-874e-150ed4d2a768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de49843f-297b-45bf-9814-270df2c43619",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c9cca4-740b-451f-9a70-fac3f0bc0563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d5a742-bba2-4554-82a3-d0257ad017ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff849c5d-82ce-4e4d-86ab-22917782c277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128490fe-0d84-4f33-99ea-59244eb843e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd281c3-2c70-44c0-aacc-66778b16042f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316e3f29-e6db-447c-be19-510eee00e316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292f7ea9-86fe-4de7-b405-65ad59cb3015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf29fdb-b198-4b1b-8baa-801ce5013cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cab3fe-56fb-4dde-a211-1b9dd3020304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86403c5d-19c7-4d08-97d2-aa40f3ed007f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29cae90-59e6-4a37-b053-07165641768e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2847459b-1349-42e9-ad62-0533ebe60917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed83b2e-5eef-4715-83c2-19b5df6d838a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6a1dbb-6052-4ea3-9ada-e5da510c643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7656ac-6fa3-4789-a37f-f15a8b8307a2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8070d97a-1376-401c-993a-26f5b0bcd4c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198068e2-5527-4fa2-8503-a92bdb35f89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e1c518-1f3a-4d64-a43c-7eb9d27b548d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaeb4a67-ed95-4db7-9e72-76cc5225f693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dcf1d3-c3d9-4334-be51-2d42f27dbb19",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbd13d1-e45c-404f-acec-c6f1558a817a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78653fa-a944-485d-ba91-890481484cbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7d4517-fbdf-40ed-bfa7-40b6f2a64cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68ca9a7-d9b5-481b-b098-46f5c64ac9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bf0c2d-aaa6-414e-b759-de1d7c870f39",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410c527a-950e-4b09-a84f-39ebee6ac6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86efd793-75de-4e97-83e8-e636066ccb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3853cb-c69e-4f29-b7af-9086bc4cd6dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbf05ee-cdc2-43a9-8f45-ea830a9a034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6efe26b-0151-46a1-9a2a-2e7785f5c8b1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8ecbc9-61ae-4bbc-8374-951f319c3193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f95ff68-8062-4d1d-896d-0c37949596d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef704e3f-322e-4c22-86d8-1799fb373e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b073ffdf-89d9-4add-b0ee-cb2456781291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda69fe2-081e-41a3-94fe-2dae60db4649",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354ce21e-e54a-41d9-9fd3-701d5bb6b539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da64fc79-f437-4395-83d4-75e23c6185e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fd46dd-24b5-4a25-b4c4-51b74f5e23e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1756fad2-780f-4d19-89d9-5f2cbad998b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae99e6c-8e2c-4518-9db5-14936d40bc85",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ca9d1a-084f-4c17-96ba-34851b96226c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e79f47-0b1d-43c5-b7df-0db7bdcc3d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4fcf6a-b260-42bc-998a-1d2a55d09209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ebf089-269a-4266-8365-2e715cdaf323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2d7596-5bab-419c-845e-786ab5d84508",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a55e74-03b8-4cfb-aeac-a421e66dced2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69bb2f7c-4f36-4f02-a43f-fe7469dd7585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4167311d-160a-4c6c-8f41-92bf7259282d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b905b915-d9a9-46d7-9f70-65bcec5ad6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3844a7-fca3-4d60-940c-4291a3d0bc8f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bfd3f7-20b1-4558-9dfd-e811a2c009be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c5aa793-db62-472e-a1d8-6a33e12ecdb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9827c0e3-a5cd-4201-a5a1-827f45851fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2c7b10-100d-46ab-9abb-5414548d086a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7592bb-1017-438b-84ff-519be4144e4c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ccab57-981d-42bb-84c3-a61d74d6c591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2149c87b-d346-4011-9bbc-570185b84539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bbfcaa-d5b9-4409-bdd4-ea4148e3f267",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2073a0f-97aa-4582-be52-9a38d7bfa44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384a71f4-e3b1-4a9c-9fdd-1a60aebb7f8e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3c124b-7ddc-4a0e-8c4b-5c446f0b3520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd20471-a1a4-4f97-a8b9-1e6d630faad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2892699-3d1c-4a25-9e2e-c43e504174ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a220f643-dfc8-46cf-aebb-0760a9ca200f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97aacd5e-f88b-4d96-9322-dcb675a35a02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a3ee4a9-3b77-4d2d-877a-b7158e802bbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a4ec147-cd60-462e-aa06-3254e1473edd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9aa2e1c5-b7c5-4159-ba16-108eb253467c"
                    }
                  }
                ]
              },
              {
                "id": "171efc7d-92a6-4d72-8d8b-a721ae1be2ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95df7e24-5bce-4c3c-8e15-fecf50c118b8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9fb49b-f3a7-4ba8-960c-1b65267c54dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e1e0c223-138e-4ca5-ba52-e5bee74b7bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4af5df-affc-4564-b309-07f83cbfe5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5732aea-de6a-49b3-b13c-126fa14b5426"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbdb628f-15e7-4b5d-b6c8-1fcb4f6cbc01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fa25247-8124-47bf-98ac-3718d8b765b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eff6ac5-a75d-4b0b-af0b-7c4380302efd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3228569f-3b59-4ac9-99d5-aaf2817824a7"
                    }
                  }
                ]
              },
              {
                "id": "3ff9b139-1a6a-4a3b-9053-9f67a9445956",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ff52f6f4-1830-4155-a0d8-875019b00e8b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af6f871-a513-4f1c-8404-17b3ba7753d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7a0992be-1dfa-43be-a4f3-4de7c6a83ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a34bf86-1e82-4b4f-b3b8-7f771413f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bace2d3e-24e4-42ca-b62f-e4255ebbc7bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c76958f-c885-4fa3-84c3-8f15c5b66ef4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a59be95-70d7-4ee5-a5ad-2c4cfa594196",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5f5b107-ebf0-431c-9f00-388c176b1c1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "845f3b35-8eba-4af8-8e1f-5d3bee8e5b53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3664f24a-41da-4ac8-b851-8d375324ac8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13bf6654-258d-46f7-903e-154fb3572c07"
                    }
                  }
                ]
              },
              {
                "id": "1ea9c877-609f-4b1b-a73b-b03f54715802",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8ca15c6-47f3-468e-8b6c-ffa6f356ebac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7bb2e0c2-54f7-48d1-a717-951b00e6baba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c031a7eb-ada8-4791-b9c5-a86f9d2fc873",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85d2bec9-0537-4575-b494-ad7b22ca046d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a6eb5de-d1fd-4da1-876d-1255faaee63c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0c579da7-9f3a-4d4a-9a54-61af4b0142d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3eb646ce-386b-4b51-86a4-e12d8342d542",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cb660bc-e2d9-4d03-a6d4-a3bccc294fba"
            }
          }
        ]
      },
      {
        "id": "6495243e-38fb-40f4-adbc-732d0dbc187a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0fb63155-9a00-45ca-aa0a-6f66353dfe33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f6df086-550d-4206-ada5-33f73e3383b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7576b5b-e927-4f29-a614-afa39f298017",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29c5fbc-2e05-471c-9891-4c6b7c81a150",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a7624c7a-9536-40c1-b82f-08d9e1932a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9b30e3-6a6d-4960-bd19-b8cc75fd859e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24d438a6-c16a-40f2-aa63-10babd528494"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8e4692-b8a3-411e-95be-0d72d2821e96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6eca4f8-8f19-4ebc-9158-a392a4530719"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aecdf217-f6b0-4402-9f29-7fed1078cad0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20a4f813-9eb9-47ba-abf1-416dbcbc7195"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53831e49-1eae-4d5a-a922-ee40355ec590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fabbfe99-9d21-41e0-a8cd-fda1d60ccacd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c265af71-cb90-40b5-8b03-0fdc63c32d09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4e4097d-7725-43a4-9360-60eca57fa2af"
            }
          }
        ]
      },
      {
        "id": "8f1dba21-a916-4e07-9a34-9798f95ce677",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cb2dbcf5-8d74-4653-96bb-e00b455bdd4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2352c474-3c3c-44c2-9f5b-2e805d1ce045",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48cbd770-12c8-47dc-a7f7-d3c476d69c1d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb79a5e-7d0b-48ed-9d0e-c844a89bfed3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2558ebba-da53-4d9a-a9ad-602e3f16f4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e780b388-bc6c-4182-8a8f-63f59876b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e408b3d6-a0a1-4b55-968e-9db62a377fde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d9d99fa-c2fe-44dc-b0cf-eee6a320428f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "514835ce-7e1e-4461-82ad-72ad5fec2a9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24c43650-f3ac-454a-89e4-7d02a5632e77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b6f1f60-0372-4ff4-a262-767f27a199c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3975bcce-ebd2-45d2-88c2-e4887651bd14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6b8a84e8-9f42-48e3-8fdb-0dc6fa5eff9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50486149-1c81-4dd7-a45c-0a0760958d58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1f0bbf5-24be-45ef-8d4a-f85cdf9ebbfe"
            }
          }
        ]
      },
      {
        "id": "4944f9fa-28a0-4dc8-ace5-d4cf3c18d383",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "36965190-dd80-4638-abd5-a3fd541972f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7369e8a2-ac85-4550-9662-6f33e5ab1e19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7234e017-2388-4986-bb25-10dfda3152a2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f662bc27-2fd4-4895-8ced-1f2091334ff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8bb836f-5367-4617-b772-9db579db9695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354e0de7-dfd5-4cff-98ce-33fe70352a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b571708b-ecbb-4bd1-bf1b-e4f746a1436d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50140a64-8fcd-4ffc-8d57-4a52d4718b74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00b0693c-48e2-4326-b67d-6a4078c7376f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bb10748-5574-4024-9c8b-1d1ee7e3426b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04675447-9f86-469d-96cc-adec346016b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "153c4563-aa4e-46f5-aa13-cc27c6512d4e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71ea321b-1775-4f26-b2df-aa29dadcb2cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fc36e91-23a2-427a-89aa-58554b77932c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c00339f3-864e-4d90-8cc6-57dc040b9fcd"
            }
          }
        ]
      },
      {
        "id": "afa2f33d-cafc-45ab-a453-f244dbd76fa6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "831b4d76-bb9b-4146-b6d2-4732c95a17f7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc0ac331-9606-47fc-b111-0921dd45f072",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d79ae112-6cfb-47e8-8706-000f0e985650",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c28edbf-0d65-42ee-a64f-f434ae7d542d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c206f4c0-64b5-4ac6-9664-2f646b7f65f8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 114.11904761904766,
      "responseMin": 7,
      "responseMax": 667,
      "responseSd": 78.84801606374263,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715387740918,
      "completed": 1715387780404
    },
    "executions": [
      {
        "id": "96334ad2-e162-47f4-b184-529a235edfba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a0471eb-766f-425f-970e-950c6d64740b",
          "httpRequestId": "b8ff613d-c6ad-457f-b00e-ff331d341670"
        },
        "item": {
          "id": "96334ad2-e162-47f4-b184-529a235edfba",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cb9271c8-288a-4f9e-b542-98b4ec21eec8",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "816e4323-947f-4b75-9789-602a6b5f665b",
        "cursor": {
          "ref": "848eada5-0bba-4643-9da8-90e3809efc2d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "22cdce48-dbfb-484e-8946-af29bdeb5a86"
        },
        "item": {
          "id": "816e4323-947f-4b75-9789-602a6b5f665b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "994b907c-7d74-4b33-9613-e79dce402b15",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "9bfc7994-87bc-4b7a-a923-ad58f97054f4",
        "cursor": {
          "ref": "7fdeb1e0-d3b9-4f03-8279-b6ec60e2fba1",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "164c0c12-e250-48af-bdb6-3662956b0ba1"
        },
        "item": {
          "id": "9bfc7994-87bc-4b7a-a923-ad58f97054f4",
          "name": "did_json"
        },
        "response": {
          "id": "70ff75f1-279d-49fb-951b-c372a3f717d5",
          "status": "OK",
          "code": 200,
          "responseTime": 393,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13b17a0-1d2b-4971-8452-b13af1d73405",
        "cursor": {
          "ref": "02188c1a-6ab6-4844-a590-9c5883d86452",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "41791a93-2643-4403-b933-59eadbd8ffa8"
        },
        "item": {
          "id": "a13b17a0-1d2b-4971-8452-b13af1d73405",
          "name": "did:invalid"
        },
        "response": {
          "id": "0315e93a-fab6-4068-9579-00a36bda8b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13b17a0-1d2b-4971-8452-b13af1d73405",
        "cursor": {
          "ref": "02188c1a-6ab6-4844-a590-9c5883d86452",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "41791a93-2643-4403-b933-59eadbd8ffa8"
        },
        "item": {
          "id": "a13b17a0-1d2b-4971-8452-b13af1d73405",
          "name": "did:invalid"
        },
        "response": {
          "id": "0315e93a-fab6-4068-9579-00a36bda8b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a67a63a-d45d-4a13-bed7-33cf62c4dd27",
        "cursor": {
          "ref": "0e936556-c0c9-4d7e-a5cb-6ec44c80c5d8",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "897323ef-946c-4c2f-97ee-0d4276b140e0"
        },
        "item": {
          "id": "9a67a63a-d45d-4a13-bed7-33cf62c4dd27",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f4a900fe-a0cc-451f-8f4f-4a8148d9a130",
          "status": "Not Found",
          "code": 404,
          "responseTime": 214,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400dab26-2d5e-4427-a633-2b7423955764",
        "cursor": {
          "ref": "ad141011-3261-4fe5-b4b4-b68adbb0df26",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bcd04acf-67f3-42e9-9e9b-c79bda37ccba"
        },
        "item": {
          "id": "400dab26-2d5e-4427-a633-2b7423955764",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "517cb5ae-b9d5-47cd-85e8-2b0e86d29bc2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164cfea1-256e-4fa6-83ae-f04234ff009f",
        "cursor": {
          "ref": "8e527bc5-b613-421e-8a13-f36ee269230e",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "605fc578-4036-4f54-99fd-1d3c239697b6"
        },
        "item": {
          "id": "164cfea1-256e-4fa6-83ae-f04234ff009f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2cd05f1e-6385-4496-aa8e-b90bcbf3a12c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34dce49-fbbc-4cb9-9760-12be7e99173a",
        "cursor": {
          "ref": "7c602628-0a9b-43b5-8ed4-4a2236a3ee0a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0b3a05da-a2db-46a8-a2a3-ba74f3b495b1"
        },
        "item": {
          "id": "b34dce49-fbbc-4cb9-9760-12be7e99173a",
          "name": "identifiers"
        },
        "response": {
          "id": "6f8732b0-8a33-4ce4-af86-3acc6f851640",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e522f705-dd89-413a-a3f1-8c02e0014f82",
        "cursor": {
          "ref": "794230c6-8080-4aba-974b-ae5e4b6f682d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "306ce172-6964-43a7-be8c-0a63b13c699a"
        },
        "item": {
          "id": "e522f705-dd89-413a-a3f1-8c02e0014f82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c85b40b2-95b9-4013-8612-11abc4204f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e16da0-f914-42bd-9a31-1add8da3606f",
        "cursor": {
          "ref": "9cc9f188-b8af-4547-aa44-4f1ea81771ec",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ea6a97ac-9994-4ef6-8fab-2b266963059e"
        },
        "item": {
          "id": "c0e16da0-f914-42bd-9a31-1add8da3606f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1f72b9f2-10ac-445b-aa61-cd7d574c30d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa2befc-0b90-4e38-a8c1-f456d1d0ff6d",
        "cursor": {
          "ref": "bf0f910e-4664-4627-a76a-53a2c231e542",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bdbdaec9-106d-452c-8ba9-919ef3a6921c"
        },
        "item": {
          "id": "dfa2befc-0b90-4e38-a8c1-f456d1d0ff6d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2f2e227e-9c98-4c6f-a3cb-f6ac3012663f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059a762d-783b-4520-82bf-c2edae5aa356",
        "cursor": {
          "ref": "f3b50606-bab4-4550-af41-79a7479563d3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3d6a9fa7-5f73-49c0-a24a-90afb59297ee"
        },
        "item": {
          "id": "059a762d-783b-4520-82bf-c2edae5aa356",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e09da01e-1811-40c5-9957-e03fbfe25350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28408419-92ba-47e0-aa9f-3e1e5b8426fe",
        "cursor": {
          "ref": "f9e2c84c-1b0b-42c4-8ffc-d8baa7278e96",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e46595e0-2647-441a-af29-e4c8a09d1a43"
        },
        "item": {
          "id": "28408419-92ba-47e0-aa9f-3e1e5b8426fe",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "68883db0-6c3a-4c6e-a968-58f8e8ca4bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f46d4e-1254-4dd2-82f4-8c23b9a53631",
        "cursor": {
          "ref": "850b42bf-7f59-4baf-8bad-849b08a0996b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ce5f728c-9124-4dd7-9120-467e59322ca6"
        },
        "item": {
          "id": "f8f46d4e-1254-4dd2-82f4-8c23b9a53631",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2d89b7aa-56a3-4b02-9d27-81044d905f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d34ba-04b4-4086-8307-cdcc53d3831e",
        "cursor": {
          "ref": "15748685-a64e-4350-a1f7-78819221d6dc",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "585ffd55-2bf6-4056-80d0-9a62b8e6ad2b"
        },
        "item": {
          "id": "a25d34ba-04b4-4086-8307-cdcc53d3831e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ae7e7496-f8f1-45b7-9f45-a4ad3ef0e48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e0716e-65ed-4fba-b6ca-fb76e596becd",
        "cursor": {
          "ref": "c909255e-f961-4109-875f-469d37d16fdb",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b734dae2-eac0-47f5-9910-fedb8fe6d6ec"
        },
        "item": {
          "id": "10e0716e-65ed-4fba-b6ca-fb76e596becd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b27bbd9c-4ea0-471c-997b-aa34e9a1c97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029767b4-5fd7-47f2-892e-377adeb4f9f2",
        "cursor": {
          "ref": "ba5046fa-9d9d-48d5-90f9-ef68ecc2e5ca",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e6b17302-8eb5-4f2e-bfe0-824afc0449c1"
        },
        "item": {
          "id": "029767b4-5fd7-47f2-892e-377adeb4f9f2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "09d33f1e-9753-4a94-9de2-9a7591d44a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da83544-f91a-4f8c-a818-e5e9802b4491",
        "cursor": {
          "ref": "6180a357-abf0-4724-badb-1563436f5571",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8b486e68-8e90-4be6-a343-d122b4180473"
        },
        "item": {
          "id": "6da83544-f91a-4f8c-a818-e5e9802b4491",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bec49560-e2ff-4ec3-a927-4b2d45cea101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3dad44-4e33-4236-8d81-12f910751a8f",
        "cursor": {
          "ref": "90cadad4-23bc-409e-8baf-07dcf18aff5a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6cd532db-c97e-411e-a0d5-d681070ec40d"
        },
        "item": {
          "id": "cf3dad44-4e33-4236-8d81-12f910751a8f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "29e59068-a33d-4e93-8736-45013ea9cede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0a9e3-c7a4-43e3-bfb5-01d03593e45f",
        "cursor": {
          "ref": "aaa7f5a9-1443-47a6-ab67-642a668d1e29",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b863d63b-f245-4c03-b6b6-1417cbebd9de"
        },
        "item": {
          "id": "b1b0a9e3-c7a4-43e3-bfb5-01d03593e45f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c50bb4be-56d2-4598-9660-c05e777ef85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17505823-51ea-4c66-bd84-e2d9b000de7d",
        "cursor": {
          "ref": "15300109-8b18-4fff-8103-7dd033835cb9",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4bee0a0c-2791-47a5-8835-99b0b1c3ef22"
        },
        "item": {
          "id": "17505823-51ea-4c66-bd84-e2d9b000de7d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e29f405f-5f5a-4074-8b3d-0f05919771a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f172266d-f99f-4002-a18d-8c328766e7d5",
        "cursor": {
          "ref": "cc60d9ec-628a-45f9-9fde-87f7f5c84a6e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3131e34d-ac51-4c59-91a2-066089de25e9"
        },
        "item": {
          "id": "f172266d-f99f-4002-a18d-8c328766e7d5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d4da468a-3d42-48dc-87fe-85b18158ae46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e83aee-988b-4a6c-b2df-63ae98f43ac4",
        "cursor": {
          "ref": "b60a19dc-5578-4115-a717-3c89ef9ecf6c",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a7d39324-1550-488b-90d9-ca394d764c37"
        },
        "item": {
          "id": "06e83aee-988b-4a6c-b2df-63ae98f43ac4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4f2a56a9-a42a-44a9-a62a-6b2bce60d8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e969d4-a270-42be-8a8d-cb5251e302d4",
        "cursor": {
          "ref": "6aacda93-07fd-46dc-bfd0-9f319f512007",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3d9812c7-0cf2-44b9-955b-598fc01a8017"
        },
        "item": {
          "id": "a0e969d4-a270-42be-8a8d-cb5251e302d4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "82c4d677-7586-42a5-b53e-14f02007c7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a23d41-ac63-4e0a-b897-4162e46b975f",
        "cursor": {
          "ref": "05077b33-b22b-4ad1-95d1-aabc33093b4f",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "27b938e6-0484-45ec-ba3b-a7c7f775ded5"
        },
        "item": {
          "id": "a1a23d41-ac63-4e0a-b897-4162e46b975f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6b0863a4-0908-482c-8589-9ebcfdfe9b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f31ba8-b63e-4c08-97f1-67ee7cd71022",
        "cursor": {
          "ref": "0df9b3a8-eddf-489d-8709-07fbad104f44",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "221eeb71-363f-40dd-aed7-8596e7b052ce"
        },
        "item": {
          "id": "19f31ba8-b63e-4c08-97f1-67ee7cd71022",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e150e110-9fca-49f6-9c87-359cc6a5c2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d45744f-b874-4a76-a866-29961dc5547c",
        "cursor": {
          "ref": "70d48c7a-4204-44af-bf21-a050154c1daa",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1add969c-6b09-4cf9-937d-a712c5296b78"
        },
        "item": {
          "id": "4d45744f-b874-4a76-a866-29961dc5547c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "80102fb8-1073-41ee-aad8-7217bbedf58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d749c7e-1c0a-4cb8-adc1-ca553a7144af",
        "cursor": {
          "ref": "1fc3641d-16c9-4af8-a6ec-c91674baa9a4",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "742f1d08-4467-4194-bc24-a8480422fd22"
        },
        "item": {
          "id": "5d749c7e-1c0a-4cb8-adc1-ca553a7144af",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "12d83989-d568-47c3-b133-5ffd0bfc0f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6249e7-a07b-4d45-850a-a96a5983778c",
        "cursor": {
          "ref": "613611d1-318c-4333-99a8-a607af7b0eca",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "911a707f-6d69-4af5-a31a-02972b5af784"
        },
        "item": {
          "id": "9f6249e7-a07b-4d45-850a-a96a5983778c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "930f741b-30f7-437f-a88c-876e6a163fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecb6117-47b5-4469-9d52-4ff6791023fe",
        "cursor": {
          "ref": "96be2ec8-4df8-460b-81cf-2eb49dfbccb4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e6c4453b-4655-48f0-9c66-60c99be1640e"
        },
        "item": {
          "id": "8ecb6117-47b5-4469-9d52-4ff6791023fe",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "de4fc55c-3334-444f-bd75-b42ec6aa7e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51214acd-e027-4a75-a844-4512faaf198b",
        "cursor": {
          "ref": "1bbcc28e-f8c6-48db-b06b-1aff426962d1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e098a9fc-92a1-47d4-9e06-40a45bfc14bb"
        },
        "item": {
          "id": "51214acd-e027-4a75-a844-4512faaf198b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9110cbe5-c5a0-40da-b2ce-de5558fbc403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42fe686-7ad7-42e3-9714-0b0fe02b157b",
        "cursor": {
          "ref": "f3e8bd62-2a2b-433d-aa13-64b4abba633e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e0b8186-7e9c-406a-968d-4b752d915dfa"
        },
        "item": {
          "id": "a42fe686-7ad7-42e3-9714-0b0fe02b157b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7311094d-230f-4e22-a096-792bd9502c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6780070-85df-40c0-b724-e1f25b69a58a",
        "cursor": {
          "ref": "586d1eb6-c71b-4832-b90b-b6eea05d6685",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c6e8a091-356d-4b24-9060-2ccb8e171cd1"
        },
        "item": {
          "id": "d6780070-85df-40c0-b724-e1f25b69a58a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "76af2890-d32e-40c7-88d6-e013a1f194dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eff6fe4-8a55-4bd0-9d73-1a4d088cb01c",
        "cursor": {
          "ref": "e497f625-b758-4bf1-aa5f-30e339f9cb8e",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9e25ce61-a915-4a68-b61e-22716afcedc7"
        },
        "item": {
          "id": "4eff6fe4-8a55-4bd0-9d73-1a4d088cb01c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5b9b5c69-d2d7-4ed8-b973-c3d11802b6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30264719-b056-46b9-a011-9f99f9a2738a",
        "cursor": {
          "ref": "d9f78e4d-4362-44db-b8f1-53d1efa513b9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e0cfd993-69b2-438b-8404-89868b7e848d"
        },
        "item": {
          "id": "30264719-b056-46b9-a011-9f99f9a2738a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4adf3d3a-8b39-4d59-a502-0085c025cc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75da9248-82a4-4afe-bf02-d6d4fd8c2a60",
        "cursor": {
          "ref": "6b68033d-9cc6-4cb8-88d4-c1209ed79b54",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4e8bca6c-d607-4856-98a8-37d98aca71d9"
        },
        "item": {
          "id": "75da9248-82a4-4afe-bf02-d6d4fd8c2a60",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "443adc60-428a-4b59-9421-1cb0aeb817da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e6a71c-128a-42b8-9d35-b4bea0427727",
        "cursor": {
          "ref": "892d5c38-d279-44bb-b9b4-15f476f52b7b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e32809a9-406e-49d2-87a5-b87775f3d662"
        },
        "item": {
          "id": "57e6a71c-128a-42b8-9d35-b4bea0427727",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "826ba749-f5f2-49d4-bc6d-903675f8efe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2188a43-879e-45cc-a6e2-1d029ff4739f",
        "cursor": {
          "ref": "3b514749-a698-41f8-9e7a-e6dcf6e3fc5b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8d08d171-e69d-4dd8-ab5c-0169108945d8"
        },
        "item": {
          "id": "a2188a43-879e-45cc-a6e2-1d029ff4739f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79f77e73-cd48-4602-8735-385984562866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8af600-6e2b-4afd-b8a1-e475202e0f78",
        "cursor": {
          "ref": "eed5c8dd-7fe6-470f-97e5-8618c1fd8b0e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d56244a-db40-4363-ba65-983fda6f94b6"
        },
        "item": {
          "id": "3b8af600-6e2b-4afd-b8a1-e475202e0f78",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "25b067a1-08b9-4645-aadf-053ad059a4b3",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fd66f992-8484-4057-a363-7ef49597c337",
        "cursor": {
          "ref": "b6f8adfa-84bf-4ad9-a790-f7253db13f5b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "53ba5856-cbef-4815-8af2-bb189a35f09f"
        },
        "item": {
          "id": "fd66f992-8484-4057-a363-7ef49597c337",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cf978cd4-448e-4373-bbff-8221acca0ae1",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a813bda8-1f44-4fef-899c-c4ef96b4d3a3",
        "cursor": {
          "ref": "7c2e4d8e-33c1-4258-ab9e-8b9da56303fc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "776d229c-b4ea-4c06-90be-5b26e9f33bc3"
        },
        "item": {
          "id": "a813bda8-1f44-4fef-899c-c4ef96b4d3a3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "63c0e622-f94b-4e2d-a08a-2432c7281c07",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2ecf106b-25aa-4a3d-9cb9-27e9bdb9a352",
        "cursor": {
          "ref": "b7ee2f72-d386-4a35-800c-4c1c0aa4a52f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8c64cc17-cb8b-43f0-8b74-935dc32e745f"
        },
        "item": {
          "id": "2ecf106b-25aa-4a3d-9cb9-27e9bdb9a352",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ccb48a32-4adf-4632-bd3c-79c505dc7f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71df981-c831-48fa-9d12-8d3cae58b617",
        "cursor": {
          "ref": "1927554c-6ce0-4e71-b928-040668b44d7c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "02da1d08-533c-487a-8258-b26c917710a8"
        },
        "item": {
          "id": "c71df981-c831-48fa-9d12-8d3cae58b617",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2453ad45-9426-4240-9b6c-3ce134c6f1c0",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f4355fce-f9c4-4b3e-94b4-326786e096dd",
        "cursor": {
          "ref": "739e6ab6-afca-4663-b33a-966463e78427",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bfebc7e2-ff30-4019-becd-d8672e4ac499"
        },
        "item": {
          "id": "f4355fce-f9c4-4b3e-94b4-326786e096dd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "71e7285e-e053-4726-81bd-84ec3b79767f",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bb65f31f-96b7-41d2-8b7d-d40e7ed3700e",
        "cursor": {
          "ref": "bfc128bc-c83b-4921-90b8-36369979df52",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "989078e5-c11e-440b-b4ea-ba38dfda66e6"
        },
        "item": {
          "id": "bb65f31f-96b7-41d2-8b7d-d40e7ed3700e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1ae1d992-c765-4f97-9e61-248f9a5ee066",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "67227233-9538-4f13-81a7-d818004a75a4",
        "cursor": {
          "ref": "5833c38e-d0b7-418e-a31a-882899b7d456",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f241529e-39c7-40c6-baee-05c089e19e3d"
        },
        "item": {
          "id": "67227233-9538-4f13-81a7-d818004a75a4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b2c18519-d2be-4af2-9a21-6f19b1aebe38",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "58eb6af0-384a-4b52-aa45-f9023ebce587",
        "cursor": {
          "ref": "2948cd95-a497-45a0-ab78-96f27bb7bc30",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b163f018-cf48-48c1-af16-46872b6e8964"
        },
        "item": {
          "id": "58eb6af0-384a-4b52-aa45-f9023ebce587",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "64a4c1bf-3e48-4321-99ff-ccec671dc970",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "85758d06-2d65-4ca3-856e-aab9ff92224c",
        "cursor": {
          "ref": "d67e2b33-6c1a-4e2f-afab-955a03054415",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1bd67e9d-ccf7-4410-9820-fa2027ba9850"
        },
        "item": {
          "id": "85758d06-2d65-4ca3-856e-aab9ff92224c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9a658113-621c-4baf-ac90-6fe607a3bcb9",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2387a3eb-29c1-4a96-b050-97fc50439706",
        "cursor": {
          "ref": "c6ae3e7c-c490-4684-a85d-f6b019f9caff",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fd57c355-6245-4124-807d-ba987775cb3a"
        },
        "item": {
          "id": "2387a3eb-29c1-4a96-b050-97fc50439706",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7e6aa93a-8ff6-4421-b039-e41b6a978550",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e3c436bd-1723-4749-b839-439d45143bc5",
        "cursor": {
          "ref": "4edd3f88-ef6d-42ac-b976-21d809f88b19",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4ab031cb-e976-4ec6-999f-078bf037c7e0"
        },
        "item": {
          "id": "e3c436bd-1723-4749-b839-439d45143bc5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "09ff653c-73d8-4448-bb04-28930d0f1d46",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3eacea14-8b62-4455-bce3-4148245fc2e2",
        "cursor": {
          "ref": "37d64415-a421-4cf7-b763-910fc2cc2ca0",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "993c481f-fc27-4409-a208-5c162a1b4f7a"
        },
        "item": {
          "id": "3eacea14-8b62-4455-bce3-4148245fc2e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "de98f45e-ff6b-4cec-98bd-5ee0bfb6579a",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9ceccc14-e91d-4d81-8a3a-e89f83469254",
        "cursor": {
          "ref": "84d0d38d-7d75-45cc-b7fe-72122bdf700e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "35c73265-65a7-4a63-bae0-39359de93ae2"
        },
        "item": {
          "id": "9ceccc14-e91d-4d81-8a3a-e89f83469254",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c869cd4e-a0b5-4565-ae0f-5809e6795bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eefcabf-3672-489d-a5df-68b412432430",
        "cursor": {
          "ref": "38752b0a-0cb5-4ca1-8567-acd2f478a4e6",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6354efa7-fdb2-4f61-9f05-74d6201cffcd"
        },
        "item": {
          "id": "3eefcabf-3672-489d-a5df-68b412432430",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0a9a1452-1927-4c3d-85e5-c2df745b9759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7df1ef9-790e-41e9-b3dc-a09893bfe2bb",
        "cursor": {
          "ref": "a394203d-44d0-4f3c-bc22-7225a12ed775",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ca7010f7-1a74-4ec1-8c46-a9ef3df873be"
        },
        "item": {
          "id": "b7df1ef9-790e-41e9-b3dc-a09893bfe2bb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "01af5f76-5a07-4bf1-b0ba-0e20f40063d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f09424e-70e5-49fc-9498-dde58852bb47",
        "cursor": {
          "ref": "453200cf-942d-4740-8859-3f4389f4a0bb",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa9d4444-4bae-4fe7-b75e-2870c22ef08a"
        },
        "item": {
          "id": "4f09424e-70e5-49fc-9498-dde58852bb47",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a15eea77-f7a2-45b2-bd63-6b2b049d4977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd25740-31db-46dc-b17d-ce6f70866cd9",
        "cursor": {
          "ref": "334cc952-ba3b-42f4-b3f6-cf666b359c23",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f2e3e258-0ec1-4fd4-8c21-d10eb6efb94a"
        },
        "item": {
          "id": "bfd25740-31db-46dc-b17d-ce6f70866cd9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "91ce5870-845b-4d28-a61d-fe2dc5246e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdd4e58-1549-4bb0-a773-16277a7172d1",
        "cursor": {
          "ref": "20b79185-53d2-4ec7-bd5a-caa92e6790a9",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cf7e588b-18a3-4d74-80ef-c31e420f252b"
        },
        "item": {
          "id": "2bdd4e58-1549-4bb0-a773-16277a7172d1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5ff849d8-d80c-4663-8efd-f67c9a756f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa26c6fb-afbe-42f8-b51e-2c30deb6c50a",
        "cursor": {
          "ref": "0b6e16d9-73a7-4262-ab22-9ce92a0abc1c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3a194a19-55ad-4afc-889c-d9580b14c29b"
        },
        "item": {
          "id": "aa26c6fb-afbe-42f8-b51e-2c30deb6c50a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "59f030cb-06b0-40da-b959-dacb770946cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6488386f-371b-4f0b-911f-d4bdced9a50f",
        "cursor": {
          "ref": "7fd2e86c-41de-467f-a4e4-d499b0287b34",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d4798064-20cb-43f8-88e6-5e61820e8e6a"
        },
        "item": {
          "id": "6488386f-371b-4f0b-911f-d4bdced9a50f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cb8b97f1-9eae-43b7-868c-7a5b8786a77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856cc774-6411-47cb-ab79-c2e1d9669b24",
        "cursor": {
          "ref": "eb76637b-b950-4931-a5ba-5038fc0bf7e8",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a0001df9-4edd-471c-ba53-754aae74a0b3"
        },
        "item": {
          "id": "856cc774-6411-47cb-ab79-c2e1d9669b24",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "02d41ca7-4fb9-4e2d-a7d0-0c1dc736f282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6f7201-f069-4363-ba61-e92667cb818e",
        "cursor": {
          "ref": "54a0300a-32ff-4f74-81b8-e79118ae0b34",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0f3dedbf-a330-49f7-b571-bcaff051318a"
        },
        "item": {
          "id": "9d6f7201-f069-4363-ba61-e92667cb818e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "04df4be6-3ff5-4b28-b12d-7a2ca4982e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09016da-edff-42c6-beea-528d87502963",
        "cursor": {
          "ref": "33e503dd-10dd-45cb-9db3-fe46b0ec291c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ed869edf-68fb-4cb6-838e-672663256a62"
        },
        "item": {
          "id": "d09016da-edff-42c6-beea-528d87502963",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4cd7d935-2ca5-4fd9-b25c-14b2784562a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd057a01-6468-44cc-a8cc-df9add90c523",
        "cursor": {
          "ref": "edc7ffb2-7326-4764-b94e-1ba76c0e3ab9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e119158d-57a0-46da-b3ec-c7d5fd4914b4"
        },
        "item": {
          "id": "bd057a01-6468-44cc-a8cc-df9add90c523",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "454c5713-b946-4ce1-9007-1b716fe59d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33988031-58c9-4bed-8b04-10bec1d1acc9",
        "cursor": {
          "ref": "44bc4ca3-de48-4d9a-abea-71884120f2cb",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c7c89434-49a6-4c11-a2d2-8ea5c357e764"
        },
        "item": {
          "id": "33988031-58c9-4bed-8b04-10bec1d1acc9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "40a91277-c017-42a6-a17f-ce4dc92dab57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5e4933-dd0c-43c7-ad16-78379528497d",
        "cursor": {
          "ref": "680bc0e6-9a58-45ed-a5dd-2f9a1a282f06",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "206abf62-e465-496d-be6d-5519a241124c"
        },
        "item": {
          "id": "ba5e4933-dd0c-43c7-ad16-78379528497d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4be3fa2c-9aa7-4fed-afb9-82095ad3944d",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "32f2e7ec-5b63-4a46-8df8-0832ce02de1c",
        "cursor": {
          "ref": "f81b2d03-cf24-4726-a563-3a7e2b64fa1b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "793b365a-5879-4ee8-bdbb-4f29090706e4"
        },
        "item": {
          "id": "32f2e7ec-5b63-4a46-8df8-0832ce02de1c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c7bceeb9-ae26-4f40-89a1-f181a98052de",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "24477f1c-d766-4b8d-8d4c-032d6f195d0e",
        "cursor": {
          "ref": "bd583e30-1731-4bbb-b37c-9b017e0dfa72",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a5e4abcd-f88c-4af4-99a2-a07b2afebd1b"
        },
        "item": {
          "id": "24477f1c-d766-4b8d-8d4c-032d6f195d0e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8f2aa93b-7dff-451e-be0f-cc3cb7a3f8fb",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d7c7d35e-fdcd-41a3-8005-d606b23fc135",
        "cursor": {
          "ref": "67b3998f-1a36-4f80-b0e0-2c838f563475",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5ac80740-eded-463f-840d-39c5986d8547"
        },
        "item": {
          "id": "d7c7d35e-fdcd-41a3-8005-d606b23fc135",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fb944c7b-fd14-46f0-a73c-29ff55c26850",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9d10c82a-5dd1-4055-9be4-fb1f3772172b",
        "cursor": {
          "ref": "383d9f65-f52b-453b-917c-56cadcf5f1b4",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "07680d28-9342-4d10-90ba-ecc31e012291"
        },
        "item": {
          "id": "9d10c82a-5dd1-4055-9be4-fb1f3772172b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6284e4ef-90cf-4f28-90e2-ee5b1d05722e",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4799054c-2f89-42a4-8227-c7697db2142a",
        "cursor": {
          "ref": "9a61d20e-d96e-46c2-9a7d-59ec5612b1a4",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5b301c1b-2c69-4c38-a534-e23c886b84f4"
        },
        "item": {
          "id": "4799054c-2f89-42a4-8227-c7697db2142a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "16ee15b1-07ab-406b-a0cb-1d6f928ef925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c45aec-a866-40c7-9b5b-9fa332139fa9",
        "cursor": {
          "ref": "dabe1dd1-0105-466c-9075-1f2b703c8190",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "952520b2-fb3d-4065-8145-d7cca38f1125"
        },
        "item": {
          "id": "f7c45aec-a866-40c7-9b5b-9fa332139fa9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1cafd8a6-2645-44da-bade-817efcacce8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4091d469-c367-4cd7-ab2c-619d63425a05",
        "cursor": {
          "ref": "d372664e-f183-47fe-9e18-052533de7523",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "818f8450-bc3a-4be8-b57a-920b6904b3ed"
        },
        "item": {
          "id": "4091d469-c367-4cd7-ab2c-619d63425a05",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a2119b1f-8727-4102-8b17-6e9236415e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922cb7ff-8228-4796-9d41-cbd8a29eefa9",
        "cursor": {
          "ref": "2fb52307-4ac3-485f-8b8c-010ff514ef56",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cf35c6c6-325e-48da-b3a7-2f2d9fdc6d4c"
        },
        "item": {
          "id": "922cb7ff-8228-4796-9d41-cbd8a29eefa9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "354ea75f-918b-4531-9696-c550bc093f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2ceacf-cc41-4f98-a249-db63b00d445b",
        "cursor": {
          "ref": "74161286-8aca-4e10-8779-46d67ce36eec",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2abbcd5e-effb-484a-aea3-bfd02a9b6f52"
        },
        "item": {
          "id": "1f2ceacf-cc41-4f98-a249-db63b00d445b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "507dae9b-4d1e-44d9-84bf-0f902239e664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8016e454-e2d6-4bc3-ab0b-d97d5886fcd5",
        "cursor": {
          "ref": "3a02278f-620d-49d1-a67e-f7391f0b5b81",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d6bd9db3-1edc-41ca-aa50-10280736868c"
        },
        "item": {
          "id": "8016e454-e2d6-4bc3-ab0b-d97d5886fcd5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a8fa2dd8-c1a5-4fc8-9bac-2a21c8a4357a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5f90c1-a970-4fea-b3d5-1d0b89952a88",
        "cursor": {
          "ref": "c2f66a4a-6c02-4f31-bf9f-8a130a8f50cc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fdb955d3-5b9c-4b73-adf9-c006debce4fa"
        },
        "item": {
          "id": "fb5f90c1-a970-4fea-b3d5-1d0b89952a88",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9facf226-8905-4f52-86b9-b8ef1a6abeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3497c04c-9d27-4e89-af5b-a6539bc4b89d",
        "cursor": {
          "ref": "532817e5-1928-4c0b-a7fc-4b42dae754e7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6c8f11dd-9ccf-428c-8987-c14be42f9e54"
        },
        "item": {
          "id": "3497c04c-9d27-4e89-af5b-a6539bc4b89d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "719337e0-6c1d-435a-9f9d-0692f835dc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ceb628-6c6f-4710-8b00-bcaa3314599d",
        "cursor": {
          "ref": "8ba66c8a-6ac7-4e33-8aea-c531fa097ea7",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b97faf45-db4b-4d80-a5f1-ffb46281c0da"
        },
        "item": {
          "id": "e3ceb628-6c6f-4710-8b00-bcaa3314599d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1e62a245-9907-4bb4-b455-372ecb520246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07dd828-87f6-4ac5-a3a3-dec5d0a88057",
        "cursor": {
          "ref": "a7d530d7-653e-465f-abef-942a90f1a3ea",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "71c05067-963a-4b54-9b4f-7be45d9d3b5a"
        },
        "item": {
          "id": "f07dd828-87f6-4ac5-a3a3-dec5d0a88057",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2c69a7f3-bc54-4298-a193-a019f29e553d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee20bd02-0545-4d60-8f2c-8974890af65a",
        "cursor": {
          "ref": "056f93cc-3aed-414f-a23e-d0518996cbd6",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8a7619cf-ef44-46a5-9c65-d224a2d7e0c4"
        },
        "item": {
          "id": "ee20bd02-0545-4d60-8f2c-8974890af65a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "be35ee56-7207-4108-8e96-5a1464a09795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9defe288-ddd7-4935-ac7f-19b605689715",
        "cursor": {
          "ref": "df5d681d-24c8-49c0-aaa4-2c326bda3cfc",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "02ca4e43-1dce-4393-b476-e274a7d9b45d"
        },
        "item": {
          "id": "9defe288-ddd7-4935-ac7f-19b605689715",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f4c253c4-674d-40fd-bc82-013f0baf8d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be577073-e36f-4484-9069-bc09a677b80f",
        "cursor": {
          "ref": "7f5a4ada-f536-42b5-b84b-221d2f70d391",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1331c8fb-eb4c-4df7-a471-695b0d37eef5"
        },
        "item": {
          "id": "be577073-e36f-4484-9069-bc09a677b80f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5d942b2d-d68d-4e51-887e-3e8a0733a333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07052258-160e-42e0-a530-0f370d0907f8",
        "cursor": {
          "ref": "a08a624a-2c1e-47aa-97ef-2b3b7cc0e5b3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c55a7e75-17d0-4e51-9a8b-8773bcce4786"
        },
        "item": {
          "id": "07052258-160e-42e0-a530-0f370d0907f8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "46edd107-577d-49a4-8ce5-7bc2ece6ff9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03ee429-7542-4fd1-872d-494e5396821d",
        "cursor": {
          "ref": "da88006b-01b0-4235-bb8e-d62de886fa0c",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f4756604-9b3d-4849-8065-7601e52adf74"
        },
        "item": {
          "id": "d03ee429-7542-4fd1-872d-494e5396821d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "eabe9de0-3ba7-468f-be93-ac94480c0eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b203cff-4f83-4be9-8b52-a77a0ac4c325",
        "cursor": {
          "ref": "058d1787-d77d-4644-a0ce-dfb6eae3eaae",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e39c0e56-0096-41cd-bf9b-357f0785ee5d"
        },
        "item": {
          "id": "6b203cff-4f83-4be9-8b52-a77a0ac4c325",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cab75de1-355b-4bda-8093-17f61a2fabf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfea05b3-1835-49cf-85b6-324b9aa75255",
        "cursor": {
          "ref": "d322007a-2716-4712-8884-2f3e868d000c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6c89c6c1-9291-4b39-a776-c7f2cb24eff6"
        },
        "item": {
          "id": "cfea05b3-1835-49cf-85b6-324b9aa75255",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "de9eed3c-7540-4275-ae6a-b2fb90d97e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78322ec7-8a94-43ee-a52a-396123825372",
        "cursor": {
          "ref": "ce09232e-7418-4b84-91ce-85824701031f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8c96c7dc-3ca5-4795-9c7c-2bbdd6a7f290"
        },
        "item": {
          "id": "78322ec7-8a94-43ee-a52a-396123825372",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d4b45a27-879a-4e63-b1ce-e14f0fbbda72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bafd00a-5f47-4e6b-a580-988848af6c5e",
        "cursor": {
          "ref": "259f7122-5dae-42e8-98e5-3c40a0d8ae10",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9323abdb-ee4f-48db-94e0-fc96be008089"
        },
        "item": {
          "id": "9bafd00a-5f47-4e6b-a580-988848af6c5e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "707acbd5-93f5-4d56-b2a3-6267b6697d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9307e641-8566-4496-9b16-ce5064036e5b",
        "cursor": {
          "ref": "95ef77ec-abc9-4398-9f9a-31e18ad62fcf",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c106ed93-f9e1-4f63-a5f0-a9d592a5b9cd"
        },
        "item": {
          "id": "9307e641-8566-4496-9b16-ce5064036e5b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fe8f6479-dee4-4649-96d2-f0e950f2fe8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bbe2b1-37f6-4f1e-8240-ef7855098389",
        "cursor": {
          "ref": "8ea46909-e6d3-4d14-ad9f-59bea3752591",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a252205f-ec8e-4ab8-9f3a-ec95f81c27e1"
        },
        "item": {
          "id": "25bbe2b1-37f6-4f1e-8240-ef7855098389",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "926111c3-7987-4d1b-a280-528ca2c721d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f3125c-0142-4121-ab92-78005c0c076c",
        "cursor": {
          "ref": "1abed0f2-5695-44f6-a5a3-e272648d235e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2a8cfc14-a121-4830-8439-62b943660c6f"
        },
        "item": {
          "id": "12f3125c-0142-4121-ab92-78005c0c076c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f3af05f1-02e8-4de0-acc2-5c934fd6a270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5565c1-3aee-453d-8c14-455f228a7699",
        "cursor": {
          "ref": "3358815f-38b5-4b3f-b442-4e6f4ae03c4d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "65a22eec-67c6-4e01-a3f2-1cef457a7105"
        },
        "item": {
          "id": "db5565c1-3aee-453d-8c14-455f228a7699",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b00717f4-0e9e-472a-b109-b5a8a898ac01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a532deaf-3838-44f9-a772-253f2740ff8f",
        "cursor": {
          "ref": "c01fd9db-c755-4e69-8a45-67f7f23f914a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bb5c0de5-28ae-4fb4-8aaf-11088be6c958"
        },
        "item": {
          "id": "a532deaf-3838-44f9-a772-253f2740ff8f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "edd34539-9746-42ea-8501-d6f25bed6cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab57efb-d34b-4736-b2b6-d18165bb8e85",
        "cursor": {
          "ref": "9480c123-ec79-4c91-8406-627fa2adb9e4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7e882e54-5829-446a-b89a-107a5910cf45"
        },
        "item": {
          "id": "0ab57efb-d34b-4736-b2b6-d18165bb8e85",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "93658126-fd8a-42ed-8fdd-1e1c7785b8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98512064-029e-4e35-b546-972a1baede65",
        "cursor": {
          "ref": "69c5e07e-4daa-4043-ac26-ace560f896b3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "34c6d0c9-7296-4c66-88b1-c39664b50193"
        },
        "item": {
          "id": "98512064-029e-4e35-b546-972a1baede65",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1238393a-9868-4bb8-a0ff-030860a1c7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1e3a21-72b7-4751-ac09-c7540d4d74c7",
        "cursor": {
          "ref": "0708b907-309a-45f3-90ab-b9ee216b47cc",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "81166d0b-110c-46fc-939f-b12b33e45e81"
        },
        "item": {
          "id": "9d1e3a21-72b7-4751-ac09-c7540d4d74c7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "06bfd1e5-8ed3-412d-9a46-bc6d66dbeed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d43e057-93d5-43a9-ae21-f6147b2034ac",
        "cursor": {
          "ref": "0f6e23eb-3cb7-41b4-8864-2820d3d0caa4",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f27ba89e-6fd2-4674-90cf-e2445ef2930f"
        },
        "item": {
          "id": "8d43e057-93d5-43a9-ae21-f6147b2034ac",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3e85d613-d195-4c6a-95c5-112a76646b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9089969c-4dad-4699-8aee-df9ea8f7db92",
        "cursor": {
          "ref": "5e66a2ac-da3a-43d4-87b0-bf931f8a5832",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7f830421-1cc8-4841-852e-e99b3170da54"
        },
        "item": {
          "id": "9089969c-4dad-4699-8aee-df9ea8f7db92",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0a2fc03c-8f32-45ba-94d6-f130b7a66869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4687b658-13e7-43ec-8d54-f2aee7d4ed57",
        "cursor": {
          "ref": "182eef9e-b320-4d24-9728-f8112b74884c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a144725d-dfda-4541-a356-142cccff82dd"
        },
        "item": {
          "id": "4687b658-13e7-43ec-8d54-f2aee7d4ed57",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bb9ce31d-18b9-4fc8-a7f5-04db22d1dc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ba8e6d-38dc-4d7c-bb04-78c6264bb5e4",
        "cursor": {
          "ref": "7b2d2d88-8cea-449a-919e-f76f3b0e4154",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3febd351-932f-4f00-9a9e-403d0b384c9e"
        },
        "item": {
          "id": "a1ba8e6d-38dc-4d7c-bb04-78c6264bb5e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2f299cae-1c51-4aea-a7e4-9798465be79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b5e474-1865-487d-ac30-2f2e2f6a8bd4",
        "cursor": {
          "ref": "852ed4b5-5092-43d3-b711-8aace7c54fa8",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7104c748-ffc6-449f-a7c0-326d62658820"
        },
        "item": {
          "id": "30b5e474-1865-487d-ac30-2f2e2f6a8bd4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "45f09bd9-920c-44d0-a07b-9c8b5a8dac77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee65afb-626c-4c05-a1d4-513cbbb3625e",
        "cursor": {
          "ref": "8c20cf62-b8b6-471c-992a-8355614d2a18",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0deb4604-d5d3-45cd-ae69-07e693e15c76"
        },
        "item": {
          "id": "3ee65afb-626c-4c05-a1d4-513cbbb3625e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1fd3d4d4-290a-47aa-9729-7922df38eea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cc2c0834-f946-4a78-a7f0-c9c2df366437",
        "cursor": {
          "ref": "de7bcb86-c105-42c1-b4eb-d43f90e019a2",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1dfbb9b6-0281-457c-b46b-59177c0f753a"
        },
        "item": {
          "id": "cc2c0834-f946-4a78-a7f0-c9c2df366437",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f35b911-66c7-4fd5-843a-9a81988244e6",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1e46c1-1ef0-49cb-826a-b7611fd12799",
        "cursor": {
          "ref": "c4b4f2b4-d896-45ea-ab7a-d7b7ca79c729",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "18ea5270-347c-4344-87cd-2d0021046d9a"
        },
        "item": {
          "id": "0e1e46c1-1ef0-49cb-826a-b7611fd12799",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d558ee4f-11dc-4108-badc-c34bcc9aa4c6",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be530c2-ae7f-4d31-b9e4-f36d0d223fe5",
        "cursor": {
          "ref": "fba89710-e5eb-4226-b2f6-cf66a657b573",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e20cadca-06bc-4cde-9f7f-139f751b5ad8"
        },
        "item": {
          "id": "2be530c2-ae7f-4d31-b9e4-f36d0d223fe5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9a59d9b-7267-465c-bacb-3d65b99296bf",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7027fbba-f57f-42f4-a77b-a6fe1b0e4811",
        "cursor": {
          "ref": "1ecd9893-6651-48f5-b9e9-4040e88f8b32",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cc738505-afbe-49ee-bcf7-5e4f32ec0e36"
        },
        "item": {
          "id": "7027fbba-f57f-42f4-a77b-a6fe1b0e4811",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3fd8f1e4-e66f-42ef-bba6-9f5a9a3d1ce1",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afa5ab2-1edc-4abc-b26b-79cd9900f9d7",
        "cursor": {
          "ref": "9f056088-7936-49ea-b87e-5d1990bb6814",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2270414e-00a0-4ff6-8bfa-48e8e0e0e3e6"
        },
        "item": {
          "id": "1afa5ab2-1edc-4abc-b26b-79cd9900f9d7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "011269b1-e3d1-4a99-8f04-9220393c80b5",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-11T00:36:00.878Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-11T00:36:00.878Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4d434ab1-ec88-4131-8f67-f9fd1724d7e2",
        "cursor": {
          "ref": "c593a9d5-166e-4335-9dd2-c4a6167e5825",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "516006ca-5367-42d9-a209-6237e0bc52e2"
        },
        "item": {
          "id": "4d434ab1-ec88-4131-8f67-f9fd1724d7e2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d51e5bf7-980e-4d62-8b2d-1bcdf7cad5bb",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8dd2c4-6f07-4251-953f-48502d871669",
        "cursor": {
          "ref": "c3799557-2af2-439f-8966-50b36080f985",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3d65a4b1-c43f-4192-aca9-8db51358b485"
        },
        "item": {
          "id": "fa8dd2c4-6f07-4251-953f-48502d871669",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3050829f-1032-4735-8301-f462803c6012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc50f6c-4e85-493e-a3bf-4945b3653283",
        "cursor": {
          "ref": "a1882e1e-35d3-49b3-90db-97df5e806025",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c40bf68b-d3cf-4ec0-a71f-4ee88d652f28"
        },
        "item": {
          "id": "acc50f6c-4e85-493e-a3bf-4945b3653283",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ae3ba98-016c-47f0-a575-74e2ed38a1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861dc718-39a5-44d6-aedb-c914520b64f7",
        "cursor": {
          "ref": "91f0138c-65ee-46a8-9dae-0e677aa6597a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7fea9ea1-8ee5-409c-a44e-6820e1fdf3c1"
        },
        "item": {
          "id": "861dc718-39a5-44d6-aedb-c914520b64f7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d7dbe413-e4c3-44c1-9fb2-989fa821702b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4148505-4252-4fd5-8550-2c75b9892574",
        "cursor": {
          "ref": "af544186-329d-4fbc-be4f-b0d15592560a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a70429c5-093d-4eab-8672-75c26c6f00d5"
        },
        "item": {
          "id": "d4148505-4252-4fd5-8550-2c75b9892574",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9d8fae17-888e-4ea4-bff2-3b1b3841a05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bb5e2b-b31d-4b2d-8b6d-d5b9c0a8cdf8",
        "cursor": {
          "ref": "16bfaa39-a1a2-4fb3-b639-8e13ffd9bd53",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "67032c06-87ef-4e85-99ef-b5bd329dac37"
        },
        "item": {
          "id": "19bb5e2b-b31d-4b2d-8b6d-d5b9c0a8cdf8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "acef0206-6fe7-4069-9167-963ea61340b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b238c3ff-7475-4f37-9a50-748055deacec",
        "cursor": {
          "ref": "74c8136a-040d-4499-b397-de465ee7141d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0c08d763-95a8-4a08-ad43-8a1d4deaf8d0"
        },
        "item": {
          "id": "b238c3ff-7475-4f37-9a50-748055deacec",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e3084ec7-a51b-4ca5-a72b-8c85abffc4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67023b8-58fd-4ce6-a557-e94793d81dfe",
        "cursor": {
          "ref": "e1e27741-d7ca-4082-9f42-4d0f655afe6f",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "165537c2-1518-4566-9387-e5e2384eeadb"
        },
        "item": {
          "id": "c67023b8-58fd-4ce6-a557-e94793d81dfe",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d1104da2-a1b6-4372-9e85-cbdba67c5ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e0e12f-8062-455d-bef6-eea652edc9c9",
        "cursor": {
          "ref": "416cc428-d652-4959-8036-c705f38c7970",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "29bf32ca-7e5f-4d03-b873-d38bbc54859d"
        },
        "item": {
          "id": "89e0e12f-8062-455d-bef6-eea652edc9c9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eb70f6be-61e6-447b-8c8a-304705496b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998e11d0-7250-485b-b24b-662c45f4aa50",
        "cursor": {
          "ref": "5472c1e8-b6e1-4ee3-93f2-756b383eb550",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1b7674d0-6980-41fa-8aa2-9f8bc4819ae0"
        },
        "item": {
          "id": "998e11d0-7250-485b-b24b-662c45f4aa50",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eef32be0-2bfc-4e7f-bea9-dead2a173b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27e5356-e08b-4120-8cc0-34a695dae885",
        "cursor": {
          "ref": "40fa36df-f136-4340-8d71-b24b1eb7ed6e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b3fee5a3-6c11-433c-a1fa-4fc1225ec8e8"
        },
        "item": {
          "id": "a27e5356-e08b-4120-8cc0-34a695dae885",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2da7817d-cf34-4fe2-acf4-42f9c2ef40f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833382a5-9b6a-4546-9c77-6e7dffe78514",
        "cursor": {
          "ref": "1254742d-8682-4bf0-aa60-0dca0d3d8e91",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d15ec202-5e7b-486c-a078-68495d400064"
        },
        "item": {
          "id": "833382a5-9b6a-4546-9c77-6e7dffe78514",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eb5e131e-c317-4583-b3e2-f315332bab07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbdf766-fff5-48f5-a95b-46168cbc251d",
        "cursor": {
          "ref": "f0479350-aefb-4b64-ac88-59bf45da0239",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5473f85f-fa79-461e-a500-754104ed29d1"
        },
        "item": {
          "id": "adbdf766-fff5-48f5-a95b-46168cbc251d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90cfed54-7590-4e3b-8915-12c219bc8de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b93e54a-3e7c-49d6-af20-4102b6d6bab8",
        "cursor": {
          "ref": "87d3001c-ac95-4246-8892-5974d66aa9a6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d6c746ca-9d45-46db-bb87-d7af8cdfb7af"
        },
        "item": {
          "id": "6b93e54a-3e7c-49d6-af20-4102b6d6bab8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "60c29169-70eb-42d4-84e7-044ea75204a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c84208-4fe7-4b21-aad3-6d3191457ccc",
        "cursor": {
          "ref": "ea2e56af-9c23-4637-bf0b-59ce8ef15ae9",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e0fa30b2-0139-4f64-8368-1eb65c57d9bf"
        },
        "item": {
          "id": "02c84208-4fe7-4b21-aad3-6d3191457ccc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "22c37858-c4d0-4018-890a-a4d89bbdbbe1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "54f20140-c718-41dd-80ad-722f2ab65eca",
        "cursor": {
          "ref": "49d2799f-9d01-44c4-9be8-32fd6c3df1d4",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2358e839-564a-4134-b95b-e58286cbf8e9"
        },
        "item": {
          "id": "54f20140-c718-41dd-80ad-722f2ab65eca",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc7d165a-65d3-45e0-9f97-4f9b7f34cd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ac3315-7ba3-4aeb-aff9-2b9c534e52d1",
        "cursor": {
          "ref": "32673c26-24b0-4794-89b4-70b27385c947",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1890f64a-9250-4dda-8d1a-f8c8d1cbe674"
        },
        "item": {
          "id": "17ac3315-7ba3-4aeb-aff9-2b9c534e52d1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a3d84cae-7f54-4c4a-9118-79b8432ef4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85147c6b-e5c4-4f54-b0de-3bfa0e41f837",
        "cursor": {
          "ref": "f009f3a8-01b0-43d1-bc4b-010bdf3a38b3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7463c8ed-fc52-4452-96df-b77d0b9b68c7"
        },
        "item": {
          "id": "85147c6b-e5c4-4f54-b0de-3bfa0e41f837",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1d3a94ec-d59b-406a-b53d-b9af474474b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a2c7b2-cfa8-4702-962e-658e0b494627",
        "cursor": {
          "ref": "0a8508c2-2e96-4cf9-86f4-60bef340871a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c6cfcda3-367d-436a-965c-380ecdbfaefe"
        },
        "item": {
          "id": "37a2c7b2-cfa8-4702-962e-658e0b494627",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7091804f-892f-4f3d-aaf7-2f3bad664035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087d2b78-9ef7-456d-a3b2-b8e68aea18d2",
        "cursor": {
          "ref": "df1eb39e-67ad-45b1-ac6a-8c3a425f1f94",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c5c79597-68ad-402d-81ca-6c4d1e28d7b6"
        },
        "item": {
          "id": "087d2b78-9ef7-456d-a3b2-b8e68aea18d2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65cff410-2b9a-4786-afe0-9473ce0f080f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e95e10-452d-4802-b4cc-821c00eb4476",
        "cursor": {
          "ref": "6261653d-e7fa-426c-a853-ab362c789b4a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7fee1eee-d840-43f9-8884-583b037fcec8"
        },
        "item": {
          "id": "86e95e10-452d-4802-b4cc-821c00eb4476",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "64bd51bf-286c-482b-9645-488c821cb81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f8fe9c-ad65-4473-abe6-3ab25da3da9e",
        "cursor": {
          "ref": "c36d6555-7944-4fe2-8679-e8b44beb8948",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dc2daf1c-8075-4147-9833-183e70425f54"
        },
        "item": {
          "id": "10f8fe9c-ad65-4473-abe6-3ab25da3da9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c16f1fc4-a50d-429f-83c7-33ac69cd2711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9ef5f4-59b2-4ec5-a2e5-135eb0a1c6a6",
        "cursor": {
          "ref": "e37f10f7-511b-43cb-8857-a1206f9f4ef3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d934b8c0-626b-411e-9648-04e6d0d2efd4"
        },
        "item": {
          "id": "0a9ef5f4-59b2-4ec5-a2e5-135eb0a1c6a6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dc6b626f-d60f-47db-9609-ce7fccfb7e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef609645-c386-4218-a896-e207222b48ff",
        "cursor": {
          "ref": "378e62b9-ccca-4be5-8062-a09c9c17cb6a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "15b36132-79b5-45ea-a439-57f861b67585"
        },
        "item": {
          "id": "ef609645-c386-4218-a896-e207222b48ff",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "21b455e9-827d-4eda-ab43-22e463bab42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23970bcb-d4c2-4634-b8d3-ad9d84396494",
        "cursor": {
          "ref": "6ebc9022-e697-4599-b9a4-22aad232f608",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a74d6655-4dde-474b-a1ea-67f4bfe7eb68"
        },
        "item": {
          "id": "23970bcb-d4c2-4634-b8d3-ad9d84396494",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8d00b8ca-e083-44bf-8697-dd64befacc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288b2e8a-aa7d-43bd-b5aa-7e317e1147c8",
        "cursor": {
          "ref": "2f27399f-d939-4a6d-b796-03a750bc021a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "52195b9f-0787-4407-95bc-e4e7fc379a13"
        },
        "item": {
          "id": "288b2e8a-aa7d-43bd-b5aa-7e317e1147c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1ede9bc2-bbfc-4311-bd81-689eb1cc27af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14e9970-a0ca-48c6-8ec8-8687edd4ca67",
        "cursor": {
          "ref": "7000cc65-100a-400c-b096-77067ab5a847",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "91fe850a-1494-43db-92a2-eab083effb51"
        },
        "item": {
          "id": "f14e9970-a0ca-48c6-8ec8-8687edd4ca67",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "98589c25-bd0a-46ad-845c-2ea79a9d0730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bf6aa3-15d9-4f03-9807-552842f94cb1",
        "cursor": {
          "ref": "2f1d744f-4e86-46cd-b2cf-373333f82122",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d0e065f2-09b0-4036-b3e4-83918376e2af"
        },
        "item": {
          "id": "47bf6aa3-15d9-4f03-9807-552842f94cb1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cc16df48-8bca-4877-bd87-df17485cb8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf44bd7d-432b-4f77-91d8-5f6f04ecd0a2",
        "cursor": {
          "ref": "b7ad15b9-a6a4-4ad8-9422-00902b0346db",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c1fb86e8-b4ad-4ae5-a297-769ba2ed312e"
        },
        "item": {
          "id": "bf44bd7d-432b-4f77-91d8-5f6f04ecd0a2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0e078942-e24a-42ff-81a2-66ad049489f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf1df95-8b6b-4741-a7be-5647b8cc3d83",
        "cursor": {
          "ref": "bf962adc-26c0-4c37-9a2d-9dabe9180f95",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4d83926d-2685-42cb-887c-e8415650b2ef"
        },
        "item": {
          "id": "3bf1df95-8b6b-4741-a7be-5647b8cc3d83",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5fdf9539-1978-4e43-a18f-977d07687b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7e0cc0-977c-494f-83ee-663449a1702f",
        "cursor": {
          "ref": "5b92ec00-f6bc-4e39-8061-2d2d25e871b1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c457a066-9cae-452e-9cc7-fc891d12eb3e"
        },
        "item": {
          "id": "6a7e0cc0-977c-494f-83ee-663449a1702f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "81b4ff7f-c56e-4752-829b-c4030a6269c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80ef7ae-b52e-419c-91e9-d81be5b63aeb",
        "cursor": {
          "ref": "843a1c7d-dfe6-434d-b71f-d3ae6cd99a42",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "58ddeba5-927a-48b5-bfd9-a206fa7906f5"
        },
        "item": {
          "id": "d80ef7ae-b52e-419c-91e9-d81be5b63aeb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "93b4a906-e48f-4f04-b16e-60cd76a277d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25ca39e-88b5-49e8-8003-562dc25dbd60",
        "cursor": {
          "ref": "906d4b38-7a6e-43cb-ac14-12864cfddef3",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "793cc649-9d18-436d-8f2e-6e66dbf55087"
        },
        "item": {
          "id": "c25ca39e-88b5-49e8-8003-562dc25dbd60",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ba2bc559-e57d-4364-8710-346b3cb9e683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082d3959-daf2-42dd-af1e-62d7aad1c270",
        "cursor": {
          "ref": "fda176ec-2484-4acc-a690-bcb2b0c4e764",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1578cb1-3cde-4e37-b7c3-d39bb141938d"
        },
        "item": {
          "id": "082d3959-daf2-42dd-af1e-62d7aad1c270",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0d29ff02-adb2-41ce-8756-ea81e0f9c322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcc764f-9a80-432a-84e2-b5b6bdfb951b",
        "cursor": {
          "ref": "effedbcc-2036-435b-a5cf-06d0ef8cca29",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b8affa3e-37e2-4258-93e1-70b81d56565f"
        },
        "item": {
          "id": "6bcc764f-9a80-432a-84e2-b5b6bdfb951b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f5ecf992-8386-4ae4-9e8f-2f0954b12482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53076f37-5f6e-48ba-a944-500bc3ecea7a",
        "cursor": {
          "ref": "f930de22-4825-4aca-a248-d1068cc507fa",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8b6cfac5-f8fe-4910-91a8-401067bd2760"
        },
        "item": {
          "id": "53076f37-5f6e-48ba-a944-500bc3ecea7a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4e38e12b-e69f-4ff6-b12a-117a07e79f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac410fec-542d-4e2a-82cc-d5b018ad5f5f",
        "cursor": {
          "ref": "fb9efc93-ae65-40af-a871-c42977bf2e1b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3fdb3b8c-751a-4f15-9c30-7aa8cefe8e35"
        },
        "item": {
          "id": "ac410fec-542d-4e2a-82cc-d5b018ad5f5f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "62488531-dfcc-4cfd-8f22-f9bb964ef022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a20d54-480d-42c4-bfee-8521ce746034",
        "cursor": {
          "ref": "7d7a9912-a3c3-41f2-aca2-3b29c3e5ed01",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f2c96412-a04e-48a9-a74a-efe96b123807"
        },
        "item": {
          "id": "23a20d54-480d-42c4-bfee-8521ce746034",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fa57585d-64f9-42fd-b8df-6f5bdbb37050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c9b63d-9ba4-48ae-a1aa-d82589bbe142",
        "cursor": {
          "ref": "caf19479-485b-48d2-b429-0073755d9ac6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0a7bd5a0-4745-4062-84b4-a52b66a3b2f5"
        },
        "item": {
          "id": "32c9b63d-9ba4-48ae-a1aa-d82589bbe142",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "eecbc4b7-e961-4b49-9cac-26a53836aa9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150f4155-cc64-4c6d-97d9-dd88415f40fd",
        "cursor": {
          "ref": "530b146e-769c-4520-95a3-b702dac26964",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "626f18cc-2fea-4952-8ab8-bb1daff15ad4"
        },
        "item": {
          "id": "150f4155-cc64-4c6d-97d9-dd88415f40fd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e3945b32-ec0e-46a3-9913-fb805bbc8b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bc417d-c0bf-46f8-adee-1c55c49fbc64",
        "cursor": {
          "ref": "226413f4-4303-46bc-8499-dd9ec8e209d4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "486fc9b2-bb0c-4ec4-9935-ceef891f39a5"
        },
        "item": {
          "id": "d9bc417d-c0bf-46f8-adee-1c55c49fbc64",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "58327434-1299-47c7-bd14-2b975d94912a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d12648-1b28-407e-877a-9f5f14a764a4",
        "cursor": {
          "ref": "43df3d21-bd38-4a0b-b9d7-79431dfc65aa",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0fde0409-e58e-4199-a1b7-261aea9ea088"
        },
        "item": {
          "id": "e4d12648-1b28-407e-877a-9f5f14a764a4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e9c99394-69ae-4d08-a98d-bc8da365a845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b47fb4-7214-4375-a6fb-fe8c9ac29590",
        "cursor": {
          "ref": "8c3d9b53-c059-4134-b25e-1a44fa54ac8b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "19cc4ff1-a76d-419c-907c-8c5c9e83b3ab"
        },
        "item": {
          "id": "d3b47fb4-7214-4375-a6fb-fe8c9ac29590",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e79efec9-72f0-466d-8b0f-29c182794c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52090d35-2490-499e-a3cc-bab64f29466f",
        "cursor": {
          "ref": "26884245-0ebf-4de3-ba17-bc80ebb03453",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a934e19b-cc5e-4f18-ad9d-ee009cfd61f9"
        },
        "item": {
          "id": "52090d35-2490-499e-a3cc-bab64f29466f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "43aed835-ea5e-4965-8e05-c3a9ca545941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7def4f9-06f6-4ef4-a36b-3a98fcf501e5",
        "cursor": {
          "ref": "f0a15c93-7bfa-4b7f-965b-f73d4383b2cc",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2cfb93f4-fc74-42c5-94a3-bdc6045c1385"
        },
        "item": {
          "id": "b7def4f9-06f6-4ef4-a36b-3a98fcf501e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "04c0cf4d-0804-4ab4-8eb1-ca5ad7b12578",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "76ccbee7-90fa-45e2-b5bb-4c82c4865d93",
        "cursor": {
          "ref": "b620acc2-74f3-4f5d-8d8e-b296dffd4cbf",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fb738b9a-9813-42fd-af92-baa7f580a9b6"
        },
        "item": {
          "id": "76ccbee7-90fa-45e2-b5bb-4c82c4865d93",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "82416555-1a5f-45bb-96fd-fafd1fdecd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4414a943-ee48-4d83-a8b5-a08cd650e6a3",
        "cursor": {
          "ref": "c03089ac-7d77-47b5-b3d3-45b927cedd7a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "95efd49d-17d4-4dbf-954c-2dd430b3f29c"
        },
        "item": {
          "id": "4414a943-ee48-4d83-a8b5-a08cd650e6a3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1a995985-b49a-42ec-a503-84e4a23524d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0194a8b-f2e7-4595-8561-f18f04c24dde",
        "cursor": {
          "ref": "8e86ea6c-775e-4b10-9360-167b19d8b4ad",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "94819617-ac34-4c21-a777-084624107e96"
        },
        "item": {
          "id": "c0194a8b-f2e7-4595-8561-f18f04c24dde",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ac91d0a-78a8-4e07-96c5-a74d2cd614b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a7433d-c38a-4a96-a510-d5dfa7b6638d",
        "cursor": {
          "ref": "29c0ed2a-9915-4cce-9c1d-7c3d6327de93",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d039ff23-b94c-4b5c-ac1f-c0a31bc179ba"
        },
        "item": {
          "id": "80a7433d-c38a-4a96-a510-d5dfa7b6638d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "14df36a4-d825-4ce3-ae1d-c9150c3432c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8001c2-3eb8-4ce5-8ad0-c69308e8161d",
        "cursor": {
          "ref": "bb3d11ac-5144-4c39-9a9a-df5838b7b8a2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8ab339c3-6c87-4ef4-a4ed-7a28fcdd2569"
        },
        "item": {
          "id": "cc8001c2-3eb8-4ce5-8ad0-c69308e8161d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a55c64c9-e739-48b2-a1c0-64a4ac036e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621cce1f-63dd-4170-a782-2a3c4265aa60",
        "cursor": {
          "ref": "d7234bcb-0948-42ee-9da0-556610c5f471",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "797e8219-8f6a-4e7a-b5bb-26e61f46418d"
        },
        "item": {
          "id": "621cce1f-63dd-4170-a782-2a3c4265aa60",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e0ae9952-f903-4057-b3ed-74254ad0ba52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decf88c0-66fb-4833-b655-d45504409f36",
        "cursor": {
          "ref": "27d03a10-d431-46d6-8bab-c0d7dd992b9f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ddc3e39b-032b-408a-b7dc-c771ca56580d"
        },
        "item": {
          "id": "decf88c0-66fb-4833-b655-d45504409f36",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7fecd90c-1606-40f6-aa30-6bd51595d02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04c2e46-bfc3-45f1-924c-4ae8d2765158",
        "cursor": {
          "ref": "988dc67d-5b59-4326-aa20-b141df95bcd4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3c360072-d9e3-4d1d-99de-5602c0d1f128"
        },
        "item": {
          "id": "b04c2e46-bfc3-45f1-924c-4ae8d2765158",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "70278a0a-b411-4452-864c-65f3c36fad25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2e5684-4109-40be-9aa2-8c0e7ce3d0ab",
        "cursor": {
          "ref": "d16ea5b3-8f53-4b5c-83bd-2972f6c020b5",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7157c6f1-8cc6-438c-9bbc-5732f4db8cb9"
        },
        "item": {
          "id": "6c2e5684-4109-40be-9aa2-8c0e7ce3d0ab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7d3c18d0-05c0-4367-aa64-f94ed78a15bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c158f2b9-e21e-4f6f-bd2b-db4b26855d49",
        "cursor": {
          "ref": "5829c245-83f3-41f0-815e-e3348ee576a0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e1f5ccb0-10d5-4e27-839d-e249a9c8e946"
        },
        "item": {
          "id": "c158f2b9-e21e-4f6f-bd2b-db4b26855d49",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "30870d46-7bfa-4f25-ba14-c7bc2d838aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c60629d-e42b-4769-be4c-a59297df9720",
        "cursor": {
          "ref": "4184049c-f84c-49e3-b3bf-2b44ed8324f4",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4b8cefcf-540f-4234-91a2-a3a87c251192"
        },
        "item": {
          "id": "3c60629d-e42b-4769-be4c-a59297df9720",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fdf158aa-96a0-46a4-8917-1ac4ce664fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4161d7f6-c2b3-4430-8b9f-9d71e2f87c53",
        "cursor": {
          "ref": "0efa484b-3745-4487-92de-919bea1f9257",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "78ce342f-aaa6-44b3-9c44-ad26cebb6687"
        },
        "item": {
          "id": "4161d7f6-c2b3-4430-8b9f-9d71e2f87c53",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b8b7666c-49cb-44de-ac0f-0250ece8cc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e87e50-c2ee-4411-84db-67fdf12662af",
        "cursor": {
          "ref": "2a86a688-de82-464a-9301-e3a7ce81aae2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5727dfbb-d775-4b4d-8d21-2761e84a5256"
        },
        "item": {
          "id": "64e87e50-c2ee-4411-84db-67fdf12662af",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e89003b1-5dac-4844-ac3a-f06d03ad73c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8b1744-d4ee-4594-ac6b-433ca5c2b066",
        "cursor": {
          "ref": "7eb8c295-f1bd-429c-a78f-257fdd983871",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "073b3616-b73f-4743-a454-da9e2613d8b8"
        },
        "item": {
          "id": "9d8b1744-d4ee-4594-ac6b-433ca5c2b066",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e6b1e83-15a0-47be-a3e5-f3593d6cd2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dd3971-8e65-4cb2-9141-cb13c0bb03fd",
        "cursor": {
          "ref": "d5ead232-286b-45af-a5d1-50e9e8116610",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "40cea2ff-cf89-4ad0-b519-c85aa23159b1"
        },
        "item": {
          "id": "06dd3971-8e65-4cb2-9141-cb13c0bb03fd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "43c142ec-efa9-4b1d-ac84-56e1f935ecc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a604453-9c95-4588-9bab-9b4280a3e1e9",
        "cursor": {
          "ref": "1f95bab4-212f-4f8a-b866-c5f3b3b46771",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b67fe522-ba87-4e65-a9cb-ce9fd7a290bb"
        },
        "item": {
          "id": "4a604453-9c95-4588-9bab-9b4280a3e1e9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "738b95ed-7d81-47d8-b5f4-480a97b895d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db07878f-1529-4e02-913e-16da20e9c2ae",
        "cursor": {
          "ref": "51cc48c8-6bad-4b62-89b9-4f1b0b0a6c3e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "59c2af08-959f-49ef-a735-100e9821f5d1"
        },
        "item": {
          "id": "db07878f-1529-4e02-913e-16da20e9c2ae",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3328c6b4-65a3-4bd8-a5c6-e0e9a4a80f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f47f03-b3ca-498e-a325-d25b8976bf1c",
        "cursor": {
          "ref": "0514330a-80cf-4530-b4c2-ee85095516ff",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "78e305b4-b9d7-48d9-aded-4d63cfa3dc73"
        },
        "item": {
          "id": "36f47f03-b3ca-498e-a325-d25b8976bf1c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9369d3c8-a4eb-4f4d-afa8-f119969db62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5cfe48-1e7f-431d-a692-0ba47c6e3371",
        "cursor": {
          "ref": "8a57ee53-35ea-4290-84e5-1eaa8020cea9",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5d9edf4e-5aff-4bcc-91ee-26a16f575528"
        },
        "item": {
          "id": "0c5cfe48-1e7f-431d-a692-0ba47c6e3371",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e520fc93-01d2-477e-bb34-c673f2035895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a2481f-282a-4648-a914-53aabec14cf7",
        "cursor": {
          "ref": "2aa5fe3b-f490-4e0f-a10b-04fa33e4fc11",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f8d526da-845a-48ce-9860-1bfb11c14268"
        },
        "item": {
          "id": "79a2481f-282a-4648-a914-53aabec14cf7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75a1bba1-6cee-4efc-bc8c-9235b3738b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c52675-c8d2-43bf-b290-724a7a4644af",
        "cursor": {
          "ref": "52ff911e-c9ae-48ac-88c0-13211fe483eb",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "256122e1-7420-43b9-a93c-7312586fcf3b"
        },
        "item": {
          "id": "62c52675-c8d2-43bf-b290-724a7a4644af",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da609b00-ce69-457d-85a2-f0c5788816da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bbb854-685b-4b26-bc90-2bce6f1a8598",
        "cursor": {
          "ref": "e55091c7-0d39-4db7-ac8e-e548d52b4da2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "42bc07e1-8fea-47a4-bc3c-72baac929cf9"
        },
        "item": {
          "id": "21bbb854-685b-4b26-bc90-2bce6f1a8598",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b75d5d4c-8419-4e5e-a9ee-295f60d13d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464ffb7-d06e-4ff3-8fd2-cd292ed4ead1",
        "cursor": {
          "ref": "bd652b6b-c17c-4249-9f12-02394179d40e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "859f83d7-f7c2-4af3-8e54-350967e78a03"
        },
        "item": {
          "id": "c464ffb7-d06e-4ff3-8fd2-cd292ed4ead1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "48b6315a-a5cd-4370-88e5-444de50bd3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac36f744-8a7b-4599-89f2-62aaa0b926f7",
        "cursor": {
          "ref": "c55045df-08e0-4257-8c27-68240ce54523",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7f3402a9-0c3b-4962-a0f8-a9831fe12ae4"
        },
        "item": {
          "id": "ac36f744-8a7b-4599-89f2-62aaa0b926f7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "60157d5b-9a1b-476c-9992-5010b48fe8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb87b38-04e8-4025-898d-d73fe0f1aeb4",
        "cursor": {
          "ref": "0c6d2329-a28e-4540-beea-9acfbf2aa052",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8d939a6c-b76e-4335-b389-d947862df73f"
        },
        "item": {
          "id": "edb87b38-04e8-4025-898d-d73fe0f1aeb4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "51232910-8051-422c-a273-89c3dd6564f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddfbb1a-1672-431b-b671-cee529c405cc",
        "cursor": {
          "ref": "56c5c012-a646-42a0-80db-102f33442c7f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b5aa01f3-12f9-478d-a98a-543bd0fd856d"
        },
        "item": {
          "id": "cddfbb1a-1672-431b-b671-cee529c405cc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d2c81370-d61d-4c9a-bc77-9d2b9aa95631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa8e4a4-42be-414c-b219-a65f4c9e2a1b",
        "cursor": {
          "ref": "eb7917b8-c39f-4c30-8cfc-68b7478dcf2b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c633c482-b54e-42c3-9b11-cf8de56e2a7a"
        },
        "item": {
          "id": "6fa8e4a4-42be-414c-b219-a65f4c9e2a1b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b5377cf3-50b0-4d4a-808c-f362ed73b25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297c018c-7c65-47b9-bcf2-81adcefd7b20",
        "cursor": {
          "ref": "bb943d72-af8a-46ba-954b-b292d7a2f962",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "822a09b2-ed13-4059-a797-8d9842051462"
        },
        "item": {
          "id": "297c018c-7c65-47b9-bcf2-81adcefd7b20",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7fcdde5d-a472-4ad4-b57f-1625457093a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d347cdb5-adf8-48a5-8fe2-8b61ca679183",
        "cursor": {
          "ref": "b632d177-3117-41c6-89ac-565dc46aa986",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b3da84c6-a61b-4b7c-908e-365e22749ee3"
        },
        "item": {
          "id": "d347cdb5-adf8-48a5-8fe2-8b61ca679183",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e4997252-993e-4df4-b826-cc391d9c4926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb8f540-cc09-4539-864a-fc103b4eb899",
        "cursor": {
          "ref": "10c1b018-c83c-48a6-9d0a-95092c2e32b1",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "48a15d55-7987-480e-a27c-1b6d1f626f35"
        },
        "item": {
          "id": "6cb8f540-cc09-4539-864a-fc103b4eb899",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e1b120bd-6d66-457f-b382-e2a96bebb653",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "7b54d945-12de-4940-88bd-60b6a68aaea8",
        "cursor": {
          "ref": "26751442-a33e-44c4-9ca1-00b5c1ce82b7",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ea8ecd95-15e6-4738-8852-1d40de1f4aaf"
        },
        "item": {
          "id": "7b54d945-12de-4940-88bd-60b6a68aaea8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8c0814eb-b474-4cdb-a10c-b3bbe008a014",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d7839bcd-562d-4952-87bf-b0491a769bc3",
        "cursor": {
          "ref": "9900eb34-b6f7-4ae0-b160-74c04ac535ee",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f49942fe-fa2b-4953-a3c8-5d203ec973a2"
        },
        "item": {
          "id": "d7839bcd-562d-4952-87bf-b0491a769bc3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1394cb32-c2c5-4ff2-b50e-7287c702acfc",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "eca63d28-7272-4936-993e-53e25050e7e8",
        "cursor": {
          "ref": "ed1bf661-d7b4-4910-adc8-46cdf518fecf",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e4d55f3a-c4e4-4cfa-8bb5-e90bf421da8f"
        },
        "item": {
          "id": "eca63d28-7272-4936-993e-53e25050e7e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "82aa2a8c-bc0b-425f-ab50-b45506f23d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee233bf4-0714-472b-b8fa-d6d9b4a73c8b",
        "cursor": {
          "ref": "9ec80f52-615d-443c-a95e-4ff53316a6a4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cb27d8ef-ad63-4b2a-abbc-bb9df1e0a2ef"
        },
        "item": {
          "id": "ee233bf4-0714-472b-b8fa-d6d9b4a73c8b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "aee38189-e229-47f0-8dbd-4142f8c97edd",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7059de59-c3eb-4e08-bc39-ada374434b61",
        "cursor": {
          "ref": "00edcfd4-50be-4850-801b-f7917b87736b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0a961fee-9c35-4116-8970-cb80ba0d6e9c"
        },
        "item": {
          "id": "7059de59-c3eb-4e08-bc39-ada374434b61",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d93b5cc1-2196-4bb6-8a76-c7a4e0f77a91",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "983e514e-9f9a-49b3-9214-2f5a905f270b",
        "cursor": {
          "ref": "dd4d4319-2f5f-4e0a-a34e-784d8087df27",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fe2ff8e6-16c9-4619-af94-5395354bfdc0"
        },
        "item": {
          "id": "983e514e-9f9a-49b3-9214-2f5a905f270b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3d472dab-56c7-43aa-99e9-64e6a4f63c59",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "eccd22dc-a0e7-42d7-883f-7f72358965fc",
        "cursor": {
          "ref": "3f9c5482-a2fe-4292-a5d3-f6942744819f",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4d162282-5169-42b9-8a62-74e534d22d32"
        },
        "item": {
          "id": "eccd22dc-a0e7-42d7-883f-7f72358965fc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e717d09c-bf0a-46a1-ba01-d9c106b4f27f",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "68defebc-b7b9-4fcb-a0de-d2df525faa10",
        "cursor": {
          "ref": "2189911a-5819-4448-9aa6-9d9cf3cc4923",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "09cfd478-893f-44d9-9ebe-383c944bf642"
        },
        "item": {
          "id": "68defebc-b7b9-4fcb-a0de-d2df525faa10",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e04cc03e-4306-4465-bbb1-9874d6cba627",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "451334f8-a084-4936-a566-fdfbdf17ff9d",
        "cursor": {
          "ref": "f92ceaca-0f48-48f5-aeec-ae990725fb99",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5ab977f8-3e90-42a3-abb1-1e306e2dd97d"
        },
        "item": {
          "id": "451334f8-a084-4936-a566-fdfbdf17ff9d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f1f8eec4-5d9e-43ea-b678-6e1a89413273",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "dc05ac73-ce6b-4f5d-910f-3bcc47c75593",
        "cursor": {
          "ref": "eda9afc0-6f78-47f8-a0f1-124d3d5a2df8",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "01843729-0d2f-4edb-a0ae-7dd251d5c6c8"
        },
        "item": {
          "id": "dc05ac73-ce6b-4f5d-910f-3bcc47c75593",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4300baa4-d5fe-4a7c-9745-c17f3ad3794e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a0ebaa-89ef-4227-988e-bec65f556266",
        "cursor": {
          "ref": "bba30c40-e08f-4839-8bf0-6df033c13709",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "342f986d-6668-4dfb-bf31-96891216bf21"
        },
        "item": {
          "id": "17a0ebaa-89ef-4227-988e-bec65f556266",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "245ffafa-907e-4e5c-8d8d-37873da8408a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ac2658-73c1-49a1-9236-7ef1c29b79b7",
        "cursor": {
          "ref": "08c7a76d-ddea-48e6-b660-eb56863bd84a",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f8084c54-7614-48c2-80a0-b34147f3c528"
        },
        "item": {
          "id": "95ac2658-73c1-49a1-9236-7ef1c29b79b7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "47885419-e98b-45b3-9fcc-e6a0c49000e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485763af-2fba-4642-8649-0c46fd87792f",
        "cursor": {
          "ref": "637947c5-b7d4-4782-98d5-af25b732b002",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5f85df34-b953-4a64-9d8e-ac811231d815"
        },
        "item": {
          "id": "485763af-2fba-4642-8649-0c46fd87792f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a757a87c-8444-42e2-bd19-c05022ed2dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a40027-d311-4b1f-9c3b-0d95a26b770e",
        "cursor": {
          "ref": "3b757caa-5245-4877-bef1-06d71669fa5c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5facf770-628c-4698-9db3-6431486714a6"
        },
        "item": {
          "id": "25a40027-d311-4b1f-9c3b-0d95a26b770e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c5376ad5-47a8-45db-a1e7-dc3a758b89e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ee2bbf-7a3a-49d5-9b6f-7db42a655751",
        "cursor": {
          "ref": "9ea4e983-e8bb-4f1d-83fd-1f457b5dad68",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "68cd0370-191a-4164-9dd7-1f389cf892a6"
        },
        "item": {
          "id": "c3ee2bbf-7a3a-49d5-9b6f-7db42a655751",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4ef48ba8-751f-4181-b123-259787647d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2210a3e-592c-466c-a7e7-25801699a9dd",
        "cursor": {
          "ref": "05287ed6-ff7e-4a5a-a01a-16e21ba19cf8",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c6c61ff3-40d6-4c11-9a70-e8843fa001f2"
        },
        "item": {
          "id": "e2210a3e-592c-466c-a7e7-25801699a9dd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "66914a95-08db-4a79-ba83-7d7b84f8d0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85607567-e9a6-449c-b5c3-81fc2d21d5ff",
        "cursor": {
          "ref": "8c9e4df4-de4a-4c24-89ac-fd62e3e869e4",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "042181f6-8dfd-440f-b583-7fe75912abad"
        },
        "item": {
          "id": "85607567-e9a6-449c-b5c3-81fc2d21d5ff",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5989a290-c2ee-483e-83b4-af496648dc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a191df8-80cc-40d0-91b7-dc0834ea3a5a",
        "cursor": {
          "ref": "4307e8dc-49ac-4052-be55-726e63d2a55d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "90503b7a-44ad-464b-847d-1b54b58873c2"
        },
        "item": {
          "id": "0a191df8-80cc-40d0-91b7-dc0834ea3a5a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "313f9adb-5cc8-46c6-a3a9-88554abb1ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbaf214-482b-4aaf-8dcd-71d28af2b68d",
        "cursor": {
          "ref": "ab9aec49-d5de-4f29-bed0-5809b05b9df6",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2a952724-b3a8-4eed-be42-3bf28ef989fe"
        },
        "item": {
          "id": "ebbaf214-482b-4aaf-8dcd-71d28af2b68d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c26b828a-fe37-4ac1-b170-693a9e5ff9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b358504-d9de-4828-8c81-838d0d5e9b22",
        "cursor": {
          "ref": "44b009b6-841e-48d8-bcda-81bd5fb06dd9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "23010997-07c7-4df0-95a9-79b4cc977258"
        },
        "item": {
          "id": "4b358504-d9de-4828-8c81-838d0d5e9b22",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e3776bf6-b96b-4259-85f3-d117819445ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72ec806-c4bb-4ee9-a9f1-d33923f3923f",
        "cursor": {
          "ref": "51dc4d09-55f2-4426-b0e6-d646403ee5d4",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cce3d798-ff87-42b4-8f88-af886544692b"
        },
        "item": {
          "id": "a72ec806-c4bb-4ee9-a9f1-d33923f3923f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2296d49e-47eb-4f07-a38f-f2431f158b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a69115-5795-411c-be12-23a678461640",
        "cursor": {
          "ref": "128a92ae-2a7a-45c5-b641-aae7a21d6bb0",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d2f782e8-963d-4a5c-ad31-4c11050ab74b"
        },
        "item": {
          "id": "d1a69115-5795-411c-be12-23a678461640",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9c0f3905-b92c-4b0f-8c9c-3d22883fc146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3446c77e-c276-4826-bc81-28b5f3f6b264",
        "cursor": {
          "ref": "d676d18a-de8a-41f0-a8db-7fec4932a389",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c91794f-1717-4ac1-9456-62876c3bf640"
        },
        "item": {
          "id": "3446c77e-c276-4826-bc81-28b5f3f6b264",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6396f420-0a33-4de1-b0e4-6f89f6da99d4",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "bb9f6f6d-4cc8-4b20-8aec-b31cd7f84fca",
        "cursor": {
          "ref": "2c2c8818-7670-46c9-bc52-490b75872798",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2f62c211-d072-49fa-b71b-a262d9c818a6"
        },
        "item": {
          "id": "bb9f6f6d-4cc8-4b20-8aec-b31cd7f84fca",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2b76dd3d-ba4b-4b75-a15d-13558730fb1a",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2fdd9a0c-bd1e-4256-a1e7-a7e0ec28383c",
        "cursor": {
          "ref": "c1bd39ff-6b66-4141-8427-d86fef90653e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "840fdb1a-361f-4d65-8c10-fc44f2955ab6"
        },
        "item": {
          "id": "2fdd9a0c-bd1e-4256-a1e7-a7e0ec28383c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "75da197d-092d-4480-97d8-0bfebe96f1a6",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "506844f4-7d07-417b-a48a-aea689dcb613",
        "cursor": {
          "ref": "75eeed53-f4db-4288-ae88-808235654c65",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a037466f-4483-4e93-b706-ef428dc9a2a5"
        },
        "item": {
          "id": "506844f4-7d07-417b-a48a-aea689dcb613",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "606863be-e453-4f1e-a1c8-507a36c81313",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "5bbec7f4-217d-4a71-bba0-96fc2b36223b",
        "cursor": {
          "ref": "c11f2b82-7c14-443a-a3cb-56f00d59b0fa",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "49c4102c-f27b-4ae8-8293-86e95211ec2d"
        },
        "item": {
          "id": "5bbec7f4-217d-4a71-bba0-96fc2b36223b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ff3d2830-d1e8-481e-88a0-fea0ae0947aa",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "d46c27f2-3031-4257-a5c6-bc98ccfe0f91",
        "cursor": {
          "ref": "661ce89f-6ec3-417d-bf13-b9f469e138ee",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "032046ff-86f3-4405-a0bb-a1cf9e0c6058"
        },
        "item": {
          "id": "d46c27f2-3031-4257-a5c6-bc98ccfe0f91",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "47978bc6-32fd-452b-92e4-0bcb34c83442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed607666-ef32-462b-af67-b9e1d6793438",
        "cursor": {
          "ref": "773b940c-d496-40ad-b950-03602251e519",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "af57cb39-b312-4d47-8e5c-e69a1ed0f324"
        },
        "item": {
          "id": "ed607666-ef32-462b-af67-b9e1d6793438",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2d90c485-acfa-4c3d-bccd-2c37e88c95d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac43723-db61-4038-95bf-f5843ae13f1e",
        "cursor": {
          "ref": "46eb8365-4c64-4845-b8d0-a8120e40251c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "84ab9a14-2102-451d-9f1e-3e75500493ea"
        },
        "item": {
          "id": "fac43723-db61-4038-95bf-f5843ae13f1e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "63e19d03-ece0-4cf5-a1a7-417da90713c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89df502e-a8f8-43ff-86fc-b6316545cc07",
        "cursor": {
          "ref": "ad1d4ecf-09a5-4b69-924b-92efa160b3d5",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d77dae08-3629-4f8e-a2fa-93987be12af6"
        },
        "item": {
          "id": "89df502e-a8f8-43ff-86fc-b6316545cc07",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fc33744e-dc70-4bee-85ec-bad919b63a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d373010-f1cb-43eb-8dd2-cf3fad0709ba",
        "cursor": {
          "ref": "93a1dcd0-8774-4851-a214-f91a4aedf6d2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b804694e-b999-4837-ad9d-bc332bcf5856"
        },
        "item": {
          "id": "2d373010-f1cb-43eb-8dd2-cf3fad0709ba",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b8d34716-c107-4801-8931-ad45c835c657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f67c92-916d-494a-ad56-8eec3f38a1a6",
        "cursor": {
          "ref": "2ccc55fe-8b19-473e-a0ea-eb0ba58a4f2e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "50c46e64-2412-4b21-a15a-8c67b25a19c8"
        },
        "item": {
          "id": "40f67c92-916d-494a-ad56-8eec3f38a1a6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f4918da-449c-4a3d-9324-d58521208542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3c2c60-bcec-4b64-92a6-a70acfe5a631",
        "cursor": {
          "ref": "ae71b6fe-b286-49ad-9788-f7e6e9d5a256",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b5c67ed8-9195-4ef4-9e6b-d10d8fb6dbbb"
        },
        "item": {
          "id": "bf3c2c60-bcec-4b64-92a6-a70acfe5a631",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ba596a6b-1c1c-405d-885c-301baa893a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede1e0d3-60e3-4ef6-89e5-ccd30f580e20",
        "cursor": {
          "ref": "0051f885-8542-4273-9bf6-8d68d8020d65",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "643c8c91-4c69-41fc-8ae2-82f1efd9bf37"
        },
        "item": {
          "id": "ede1e0d3-60e3-4ef6-89e5-ccd30f580e20",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f95d5de2-bf4c-4b71-b4aa-180bd2624bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b399d67-26b8-4c21-b2e7-dbc05a979968",
        "cursor": {
          "ref": "5052bf86-3099-40e9-947c-a88f5b508cac",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fff8c8be-7786-4c10-8652-3f351a7789b1"
        },
        "item": {
          "id": "0b399d67-26b8-4c21-b2e7-dbc05a979968",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e4ff7145-4878-4bf7-a80c-c2aff047c0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3157ce05-080e-49e1-b5dd-bbaa3d3f540e",
        "cursor": {
          "ref": "851e4b55-7895-46bd-a083-34954d5e9b32",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f9ddb186-d2f2-4557-998c-bdfab81bb349"
        },
        "item": {
          "id": "3157ce05-080e-49e1-b5dd-bbaa3d3f540e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bdaf8cf0-7461-4de5-8b9f-497dfd62e3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070dacef-7a69-43a4-a5d0-87ce06379a5e",
        "cursor": {
          "ref": "f172e902-41d6-4f68-a0d0-e636e4093b61",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9643ea75-505a-4d7d-9290-fe74e5ff7c8e"
        },
        "item": {
          "id": "070dacef-7a69-43a4-a5d0-87ce06379a5e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5bc957b6-d15f-465f-b8f4-e61e223c8fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071e1898-1d68-446e-a708-a6ccc5ce115c",
        "cursor": {
          "ref": "22f4220c-278a-4cbe-9bb0-5d30c2943e8f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8617807c-d1f2-478f-a844-226b2669db61"
        },
        "item": {
          "id": "071e1898-1d68-446e-a708-a6ccc5ce115c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f74216bf-b4ab-4d6c-a709-0c660644b59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba73198-9c93-4e86-9746-dd1d8321558f",
        "cursor": {
          "ref": "e1c9dedf-6d33-4a8c-b7cd-b090b94d02bd",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "612dc308-8637-43f6-8088-e6b64a4de642"
        },
        "item": {
          "id": "2ba73198-9c93-4e86-9746-dd1d8321558f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "36dd5d85-7208-47f4-98aa-c099f5a61e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fb980e-8b44-405e-b439-87236ae9d69f",
        "cursor": {
          "ref": "8ef5c809-9cae-4628-b6ca-e03f422dc970",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9cdba4d0-22fc-4bc9-af0c-e4d9c347f19d"
        },
        "item": {
          "id": "48fb980e-8b44-405e-b439-87236ae9d69f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fe38b685-bfcd-4017-9501-82b94795c597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1305cc11-3e9e-454f-b7a5-18ec04c23c54",
        "cursor": {
          "ref": "b4f6d8b2-2828-4857-a038-7b624f467c81",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "64307e31-6c76-42cd-b0a4-30e26da6e5ef"
        },
        "item": {
          "id": "1305cc11-3e9e-454f-b7a5-18ec04c23c54",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b70343e4-fccb-4c8a-8837-08a30921c812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c24dc3-e345-4399-b3f3-b22c9b68876d",
        "cursor": {
          "ref": "1c13c52a-41ed-4653-ac8f-b3d7bf9c2cf0",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aec7bc29-4f4c-45bd-8e40-836052b87b19"
        },
        "item": {
          "id": "27c24dc3-e345-4399-b3f3-b22c9b68876d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fdd9bc2b-b6b9-4cff-a896-7d422ce27cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a6a30f-060b-49de-8316-823a6e07e6bb",
        "cursor": {
          "ref": "05224072-01e6-4943-b98f-bc764c25a98b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "eec9007a-24b9-4095-8025-20659ffc9cab"
        },
        "item": {
          "id": "14a6a30f-060b-49de-8316-823a6e07e6bb",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "037ed8f5-7ecc-4478-8e7d-80bc158b556b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e449ffa0-7233-483c-9d5d-c9e3cf41290e",
        "cursor": {
          "ref": "792c12a8-9419-41c6-95a0-d8fde1216d31",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8be35a44-286e-492d-b596-212ae3be7c27"
        },
        "item": {
          "id": "e449ffa0-7233-483c-9d5d-c9e3cf41290e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9647e983-983d-48aa-acc0-86f4624282a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5952f1a1-1852-4a8a-b808-2a63be55ceeb",
        "cursor": {
          "ref": "8d20eeff-f450-454a-8212-596bc4abfb88",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c76556cf-9d69-4d5c-8656-736c11005b8a"
        },
        "item": {
          "id": "5952f1a1-1852-4a8a-b808-2a63be55ceeb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1f5b83ea-1da7-432c-8070-7a445f9b6273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd36102-19fe-47f0-b6fd-94d00d8d97b1",
        "cursor": {
          "ref": "3ad31502-9456-43ac-8dbb-6e3742740f43",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "11eb9f9f-c423-4f66-a003-1f5e8907fd35"
        },
        "item": {
          "id": "1bd36102-19fe-47f0-b6fd-94d00d8d97b1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8770733f-20a7-46b2-8961-33858676f591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b1c0cf-1e0a-40f8-bf43-da3d1b5bae24",
        "cursor": {
          "ref": "fae4f8c7-0c36-4d03-b473-5b2856743acc",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9a74c8a3-edec-4053-ac7f-32cbbd8a656a"
        },
        "item": {
          "id": "f9b1c0cf-1e0a-40f8-bf43-da3d1b5bae24",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "73e1095f-048d-496a-9a56-03d037e1f4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de49843f-297b-45bf-9814-270df2c43619",
        "cursor": {
          "ref": "916e662d-660c-4c92-85fe-4a3484a0d1b7",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "44790c79-8f05-4eec-9103-5e3aecd6be7e"
        },
        "item": {
          "id": "de49843f-297b-45bf-9814-270df2c43619",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "260ca23c-43e7-48c6-8481-15c5b518af8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd281c3-2c70-44c0-aacc-66778b16042f",
        "cursor": {
          "ref": "2934430f-36d5-484d-bc6c-fc94ee90ca20",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "35811c0c-db1a-4e65-aaa2-78d3e18e7585"
        },
        "item": {
          "id": "5fd281c3-2c70-44c0-aacc-66778b16042f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2e400614-dbbc-4f1c-9449-ced6a622b937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86403c5d-19c7-4d08-97d2-aa40f3ed007f",
        "cursor": {
          "ref": "a5db52b8-3ccc-4c6f-a16f-1e5442d59bcc",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "babf05db-23c5-4e79-aade-5c25b1c49f42"
        },
        "item": {
          "id": "86403c5d-19c7-4d08-97d2-aa40f3ed007f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "194bcef9-85c7-40f1-bd72-4333606115bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7656ac-6fa3-4789-a37f-f15a8b8307a2",
        "cursor": {
          "ref": "65a984fc-ff1b-488c-b6b0-a41ef45e66d0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "41a42edb-5682-4cfc-b366-b1d5e3465878"
        },
        "item": {
          "id": "2a7656ac-6fa3-4789-a37f-f15a8b8307a2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "73c6b901-8641-479b-90f2-17e705b535dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02dcf1d3-c3d9-4334-be51-2d42f27dbb19",
        "cursor": {
          "ref": "5403c698-6e35-4c64-98f1-8dd93319cf1c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cad1d5ac-226f-4635-8fec-23ac221ea9f4"
        },
        "item": {
          "id": "02dcf1d3-c3d9-4334-be51-2d42f27dbb19",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0070c317-d232-48ae-8df8-6c4efda4066e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bf0c2d-aaa6-414e-b759-de1d7c870f39",
        "cursor": {
          "ref": "d6cc7aa8-90cb-46d9-a032-aecdfe5683bb",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "188ff223-7bea-44ec-8e1f-6d96ee4da736"
        },
        "item": {
          "id": "c0bf0c2d-aaa6-414e-b759-de1d7c870f39",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "039ddef1-ca3b-4c73-aafd-a58b237a8b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6efe26b-0151-46a1-9a2a-2e7785f5c8b1",
        "cursor": {
          "ref": "12e82258-6692-405d-9819-28a4950d8761",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1467179f-7fa3-4bce-ae38-4e9a7cc14e7c"
        },
        "item": {
          "id": "c6efe26b-0151-46a1-9a2a-2e7785f5c8b1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "126d4533-f906-4aa3-ba0d-50c7f9e93698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda69fe2-081e-41a3-94fe-2dae60db4649",
        "cursor": {
          "ref": "fecff4f1-bff4-4489-b8cb-1eb74ce97885",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "587aa57d-4737-43e8-90df-c72c527da628"
        },
        "item": {
          "id": "dda69fe2-081e-41a3-94fe-2dae60db4649",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b6760360-16c3-4451-9aad-31c467435195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae99e6c-8e2c-4518-9db5-14936d40bc85",
        "cursor": {
          "ref": "80390a1d-ea85-4ff0-9117-7af9c76af2b0",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ba927bf2-4bd7-44e2-a061-4304e33c092b"
        },
        "item": {
          "id": "cae99e6c-8e2c-4518-9db5-14936d40bc85",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "97bc6b4f-3b32-44ea-8369-851cf2d850b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2d7596-5bab-419c-845e-786ab5d84508",
        "cursor": {
          "ref": "3b59ae31-0abc-4c67-bee3-dd3a3e3e9c18",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "26ca0663-c383-4e3d-9ce3-a837b5aea2d6"
        },
        "item": {
          "id": "4a2d7596-5bab-419c-845e-786ab5d84508",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "522fad8c-fdaa-4667-ad97-d780dbb6cacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3844a7-fca3-4d60-940c-4291a3d0bc8f",
        "cursor": {
          "ref": "640ecd81-5eca-4aaf-97e9-8eb52efcde68",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "284342a3-bd38-4b88-8de7-7d1edc8328b9"
        },
        "item": {
          "id": "3b3844a7-fca3-4d60-940c-4291a3d0bc8f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5dd55208-d37d-4799-b7a3-d4affc7ed77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7592bb-1017-438b-84ff-519be4144e4c",
        "cursor": {
          "ref": "3be43c6d-b6cf-44c5-8600-da9c776d4531",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0d915723-1797-41d7-bd06-37445096b781"
        },
        "item": {
          "id": "8c7592bb-1017-438b-84ff-519be4144e4c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8c581abd-7707-4b78-9d74-389a2daae242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384a71f4-e3b1-4a9c-9fdd-1a60aebb7f8e",
        "cursor": {
          "ref": "8f0ffc07-a0b6-4a6e-8a1e-527626ccc334",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "601544c5-5c69-4635-a8ad-ec79662b5107"
        },
        "item": {
          "id": "384a71f4-e3b1-4a9c-9fdd-1a60aebb7f8e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "362b457c-3384-4bc3-9473-6f2f3fe87017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95df7e24-5bce-4c3c-8e15-fecf50c118b8",
        "cursor": {
          "ref": "c4d05e7e-241a-48f8-9dca-02d737155cfb",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b30c1626-b5b8-4c8c-9c0c-3885c7c5e70c"
        },
        "item": {
          "id": "95df7e24-5bce-4c3c-8e15-fecf50c118b8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "48235808-7f69-422c-94d2-fed060e174cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff52f6f4-1830-4155-a0d8-875019b00e8b",
        "cursor": {
          "ref": "f459f500-fb39-4fe4-b295-9a06251ae49d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fe862b86-1731-4f90-b443-b82f7945e64e"
        },
        "item": {
          "id": "ff52f6f4-1830-4155-a0d8-875019b00e8b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3c2cdc25-53ab-453f-88a1-35ba7cb33b32",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8a59be95-70d7-4ee5-a5ad-2c4cfa594196",
        "cursor": {
          "ref": "86274f53-6109-42cd-8e28-87ef41dd0c30",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d26e0123-3755-431e-8330-b2da30562a27"
        },
        "item": {
          "id": "8a59be95-70d7-4ee5-a5ad-2c4cfa594196",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7cdeadb4-6678-443d-8d8e-c558300d213b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea9c877-609f-4b1b-a73b-b03f54715802",
        "cursor": {
          "ref": "45afa235-cd5e-4aa1-ba97-601f4ccc1d4b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "59e5ddf5-c353-44aa-bffe-950b8c99d738"
        },
        "item": {
          "id": "1ea9c877-609f-4b1b-a73b-b03f54715802",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "79154ef9-d414-41cb-9f43-e68bc6984f32",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7576b5b-e927-4f29-a614-afa39f298017",
        "cursor": {
          "ref": "6ec7e71e-304c-4283-bf0e-3b0688aa1ea4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7a6a3661-15e7-4314-b1e4-b2b1eaaa1154"
        },
        "item": {
          "id": "e7576b5b-e927-4f29-a614-afa39f298017",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "39b77f17-cb79-481b-b6f7-22cfa11a2ef2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7576b5b-e927-4f29-a614-afa39f298017",
        "cursor": {
          "ref": "6ec7e71e-304c-4283-bf0e-3b0688aa1ea4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7a6a3661-15e7-4314-b1e4-b2b1eaaa1154"
        },
        "item": {
          "id": "e7576b5b-e927-4f29-a614-afa39f298017",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "39b77f17-cb79-481b-b6f7-22cfa11a2ef2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cbd770-12c8-47dc-a7f7-d3c476d69c1d",
        "cursor": {
          "ref": "ef69b2b3-967d-4176-a123-74fd615c1e68",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e37fa028-1e35-4b6f-bfc4-877876658bc3"
        },
        "item": {
          "id": "48cbd770-12c8-47dc-a7f7-d3c476d69c1d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b823b832-909f-445a-93f9-ae5d7562e893",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7234e017-2388-4986-bb25-10dfda3152a2",
        "cursor": {
          "ref": "ceeb7037-57f8-4f2f-a6dc-1a4c46229b71",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d2b3450-554c-4178-9ec2-439da3a5ddd8"
        },
        "item": {
          "id": "7234e017-2388-4986-bb25-10dfda3152a2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "efbb0c33-7d2d-43c3-a3f9-7415b2bec8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}