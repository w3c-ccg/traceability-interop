{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6e67d79c-4223-494a-b76c-ec225514a640",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a505bb85-414b-48a2-b123-3070821bfe26",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00ad2f3e-1be5-4144-b36f-68cf58323373",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "734c7098-0b60-4236-9dc1-aa8f60b7c5d4"
                }
              }
            ]
          },
          {
            "id": "ae15745d-fbe2-4de4-8df8-38b13efbe812",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5953c114-dc6f-40ac-8f05-290aeb02952b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84369b7a-af4c-4633-96b8-e7472aaf2ce4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1b425329-ca95-43d4-97a0-8b8dab93ecea",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8df2acca-ec9c-4769-8e53-39000b62d6dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "edce1310-6d6e-4dfe-93de-26a754fe781c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "036772a7-2480-45c6-9960-cf8faf21673a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f2bc43f-0781-4091-8302-5b634dfcea54"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9bd46b5-79ec-4b6a-9fca-82cf70d5fb18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f622b6ed-42a1-4822-92aa-4ee11f3087e7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "525c77b9-1767-4847-81cd-7ce36789092b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51878af6-86f8-48b0-85fd-de15ed8cea19"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd9f3c18-29a3-4870-bc06-34604b3f2e6d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7611c516-865f-49ae-a3e8-ec3ed8214cc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9c7be38-b566-4598-9fc4-1c8248deda8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb2b974c-73e7-4f83-9951-9adc1da76426"
            }
          }
        ]
      },
      {
        "id": "20c1df5d-f1f5-4b3b-adad-0bd44198d87a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2b4ad588-2d76-42fb-b50c-276ca0695d32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ea71351-c97c-44b6-a685-aac304a67821",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "82b37117-c1fd-4b60-b1b9-85d9ec086de8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d463957-c961-4b11-b094-8a1431f7aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88048c8c-d662-4765-baf0-701e2856335b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf988e6-b167-4994-b34f-f978ef1e97b2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb64a03e-0d39-4abf-8c13-ed80ccc477d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7622306-5ce6-4f8c-b635-749048dfa45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5fff9c-1827-4103-b105-d607610a02f1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83dbca0-b2e4-40b9-9453-3690b598838a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd7da76f-eda7-4171-978d-2012183d9ecf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ccc2715b-95dc-4717-be79-e215440938bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96111f04-1808-4c30-b2b8-b0499a7356d6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1ec15c-aa8d-4347-9faa-160b062a9a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffc30c73-26dd-4d56-8de1-940998a59c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5155eda-820d-4de4-80f4-3bdbbef59767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a4e46e-947b-463e-b2fc-198f14b21339"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d4ad1075-1659-4390-8785-d3cfec693633",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e5db5c11-8bf8-4536-ae3f-4acca296085b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a1fb4e2-a361-4b5c-94cf-af39035f39f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "67d200bd-fff6-48c5-9644-3d337abcc7f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcf673cd-29d3-45b9-9581-0cb19ffa4c07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "17b625b2-f916-450f-a496-f06b2a13fd3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfba4021-6ce1-4967-bd10-f73695a762df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c31abbc-87d4-427a-9b17-c8ced0ed12da"
            }
          }
        ]
      },
      {
        "id": "5397a294-0b94-4b86-b251-a6294d1dc268",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4524d6fc-3304-4f83-a21b-6b4dac0e2b52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4511e34-cacc-4e0b-be0d-68fe923f85db",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4608a87d-2e7f-40cb-95e7-2b1290173e68",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c05342-f2d2-4c3c-a271-72de4b28682e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e0639c-167a-4e78-ae91-641a70c06dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e18b1d-fc14-4e36-91bd-4b0c8f50b3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ccfd45f-6acc-495c-9388-e045ee9b95e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8553a3b0-4896-4af3-87a6-d460ccbd3021",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df0538c-ed43-4d6f-ac6a-9849e2715221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1062c9-0a39-4e24-ba1f-60fd64a76008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf05d2c-cfaa-4f18-8447-f37c95680961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0079be64-0b2b-4b21-99bb-90470fea3e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7656c76-78fd-4d67-a81e-c24cd0bb317a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6105731a-c7a0-40a5-83b9-7575be2a78ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db38eb2-7334-4454-bd0d-36393e8eda60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66e2e1b-76e8-44fd-a7d2-5da7a11df9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bd43b8c-44ba-424f-8c30-4328c728238c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b076be-99a3-49dc-867c-077b75dba49b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc9eef9-9f8f-49b4-90e4-0c72d12e43ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f358f59b-02ec-4112-8be4-7a4f73ac45f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c318c7-639f-4be6-9085-153e5c7cd8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55ebff9e-6fc5-40d5-93f5-f9fc1c9b8b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3add6af0-0515-4c85-a912-308e3657b1c4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b2f927-adcf-4e79-9a60-10ba63eb8e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7e354d-c47f-4cca-a79c-c1706878ebb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038b3ee3-291f-4859-b19b-e32bf89b81ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca2775b3-2d2e-49cf-b3d3-113bb5a6ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495d3ab0-de4f-4220-9649-d954f0b54252",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e06c19-9263-400e-aa7f-f50f7ec1576b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd933b6-dad9-4469-931c-c64f017d1497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087719c4-5a68-4a1c-8aba-c06594028f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "151653ee-e9c9-423b-9574-e30aa992f1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eed8869-2999-4776-8564-148be3c8b894",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a2b556-3c57-40e3-a7a5-9c208127d0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7359d488-b3d7-472f-8c3e-037f484eeb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2f0461-1014-43c8-8495-a52babfa51c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce92c3ac-664b-4a75-95de-0b7fb5ff4465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5914742c-a1ff-41a2-a3f3-82907c7fe959",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c219f76b-fb60-4e8d-8757-a925a9c7fa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2103f44f-749b-4c29-83b2-62fc310d0fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ac2132-d0ed-4a9f-8dbc-c1a25be5deaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9851617e-37fa-4a5b-b6c4-be99c4b0dad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25191719-beec-4c95-b322-78d22298548c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef4e1a6-a1d8-4be6-9cc2-0efffa88e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f6fb9e-bca1-4495-8619-f8daa90b754d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b22ab26-2c0f-4a03-92e7-698a13492ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84e27908-a4f0-4fd2-a9b2-5e94c354ea5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18fa529-d704-4d4a-a0c4-152807920205",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb816b89-e555-4a81-87e9-100b5dd431f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fed129-b9aa-49ee-b0f7-2b785c82f62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eec1c5-d1a8-4ad0-b0c1-b31849eb4192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db35bb14-68d6-44fe-ad97-7c27967d3dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4f24c2-9611-40c8-8746-979bc893abf0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19111766-154c-4bfc-bef2-8142c2ad598a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7952f52-814b-4b20-9fb0-1d99e70c3bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e4f650-ffd5-45ae-bfaf-493e619776ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df3c557d-3c55-4f56-b07d-0564cc1eaa11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b432fd-15a6-4587-b796-b6530177f382",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e92e49-1c5b-40d7-8f7b-6d1edc9262ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae7904b-e51a-474a-8c29-6bc365723fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b008579-7295-462c-92a2-6ceccad94bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa5dcde7-37ce-4afd-a89c-28fa44fc6111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6544fe52-ce72-44ef-a7e9-38bb099bda47",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db38d35-4f2f-4484-8eff-deb2c29c60ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167d5215-82cb-4f35-b706-abf488bc1336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796918be-bef6-43e5-a43d-eba4fd669ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eeba1e4-c413-441d-9042-cfb05739ca68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996cc834-a7ac-47ac-9534-5e05c5747748",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fe6487-2383-47f6-936f-dfe6011d68ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f3faa5-6d1b-4045-ad71-d8c75f15c55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79129b66-4d18-4ce3-8fe5-d321894b465b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f4a2fbe-3628-4c09-9bd3-b398d902a188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9d89c0-33e4-4b59-9fbe-912306551bfb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88926e2c-6224-4324-b1fb-5dbfbccfa303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0643531b-de4d-4bc5-b345-940aa6cbabcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0aa8bfa-b5aa-450e-bf84-c9545af8ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cc21c94-f958-4301-b4f0-a7fdf330889d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f78ac37-6039-4b4f-bf17-5e0354cc6ca6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bc34dc-05a1-47a1-aa87-7371b27a09c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a619044-908a-4cf4-b955-e4babf764007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f58fa29-0ac9-41fb-9b6a-36d621e96f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e7ca2a4-7933-4872-8e6a-32a78d1b0662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddc831b-059c-4727-88f6-5830d2774f2f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35335536-ac3a-408c-aa7c-aee71109f608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc572c0c-a31c-4e33-9012-2560553f4a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c8eea5-ca74-4238-8c51-304c9362af52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186c6f6e-f0fc-407c-b8df-17b7af661918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f06f30-c5a6-4186-8392-551b49dc285f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1552a0e8-0cd7-4ca3-80c9-26ce0a785b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122195f8-4cdc-4849-be14-8207840b8a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7528a8b-46ec-49f4-a4c6-c3344f759ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8dc024-ec06-4a6a-b672-f41c922bf1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f35a312-132e-4661-af72-551c7896e4ac",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5dcac0-b487-4ddc-b987-b4fe674b73e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3190936-ba55-4a8b-b7ff-878854f8191d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04afcbb8-7285-44f3-8a5a-39319186c4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26f0c3a2-a601-45da-920b-bc70ed2f7c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c35d9e5-edb5-4314-b3d1-ba370a9270f6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b97522-6223-4b85-8453-88af8bf1b1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d497754-e209-432a-bdc9-0beafce555f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2531a0-ec01-4415-9e6b-37a6cb6bc2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "856fffae-055e-41e5-944a-784a3a21cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41697517-0121-4a7e-8f68-fb5334e60979",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612410e3-83c9-4bed-bf12-62b9145018fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f13630-6f4f-4a21-a58a-8d8eaf6ce5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccce169-0170-4540-bf4f-a5b13cf4f406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97014f5-b029-4587-b3d6-b1649a93362a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725e6ec9-faf6-4376-9e71-20bdb7f006f3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c27cc2-efb4-4049-b0b0-3799253d3903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa43a3d8-9880-490a-bb18-f79c69025407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cff2a1-8d4d-4088-a7f8-173ed214a379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "104639cc-afaf-40d6-a238-ace3e74e2a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e8c9c3-28a3-4dc0-8a48-85906b8ea38c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb2afd3-c711-464b-a225-2e3149aa7ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02deed8d-811d-4a0f-a910-97cfa49195fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70b36d6-d21c-4337-bb1f-02f0469be2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67752bf5-6cdb-440e-8a02-231f35c077a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6166f9-f07c-4331-85bd-8eec814dcff6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd2acd6-07b1-4845-b612-fea8b6463e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33a47db-2881-4763-8303-1064ed1cfed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594d386d-63cc-4938-b436-36d45831b177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d959ff5c-b8db-4518-b0c5-db1e08dd0115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe00273-71a6-4267-a53c-7600f2018b78",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63564bc8-3517-4235-8f76-96d87618c6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdb8f90-54b7-4da9-9663-5c20fdb0c3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a39faa9-11b2-4aff-9c80-78c034b1ba0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ae7430-4247-415e-b8e6-f71d32b11207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15377361-fd96-4582-8498-8b994b11badb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8b0b10-2714-40b2-be76-b17880fe3a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e0a7bd-7d7b-494d-9483-dd4ee69e92ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3b0392-54b8-4b3a-ad6e-2970419950a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d336c47-bb7a-41e7-9ec4-f07fbf02ee2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af16ecc-988a-4524-812c-b46797ab7373",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a316c12-972c-42b9-b2b7-9206c0840d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83612bd-1405-45a9-b84c-a6700bf23624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c38a8a-878e-4cf5-af79-bdd61619961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7560a0ce-73c3-4cda-ba10-54dccc27ef7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d702c4a-89ac-4c9e-9876-870582381fef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913da920-3059-413d-a8ee-9795cfe263e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af2f78c-2c80-4a9f-85eb-de05e8be36f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab6ec62-b1f3-4cce-81c2-02ec87c1d2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "523d1a3b-7fc1-4ef7-bb6e-a718529becab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73019ec-d224-493d-9f23-73d1eeefb081",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5eb1f9-c08a-488a-8822-f3b3f3bdd8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3b3b6d-7c47-4fd8-bd4c-b773b9c1e1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe6f69c-e1ee-4aa2-824f-9f5f082afa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d9b2f2-7bc3-413a-b736-dd9167fcde68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396d2dfc-8cb9-483b-8814-55446cc5d232",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a24b5b9-a5f6-43a5-a58f-edcba561c527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd6007b-b64f-4be5-b266-a161c9e0b7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a0f411-e347-406f-8107-f2ed6290255e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c03751-a28b-4851-b170-1e3fe9633280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55139e8-02a7-479a-8634-6d83b7e512a2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef22c8b8-f028-4475-9a2e-72c489118a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aaa7927-afe8-478c-994b-6b7ba3ce801b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dd6f2c-9942-411e-ab5d-8ca162dac288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4f38fb-1bc0-4e74-befe-d8f1fcd397be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6806523-b625-4426-9602-188d21385f01",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d906b7f9-3e05-4c73-9cfd-480165ca1f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ad4d43-d13d-4509-99a8-f773482279a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9b08b0-02fc-4477-b4f4-d1b66c107464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "940f3c82-97ed-4c03-a6f7-032b1704f312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b04bce-269a-46c8-a1be-355db1105095",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5567424-2030-4174-b435-b802b850dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8e27d6-95a0-4805-8550-d538ce8b9744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4befbc4-7dac-4c54-a335-2e10f8d805b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77d13fe2-7c49-400c-8700-624099305f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183cd9d2-0878-4050-a068-6a1698cbc608",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcfcf0f-8fc0-4dbd-969d-7df1450864d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedbced9-5ea4-4f9f-9d13-5937e97ad4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebc7e00-3b91-4f6a-9d45-6bcc30d52121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab13a1e-cd8d-4eaf-b9c4-260de04f207f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7282e4a1-28c8-41ce-84bd-2c2a0cda5653",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615e0195-1175-439d-9f63-c8ddb54d1ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70d7015-5f9c-4ce1-840f-1b5b91bf6546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f75049e-ecc4-4b47-9fa0-4b9295a9fa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "820619f7-be02-480b-ac92-327110dfb8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc4f99f-7934-4d4b-9dc7-c86eae8ea0e6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8be406d-4dab-4310-8804-a0c4b6c5e1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0445b75-6f40-4dcc-a208-7421598d247c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f427f5-01c9-40d7-b468-11367a6fd6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb06d1c-12cd-4b89-8ac2-ef50b80009f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934a8ad1-5d29-467a-baf9-4b7162db5527",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9cc4e0-d80d-4326-8dfc-d152f40240fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004821cc-9004-40af-9029-1e6fba7a9b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf54945-330e-4ee0-a183-2816124f6fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb53a59f-40df-42bf-9161-1724e08288ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233f58b9-823d-4f8f-bc3d-fe1dbd8ce6ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9724a80-e49f-477a-bf8f-2fb46bbf3255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7cd012-6a80-45fd-a27d-bfa41ed503cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed09a518-3e2b-457f-99e3-bdf542980812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e230fef-bd06-4db2-ac07-d13b9f8db550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4427ac-1662-461b-93bf-dcde64a09c49",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7122846-4583-404f-92a5-b7b7af7ac5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c11a75-3086-43a5-ab87-d9d2c300d48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9a0d9b-3ef7-4d5e-a1df-eea5cbac65a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b3776a-6a7e-4b12-9078-14335ec7f21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00661f9f-de3e-43d0-b9f5-d248a9d21bc8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736196eb-9b04-4104-848a-f367d44938cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4037ea10-27b5-4362-ab54-f5800214c122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84a292a-0f2c-4570-b165-f65cace08c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "995f8f99-8110-43d1-be93-a98550a25e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f398f0b7-a58e-4cb2-9a2f-fed2fa09110f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e389a0-825c-4455-a556-d838e9ca14e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b9f9d1-6ffc-4375-bbd5-3f54b0173777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5f5ffa-4fad-4d7b-ac8c-62dd62202c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abfe5d9c-3305-4c09-9a7c-887df6702b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674c0c29-4b7a-46b6-9cc4-9390b3b040b8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb36735-b855-4171-8a47-ce45700e8c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc04ae79-79b7-45bd-acfa-01ebe7f6f553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc4fa7-ff69-4602-ac8c-61e38c3303f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f857c4b6-3c5d-4571-9ed2-4fa5044ecc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7484d659-86f5-4f4f-b1d4-2160d0f11db3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6350618c-40e8-4cda-b406-7e4a7316bfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a19289-eb60-43d1-9601-e69f6702b523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8f264c-6061-4ab0-9cd1-64dd85bf65dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd90faf-5638-455d-9415-8ac8a4053a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6d40da-b01d-4b59-920f-0fb2777b13d2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece3626c-28e8-433f-aed2-f1d1b896abcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f928e218-c6b9-46bf-8575-3a6de66c379e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375d5758-b386-4b5e-9e1a-9b7521d39aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b85425ac-0d06-4d7e-9fb3-1a712d3bac71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd45799-d3b0-43d2-8cae-13ede7389dfe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6881a506-63a5-46f2-aab3-39fde87168e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32702140-2d59-4e49-b25b-37eb8e5167f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a4f4cf-7c3d-4ba6-9266-84f342a23a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36916df5-0ea8-44fd-82ce-6d9f5b1968d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70424b21-b4e4-4337-869f-b415c9ea83b5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a81b2d-180f-434d-825b-d06611c44828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcee61a-fd6e-4c47-b189-e3c9d60cda27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c552575f-500b-457d-b100-04f85dd6ee81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c21a9533-932b-408c-b1ca-5e7f60909b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b753c508-99c2-40bb-b8e8-76e8ad0a2c19",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78389df-1b18-4bc3-8384-68cc442db458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5866144-5aec-4b4a-b74d-03971ace114b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b56023d-accb-4fb6-b35e-9885c71c52c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b91030c-4248-4445-bfc3-8e0bd9b02af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0094883a-e8c8-4994-bd2b-243080815346",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e23168-eecb-4858-934c-60585d6443d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd287265-63b0-4344-84e2-a746c8847a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ef52ce-c5d7-4d1a-8874-5abd718d2524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "056be0cd-dd33-4d22-aea8-7b3fa8063fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d1e870-b7af-490f-846d-34f712a9cd0b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5e356e-6fd4-4046-bcf5-dfac4bd71fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c01447-b510-449a-82c6-df8da71458b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5786c6ba-da10-46ba-b5cd-394bbc90517b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87096153-4944-483f-869c-1cc5fa97e9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e25fd8-357f-4022-82d6-cb13515fa479",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c52bcfb-5a66-481e-a9da-9e73bdc65d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cfbad2-7b6c-4abe-a730-cfb727f9bbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c62c45f-dd1a-4438-84d2-15863f2cecc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a67161d-c0b8-432f-bdde-3187c526c322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b229d2-954f-44e8-ac14-f1d4fd1020cf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9056b400-f15f-40b0-a1b0-1fcb3a01fcde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b0e160-15f6-4aea-bde5-71a8ee73b373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74d0f47-43b7-4be8-afe6-724d471a03c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5463f0bc-19df-4ad6-9cf2-d83e3b251475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e025d468-1576-4f78-a118-5c2b12d6c310",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041f9837-2efe-400a-b4be-9edb7363dfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd14017-9d64-42ca-a03c-cd6e6482e0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d858b203-412f-48c1-883b-29bfc62863bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5f0ca6-8517-4c8b-9bd5-692d1b6a9d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808f941-6e8f-410f-a4b5-192783f8a8b2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d01a62d-4eed-4690-8182-134b518f6410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de88691-424f-401c-86f5-5baf380d9dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976f9fe2-b689-4029-b4e6-3ca3ae5fe5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afbca927-641f-47ad-978c-75e8cc77dacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151c64f7-8c87-4fba-a0ef-8b77523c0636",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a591aaf-1f49-4c9f-8484-758205163aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a3cd82-8944-467d-8a32-83127d6d5f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a9cf44-e554-4b7b-941a-1c5274d225a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37271303-cf66-46f3-b659-4d2a92746994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490cdfa1-cf2f-4552-ad6c-7e2e421b187b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92533c71-ac4d-4e9f-820a-2096603b4dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374ff603-47fc-4f34-b91d-589195a35e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab600653-7d96-47e6-81fb-7871aa01cf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e14649-3997-4af0-8939-f7d9616f01d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffb3ec0-21d7-4a21-8f43-1dfc1a0bf774",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789b8207-b445-45ee-8ac4-9de3e1b1c761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba221f0-79ec-49f6-b02a-e0c0a77e0443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a229bb3-760a-448a-b55d-23e152804ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "594353d6-f51d-4656-bd7d-aaba921924e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedbe502-ee04-48dd-9f2c-8b3e14b69faa",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167f04a5-582e-441d-b309-118fe4310030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0858ec35-deaa-42d6-bb30-5f043850cb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88e0809-95b2-4e0b-9cde-d9564fd1b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7289bba8-39e4-4e90-8182-7782d94c8b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb2534b-4b71-43c3-bdea-5f15306c7c74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7f75f0-3c0c-44f1-8409-401e68e4d909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b21277-675b-4319-847f-2e74654fd295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb3ee2e-7418-420e-8186-9152f552ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1701587a-9ae3-486f-9e00-e205ebafc46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87664b13-8dc1-465a-83a0-8be5174c65c9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10d2aca-e06d-4005-946d-566e455e3973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6307ea7-0759-43ff-8bf4-24fecec812f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1321e5b3-de6f-4a98-815b-824c256fe4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e340cb31-aa8f-4f99-b285-05f45f780946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f48571f-8900-43a2-b2cc-be3e7281310f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef185e5b-b863-4c70-9b67-bd4342f35e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e1cde7-eb94-4bbc-84b1-714a2dcc24f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbc8383-0895-4a51-a98c-d1795ecb8a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "29658a5a-f593-4f70-8d8a-bc691b409fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5368153-8741-4cb9-bc84-95005f54185d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6fca45-617b-4851-ae48-18928dd17a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd558f5-500f-49c6-8b92-e0216a74ef5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beee653-03f4-4e6b-9390-19dc8ebaf6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7fdde9-672f-4d39-ad24-ef352cb2fdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710f2003-1f29-4818-aa59-5dd3242ffff8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099c27d0-7c56-4b77-a6de-dd76b38bc20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb11ec0-e24b-4cd2-904b-7c8f59fd8bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547e7792-24de-4e40-9742-7b89ede79257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdc6501-9515-457f-9198-afc9be72c573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e878a9c-7034-4f69-bfbd-678f714f2d45",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628a20a2-a7fd-4190-8c6a-5d96afa9b1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fcbc80-d5e4-4137-83d5-f840f419f7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f072a1-3593-4b89-b7e5-99a627b37a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a44eb84-b170-4195-b6ec-16a8d166a51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eda6837-3192-42f0-b5d0-3cc14a1c6ea5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef591a64-b626-4959-a1e2-dcd6f35d8b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4df445c-8fca-4217-b7a1-cca286c0b6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9b0b46-c1e7-4532-ac6c-a9ccd2d60159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9333fe-e06e-4749-a85f-10ac892ffbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f78c5ff-c70b-4b79-980a-357504fc0dcf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b66255-84a5-42c0-8b09-49b3ea7a5c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31267892-946f-4f78-8c87-9d25be7ca593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361d2506-7058-4673-a405-3c16abf2ff3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a230112-4e4e-436f-a4da-595aea558b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35069005-c48e-41b1-84a3-c733c09c19ce",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d3283-51ab-4acc-84e8-d7c916ccaa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617ef4e0-09f4-4211-8855-ffb8a9ebb582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7064c47d-2371-4e0d-a0a8-1b18e105f975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd845fef-597b-4bd3-b495-a1ed56775924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f2937a-c727-49bf-9e56-5074ea98980b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4055f79-7dcc-4df8-a14c-501b3286f7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd8ba16-faa8-4e2a-964c-674229af5fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b04aefa-9fd1-4bd8-8895-6808925d13f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b31fcd0-ed1f-4acf-abf6-05de80ce5806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9cf43f-5bad-4326-823e-a2e88970adbe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697be603-8054-497e-86e9-2b85e18d07c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400bc279-7924-46e3-b70c-c084439cf202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f8dbe-214e-4a9c-99ac-3f078ebe07c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "699d2069-0105-4c9f-9459-64e7a5f5eb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfce339-a28b-419c-8eef-857dc62b1ec7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abc3c44-ae8b-4a7e-bc0b-8630eef501cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4afc6f-8cf0-416e-bdcf-199317450a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cb273c-5850-4a8d-b56a-cffcd24c8671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1cd06d-3803-4b3e-b389-dec493df2fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0223fc4-9b1b-4d29-a8c2-d3d2fc0d205a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fabde2-0ed1-4ad5-8cce-29d7c7c51f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9e30cc-d400-42e1-a234-2cb7f24ab85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde7ef7-ed50-459b-913d-75737c56ca3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50ebcadf-eccb-431f-a2e1-fbd2950ae18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2896e9fd-2e31-4bbf-a501-fc94644f100c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2270a9fd-094c-4047-ac34-7cf53e0cbea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efb1806-c385-47f6-a5a9-193905c183e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b40aee-13d3-4386-aeb0-0395695a6318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a2d99f-775f-4506-9f29-facdf9f2deb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fdbd27-7931-4053-9a2b-c4a881bea63e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372e8adb-4507-463e-9896-6d4f63f82b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dddd955-04b0-4a80-8d1c-36bb67ee1006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2031e7d-bc04-437a-9865-7e15b3f35927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d75f1f-9441-457f-a7b8-fa90840efda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c142bba-4842-472b-84b3-95b9ca5c3d7c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229e0422-e6c1-46da-a0b6-b8debb1dbc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f35d98-0cbf-49dc-92d7-0b6acf66a44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198e28f2-78d5-46bb-8fec-700fb5e79ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9f2cf8-df32-42d7-9edf-c9bff2dc2bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f74681-ef85-48db-b13b-cca2fbb1d077",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5243c285-b9d3-4676-9c6d-a270a2fba368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d82e679-ab8a-4219-885f-e96e49810c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585f2285-7090-41bc-a74d-3bb8ecc4a905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87e33bf0-af2d-4f09-8b61-a6a819f87753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113cc18f-d19f-4ed3-a12b-4c0fd595d843",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887b9123-fd6a-4e09-a6cb-343292d5f729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9ecdb5-95ad-4515-9734-feb553739a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6b1f0e-9318-4f04-ac36-d97702902cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b67c6a-dd32-44dc-a945-d8c2c8d719ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3afd96c-1fa4-441f-a76c-c50bd98c774d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae33076-3d1a-41b1-aa0a-0946ee7672a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32398bc5-20d8-4d1b-9800-4c879f06cc37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9b3560-f0da-4556-a81a-ebfaa5b72d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "866b961a-62fe-495d-badf-8f136d3f317c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce77fa0-178c-46c0-9a61-a5cffc753324",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd22443-628c-4002-b651-cfe4164c3a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7362831-36e7-46f1-9848-e043399b385c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7690d7-755d-49b7-9344-ca690d369808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "403c0e1e-d247-41c8-9aff-196901d913d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d8f561-c3ef-42ac-bac4-0e154db9a89f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033100c-127d-4d07-b857-2b6883bddef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b70e62-aa61-4d27-a24a-a44ac903acf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a6b311-e332-4ca7-a30a-5b3ca4a925bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f5f8c9-29f6-43e6-a9dd-ae77825aa989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d8bbe-24f2-4789-be5f-832d47757213",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3552b758-bc67-496e-907a-bfb929a28053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36a8703-bf38-4fe7-af4b-cf84390d1f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f0be62-3f80-42d7-8b51-4f05b11c36ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b773ec3-652b-4db7-b240-ecf11d5ac066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb8662b-fd6a-4b97-88d7-c33f618df034",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fead56-be4d-463b-84ee-0b22440524ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691cc019-42b8-40d8-8609-dea4fd531f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c518cb46-434f-40b7-8241-d122207eb061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a903a705-6a1c-4804-bc35-03d1ccdf45f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70f1494-7621-4603-83ca-576eec11188b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be33a8a2-0889-4e08-ae44-d4b9b07f6188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f90103-1d3c-4910-96e0-f26faef1cd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859f6833-f6bb-43cd-98ca-698132f13499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "414bfc23-ba72-4beb-953a-58f5e4ed1beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346d5f51-18c0-4c50-b084-e18b6516607a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261c55d0-4e08-4e05-83cb-253115021b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9140392b-8c55-4a5f-81e5-11a606fb186b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef38797b-0572-48f1-901e-c433957eb35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c63a30c-27bc-43a1-9c30-e642b4301424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50238268-ee11-4a0e-91ab-d04c52a24037",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94558b76-618b-4826-8454-47498692a4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968122a7-3f45-4b93-832f-ae386f407f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891553c6-a533-41f9-9d21-5ad459248465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e13712df-f0d1-43c7-9ade-3a7790950c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e136996b-9c91-4035-b27a-cef3c182eb43",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2672c329-0aea-4b79-8a34-7fdbefe56da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592a4df1-c83d-409a-a1fc-0620a225c86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd58769-4327-4a72-a9bb-0bc6855e1c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "490482c4-ed7a-408a-9696-f101906b25c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f310c2f-977b-49ea-ae6b-2739649f918a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4e8760-1137-4abf-b1d4-f53cc2ec57eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e2c05a-cb6c-4718-9b10-5440ac28fe96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3d1262-bfed-4a1a-abe4-39344f8a622e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23890787-6b80-4dd8-b065-f9fa4979788d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab9fabc-eeed-44dc-a709-92e254d485f5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3e4adc-9606-495e-a0fb-98cbdd6b28b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697c4adf-2a97-44ca-b7e8-92b88942bd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2930c0-fd00-4a69-b684-6e63fce58821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06abbc69-d3d1-453c-b821-ba0e4ba02c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d16349-22be-4408-af93-85f501035220",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81cbbb8-49c4-4ba6-866e-012577714ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c65b93-7aa8-4360-ab87-5c7d66aff967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e219e1-182f-4a00-8372-9646703f3229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b01466-b38c-4e79-b205-4db3b45f03a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d244774-9471-4731-9bc0-5a77df9e2d6a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d69aee9-27cb-4f5e-a4d7-904ac17ca8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc989fe-b149-4e3d-b583-6b9383f3df4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0b58af-b4e7-498d-a5b3-ba5d97015747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d9a095-230c-49d4-8a8d-e2c422e9d031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8aea469-0ef4-4eca-9602-962555707dad",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3f1f8d-0af8-4840-b3ce-18dd6690c9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea031cb-a603-4dd6-8d48-fc751c51080c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2130f0fa-2cef-47c9-b0bc-0bd39b6ff4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b8e228-9c0f-41a6-b613-c49236d933b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb5670f-5c86-4735-887c-6a1c4b5d12cd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc59292-0161-4706-9b67-b4103884d7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd3c130-0b5e-4fb4-b4d9-3ca881859abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e46f28d-1a8f-45be-88f4-a4e29b4466ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e01e6381-04a7-4466-a568-606a339112a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8ac1c2-37c8-46c7-a7ad-9330b92b759d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b753ab1f-fb5c-40de-8693-d99fac93bf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a526eae8-df88-49c1-8fe8-9d426c0d7971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac106ee-d421-465a-9b36-3aea4dea604b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6be9d3-42f4-43fe-be0a-7948ab7b7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e599c3fb-cc58-47ec-875a-9bb8599151e8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81b954b-57c5-4b46-8846-09409775acc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "63d09055-8fbb-43ff-8192-8192f1a631d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7577b4f0-cfea-44c7-87a5-13905f3052f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ce4be2-a79f-435b-abff-262a322cfc81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0752fc8b-0bb2-406f-a797-87e0cf19a8a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c239db83-7e67-4b84-b3ac-742ac0851fbf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247f59aa-87b7-4a31-8f36-0cecd4a48a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b515b7f0-702f-40c8-a7dd-f4ec9e928586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dd237c-d70c-44e9-b3cc-b7eb3d0ebbf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0679edf8-c538-4950-a500-54b25e72eb5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f25be2c6-18e3-44f5-b267-0b7ab5a17a19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7aae6098-78bd-4055-9311-b0f231684665"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22580f56-5466-477e-a915-4a228c956d7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d5a05dd-0f9d-4506-a001-c0860174ed5b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee49b2f8-2d06-495d-9d36-629f040184b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37cd0fbd-95ab-4bf9-9c70-88a2630d50fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0c758a2-40d5-45ab-9300-e5e1d3da7582",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "753ef5a5-6eda-4230-9ab0-57430da7293a"
                }
              }
            ]
          },
          {
            "id": "fc9a7d16-b687-4549-a626-ba4c2b3286f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e435f9ad-a53e-42eb-9a60-6dd9d54a116d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "24ed4ae7-a9bc-4443-8faa-88bf034d08d8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850e3422-9879-42be-a2a5-ced9c441a22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d54454ae-284a-47de-a55f-0f8c3f753d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf36002-4594-47e0-99bc-e4aadeb535d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e43ba4-7b1e-4bbf-8397-ff360ca20ea9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "050a76d5-ce06-423e-9e59-3216aa4fdc57",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f000f51b-b789-4a79-ad40-eeaad2605eb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46f7dc1c-38db-4e80-ba09-9f3b92933199"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ece1749-46d6-4643-b8de-7f233d5f9255",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be9e5e9f-cee7-4815-aa07-0d7b5889fa9f"
                    }
                  }
                ]
              },
              {
                "id": "2be11d21-5ceb-4c50-9b23-ca8543c9d1c2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfbbe748-0917-42bf-8fe8-283b821bc6df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a357bdf0-2543-4a1b-aae2-371e26ba2b70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ace9606-1c0b-499d-a7fa-fb0564f3d023",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5abf5e38-d22b-4d20-abb4-0586911a3bfd"
                    }
                  }
                ]
              },
              {
                "id": "15e62376-36cd-40d9-875f-b9e21fe63d9e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1123bc69-9312-4ed5-bc1a-0937a3f9503d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a4da03d-391b-4c6e-a4ec-fe06f9a4fad1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bec633b1-8ee8-47b5-bacf-b67d7f7cd015",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4407defe-f796-4e8a-8a1b-8fc1acfc178c"
                    }
                  }
                ]
              },
              {
                "id": "d6b42160-c972-463d-a120-56eca30cf5cf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0511f65-f7d2-420c-900b-336fd2514fc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84538174-4b46-4d46-becb-1b4a3c2aed71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f41e3a15-d159-4780-8190-50eb5c709818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8cf00a3d-2116-491e-86a9-8ddc4f542c05"
                    }
                  }
                ]
              },
              {
                "id": "310c5b47-893c-40c3-bb55-807e9610bcc9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2edda932-b28a-4f56-919d-a5078aafbfb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf0a5ae0-54ed-45a7-91d9-7938a837f291"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61af95a3-27a9-411b-b8fd-5311ad036f32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2cdaf4f7-10c9-472c-939f-d797b7681a42"
                    }
                  }
                ]
              },
              {
                "id": "0c044a61-f1e8-4e0b-bd4e-717cab6a8287",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd801e7e-832d-4568-bf7f-0448ded3d47c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "005d4f24-88e9-4c0f-8c9d-53bcd1950d5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "072eb7c9-61d1-4d67-836f-feaf19becab4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "993b182e-bf28-4345-9a28-2dce6418747e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18bc9852-b2a9-4a30-b54e-29c88cf7330d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2e6f2af-730d-49cd-8cec-09370f93d41e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9151f72b-bf0e-4bd5-8cab-fa190adf3ea5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19c2f92a-0473-4ee6-8dc1-3c5b5026dc03"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "886ea7b5-bc54-4fa4-8d18-c5fecf7e0fb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "48e479ac-f731-4b52-8d44-6f959edc4759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88157856-3d66-4acb-88c0-f42b5d1defe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "897e5c49-0ef8-4df8-bd22-2a5414d97341"
            }
          }
        ]
      },
      {
        "id": "a5982c4b-e77a-4a71-a038-49ec3a45f2a0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a288cee8-b115-4b48-8c4c-2bd4708ea62c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fd9744d-f86e-4be9-aee5-f92aa4c9feaa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3cc34462-7eec-4144-9535-317d5057c84b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c9c807-b78f-4073-af5c-6358079fb4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09cce30-3ba0-458c-945e-9d3ee4f47f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325d6632-ee56-4681-b017-e29d30700875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "68c5d93a-1404-47f6-b7c4-6a3125bf563d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b75655a-054e-4e13-bde0-eb78e4f9f4bd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ac42b1-b229-4589-b63b-87a739a4c660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a769b951-e19d-49d8-940e-33ba28d896f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a250e19d-a2b7-455b-aae6-4e6f7e8f537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a97e32b1-24db-4610-a27f-e0c80cb630ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc33ec11-1d7d-4b0e-9974-6d353be3c0b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae48656-3b40-40ff-b1e6-8cb86f4b1703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a184b4ce-f9de-42b9-bd3d-28974fb021a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63544629-51de-4176-9c26-07fdbcd1f196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f71d3e-03d6-46f9-a4ae-941595ee7df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda84cde-4ba2-4272-bc1c-997cda2d95b4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3d2c6c-3a84-4432-a38f-a47f4492bdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1687acb-20c3-43b1-bc7b-b9b5bf15cd02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365d3a80-9818-4e6c-813e-3458f6616a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4991c1d-4db4-4d8f-8acc-09cab1277463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abccef8-cdff-44f3-8ff0-8a3bf875e1c2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f8ddda-e866-49e2-8709-8114c5e87fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf988181-c68a-4dde-8160-c732119398eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1090e2f-0434-4b9a-b22c-03101331f3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c6ea90-b70c-4256-955e-5c3ef0bb6dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c96da4-f28e-41da-bc60-86ea39f0733a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0f4d6a-e62b-48ef-92fb-6b8af93d7dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d533d18-7205-4daa-b616-bc97bd82ffd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368dcf59-e269-4950-86a4-90980b5cba86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d000d08-9dc2-4c6e-85fe-05e51b5ecf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cbe71e-d21c-4d1a-a3de-118a94dd5d80",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a43f5f9-ce5b-47ed-bf35-ea4cbdf590ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d023dcfd-af62-48dc-8b5d-d21a282d3ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846bc86b-995a-4663-aae3-dad02b0a0b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fb4b39-e2f9-46c8-bab6-c79c6197d2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f217d8-067d-44bf-bb25-5d873148d4f5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d899420e-76c7-4b69-a162-b46154819866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8c32c4-0f6f-4277-8bf9-daaae44df2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5e272-f7e7-41d8-8a29-58d63ef0718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90c34d8-313a-4d88-934d-f1ca70a646e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff613c2-60bf-488e-b8c5-fa5b99111c33",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d8a83b-4e61-46ab-9dc9-653952b49903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65572dc-3923-48d1-9a42-ab443af66df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172508ad-43dc-465b-ba41-cf5a90dde16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a871600-1448-4ff3-b14c-653b16f16591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e271f5-61c6-44de-a5bc-0ab14ec5c830",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8475849f-292a-4e08-bf9d-691309c0dd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1bca45-dbf1-4309-849d-4044aaceaf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefcf21f-c639-4fa2-9bcb-1a7d194ddf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0eda816-9df5-4eb6-bd24-5d17af34c5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e15266e-83b8-40f8-9259-639de39ed45f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ec004a-7ca9-4116-8cd2-815152a37f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8818c1-d315-4cd2-a121-38fd4e535254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac5cb8e-55e7-4c8e-91a8-50ea25eec527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8cce26-b045-442b-95da-471cabd7e4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4ff489-64eb-45a1-8710-8c0220ffeda7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103baac1-f2eb-4d26-b94c-c9fd792dfdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a9c377-7230-4b90-959a-4759a31d00d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83681cfd-ad66-451f-83c2-b16dd07288a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c91b52c-47af-46e8-bfc1-6e10117c6f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5e2902-5d9e-4167-a4e7-b8dae088b45e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36feccee-0084-4a6a-8af3-de574b1e22ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15bac51-5747-4a65-a327-050c40181a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5141c7d-b7b9-4dc8-b658-97eee82f0248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6e2013-7f7d-41b8-9768-b51deb1a6166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8706bf56-9a92-4ee1-9b11-06745b56011e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928cdfb3-c392-47ec-b4e7-4686d88b30b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a06ecdc-b02d-4deb-8c4d-d9726d69b0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00570551-494d-4ef6-b4f4-a0aafc9c2d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f9fc0d-0890-4d7c-a3d8-4f13351003fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d84bcc-0823-411a-8d4b-e4825e583d6f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4c5409-9416-40bf-bee9-0fe9dd282d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a0f1aa-732f-4d7f-9fc0-516e72772ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab52c57-64b4-46d3-a03a-543900773bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b7215f-213e-4bed-981c-21cf54dea0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5095e7-3539-4f18-a6c9-3083f0523d61",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d005f5a5-2120-4f96-b016-a91ab0be34b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c359f14-612c-42c4-9be4-24689c15dd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6d8c50-c0ab-415f-9614-bbdb595864cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed691b03-ef8c-4def-bb9e-803ec8544b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b332697-c7af-48e6-9b5e-04357749c868",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8d31b6-2208-4cd7-9262-4bf2cbf5ad68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac39eae-8307-446a-a53d-b15d42ca1b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d818d233-c385-4d48-b868-cf7a8b5f845c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "20fd7083-e14c-4b19-a193-2a55b8342872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124cd568-d70b-4bd0-bd91-609e6f1f471d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e4833f-9ea1-46c4-ac8d-c3c41f37d4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f423a635-9c02-4b81-9dc1-fdf6d6cde6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b34f85-4b0f-4a91-a071-331e8c22a709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f6acc9-f2c4-44e3-9fed-a0b4f3ebd205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e83eb7-fe22-44f3-ba11-cbcd6d57c8c3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420ca32d-f28b-4238-ab67-3544f5c1e810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e9c60e-dc63-42db-84a2-a97e7e6973f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9fa96d-2dc1-4a9c-b22a-e5160049ef8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3913fab8-233c-4cc5-b906-3222bfdf1106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eca0aa6-1064-4dbe-9773-71545854d095",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2845193b-37ae-48c0-bbf4-1d69cc373e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21ba58d-ad5e-4f69-b476-d0718fdb20f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6b28b9-5c2f-4519-ba77-e7ce5fc6d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c06394-1574-4d71-9662-c11a89198f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e16ac77-c8ba-4985-8fc3-9a0e7aef2dd7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3c4556-cbd0-4176-9a98-b8cdc30e9889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c1696e-8b17-4467-bc6c-820336bc977e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5489b07c-d02a-45bc-8644-8cc79188a7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "608fd96f-ad44-4f77-a6c4-bf039a3a3247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca197c3-cb09-477b-b575-1f7c26584d82",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc2c96b-ff76-4f6c-9517-ec852ba14df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc86030-61aa-4672-8c89-d5dabe6e18d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe20f0a-7c87-4b92-a27a-dfcb339a2a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81037855-db4a-4b5e-9767-9365df42706e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6626333f-b7e9-41c2-8681-d080dd3c49eb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ea4fb7-747a-44f0-bbdd-e74876350cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd053fa7-820f-49d1-8457-f35211a6284d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64f2577-b544-40b6-a6f2-e3d9f465e10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4f1868-126b-48b0-b176-494a78824c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96125300-6c0c-45d0-b30c-8c1198d31342",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c927c02-dd50-4cb6-a260-2cb3125c31d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a405f25e-651e-48a9-9f7f-881772fa6460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4ee226-d130-4ff0-a546-f717d2304e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "082a92ff-9fc3-4a95-9416-4d705bfc398f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7207b45e-691a-4424-9990-568c2648f0e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c867ba-fbec-4220-94cc-a2111ccf4dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af424a2d-34ba-4778-89c3-29c4ab9a9ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c810453b-1f1c-4a48-8fb6-52981efc0713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d82e3647-0cf2-40b2-b480-3eb2c98051ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206af653-90e7-41de-b02e-e2c5e371ff41",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9dcf2f-b157-4496-897a-b80f09f1be74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe49922-7e1b-4d4a-8064-b7d109d406d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ead6418-ebdd-4b57-ab98-79d0b3fa4496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be21fb36-0353-44ff-b91b-0f5b1290c3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a19394-5b21-48c1-bff0-c35a5763e64b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5113582b-f534-421b-8db9-d71cf9848450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f11230-5293-42cd-98bf-dacc4ea84fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ed3baf-300d-422f-8ba0-a6a7910c0b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c89d2c9-040b-4e58-8f81-5773ca3368ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b17754-0749-403c-8b22-3d9004f0c382",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5412f71-4dfe-43a6-9f72-6e2c4a2468b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6aea51-e734-4162-873d-c627c07a0871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11b8b72-a71a-448d-ba40-00ccf427c32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ab986a-c799-46f3-812b-585666eb70ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9affeb28-710b-46c3-b8bd-5865007e2fc1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef56ed-bc41-4d0d-86fb-4fc9b199894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37fb1fc3-a2a5-4db2-a057-644ecf73b2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ace2bc8-80c6-41fe-9787-3ef7680e4a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a832c414-c5d6-4c3c-ac71-8f21d80e6fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb6c4a4-24bf-4bae-81f1-86b2c1b1eb9c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0c801e-2cd9-4c0c-b211-3b33166836c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae10f306-8fa4-4570-b42d-5a445cc94f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4267ce-5772-4626-8451-f3cc816f2834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb7a6ea-a257-4156-aeaf-cd487c3b9b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1253dd74-05e6-4069-ae9a-30ee7cf1205a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0e2324-b8ac-4382-9e2b-c6fbb2b675c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7160dd1c-d889-4821-9106-1560952fa446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233c7f13-c8fe-400b-b70c-6ebf003c0fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "643ad095-353a-44a1-9905-adaf7e61c1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de30e683-69ad-4f16-8c1d-8775ec567093",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0d2c59-b338-4f9f-984d-c67afaf7039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca58053-b3fc-485b-bcb7-8537aa26042d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8310e989-d69c-4a5b-8109-76d36d5e977a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8d0e9d-e7c7-4592-9642-12df388c43f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d895b20e-f53a-4354-bd45-27fa80adc61b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc33d747-46ef-4eb7-aadc-efdbe7d5e555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a067f3f-0aba-4408-affa-1e39f78a3ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dadbd17-399c-4392-b154-eeb237df0f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "552dd969-8b0c-4e68-9eaf-744e2fa35b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd050fa-2832-4e32-8557-2f9ba0417fda",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eced48fc-edfa-4791-988f-df39103e5b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8035e929-321f-47dd-999f-0a0537004ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529fa4dd-3706-4b13-b59b-768b9c63d62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c1da71-492c-480e-b664-ff254f75bece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf7ae32-95f2-4579-add7-9a1228c7c628",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe610be-108d-4a59-977a-d9b448de6a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02cfcf7-5dbd-4b34-9295-8c8d7f30e66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8946a86-dd7a-4658-8e97-62728fb2f6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc51f599-7ed8-4b22-baa9-f6e200737298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49ff1d3-b904-4c3c-9990-f0dd60b6a852",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ef64b9-d9a7-4f8c-9f98-e9699bcf6edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41c6294-cbab-446f-bba9-cd3fade03dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb5bc4d-25d9-4f44-9e6b-7005fdcc53a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "245830f9-7c8c-4dbf-9448-4af201801e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0a100c-c203-4327-b96d-1a55d44abe29",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d43917-3ccd-43af-b124-f52b84ff5942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c249dc-4535-4f76-ba59-c5fb3d25fe22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4afa9e0-276b-403e-a6df-d5300198e980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19772cb7-fcdc-4344-9b66-ee6eff323ce0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "272fc29e-32a2-42fb-8c3b-fdffeb113a7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "219cb2b0-0156-4ad7-8e25-bfe730ba51f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c38e9a-3270-4524-b44e-b799fbc6b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fceb9c92-7d6d-4024-97cb-a6d72e726031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543caa5d-8237-47ec-9944-bf817c0db3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583ee76c-5bc8-448e-8d25-695c08f0bb08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b4e296-4353-49ff-a71d-fed32b65d54f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "addb0c22-f6f6-41a9-91e5-3238f44a216a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfed41f9-54ef-4ca5-bc1b-823fa5d229b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0952ca89-d1d1-4a9b-834e-d689fd9e9e4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01d02467-2dbb-49ae-97a4-45790dfb5b8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94cc649b-112a-4bed-96cf-8de34ce00e41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b40c4752-3356-49f5-af30-3a7af1ca15ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9889e83-d0c9-404f-bee3-a537b6c59286"
            }
          }
        ]
      },
      {
        "id": "accb3c91-e682-47de-b156-cbaa107c6203",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b1c2b4f5-6987-4c60-ab86-ad9da7ab85db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dc7847b-f068-4870-9a91-92f04f32cf63",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c3f69a8-48a0-4ff7-9f13-41b850494872",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee650b93-6dac-439d-908b-fabe7baa94a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828438a7-e58f-4aae-8ab2-5ffc2eb3f8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0eabe4-8eb3-475c-b8f9-c7c303affebb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f45739-3c77-4903-a3b3-e8249689d66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fdfb17-9b83-4067-9e77-6aea29269d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f131a5e-5a65-4a88-bb8e-022ec2ace85e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02b484b-1627-47ac-982f-5a87ea568d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe3d4a3-2117-46d4-8268-a12d39e1c9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216b6341-5235-4792-bb2d-815f2264038c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393a2f82-09e7-4d6f-b012-7a9cf5d12068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb798b2-9ac9-4b5a-9c86-94da06b543a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d378c42b-1851-4266-a8f9-d844078cd27b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d56021-da04-4484-a9e8-28a3717d0929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aedbef5-dba3-4fc7-abb9-0e96ee02f12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a987468f-7aab-44e9-8038-453d23ae83cb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a751913-c9cd-4c37-99e9-42d899ca1100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed49f55-6da8-45c3-a214-52a2943a2bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b33543-3d00-446e-b152-7c98b3fd53ef",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45e7b4f-b9fd-4a0b-8f92-c2e6d454b620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459a81fc-e182-461f-865e-01fcbc3f5a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a050f6e-148e-4a91-994e-a60c7ffafa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb40a949-0054-4284-9552-0b31a48fd897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435b36eb-36fe-4bb0-bc66-296547b261cb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af644522-013b-45d0-8d99-8d514d3252b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbffd9aa-781b-49d4-a114-d3be4f36a1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca4ff76-787e-4664-b26d-a8019d0101c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb09cb77-a85e-4531-91f0-3eb945d24c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cdec48-7304-4738-86f3-955ca6892084",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cdb8b0-bffd-484d-8ccb-81f41a4358cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec80e2c4-2103-4e27-9c45-bdd9dd48c320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91812194-5c72-4b68-aaae-5623ec2c4492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ca25de-d8cf-4bac-bb32-96c8d15d6715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3d666e-4bbf-4828-b3c2-2a02dafb6bcb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35481a97-758e-438c-b72f-8b7f0786053b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16dc19ba-0220-4b72-aab9-8a3c35623119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c0dcdb-e2a6-4a3e-ad3a-2a4b1d3ae9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ef21b5-754a-45a8-b74d-f35f8b942394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa1ef1c-0391-45e9-b6ee-2f09f23f0385",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e2cbc5-db6f-4aef-8033-302f2e1bf0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a82a2c-42af-4e6a-bc9c-3dd81f0ab92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b64c4da-966e-454a-a815-bdab52b06bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586762e6-d3c6-4726-affd-d12da869e17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8153222f-9ef5-40b8-966c-42c6e75031ae",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02838296-cfbf-4244-a894-1f5232791294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271c511e-7446-421e-bda6-54b21bcfb6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97b2076-9a75-48ff-a016-2b8c5889954e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385cd853-d5e8-491b-a006-87991297e1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6735f23-cf31-4b52-85dc-80fd92920273",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3301fe-0122-4d55-98a8-60fe789a0d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f2c8325-f0b3-4780-9c78-5a8b2cf03b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb87d19-0935-4f09-81a9-d0e7f859020e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dec78eb-2790-4a3a-9038-d09b380f1565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c5d6eb-68b5-4863-a4dd-942228964f05",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8270daf-70c5-42bd-aa00-2d029142abe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f1900a-0909-423b-b486-6076f67f14dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ca1276-d942-499f-ba6c-6633ee2244e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1852af51-5fc7-4969-aa39-f6965552f2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e271f83a-348f-484a-a3c9-3518deb5b37d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00dc549-7d5c-41c6-a51e-cbccc62721ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dbf8efe-c607-42a6-a5ab-6540747a18b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b92095e-98ae-4d47-be51-bdd07f9d509e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0ef4b7-2c4a-422d-a414-9bed1b06e4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6d1dc8-0910-42a7-a309-d468a4693e14",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57ff7d3-c042-4e91-8937-0bf8ab9bbf62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811dbec7-7271-45fd-b20d-28e8b73e85c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ea8480-9af7-4860-bb08-d4356a5742b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3fd1290-4b36-4a12-86ea-822f33e798f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f7bf7e-f5ba-4dfc-b682-d060b80d7b51",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a622a25-8812-4bcc-a1d8-daff962317b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9aafc9-de07-4ee3-a710-7b079d8598cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d75300-68b9-4758-add6-6d07bea0ef51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2c1758-fa3a-42a9-b0c7-6ff9f5001aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126740dd-2cd9-48e9-b49c-e0d7ba36076a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863e4b62-4974-4678-a4b3-f3e74a66f6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2509449d-4083-481a-98d3-43d97e9abf9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5e65b8-9469-4b0d-b71f-4af9ce376681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352199d6-566d-4c27-b165-c9499c2dd34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3cfaa4-442a-431b-a520-e7418f3008d9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c91408f-5d28-4526-8959-a2464294cbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7b74c0-dc5f-42a3-807d-11e51064ef88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c28731c-75a5-45bd-9174-061c98f4ebf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9396b4b1-ed75-4e03-9fd0-d38b89cf7528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1c8c9e-9086-472b-9c75-d953aee432f4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b846c-e230-4b6f-8f5e-beab2cf1d636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23b4785-26ed-4ece-af80-f43b51f09e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5ffa2c-e9df-4b3f-acc9-483f997b9041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3a6223-1fe4-4906-960e-8eb9469a0d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55584a5-4be5-46f8-b834-b579e7c6719c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6a8da0-0c1e-45ea-a011-ab90290f8f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c837af7-74cf-4eda-8cb7-9fb324a67562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade8eb0c-0711-4738-bcf9-1fa58c36b613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af45f2d7-4b98-4e4e-9277-e89adf91f792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449ff7e5-0078-4295-ab72-1853926b36c4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e4ce28-b591-4e17-8d73-5fb18ada529b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a77f036-08a4-4633-a85c-736781ecd6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c898ee0a-fc48-4055-b5df-30675ef5e433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb32bdd-b959-4dd8-80e9-22b264cca17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e35687-7db8-48d4-9138-cc8b824f2bbf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8bd93e-d590-4a75-9a7e-7066cc950955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9fb750-f350-4c73-90e9-eba543c4539b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c406d46-2c19-43a4-9df2-28dba55f4c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45fb91f-e5d1-44a5-bfb5-78054ea0e859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4f62cc-a6b3-4ad4-8a4d-c9e74eac7bbb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c8bc9a-c64a-4533-8256-2e7c665ceafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c8381b-09d7-42be-a01f-634eaeff8747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8c2a97-eba0-4234-9469-aa113abc6216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e584f65-e79d-4d29-811a-54f6cbd8944c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e25296-756a-4f60-b527-fc6395757398",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d103e8f-3a3d-4e74-9559-78f56aeedccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b5a3dd-4e14-4f86-acdf-fac1dff42f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5909845a-d7df-40a0-92fc-9fa88b59e949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4307cf6b-957d-449c-af48-2ed1db55a8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546a89b7-96ac-4ea5-a527-bfd198ca4add",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b1eb25-08c5-4bdc-863b-21508f864d49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b34f5f7-e34a-43db-b4b4-1a72669108f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4400d25-58f2-455a-a2d6-7f7e3a304d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5566684a-be86-46c3-835f-088481460b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3b8cba-b485-4e26-8361-0380768b2b61",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a52e0a1-a2a7-4f78-8f30-16a2a3b52397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f8bd6e3-62c7-4be0-b1ea-b39a8eb90035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d38f74-f3c8-4468-aaee-0beb6a482e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc44aefc-85b0-4093-b588-38135199e6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af442966-52a7-455c-b65c-702ac60cc53f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17e9198-4bed-41df-b708-7da21fa9f1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be15cc7-0e5b-4538-b609-0cb70d3511e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e515cb73-9041-4b52-bf2c-02c1ebb02c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e1c138-cf9e-44e1-98d2-4ad6fa6501dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab650c84-78d6-4eb5-99d4-b481adc37a22",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762b0bf8-d65f-45e8-b254-b9dd09a016ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fc70426-4d93-46b2-9967-48adf0dcc6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b30186d-c282-4aca-b098-60d17ccdc70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47eb4a90-9cf5-40d9-82de-d43260334762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3211600-08bf-42b5-a9f2-a64bdfa4b23c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dc1679-a066-4df0-8152-98ccb0a5684e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4360ea-38bd-4398-8ebf-7a0d24e4db3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2534f3-893f-4012-8b4e-3c632b07c1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8ce61d-23d2-4c29-b557-3a4b886b99ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5227dd-da67-4bbf-98ac-987a56319279",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61aec69e-143b-448b-b93e-b9a77a10e4f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5bc1c7e-16d3-457c-8e20-3c781c6e2342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09b0e33-e478-4cd6-998d-a6d7a27e0590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711f5ad7-54de-4502-8d26-ce5db592e3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e5d564-84d7-4bc0-bd4a-3fb3013b3d91",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37069b0-bd34-4044-8a7c-caabdaec095f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "469f29c8-1ed5-4fea-95d1-d48d8527d976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ef7374-7a3a-449d-8522-afaaa57681db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edb3cba-2138-42f9-a593-43aba7cdea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7623ae5b-7d6b-4556-8a8d-479da2ace63e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1694aa-847c-4672-84be-4b8e12a5d0da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bdbbdc-517e-4581-b415-5297a76eec06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e028ab-a7e9-418d-b779-be07b7da47f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4c6427-147f-46ed-9f3a-890ad09d409b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2f6260-c1e1-4b76-a56c-cd1395e54856",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35482c7-e080-4011-a7d1-dd417d7fded9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bc81e65-578f-4177-b101-4995bad0e663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e026063b-742a-4c2e-9f0a-fa6308375ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25346ab1-d26a-4c3c-9907-850817da7241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c393ec-0023-45e6-bb74-070f44f2f99e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f18481-b8d9-487d-b4fe-63c85a3dcbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f101ccba-85f4-4615-adfe-2444144f6b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401cdaa2-6348-4a5f-94c0-7c15c4d4ee0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a250e6-0127-4a90-9131-6f5d661860a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3e206c-be68-4444-97a1-edc317e62207",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa890bb-49a1-474a-b3f7-06a04cc04cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca37be63-eb6d-4776-b639-7bd06d692c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4997d7ff-6849-43e2-a1cd-574bd09d6c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22ffa3f-a766-48cb-ba4d-c2ad285dfe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd1e422-3409-4470-9ba3-becea5ab82b4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a35b902-2a63-4b19-8b26-eef65a8ff1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaec508f-ea13-47f0-874d-a979c62d75f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1472c7d-ab4f-403f-a8ec-e45a5a697ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad29dc3-fcb1-4cdc-b372-ca58943c4c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2869d66-173a-430b-beb1-904eea222d8b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9d79b1-5f47-4887-8d58-0f6ec581bbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b0ef4c-5cb9-48db-ba9f-9230d493e10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc71301-df0e-4529-bc1c-3eb4b1b05a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d906e13-57f4-4ded-bc4d-9b847e2ee135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb7c355-dfc8-43d2-aa47-fed6c2d22d5a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42e36b5-d6ca-4168-a2cb-4ed3bb6a30c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac5d75e-cae8-4680-bf7c-63a50acb5ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c96bd-8501-497f-a043-f99cdfd57253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b440d26e-8f53-418c-b2c2-8217c5a39211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d5152e-9fe4-437a-af2c-0a2e5e45109c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e214f3-e1e9-4851-9c45-88ad11299d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0653a972-556b-4d6b-9369-81e6fe0d11b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd23dda-b2e1-4dec-babf-1bf9ec3660dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73624d7c-8579-43f7-b04f-fe869e6ef64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec9657f-b7e9-4345-8db5-f5d0a4aae5af",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21db3b37-a06f-4a65-9b31-c6907de024ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf57a4b-4dce-42f3-b342-9ccb2c426ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e9f6ec-197c-4b0e-9709-e11cf336051c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c904b563-0db7-40ab-ba35-84e5b6537269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f8c383-7fbc-4ad1-8d69-e615bc3dfcaf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacdb638-205c-49e5-b3a0-032a95fb94ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2888a21-9b54-4cf0-8a85-eddf38293fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6140dd-ae42-41fa-95b9-42190095cf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ff8d59-6d5f-48a0-b58b-17c12d0b178d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961dd36a-f06f-4f7d-a2a4-b130ed16f797",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbaa3b7-24d0-46a9-a242-322cc6c7a5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f23b8c1-45cb-4a2e-87ba-bd861000ab4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ce2631-d8dc-4583-8fdf-1ed2d400ec6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347c4d1e-565b-4cfd-90ca-2bad3b1ad56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944404c7-c5c0-4a33-a2ea-04ae825f3fa4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b85cff9-7b91-4dff-967c-e4f6e670aac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d512f1cd-9b12-4268-ac43-c19e087617d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e3503-7dd1-42a5-872b-12bd6a8922d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8504d760-b5d5-4c45-94ee-3083e53e32c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5827ac6f-d63a-4b1f-81bd-fadb5967eada",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daad4303-6886-4dd4-8994-e2ecf2727e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69f5be0-f097-42c1-84e5-694113c80350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e68eeb-ff71-4d60-99df-98f98afe7da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbf85cc-54ca-487b-818a-788622377c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6559a8-eac8-4ba2-bf46-7166ea4315d0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66429223-c345-43e0-abf8-00a7522d5ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1788b1ff-4d8c-493b-a1f7-4ed9cbde9c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b864ba2b-2217-4570-8a83-4aff6ccd01fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898b0287-8bf9-4d72-95ad-9f678ee24f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913fe9cd-e164-4419-bb78-188edeac1a86",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a79bb25-9ea8-4cb4-be63-03f4c4c42684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffedcc8a-9766-46f2-b6ae-94630c86ccbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f342dbd-572a-4797-8457-c17b31b70019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7380534f-76a1-434b-a6e8-13544df9c3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52d4674-7d06-406b-a1af-4dae9adce5d0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bb0405-73a0-4f37-843b-9e962d2292bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe6d037-f616-4225-93cd-01927d6f59f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dbcc08-991e-477c-a7fd-cdf20ff1e0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61536cd7-d113-4b14-951f-a517ae25c0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43b8d0a-ee74-47c4-bdf1-52635e5572fb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0554b8-9868-4f9f-8117-b00634c3616e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6174c85-849c-44b2-8c78-4cb6934bb138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79026e12-d541-4c69-8dac-7fc4adf3098f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de92eb2d-d74c-49af-93ae-59409b7b1a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0544fc3-4570-4fbd-b0ab-711c628ad910",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f564a593-97a8-4798-9f1f-823a255ecd8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ab6aa9-26e8-42ba-9148-dfb389a53a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83bfb82-dbaf-4e53-b294-b56020f87983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2b884c-9307-46bf-b59b-a9193ddbcdaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f017d38f-6610-4e18-b9d5-2ad25cd6fe10",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab801dd-892a-47b4-8e22-ea785be9559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ef2dc7-d3ff-45b3-b985-ea8c6bc2e195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c401cb7e-9cfb-455e-b875-87c9f87df90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07668730-1618-4306-ba3a-51fccfb2cbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c99d9c-c48d-4385-b85d-20b7d3df91fc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6749db-c6c9-43ba-9723-ec35da146633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab47338-33e1-4915-a333-19f5b0ec5aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6598db4b-b209-4415-9f5f-92e89ee3417d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f797882e-1c5a-4455-a70d-d773e5c82a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4955b1e9-5cd3-4479-99fa-12d5e2dbed9e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5871f9e1-d732-4fa0-9171-562b0f7de0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48762326-07a3-4c81-a824-93ed5571ca12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbfc0f2-5542-40d1-a8b7-30c1aa0924fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8c1e84-a87a-4059-801f-7e6118767713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93df866-ce9c-45f7-821d-074c7fead651",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5dd984-46ac-451c-9782-5a6d2b440b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8750e3a1-9291-403a-b023-89293e7ea591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc2396e-e931-458d-bd09-bb501bfb2925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a85cc3-3a5c-4eba-a261-e48adf5fecd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97aa10d-8a47-420f-9dd8-c59065bdf306",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3628d24-4ba0-4987-876c-0254e542b5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e291d95-6b6f-4cce-a8bf-d74544b47161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addcf00c-f4e0-4405-885e-77aff0105725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0861608-4458-4f9e-81ee-f1eddfa7b50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f0748e-4b49-47b5-b757-a2e866b1d6bf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd57b77f-d913-4ee0-aed3-4bb3c7166038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ff0756-dd83-4c6a-bb4a-0a317b32ad94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f99dcc-b346-49bf-b580-9f3551442f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60088544-0d19-4191-a01c-0cb4a0a44289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed745fe9-a01f-4aed-8dbf-a2632c76c105",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c9b984-22ad-4c06-9076-fc37ef7d33f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92b5f0e-b918-4d7c-bc47-ddbd583e89c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88c592d-0ae6-41d9-86ad-564a671d9a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22bcff8-2a32-402f-a57a-ce8cafb7852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce86c3fd-f53b-4bd3-935a-797975f9c6d4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da12ae31-3f8f-4750-8bf4-536b7727b57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20da8397-cd0a-48e3-9749-1c422b60f35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bf2598-d272-4a89-b54f-7c4664c63f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f362848e-7c30-4d10-9a4b-e9d637733c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61456894-e200-4052-8be6-a3c9271ba445",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634ca498-601e-4b3b-888f-e7cac5d99b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244b8540-e610-41b0-b67e-9ecd5e20d1b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8569245-b2f0-4e23-a8f2-a66824c51952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f30e60-a24b-4465-a2fe-7f50bb768f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c8442f-2870-42ac-8314-47e5aaa76c3e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89441475-2387-4ecb-ae28-18fa4e6794cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523bf70a-061e-4322-ae58-46a1a72c33a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fb6274-b32d-4feb-94b8-8d6e002aedea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872b3599-faef-4b65-86a7-80123f5166c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745e4418-b902-4035-88af-e3900da12153",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dda828-23a4-4ae2-9cff-1272be3308e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06689c6d-dda7-4b93-836b-04e1a6462931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d24cd23-0f99-4399-8047-7955773163c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089e17a7-c4fd-4c13-9089-17b63d18cdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c243b2a8-7eed-4f2e-b6d6-9e02b90e911d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15875bfd-6ab6-4003-bdc4-2c852a589943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fb0c1d-6ea9-4369-936f-5ebd51c5076a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4ebdb5-b401-4e01-9c17-919e8d7778bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e20294-d1e5-49dc-8ec1-8eb52aeaad59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fb4c2e-35a6-4603-82ae-6df6d56a90a6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab6d0fe-895d-4bab-9c9d-2faa0fa29e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59308988-2573-48e5-b67c-0f3d8950aa1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19029f0-e5db-4f51-b8f4-7c04cf1785bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13513f6d-e41a-4c95-9a77-6f0d0ec7520b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f23cb11-f80f-436e-af6f-2a812bb9eece",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5d8656-1d8e-4ced-9b76-5a3f8c16d8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eae99ae-8f94-4af1-aa1c-a0818c261bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31193a0f-e8ee-4375-9551-72c2dc15ef52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6996a5f5-c164-418b-85ab-46bdb0c1b852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c729f466-48a8-4884-913a-3e05320bb1c9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1aa933-8e0a-498d-8fe1-4b263d100682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c39d3fc-b12e-4cb1-b0f8-b6e42c4d1877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c6c340-7c65-46b4-b0e2-a405279934b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c393c99f-82df-4bff-aae9-b4174d44bebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd8bad6-c14a-43cf-b5cf-590ccc7050a1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63adfe00-de9e-4a51-a65f-9735f352e3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cabc8eb2-edf1-457b-91e8-7471336e5791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e4480a-f2ca-42f9-9e9a-1b812bd3eb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee4e3d3-a767-44d8-b9c2-b4658c5c5895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4e3f0d-8e2e-4687-8228-9ea2216ffa31",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2fd399-a1e2-48a4-9009-00952e6d1055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "851b8a2f-f957-4cf6-9f4c-19a0798194ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18e8479-f85b-478a-a360-9584b5836d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ce501a-8bf1-42e4-83b2-a793055203ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddc2ac4-0489-4840-8061-9556fd4bdb7c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f63a63c-ac9d-4b66-bd14-ee370f9f3b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c43fe0d-8aa6-4a98-9711-d0528dba42cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f096c5fa-d8d1-4832-873d-51fd9230e017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cc4677-1df9-4c92-808c-e081d0213870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da74d91-c935-45cc-81ee-22d1d5e16452",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1150d8b6-abd4-436c-a59d-3dfe9f048d45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cebc00ed-0c67-4c75-a1a2-e9be27a509ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd01a409-5978-4e68-9835-0d9b9ea96c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d88ebdc-b008-4f4a-bbf4-a04b927c8734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd335a5-1ee1-4d27-a588-46e62076dd31",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ce4df6-9e92-4d17-91b9-615b7b731b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "145fa961-e93a-4a90-85fd-92b429107e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e7cf97-6772-4d11-9a3f-ef899643fe05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d1d18a-a5f7-4d78-8ca2-abb492870f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca8f4cd-dc51-474e-b1a0-5ad80fa4234e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0ede1c-b042-4399-bbeb-1713791ac788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89dfbeff-77b8-44ca-90e8-92114ed73e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941f142c-451c-45db-8c97-991f1d6d7b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa90c2c1-593c-4a86-9f8a-7938c775f078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c96ff8-138f-42a9-86f1-2220a821448f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa99fd0-9232-421c-8621-4ab9bb6e5300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba05f9d-24bd-4a6d-9c36-9f9ec41fa10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65da3fe6-7ca0-4515-a058-b1868750c8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2784264-f61d-4cf9-9725-5d1f4a19b5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9774ac-1a26-48f7-b4e5-25a246bb41ee",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7439b156-f6ea-400f-b8d9-52f3612dd1ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a5758c-aea1-4a21-8f13-f352b3a4fa47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6757ad54-0416-4b10-b3b8-4c088b107482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83787152-e61f-4a0b-a351-1371f56018a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9b7034-c07b-4be0-8fbd-f3270e168034",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8facfb3a-d8ac-4f3a-84d0-b7a751bc0752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7872de11-1780-4c1e-9c3f-6d309c783b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b55d7dc-02eb-4e94-b2c2-1726cbf7dab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c5b871-5e44-41a1-b4a7-a609bc656054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff92a3b-aec2-4a35-88c3-16579b4b72c7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1803ea-f37a-413b-b3d8-18340fd4c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8ebe20-a5cd-4a86-a60f-e29d7294ac28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fabb61c-b0f9-46b1-a901-205bc45770d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c48271c-ca1a-4eff-a61d-0cf761ce12d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1925c40-0164-4c9b-b79a-a88db78cfb39",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b6fcb4-a443-4cfa-9463-ab8404324ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d5baea-6bd6-4f6b-9976-abc89cf0675d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65b5c66-8d6c-4bd3-9066-f407e526beb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36ea09f-52b9-4e8f-9096-51484c256d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626ddb81-4fef-4f65-8334-f768957ef10d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe0243a-4932-4d97-a9e8-18ae0ecff3d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b5dee4-69f7-424f-9494-580dde9e6b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdcbe19-dd10-4832-bfe6-cbeda4c802fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed5c8ec-bd39-4425-9384-9747b2f0d5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e717d07-53ff-4960-90e5-999ae00bc11e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642dc815-cf7f-44dd-ac06-20721aa7623e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7870cf-74a3-4b11-8a02-19d78dc1aeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7585fa-2cac-40a6-86fa-bef546c8bec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e79c3cb-ef3a-41d1-acd8-dfa1a7d91828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9ce8f0-34e4-440d-8f42-e2255f0e5f9c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e105cd1f-07ae-437b-b520-461b0b120a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bebb192-5256-43fa-beb3-9dde53debc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dff442-6f22-4986-b216-6e1d07e0aac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c04750-1c88-4b92-bcb5-07daabe7ec23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5948eee9-490e-4b6d-af5f-65421fb2f142",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e0a8b6-4df0-4af9-bb32-f92b8fead87a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d726d9-bd9e-400b-b967-e29767ef85ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61b13b9-b710-46b2-bb5b-da1b4f393992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c33ffef-11cb-4ce5-971a-7ee243594196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7817b6d-d22b-4ad1-99c0-03755a50acbb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c646f6-4eff-430a-b99d-da89674bb97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386d6654-bffc-4f60-812c-8c51467f7bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e2a2a0-6ad2-4c7f-a178-1d2c00d32182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b791db-4558-46b4-8227-24d635a40777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f59e4a-39e7-43be-9f77-61cbe4bfa85a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ebfaba-423c-49ff-8987-983ec52a572d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa65b250-7d9e-486e-bbb1-ee0d5f1d85b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c5e077-76f5-45c1-9e48-771068ffdb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a6a16d-e191-4986-ac52-74f0abe3f60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d50222-8e26-4fd0-8134-523e11fdc94f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c98e6b-5b60-4b56-9d30-c65c5d35b2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2d83933-98f3-4afc-bb1c-74e2c8b4681a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b622b2-9052-4092-824b-e08b846c5ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89745598-c0a1-4525-b053-1e04ec1f8bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea44a93c-c999-454f-8b9a-45421770adc5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20d2f1d-d5de-4c44-afde-ab19e3ee3fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec75fb30-d735-450e-84e3-9d1ab91a9b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8672a0-7fc1-4b11-b0d8-c59a0a965972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744df434-2fb5-4346-a0f5-0aae69c37db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0594b977-ae4e-43bb-a893-cfa4ed8ffd85",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6cdd4a-4768-4c93-91a5-e4fba97f165b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a42efc64-3824-4b65-87c7-65f6572f6389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3a4bab-4bcb-40ee-9534-ea5896aed1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a406ed3-cefd-4a04-92cf-e69e51553cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629c318b-5a04-4651-96cf-191e538cf5ad",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4150ad53-b50c-4256-b442-f476b91bf2ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba56bd3-ac0c-4452-b65b-4854aab54196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6304197c-3535-4bc4-9a23-c818df48b181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd376db-ab4a-4cef-ba69-4cff2b1c4f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da68b78f-4463-4c00-9855-6e6cf3a843f5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e52a45-6fa0-4849-bc6e-4f25c4b39bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4482b3ff-9d65-4220-a112-64ef47beffff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a47b13-3fca-4267-8658-3f41cb762043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c194f56-2f80-4920-a6af-99dbb5aa0405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746928c0-dd87-428d-8899-552d322c2d45",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8978b402-928d-4931-ab22-9a437beca81a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c7cf583-cc5f-4464-bba7-5505decee5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505b238b-3c50-488d-ba1a-cfe365b6678d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67586d88-bca0-4623-a6d1-c3fa6f79aa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f79e94-62e2-44dd-829d-205f71d5ed57",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaa451d-a06e-43ea-8123-9e1224feb4d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eacae88-af65-4f72-adc2-4af5aa5e2e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c194e62b-159e-4499-aea9-7fa201efc24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53090e60-c57f-4f4a-9421-4d95fb39c7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f03fb3-d003-4635-8adb-efb129116759",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4849f42b-6489-4216-b6be-6262ef939220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d12327-dbf5-435d-a56a-8b9edf6234b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932e7936-98fc-4ea8-b549-99c5d5dce772",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3573c5-d240-4703-bf4b-599b7f3b8acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a016034a-082e-44be-a598-382ea397af28",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515e0779-de01-4a9c-8915-285ee1d370cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0404de45-ffc4-4ad1-93e5-17da997d4a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45158df2-925d-4076-a4f9-8fe765fbcb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952a58cf-469a-45e6-a731-343000944e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3022f403-c54d-4688-a062-7d26f266cbc5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857d4faf-63e8-4951-b0ca-c41729183248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f20fe1a2-329c-4fca-a788-30fe26bdee25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de9ddab-ea80-44c2-9ae1-a4d30ebe6193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d18557-3124-4d0c-9f50-e11be7adf31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62099e9-6b8a-4416-b8d2-5f2521410a79",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61baa13f-d395-4bee-9a0a-a66987b79a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86b8fe3-c01e-4d0f-81d3-362af57f1aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fb9711-2fa8-409b-95a0-219af6fc045a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d95439-a50f-4def-ba62-70b26d166d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b2ed5a-49de-4795-aa3b-a6b522a61249",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad153c7d-bca7-4a68-a720-9d333b23401a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c288c0-708a-4c94-a3a2-0962ab39f6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bb9b0e-3d9d-4484-b220-2f51a4243c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8317e79-7c48-4e0d-ae50-3a99339d8d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f858e53-d71a-4e44-b114-e0b3b86c22b3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae2f856-3bf5-45c0-b50b-60983a32165c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff21509-c0a8-4118-8755-0859aec1c8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39b4dfb-3792-4ef9-8025-24a545a03d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da4d62a-7465-4961-a6f1-02edb7a54782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60b99b8-22f3-4f27-9082-c4b634ddb034",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50551ec8-1a3d-4136-9ea5-74d7461348f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99933781-dbd3-4052-a459-a10e8bb9503c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3322302d-a133-419b-82f6-2c9417025fff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1535cc6-6101-4b8c-886f-b58b2e2685cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9219c423-b118-4af4-9bd8-e9d957c74768",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5084c2-5ff2-4bac-85ff-8d0293583c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f81144-cc41-4f34-8c36-06f238c28e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7707151f-e3ba-40f8-88aa-6e7a77faf680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1acf959-f357-491c-803b-dc75b0e16a64"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c44d5923-ba13-480a-8126-d93be23b4c26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fc30dea-796a-4e0b-9cbd-1dd5f966651e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f21bcb-237d-45c3-982b-18e42a420e65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66c03497-f3dd-44d8-bd71-9d15ae80ac69"
                    }
                  }
                ]
              },
              {
                "id": "453cde41-9b52-42b1-9e7b-ace1d225841b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64142d3b-239a-483c-b6b9-89648b70822c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b385ce95-2137-45c6-9c8b-976650dfa382",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ae09d072-ab4c-4862-84f4-230bd9169caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961929eb-99f4-46ad-ba4b-65ebf81ba306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c1369dd-ed8b-42a8-8420-5727a7689227"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e49c34ca-906a-44b9-b25f-176cc22f7a4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "238e8f28-0b03-4f76-8d05-d1ffa9950c48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7566a23-4694-40be-929f-d817e39e4c9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "331284f6-75e1-43af-97b8-c1537f8ca784"
                    }
                  }
                ]
              },
              {
                "id": "451c3c46-4b93-4c5b-97c0-4fc34262be2c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "216fc0a2-36b2-4314-a431-5aea2225ae43",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2875b10-e9ea-4e16-b503-42023ad3289d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6020ebee-c0fe-499b-917d-c704d3364e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2bdf72-b06f-4861-8d03-93d759bc6984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d434d92a-4213-4080-99a1-941e3dd54bbe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e118df59-fa00-472a-80dc-63d922b95347",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9f907d4-54e7-49f9-8562-40714cd6c44c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c89bacfd-f668-4887-9bc1-926002520b03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1551443b-15e8-4990-9adc-3a1098bde4ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f88ac1c2-5856-4192-9228-e925333a5589",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9f08334-f2d7-4f1a-a5dd-6d8a4299f623"
                    }
                  }
                ]
              },
              {
                "id": "275d5ebb-d5e9-40b8-a596-ca5329598ae3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24a8487a-0c23-4582-8b6c-042dfd286a05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2634a3d2-a1c8-4660-8a73-415678f5b0e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bec53cd-8693-493b-bbbe-14db7389d986",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84fe18dc-1899-4b7c-84ac-4250e831bab7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31a6ed67-81b9-41b5-80c1-135c95bf0b83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "89174719-5203-486c-9d03-89aeb0bef518"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48e493cb-a2bb-4e94-a2d1-f6a601540a4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c234a74c-5734-440b-ac7c-7ac45969083f"
            }
          }
        ]
      },
      {
        "id": "60cc2733-aae3-4b68-8fc1-b2e5d85597bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5db19c28-5c4a-4e5a-9505-85c44187338e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5e80318-0994-4cbc-8294-6822130a4cbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "401a36f3-26ce-4b20-bd19-3a867da0b62a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1a4d92-dd76-43ff-9c92-5d3094bb042f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9eb5501f-ec64-4670-ba2d-f58fa501220e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f208034-405d-4de9-b9f2-1dee24fc678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25b236da-7c79-478f-8bd5-49c2936ae9f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "447d1670-b3a8-491f-82c1-c69fa0331f71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa231083-c8af-4de9-afb0-8c329dffab41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddcbb346-0bda-4bac-b793-368c3e131c0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79df2fdc-edfa-44eb-8246-f60230df3b78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bbec832-7255-4aa5-a3b9-c6c4c6639ee0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3723dad1-4292-4a8c-b1bf-ff1f09420d4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66c98c19-1759-4309-a240-663df9c6f411",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec6c0260-cd61-445f-87e1-18f6db39ab1e"
            }
          }
        ]
      },
      {
        "id": "891176bf-4d10-422b-ab59-e8a32e417d74",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5620995b-1782-4147-a429-887366b7c6ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9523198c-25a4-4aec-b4c3-6199230a4fa3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7335751e-1943-4509-be41-3013e55b3083",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950f6838-fa32-434d-9af4-0090f189869b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1230385-44f7-46d8-99ce-ccc0e26dc99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94697b8-def9-4d4d-af03-de0f008711e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8eec78-bb07-45e9-ae4c-445a451eae84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d8547c6-db9d-4120-bf7c-f1d4ee0398fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90da58cb-b07a-4daf-96ee-f7db772c59b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31533a78-d4b7-4060-82e7-82c174f23ef9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc5b4f35-4fd6-4847-a083-3c5f789dad28"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f1ab82b-0055-4afe-973f-03268f5a162b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "57137e10-f610-4157-9dfb-7d5de5828ad8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b4edeaf-4723-4094-9459-896c0f2e35f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "214e7083-1e50-4764-924f-05ac324c81be"
            }
          }
        ]
      },
      {
        "id": "c63b27df-2582-4fa1-bf5a-8fadd1536c70",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "83cf51a8-bc53-412a-8e3b-ceb04c99a90c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7044219c-7021-4bb5-8e64-a85a411bfc7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12f304a3-0036-4b0b-b24e-b7a192578a1c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e60371-d371-47c7-b632-6c41b28abbe7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "911356c3-a91b-4427-997f-f11f22f0e828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d7cb6e-e72d-4190-94d3-9ab96f9ee08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4de7aaf-4636-4c78-9138-82e073bf4260"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d661bc8b-199e-459a-894f-b7775088a6ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f896c49-7423-494d-8b51-5a58aeafc110"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "336dbc60-0cc6-44db-a083-a859051d06bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4612c33b-7a83-4903-8f59-e8e7bd884fc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d37ece1-18a0-40a7-bdbf-487892269dd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ae90eca6-18ae-428f-a651-0b2ef02d327a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c440346c-7192-4f21-964b-28b800fba5f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca93ce2d-02eb-482b-85ca-121dbf3ab593"
            }
          }
        ]
      },
      {
        "id": "999d5d78-36c4-41a9-aec0-fd607fd2d270",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aee0cccc-0245-4de7-9a88-51ac84f05667",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2c05e9a-864b-4f04-a74a-fb0eb8698d2c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2415ac95-aadd-4fec-895d-e2a4f0574b1a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d9b0f97-b796-42e3-806f-d3fd8baa4813",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e68ba17-d240-4ecc-8fc6-dadddd49b6c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.17857142857143,
      "responseMin": 10,
      "responseMax": 698,
      "responseSd": 81.87958067364862,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719362292437,
      "completed": 1719362317790
    },
    "executions": [
      {
        "id": "a505bb85-414b-48a2-b123-3070821bfe26",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5378ebe4-4070-47c4-964f-f3d2a8a5320f",
          "httpRequestId": "8f0ff51d-1d87-4e76-8e74-906714465fd3"
        },
        "item": {
          "id": "a505bb85-414b-48a2-b123-3070821bfe26",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5971b24f-1631-4eba-b6a6-05918ca17c92",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "ae15745d-fbe2-4de4-8df8-38b13efbe812",
        "cursor": {
          "ref": "9ebc1ef4-f246-4118-a9dc-137e6752dd90",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d744d9b9-bd2f-480b-ab34-8ea7c3245c5f"
        },
        "item": {
          "id": "ae15745d-fbe2-4de4-8df8-38b13efbe812",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "74cae057-6e2d-49db-a505-b8173a81ba01",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "edce1310-6d6e-4dfe-93de-26a754fe781c",
        "cursor": {
          "ref": "73c1bdfe-10e9-4537-b7a3-dcdfb9a44b36",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ced41a6b-45d9-4554-abd9-582ace1cb187"
        },
        "item": {
          "id": "edce1310-6d6e-4dfe-93de-26a754fe781c",
          "name": "did_json"
        },
        "response": {
          "id": "b4237cd5-bef1-4aa5-8516-cc6b33b3c984",
          "status": "OK",
          "code": 200,
          "responseTime": 362,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b37117-c1fd-4b60-b1b9-85d9ec086de8",
        "cursor": {
          "ref": "8f623437-413b-4780-ae97-571e60c2e4f0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a49b604-d1b4-465c-be7c-f60cbf0d39a2"
        },
        "item": {
          "id": "82b37117-c1fd-4b60-b1b9-85d9ec086de8",
          "name": "did:invalid"
        },
        "response": {
          "id": "3eab09e3-0d4e-432a-8422-140a5ceb5cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b37117-c1fd-4b60-b1b9-85d9ec086de8",
        "cursor": {
          "ref": "8f623437-413b-4780-ae97-571e60c2e4f0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a49b604-d1b4-465c-be7c-f60cbf0d39a2"
        },
        "item": {
          "id": "82b37117-c1fd-4b60-b1b9-85d9ec086de8",
          "name": "did:invalid"
        },
        "response": {
          "id": "3eab09e3-0d4e-432a-8422-140a5ceb5cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf988e6-b167-4994-b34f-f978ef1e97b2",
        "cursor": {
          "ref": "2f016f9a-71de-4448-9aa1-2ce26631d743",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "060cbc42-6aa2-4236-8028-d14e0766eb98"
        },
        "item": {
          "id": "edf988e6-b167-4994-b34f-f978ef1e97b2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "348ba85c-9879-4ecb-b216-42db6b4d8b9f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 307,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5fff9c-1827-4103-b105-d607610a02f1",
        "cursor": {
          "ref": "54da7c21-4a75-465f-af94-65a5779fa48b",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d0069ab6-716f-46bd-adf7-c91c73935767"
        },
        "item": {
          "id": "0c5fff9c-1827-4103-b105-d607610a02f1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "954888b8-3b8b-43e5-b5ff-29a0b033b0cc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96111f04-1808-4c30-b2b8-b0499a7356d6",
        "cursor": {
          "ref": "183eb2ca-5eb6-4805-b525-ab6314ba469a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "73bdb493-e367-4a8b-889c-e3ffde26f37c"
        },
        "item": {
          "id": "96111f04-1808-4c30-b2b8-b0499a7356d6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0dbad3bf-4b02-49a4-ad61-e3695ab36b7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5db5c11-8bf8-4536-ae3f-4acca296085b",
        "cursor": {
          "ref": "249709ae-950d-4f19-bfa7-a512366a78e7",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d83f94e7-9aca-46a3-98fb-8a8fcc68b6cc"
        },
        "item": {
          "id": "e5db5c11-8bf8-4536-ae3f-4acca296085b",
          "name": "identifiers"
        },
        "response": {
          "id": "ff41a496-5e78-4311-aad7-082f5b2fdcc1",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4608a87d-2e7f-40cb-95e7-2b1290173e68",
        "cursor": {
          "ref": "a090ed3e-8642-423a-bf1b-d73e0180d905",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eda2ebfd-d02e-4a5c-964f-aebcbad030db"
        },
        "item": {
          "id": "4608a87d-2e7f-40cb-95e7-2b1290173e68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "33ca309b-486a-4c17-b366-200a8bbed2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8553a3b0-4896-4af3-87a6-d460ccbd3021",
        "cursor": {
          "ref": "978b8e24-2f85-43b2-8f75-e57b192e19e3",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47cd604a-f317-418b-8da2-e9b508555db0"
        },
        "item": {
          "id": "8553a3b0-4896-4af3-87a6-d460ccbd3021",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ebfee939-6c63-436a-aa16-7254c2853926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7656c76-78fd-4d67-a81e-c24cd0bb317a",
        "cursor": {
          "ref": "5bdd801e-18a5-4105-9a72-1421371f183e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5cbe75ca-f1f3-46cb-96af-53f6fddd9e69"
        },
        "item": {
          "id": "b7656c76-78fd-4d67-a81e-c24cd0bb317a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0b5d90f1-7e6f-4400-a048-11c86cd8f1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b076be-99a3-49dc-867c-077b75dba49b",
        "cursor": {
          "ref": "a9bc35ee-bce9-47a1-aa96-3131225955d7",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25ebf2c9-a6fb-4be3-816d-1bb2e4f574b0"
        },
        "item": {
          "id": "49b076be-99a3-49dc-867c-077b75dba49b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "eb985a8a-fa4a-4325-b4ca-b84c2050883f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3add6af0-0515-4c85-a912-308e3657b1c4",
        "cursor": {
          "ref": "3ee5cbc9-783a-41ff-833a-33b76414d9a3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8b7e9292-f55e-4ae4-88f7-088a891432ae"
        },
        "item": {
          "id": "3add6af0-0515-4c85-a912-308e3657b1c4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e3eef6bd-717e-4812-ab86-f17dcc74c910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495d3ab0-de4f-4220-9649-d954f0b54252",
        "cursor": {
          "ref": "6bcffb13-f488-42b5-911e-7f0596cebffb",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3891120d-a6f5-44d3-935e-82508a6c9918"
        },
        "item": {
          "id": "495d3ab0-de4f-4220-9649-d954f0b54252",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1090a07c-7d9a-4aef-9033-c50ea818448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eed8869-2999-4776-8564-148be3c8b894",
        "cursor": {
          "ref": "b7425a05-8d3a-4275-adc7-7d9135f658a1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e148af85-f3d1-4a4c-8dc5-bc654eba47d6"
        },
        "item": {
          "id": "8eed8869-2999-4776-8564-148be3c8b894",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c7505a8c-d4bf-4b1b-8b1b-d71777ea12d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5914742c-a1ff-41a2-a3f3-82907c7fe959",
        "cursor": {
          "ref": "1a20ee4d-b442-42b8-83a1-8ef18dd24977",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55cb5334-96c7-43bc-8cf0-1e5f0a4a812a"
        },
        "item": {
          "id": "5914742c-a1ff-41a2-a3f3-82907c7fe959",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b7c9a871-3c54-402e-b1ab-d06b2395077f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25191719-beec-4c95-b322-78d22298548c",
        "cursor": {
          "ref": "11cf485b-d66b-4573-b4fc-217edc3e1485",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e485431-464e-4866-b447-5f81b7dc1b07"
        },
        "item": {
          "id": "25191719-beec-4c95-b322-78d22298548c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3a59d504-412f-4420-8f3b-80818daf6619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18fa529-d704-4d4a-a0c4-152807920205",
        "cursor": {
          "ref": "c5ba6b02-2a4d-4ad1-8072-8054a36425ca",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "63e5d7d1-e1b6-4181-bc09-afb3a994469a"
        },
        "item": {
          "id": "f18fa529-d704-4d4a-a0c4-152807920205",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "093aad6b-26b6-484d-abeb-0ac21a27bc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4f24c2-9611-40c8-8746-979bc893abf0",
        "cursor": {
          "ref": "0fa989f8-40db-48be-8719-8a7c1a1be601",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3676cf85-20ce-4338-8a98-62b41832f16c"
        },
        "item": {
          "id": "5e4f24c2-9611-40c8-8746-979bc893abf0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ba470a8d-295b-4340-ae4c-e1b3b9c94a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b432fd-15a6-4587-b796-b6530177f382",
        "cursor": {
          "ref": "f44e81c1-79da-4e38-829b-5f6e6a4b352d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eec464ae-471a-4d59-8554-51cebd057ca0"
        },
        "item": {
          "id": "56b432fd-15a6-4587-b796-b6530177f382",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7f0a0a51-109e-46e1-be57-c8db5e330ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6544fe52-ce72-44ef-a7e9-38bb099bda47",
        "cursor": {
          "ref": "448d7e62-2412-449f-92bf-581bab26b9ec",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "85fe9a3e-0e4d-4898-b488-98ff4ca65683"
        },
        "item": {
          "id": "6544fe52-ce72-44ef-a7e9-38bb099bda47",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8642c57b-ff4d-4c90-bce0-523dc9ec3b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996cc834-a7ac-47ac-9534-5e05c5747748",
        "cursor": {
          "ref": "6a6ae3b0-caa1-424b-94a3-87a560d4ac45",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d5cf0a97-88eb-49c6-8e18-11b5ffdd9d4a"
        },
        "item": {
          "id": "996cc834-a7ac-47ac-9534-5e05c5747748",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3194ac60-f2b2-464a-a5a5-d781fd3b028b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9d89c0-33e4-4b59-9fbe-912306551bfb",
        "cursor": {
          "ref": "19f27fa7-bc93-419c-aab9-b928e513068c",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c6936761-45e1-402e-85bb-4203b7f59da5"
        },
        "item": {
          "id": "fe9d89c0-33e4-4b59-9fbe-912306551bfb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b574c91c-0b27-4bbd-a7f9-be9e0ab742ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f78ac37-6039-4b4f-bf17-5e0354cc6ca6",
        "cursor": {
          "ref": "6293d437-38e0-40c0-84ba-9fb8d551d4db",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "647dfe1e-7f92-494b-900f-26238c334c78"
        },
        "item": {
          "id": "2f78ac37-6039-4b4f-bf17-5e0354cc6ca6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e226b0be-5b80-45fa-b413-3016175c5db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddc831b-059c-4727-88f6-5830d2774f2f",
        "cursor": {
          "ref": "ca12827f-9a08-4633-8702-b6a047589302",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "453e1c67-612c-4746-9e25-62acd1163316"
        },
        "item": {
          "id": "3ddc831b-059c-4727-88f6-5830d2774f2f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "08548125-4e74-4245-802c-93720f93326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f06f30-c5a6-4186-8392-551b49dc285f",
        "cursor": {
          "ref": "66c90544-993f-487b-b03a-a347f49c7bc7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c377a325-caf3-4390-ba0c-c947d9db31bd"
        },
        "item": {
          "id": "73f06f30-c5a6-4186-8392-551b49dc285f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fad8cc1e-4498-47fa-a984-df325f56e0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f35a312-132e-4661-af72-551c7896e4ac",
        "cursor": {
          "ref": "037ad24d-9f4e-42cb-965b-81abc7141760",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b76b54b3-80aa-435c-91f9-622693e0722a"
        },
        "item": {
          "id": "9f35a312-132e-4661-af72-551c7896e4ac",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d226e709-feb3-4550-a398-d434ac17a119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c35d9e5-edb5-4314-b3d1-ba370a9270f6",
        "cursor": {
          "ref": "ca847800-f0d2-479b-bfb1-7644ab583408",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4ed85986-674c-436c-a215-1426f2c7f6b7"
        },
        "item": {
          "id": "3c35d9e5-edb5-4314-b3d1-ba370a9270f6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "62f2d02a-7d2b-4bc3-8417-020084e05425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41697517-0121-4a7e-8f68-fb5334e60979",
        "cursor": {
          "ref": "d2e05a70-9fe5-4e81-a0bd-b4efec2ff09c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e920fdd3-47db-4e4c-8e19-43cbb7de3409"
        },
        "item": {
          "id": "41697517-0121-4a7e-8f68-fb5334e60979",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "286f8d4b-90f9-45ab-876b-41e4128efe46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725e6ec9-faf6-4376-9e71-20bdb7f006f3",
        "cursor": {
          "ref": "49e83ca6-5ca7-43b8-b69d-e9a16307ec45",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b8902225-d00e-4248-aaad-86ba05411649"
        },
        "item": {
          "id": "725e6ec9-faf6-4376-9e71-20bdb7f006f3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a306b32a-6944-43ed-aae1-25dccf7c0859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e8c9c3-28a3-4dc0-8a48-85906b8ea38c",
        "cursor": {
          "ref": "f53e974e-d6fd-4910-bd30-08b01eee6b1e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f217f112-f55a-4038-bad5-25bddc80180e"
        },
        "item": {
          "id": "46e8c9c3-28a3-4dc0-8a48-85906b8ea38c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3c224dcd-1fde-4e08-b58d-f19ea432eb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6166f9-f07c-4331-85bd-8eec814dcff6",
        "cursor": {
          "ref": "6a276c8e-a2aa-489a-93f6-61e57c486fee",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bad5e1ca-c377-4f42-9b60-ea8bd7a60581"
        },
        "item": {
          "id": "4c6166f9-f07c-4331-85bd-8eec814dcff6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b84837c7-8710-4d0f-b701-1b321d84874b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe00273-71a6-4267-a53c-7600f2018b78",
        "cursor": {
          "ref": "28cdefa5-c9e2-4443-b92f-82587d6cbdcf",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c2642921-d7ae-48dc-805b-24a55140b7bb"
        },
        "item": {
          "id": "9fe00273-71a6-4267-a53c-7600f2018b78",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cd77d5d9-3def-4f2d-a31c-9d86bbdfa397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15377361-fd96-4582-8498-8b994b11badb",
        "cursor": {
          "ref": "b2b9c2a0-15f1-4135-999d-07c6fd989fd4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "69cd6a7f-55e5-4807-87e6-bc1dd8805a84"
        },
        "item": {
          "id": "15377361-fd96-4582-8498-8b994b11badb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b0539ff3-7bb0-4dac-97d9-09825fbd478b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af16ecc-988a-4524-812c-b46797ab7373",
        "cursor": {
          "ref": "93f5802e-7b77-4bea-907e-0a7811aae7d0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0980e5f8-97f5-4c9e-a12a-7da7bf48a5d0"
        },
        "item": {
          "id": "1af16ecc-988a-4524-812c-b46797ab7373",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9aa2ad02-da41-4cc7-8943-f2d5ac85f43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d702c4a-89ac-4c9e-9876-870582381fef",
        "cursor": {
          "ref": "c13821e4-ae26-4c91-8df9-a70835d2d609",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "207db151-0e04-46d5-8d7a-9fcb622df9f6"
        },
        "item": {
          "id": "9d702c4a-89ac-4c9e-9876-870582381fef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bd035efe-d9fd-4352-bb54-ac530ff7725a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73019ec-d224-493d-9f23-73d1eeefb081",
        "cursor": {
          "ref": "3e20b0ae-9b22-4b14-9b75-d7e66832b8ad",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a53353d1-96eb-4b4c-bb08-cc1111303d3d"
        },
        "item": {
          "id": "c73019ec-d224-493d-9f23-73d1eeefb081",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7a24740e-693f-419a-a933-4db08414c7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396d2dfc-8cb9-483b-8814-55446cc5d232",
        "cursor": {
          "ref": "ed26016c-8691-4e75-b041-17c3a555bcd4",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11b7d8d6-7e83-4915-9cd5-e36d96419b11"
        },
        "item": {
          "id": "396d2dfc-8cb9-483b-8814-55446cc5d232",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "58a37121-0818-4059-b952-617f4a279452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55139e8-02a7-479a-8634-6d83b7e512a2",
        "cursor": {
          "ref": "8ee07195-cce0-4fc6-a8b3-3f82f8654d47",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7641916f-a6ba-4296-b75c-e83bf68d6611"
        },
        "item": {
          "id": "b55139e8-02a7-479a-8634-6d83b7e512a2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "20613ead-ba1b-48d3-9383-994f59883414",
          "status": "Created",
          "code": 201,
          "responseTime": 698,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e6806523-b625-4426-9602-188d21385f01",
        "cursor": {
          "ref": "ab0b29ba-0077-48d2-a2b9-7c95ab336c8e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f9f4697b-e9cc-4d6f-96d4-014bed12cc4d"
        },
        "item": {
          "id": "e6806523-b625-4426-9602-188d21385f01",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b7bdb31e-c1f0-4c49-a2c7-d9d9876779b7",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "61b04bce-269a-46c8-a1be-355db1105095",
        "cursor": {
          "ref": "1ebbcbad-f7aa-438a-87b7-b6bc8c53bbc0",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b933ab7c-92eb-4919-8e09-14be9be36c0c"
        },
        "item": {
          "id": "61b04bce-269a-46c8-a1be-355db1105095",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "edffc5f1-a3e1-42e0-b8b8-2283e6a64f60",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "183cd9d2-0878-4050-a068-6a1698cbc608",
        "cursor": {
          "ref": "6b007b56-4ac8-4b42-87b8-e5163c07183a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "372827b5-e630-446b-9012-5682c05ef24a"
        },
        "item": {
          "id": "183cd9d2-0878-4050-a068-6a1698cbc608",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "67f07ee2-72d3-49de-a5b0-5975e4f678d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7282e4a1-28c8-41ce-84bd-2c2a0cda5653",
        "cursor": {
          "ref": "348f7157-1d0d-4d4d-9abf-4e0d7c659509",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c82caa04-e43f-4c45-8af3-3efcbc00fe54"
        },
        "item": {
          "id": "7282e4a1-28c8-41ce-84bd-2c2a0cda5653",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "950acadd-9a56-41b8-a002-bac47ffc4921",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3fc4f99f-7934-4d4b-9dc7-c86eae8ea0e6",
        "cursor": {
          "ref": "6b1a9614-b7d2-4563-8cd1-a3665ddf39a5",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19d3e740-a233-42ba-b275-687a071fc72f"
        },
        "item": {
          "id": "3fc4f99f-7934-4d4b-9dc7-c86eae8ea0e6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d02ca26b-fb42-4960-9a0f-88c5fe79d1b4",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "934a8ad1-5d29-467a-baf9-4b7162db5527",
        "cursor": {
          "ref": "9f65fa21-c2c5-46e7-9844-c7b3ceb0eb07",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fcfa64ee-88dc-46f8-b111-f651ddd43ba9"
        },
        "item": {
          "id": "934a8ad1-5d29-467a-baf9-4b7162db5527",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4ca43e92-3c51-4bde-b90f-063d98cd0414",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "233f58b9-823d-4f8f-bc3d-fe1dbd8ce6ab",
        "cursor": {
          "ref": "d48cde25-c1fc-4499-8cf5-c454c29e0c75",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "33f57da8-7af2-462a-ace5-905e342f3ade"
        },
        "item": {
          "id": "233f58b9-823d-4f8f-bc3d-fe1dbd8ce6ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "036d1de1-9063-41a8-8151-7a72b6c367a4",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ed4427ac-1662-461b-93bf-dcde64a09c49",
        "cursor": {
          "ref": "d9c9b3a0-3c6f-4c9d-8e03-ace3e18cc22d",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96a6526d-d690-4c07-b984-89aacc686c2b"
        },
        "item": {
          "id": "ed4427ac-1662-461b-93bf-dcde64a09c49",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c5cdb42c-c01b-4cca-87aa-d055e8e050f8",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "00661f9f-de3e-43d0-b9f5-d248a9d21bc8",
        "cursor": {
          "ref": "744b7e40-a8e2-4162-899d-39ab8298099a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4f830e32-f554-4be7-90c1-1cc93bfdf78f"
        },
        "item": {
          "id": "00661f9f-de3e-43d0-b9f5-d248a9d21bc8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0b7177c3-88f8-4332-abd1-1a090e6fc4dd",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f398f0b7-a58e-4cb2-9a2f-fed2fa09110f",
        "cursor": {
          "ref": "40881bbd-dbd5-4a5c-adb3-b1b5ab7a2b23",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b1504e2c-f71b-4a6e-9046-78ac38a1ed4b"
        },
        "item": {
          "id": "f398f0b7-a58e-4cb2-9a2f-fed2fa09110f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ba22ffe7-295a-428d-a4b9-734c5aa51dd7",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "674c0c29-4b7a-46b6-9cc4-9390b3b040b8",
        "cursor": {
          "ref": "3155fde4-7ac7-402e-a6cf-2e6449cabfd0",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7394594d-fe92-4e4a-a3fa-25effcf45a01"
        },
        "item": {
          "id": "674c0c29-4b7a-46b6-9cc4-9390b3b040b8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "be19bc5a-6a0a-4590-8b3e-64798c171b77",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7484d659-86f5-4f4f-b1d4-2160d0f11db3",
        "cursor": {
          "ref": "a69fe31e-5486-4fb4-b004-961bf34e4c3e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f6c5319a-5b26-4456-83e7-a75c14bbfc70"
        },
        "item": {
          "id": "7484d659-86f5-4f4f-b1d4-2160d0f11db3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3b6b4c65-668e-4ab2-aec4-df5f4f1ec6b9",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7d6d40da-b01d-4b59-920f-0fb2777b13d2",
        "cursor": {
          "ref": "a0785aec-fe4f-4ca0-8c56-f971135386b1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8cb16ee5-1b4e-453e-a72b-30cb56c5d9c6"
        },
        "item": {
          "id": "7d6d40da-b01d-4b59-920f-0fb2777b13d2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "38c42aae-21a8-485a-ad12-3ca661403ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd45799-d3b0-43d2-8cae-13ede7389dfe",
        "cursor": {
          "ref": "e94bd75a-1c94-48c7-bb6c-9e727730a6f9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1c782b3c-f58b-45a5-9699-3e2b32c9cf13"
        },
        "item": {
          "id": "0dd45799-d3b0-43d2-8cae-13ede7389dfe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c2bfe58-4902-4327-8747-5335bce521d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70424b21-b4e4-4337-869f-b415c9ea83b5",
        "cursor": {
          "ref": "38fa41bc-a1b0-4910-8cd6-7e9640444b08",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b5b8fbdd-a04c-4314-bf6f-2861eaa7895d"
        },
        "item": {
          "id": "70424b21-b4e4-4337-869f-b415c9ea83b5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2798454a-be2d-4260-a6ee-8c61acbf36cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b753c508-99c2-40bb-b8e8-76e8ad0a2c19",
        "cursor": {
          "ref": "1ddd366e-ae8a-4be6-9b49-f17a4457db2a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c87ac907-4f97-4e6b-895f-4b2c8e2159d8"
        },
        "item": {
          "id": "b753c508-99c2-40bb-b8e8-76e8ad0a2c19",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a04e094b-77ba-49c2-8847-b3f0f0532d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0094883a-e8c8-4994-bd2b-243080815346",
        "cursor": {
          "ref": "cbc6f4a5-918e-4da6-b006-c31fcc55b2f5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "97759a2a-f0f4-4506-b3b4-148741a63ee4"
        },
        "item": {
          "id": "0094883a-e8c8-4994-bd2b-243080815346",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0ee16761-949d-4d66-a993-13f196943022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d1e870-b7af-490f-846d-34f712a9cd0b",
        "cursor": {
          "ref": "0e75564e-2e91-4a30-9d82-3fe7070f9d2a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dc4b6e2d-32f6-4d03-98ed-2074d9945ee7"
        },
        "item": {
          "id": "c3d1e870-b7af-490f-846d-34f712a9cd0b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "681815df-c57f-4b74-93a1-4bf42b5e4f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e25fd8-357f-4022-82d6-cb13515fa479",
        "cursor": {
          "ref": "e434753a-f65f-4a1f-9087-d34256983985",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1c966f30-6d03-49f9-bf5c-c308c7e3612a"
        },
        "item": {
          "id": "42e25fd8-357f-4022-82d6-cb13515fa479",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aff42600-e93e-420f-a195-50ce43396f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b229d2-954f-44e8-ac14-f1d4fd1020cf",
        "cursor": {
          "ref": "91b151f4-37ff-4ea2-a9e2-5f158e9cfa0f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5143e90e-9c3f-4b44-a316-31c3247916cb"
        },
        "item": {
          "id": "70b229d2-954f-44e8-ac14-f1d4fd1020cf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0dc5a0a5-c7c3-4eeb-8ca7-8da96fa72f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e025d468-1576-4f78-a118-5c2b12d6c310",
        "cursor": {
          "ref": "40989e4b-ccd5-4cbc-8380-52c5a43af0e4",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0797a856-e935-40ce-9816-5c221c09c7d4"
        },
        "item": {
          "id": "e025d468-1576-4f78-a118-5c2b12d6c310",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ff9850fc-aa59-4d7d-a7a6-a9f604f25f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808f941-6e8f-410f-a4b5-192783f8a8b2",
        "cursor": {
          "ref": "e17dfc15-72d6-4364-87d8-403d9b65925d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5dd49ef6-0366-495a-82c0-e103c4ca781a"
        },
        "item": {
          "id": "8808f941-6e8f-410f-a4b5-192783f8a8b2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "406cceeb-e56c-4b97-8dcd-41cb9d3f1f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151c64f7-8c87-4fba-a0ef-8b77523c0636",
        "cursor": {
          "ref": "fd30dcbf-949d-4f5c-9664-0139e1019b3c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "411894a0-e639-41c6-aed2-de4872b54f6b"
        },
        "item": {
          "id": "151c64f7-8c87-4fba-a0ef-8b77523c0636",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "df55d978-2082-48e7-9bea-a6176e896286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490cdfa1-cf2f-4552-ad6c-7e2e421b187b",
        "cursor": {
          "ref": "2007fcac-89ab-4987-bbb2-b78aa188e33e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "033d8854-8773-4795-b078-cde7495e60f6"
        },
        "item": {
          "id": "490cdfa1-cf2f-4552-ad6c-7e2e421b187b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c48cac9e-c0ea-4838-aebd-a21e57ec9962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffb3ec0-21d7-4a21-8f43-1dfc1a0bf774",
        "cursor": {
          "ref": "a1fda3d7-4f66-4b34-b1f8-f1f674de0d84",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fec8079f-d55d-4182-8cc1-233e0ccec684"
        },
        "item": {
          "id": "fffb3ec0-21d7-4a21-8f43-1dfc1a0bf774",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "97f4b66e-01a2-4477-ba15-08cf258a8e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedbe502-ee04-48dd-9f2c-8b3e14b69faa",
        "cursor": {
          "ref": "b7e74ebf-1b2c-40ed-ac12-2d6d2656bcc6",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5f0abf86-df5c-43d0-bc01-38683c526716"
        },
        "item": {
          "id": "fedbe502-ee04-48dd-9f2c-8b3e14b69faa",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a4b7039a-1e8e-4751-a0c3-4405e4746ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0eb2534b-4b71-43c3-bdea-5f15306c7c74",
        "cursor": {
          "ref": "bc6b565e-92a1-41fe-a141-3d43a74b5ecc",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "49eba263-1920-46d2-8ac8-3f88a4504732"
        },
        "item": {
          "id": "0eb2534b-4b71-43c3-bdea-5f15306c7c74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "63585185-b315-47a6-b768-ae8e08e2d352",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "87664b13-8dc1-465a-83a0-8be5174c65c9",
        "cursor": {
          "ref": "9a9af72c-d300-45dc-9b40-403378a39f4a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ede7143-0388-4c3e-8df3-6e99d35160cf"
        },
        "item": {
          "id": "87664b13-8dc1-465a-83a0-8be5174c65c9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "04541461-1f69-4454-a83f-ab2b5575fab6",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2f48571f-8900-43a2-b2cc-be3e7281310f",
        "cursor": {
          "ref": "3a7bf5bd-7cd7-4868-b2dc-e5a3144e0b35",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6d613aa9-2b95-4f9a-8339-cfb2b1bf12a7"
        },
        "item": {
          "id": "2f48571f-8900-43a2-b2cc-be3e7281310f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aaf3464b-c70a-4da5-b147-1fd47779815a",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d5368153-8741-4cb9-bc84-95005f54185d",
        "cursor": {
          "ref": "dcd0bf97-ace6-4a3b-afcf-5671843af41e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d7577f09-1ad2-4c7e-bca2-068a1e918949"
        },
        "item": {
          "id": "d5368153-8741-4cb9-bc84-95005f54185d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "743465f9-c2ae-4a6f-8f6f-b507976513e2",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "710f2003-1f29-4818-aa59-5dd3242ffff8",
        "cursor": {
          "ref": "7321d049-20b3-4144-8426-adc936f6e73d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e31d3301-5f60-49cc-b78f-bca762ba92d1"
        },
        "item": {
          "id": "710f2003-1f29-4818-aa59-5dd3242ffff8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e669afd5-b40e-493e-b6ef-9d0e8c05044a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e878a9c-7034-4f69-bfbd-678f714f2d45",
        "cursor": {
          "ref": "9c6f47ff-1774-47d9-ae7b-9f60f533ef0b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "95a26683-a1ad-4b33-825c-41fd1904a72f"
        },
        "item": {
          "id": "6e878a9c-7034-4f69-bfbd-678f714f2d45",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f36c504d-2260-48f3-8020-28c1cc7c5ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eda6837-3192-42f0-b5d0-3cc14a1c6ea5",
        "cursor": {
          "ref": "0b52119b-399b-465b-b4e4-d2ccbae69a30",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6b53fea9-510f-4446-b674-11e7d48bc726"
        },
        "item": {
          "id": "3eda6837-3192-42f0-b5d0-3cc14a1c6ea5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7af84677-7b5e-4194-a72b-6d75d414fd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f78c5ff-c70b-4b79-980a-357504fc0dcf",
        "cursor": {
          "ref": "1727adb1-8839-4ed4-8c09-c296e56e35e7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "750097fb-b540-4e42-805f-8198a37e8dfc"
        },
        "item": {
          "id": "8f78c5ff-c70b-4b79-980a-357504fc0dcf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5e5d3477-cb9a-483b-9015-fa2c2695bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35069005-c48e-41b1-84a3-c733c09c19ce",
        "cursor": {
          "ref": "8670e7c5-a097-4d71-9965-7d64b6f11a7c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "86df9409-daed-416b-ba87-d1855066be80"
        },
        "item": {
          "id": "35069005-c48e-41b1-84a3-c733c09c19ce",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "242b0ffc-9ca2-4755-8df0-b88098656ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f2937a-c727-49bf-9e56-5074ea98980b",
        "cursor": {
          "ref": "fcc29c67-c7a2-4841-916d-280ed93e25ba",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "50598054-2ab7-426c-b7ac-8db3a2b689e2"
        },
        "item": {
          "id": "97f2937a-c727-49bf-9e56-5074ea98980b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b5c76f7b-6f09-48aa-8d73-754d0026ab83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9cf43f-5bad-4326-823e-a2e88970adbe",
        "cursor": {
          "ref": "54528a40-4017-4432-ba74-d6bdafd1d60b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "758842e5-3449-4c13-8aca-81649028e904"
        },
        "item": {
          "id": "3d9cf43f-5bad-4326-823e-a2e88970adbe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ba99ca87-b47b-44f6-81b1-2f528184737b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfce339-a28b-419c-8eef-857dc62b1ec7",
        "cursor": {
          "ref": "62dd2c8a-896a-47c5-89fc-18b8d18b55ca",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dd1dafc5-36e7-4ef6-81e7-d780635fbf81"
        },
        "item": {
          "id": "acfce339-a28b-419c-8eef-857dc62b1ec7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b2eb40bb-ec4d-4425-9170-bcbd8dbeaaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0223fc4-9b1b-4d29-a8c2-d3d2fc0d205a",
        "cursor": {
          "ref": "b138d060-9956-4f4e-81ec-160f44dfd394",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "364f336b-bb3f-47f5-94de-1af59540c0c0"
        },
        "item": {
          "id": "a0223fc4-9b1b-4d29-a8c2-d3d2fc0d205a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "956aa6eb-2e68-4ef2-8b1a-96f2a420799c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2896e9fd-2e31-4bbf-a501-fc94644f100c",
        "cursor": {
          "ref": "c8912110-5f70-412d-8250-a332581bd7b1",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33ae09c5-eb94-4573-b405-162bd606b198"
        },
        "item": {
          "id": "2896e9fd-2e31-4bbf-a501-fc94644f100c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a7cd6f92-8c0f-4171-8f8d-15411a130a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fdbd27-7931-4053-9a2b-c4a881bea63e",
        "cursor": {
          "ref": "b72fddd2-1355-46e4-98a4-acee32238a5f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "92195ce0-eec6-41f6-b52a-01e08daffef4"
        },
        "item": {
          "id": "01fdbd27-7931-4053-9a2b-c4a881bea63e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "54d35a04-f8f9-42eb-9a5a-afbfc5312003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c142bba-4842-472b-84b3-95b9ca5c3d7c",
        "cursor": {
          "ref": "aa5b14ff-9f0d-4443-851f-db9149b3cc77",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4a84672b-9c0c-4452-867a-f65590f568a5"
        },
        "item": {
          "id": "3c142bba-4842-472b-84b3-95b9ca5c3d7c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a4f2cde2-dffa-4f32-b32b-b9e9aac0857e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f74681-ef85-48db-b13b-cca2fbb1d077",
        "cursor": {
          "ref": "cde9e333-5a5d-4987-bfcf-4eee7b4594d3",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "91cc0323-599b-4a91-9c33-78923736a6b1"
        },
        "item": {
          "id": "e5f74681-ef85-48db-b13b-cca2fbb1d077",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4b02bf15-9a2e-4f84-9e19-6d9d1cbcb117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113cc18f-d19f-4ed3-a12b-4c0fd595d843",
        "cursor": {
          "ref": "705dc980-ce1b-4164-a495-6bf2562185a9",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0fc591f4-ea7a-4349-a3bb-64ee2a0bb806"
        },
        "item": {
          "id": "113cc18f-d19f-4ed3-a12b-4c0fd595d843",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b447bad9-846c-49d1-85c2-c3a51a5a4b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3afd96c-1fa4-441f-a76c-c50bd98c774d",
        "cursor": {
          "ref": "c3f0a9d0-a82a-40c4-ae8f-d7e95df665bb",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bfaab82a-71bd-4141-b7bb-c2e4d4192b4d"
        },
        "item": {
          "id": "f3afd96c-1fa4-441f-a76c-c50bd98c774d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "114a0425-2441-4013-9bcc-94449badd126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce77fa0-178c-46c0-9a61-a5cffc753324",
        "cursor": {
          "ref": "936c7043-e7ef-43df-a8df-548107212315",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d43ce85f-c090-4e65-b045-645c0aef2f2f"
        },
        "item": {
          "id": "bce77fa0-178c-46c0-9a61-a5cffc753324",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "03104366-2fc7-426a-a061-2ab6db75ed7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d8f561-c3ef-42ac-bac4-0e154db9a89f",
        "cursor": {
          "ref": "8363969d-2ff3-4ab2-aedd-f586b7d40e10",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0c07208f-b697-4d43-b8a7-de93dc379adb"
        },
        "item": {
          "id": "d3d8f561-c3ef-42ac-bac4-0e154db9a89f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "dc30f675-e3e5-4080-a8ba-751370ca260b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d8bbe-24f2-4789-be5f-832d47757213",
        "cursor": {
          "ref": "291a85e2-b60c-4fd8-94cb-4206ea151df7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8fe5ac87-50b3-47c6-89f0-0f1ce6bde5d1"
        },
        "item": {
          "id": "040d8bbe-24f2-4789-be5f-832d47757213",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9efa5766-3515-409b-b96c-a9c5512eb146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb8662b-fd6a-4b97-88d7-c33f618df034",
        "cursor": {
          "ref": "d09019c1-11ee-4140-9f8c-50cf863577ae",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f26429de-4f56-4e6b-8677-8710a1300997"
        },
        "item": {
          "id": "cfb8662b-fd6a-4b97-88d7-c33f618df034",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "acfe7e4f-104f-47e6-a024-6e8baf1facd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70f1494-7621-4603-83ca-576eec11188b",
        "cursor": {
          "ref": "650c0fda-e59a-442d-8648-3af477fb410a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "88dfef09-5f6b-42db-8d60-915ab59dd8cf"
        },
        "item": {
          "id": "f70f1494-7621-4603-83ca-576eec11188b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4f8fd71a-568f-496f-8ff4-7973e05271ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346d5f51-18c0-4c50-b084-e18b6516607a",
        "cursor": {
          "ref": "37dda641-d15e-4194-a638-6cdf9b581bb8",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "acb6ba94-1928-4a4d-b4f9-a7556f19dd8a"
        },
        "item": {
          "id": "346d5f51-18c0-4c50-b084-e18b6516607a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6b4dd3d5-6852-4955-b746-97284a97ed53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50238268-ee11-4a0e-91ab-d04c52a24037",
        "cursor": {
          "ref": "27552c22-0ff0-48a1-b762-5e0f20be299a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a953fa62-4436-48e2-b08b-e95ad9d0f00b"
        },
        "item": {
          "id": "50238268-ee11-4a0e-91ab-d04c52a24037",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "54dde987-7957-48af-a5f0-0d8117a882ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e136996b-9c91-4035-b27a-cef3c182eb43",
        "cursor": {
          "ref": "7e89e6f5-eea2-4679-b79e-64da2b481b99",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a5f1f4ea-9ff7-4e89-a860-45fdca55ad45"
        },
        "item": {
          "id": "e136996b-9c91-4035-b27a-cef3c182eb43",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6f898086-ca3e-4f41-a7db-753ba9af049d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f310c2f-977b-49ea-ae6b-2739649f918a",
        "cursor": {
          "ref": "448a3f67-4ceb-4026-bbf8-5d0e4cb69fc0",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63fc8805-6226-486d-bf3e-388e29989498"
        },
        "item": {
          "id": "5f310c2f-977b-49ea-ae6b-2739649f918a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e811f3e4-b39b-4d74-97a7-afb3e6ae698b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab9fabc-eeed-44dc-a709-92e254d485f5",
        "cursor": {
          "ref": "77c27a7e-119a-46ff-92a3-132dda329016",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "affb0ee7-b81f-4ab9-944e-060087b92b3b"
        },
        "item": {
          "id": "5ab9fabc-eeed-44dc-a709-92e254d485f5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "430fe30c-0df3-42b8-a2ad-ff8a4b3b7c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d16349-22be-4408-af93-85f501035220",
        "cursor": {
          "ref": "029c1b10-f697-415c-9f52-66fb5c06756e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0f2c5a63-409f-489b-9c6b-78e6e135291f"
        },
        "item": {
          "id": "a1d16349-22be-4408-af93-85f501035220",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9ad0d455-1b5e-4efa-929a-016b29abce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d244774-9471-4731-9bc0-5a77df9e2d6a",
        "cursor": {
          "ref": "e2b72b3e-9b1c-4000-879d-db9897b928af",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d2945634-814f-46b5-a2b1-8acbb85976cf"
        },
        "item": {
          "id": "1d244774-9471-4731-9bc0-5a77df9e2d6a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "64d62c0d-686b-4b35-8b82-738b26227af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aea469-0ef4-4eca-9602-962555707dad",
        "cursor": {
          "ref": "bf7ae557-33c6-4e83-a865-7ad3bf6d30d1",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "79e4ac6c-f75b-4a82-83d1-952d33c51530"
        },
        "item": {
          "id": "b8aea469-0ef4-4eca-9602-962555707dad",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9fcdcdee-4170-4112-ac47-b46fa42bc7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb5670f-5c86-4735-887c-6a1c4b5d12cd",
        "cursor": {
          "ref": "69076c73-f243-4bcc-9a8c-76c50c4c0d2c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d5445864-bb5c-4de0-b176-b810339c4be1"
        },
        "item": {
          "id": "eeb5670f-5c86-4735-887c-6a1c4b5d12cd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a0f76691-ba4b-4684-a09d-c51daeeaaf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8ac1c2-37c8-46c7-a7ad-9330b92b759d",
        "cursor": {
          "ref": "de26276d-5252-4b39-b805-8981d3437ed7",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "11c9a49b-616c-41a0-9c2b-d89bb9e63a5b"
        },
        "item": {
          "id": "1b8ac1c2-37c8-46c7-a7ad-9330b92b759d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "37306379-8b4d-427a-a306-bc37d3781403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e599c3fb-cc58-47ec-875a-9bb8599151e8",
        "cursor": {
          "ref": "e2f7d3f1-5ad2-4e5c-876f-cff0083dbe4d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f1828495-45dd-4458-bba5-c8521c413c90"
        },
        "item": {
          "id": "e599c3fb-cc58-47ec-875a-9bb8599151e8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "59c4f420-2afb-42ab-a34f-36d1ef6a6f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239db83-7e67-4b84-b3ac-742ac0851fbf",
        "cursor": {
          "ref": "1ef0561f-3cba-4d9d-91dc-2be7c2c664a8",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77f92b53-385d-4b8c-ae44-44a8561f8d28"
        },
        "item": {
          "id": "c239db83-7e67-4b84-b3ac-742ac0851fbf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e0fdf4e6-d757-4f2d-936f-326d1566522b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ed4ae7-a9bc-4443-8faa-88bf034d08d8",
        "cursor": {
          "ref": "7561217f-f427-4afd-8581-59e86b606944",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2f0f15aa-04d2-4820-8a03-77fa1f38595a"
        },
        "item": {
          "id": "24ed4ae7-a9bc-4443-8faa-88bf034d08d8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7ebb1c54-0d19-4e52-9f16-499d1ec1c3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "050a76d5-ce06-423e-9e59-3216aa4fdc57",
        "cursor": {
          "ref": "d56a0608-b4f3-46f4-868b-0815f6a67683",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9016c6eb-81af-45be-a0b2-5e6bca085c2b"
        },
        "item": {
          "id": "050a76d5-ce06-423e-9e59-3216aa4fdc57",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6449af84-1a1b-4c92-85c0-e64966d9ee14",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be11d21-5ceb-4c50-9b23-ca8543c9d1c2",
        "cursor": {
          "ref": "d0439be2-caba-4668-ab22-54c9c51af244",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "29ddc294-c9ec-46d7-a97f-6f5d35c98c11"
        },
        "item": {
          "id": "2be11d21-5ceb-4c50-9b23-ca8543c9d1c2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ba19b55b-a424-4c72-ae00-f1d5ab096398",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e62376-36cd-40d9-875f-b9e21fe63d9e",
        "cursor": {
          "ref": "c3088f16-6bb8-489f-be96-f662455d3711",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "def51e0c-ac42-4ee2-931b-3d5e7dfaa042"
        },
        "item": {
          "id": "15e62376-36cd-40d9-875f-b9e21fe63d9e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "863e5816-b4eb-4ad0-9fc9-4904560c0d77",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b42160-c972-463d-a120-56eca30cf5cf",
        "cursor": {
          "ref": "4b63ad69-4093-450f-a799-07d4ca9ac57f",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3c47492e-2985-49f6-8be1-6b1d541183fd"
        },
        "item": {
          "id": "d6b42160-c972-463d-a120-56eca30cf5cf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "df7a7fe1-2a63-4c79-9a98-7ab040426b49",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "310c5b47-893c-40c3-bb55-807e9610bcc9",
        "cursor": {
          "ref": "4aa9a62f-3aa8-4784-b645-249d9ce53d64",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c089c24c-5540-43ab-b239-470c547da3be"
        },
        "item": {
          "id": "310c5b47-893c-40c3-bb55-807e9610bcc9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e2909306-61a5-4ffa-b4b2-04718cb0ad2e",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-26T00:38:26.798Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-26T00:38:26.798Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0c044a61-f1e8-4e0b-bd4e-717cab6a8287",
        "cursor": {
          "ref": "1044528a-4a1d-4479-ba94-f6d1a9afb185",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e0203037-faaa-4620-89af-a5800ca874d7"
        },
        "item": {
          "id": "0c044a61-f1e8-4e0b-bd4e-717cab6a8287",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "90a1f1c2-b2d5-418d-b88a-ac4e58ba6524",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc34462-7eec-4144-9535-317d5057c84b",
        "cursor": {
          "ref": "f1afb039-02bb-4c29-b435-5555d5c4af26",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "dd662c3d-14df-423a-a69f-28b754449f35"
        },
        "item": {
          "id": "3cc34462-7eec-4144-9535-317d5057c84b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "09dc4e3f-39ae-4819-a5f7-d352eec29372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b75655a-054e-4e13-bde0-eb78e4f9f4bd",
        "cursor": {
          "ref": "afb459b0-d2e8-4168-bbec-c1a657728fa6",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5a23103b-e1e5-4b64-9221-6203a5538738"
        },
        "item": {
          "id": "1b75655a-054e-4e13-bde0-eb78e4f9f4bd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7496e1a5-3f59-45e4-9cbe-8e0857ae5d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc33ec11-1d7d-4b0e-9974-6d353be3c0b7",
        "cursor": {
          "ref": "1f12eed5-a9d5-4a63-926b-5fe8caaad2f8",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "84d25eb5-8d53-47a3-9631-1434bb96cfcf"
        },
        "item": {
          "id": "dc33ec11-1d7d-4b0e-9974-6d353be3c0b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b1642077-2646-46c9-91f5-af7b6411cb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda84cde-4ba2-4272-bc1c-997cda2d95b4",
        "cursor": {
          "ref": "384a7cd0-b4b3-4aec-bb6e-82cf638595cf",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "03674d99-b058-4fa0-82f8-9e7a73a79bdd"
        },
        "item": {
          "id": "bda84cde-4ba2-4272-bc1c-997cda2d95b4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6ae6d3fc-d29e-43aa-9e0c-06e2dd81ef7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abccef8-cdff-44f3-8ff0-8a3bf875e1c2",
        "cursor": {
          "ref": "8a65b22f-bb0d-4341-a0b3-29954df577a8",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cc5acc83-75ca-44ac-9241-c0284d2a0823"
        },
        "item": {
          "id": "6abccef8-cdff-44f3-8ff0-8a3bf875e1c2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2b475ce8-e538-44db-8e4b-7d8defc31d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c96da4-f28e-41da-bc60-86ea39f0733a",
        "cursor": {
          "ref": "47d39026-a7f5-4ef0-9e89-825fa69f24d1",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "954c3f0b-77b5-4f0b-b1db-881e9f6740c0"
        },
        "item": {
          "id": "a8c96da4-f28e-41da-bc60-86ea39f0733a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f017b8f3-31da-4d56-ace9-989458640f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cbe71e-d21c-4d1a-a3de-118a94dd5d80",
        "cursor": {
          "ref": "2d67ee47-04cc-4dfb-a36d-3c4e2c4bb0da",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b8c72347-0e9a-4035-bddb-d006923018fb"
        },
        "item": {
          "id": "c2cbe71e-d21c-4d1a-a3de-118a94dd5d80",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74575de1-d6a8-4590-96ec-7bbe5cb5c553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f217d8-067d-44bf-bb25-5d873148d4f5",
        "cursor": {
          "ref": "611ff0aa-9bef-40d4-8460-45a926a2d4ab",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "88298003-3d34-4ce9-a7d8-1fe91a3a3bf7"
        },
        "item": {
          "id": "90f217d8-067d-44bf-bb25-5d873148d4f5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "733f0cb2-1baf-4e7f-acc0-e664cd21afc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff613c2-60bf-488e-b8c5-fa5b99111c33",
        "cursor": {
          "ref": "2aa68ce7-25f6-4c71-9914-b00de7038204",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a4323bc9-3a75-4108-9060-ed1f35863f3e"
        },
        "item": {
          "id": "fff613c2-60bf-488e-b8c5-fa5b99111c33",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2e90ed4a-35ac-4d21-a815-fd82828f0660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e271f5-61c6-44de-a5bc-0ab14ec5c830",
        "cursor": {
          "ref": "f0dd4bdf-f2b1-4f41-9425-4723868b80f9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dca001e9-c19e-45e9-a5ac-f36ba35e80c7"
        },
        "item": {
          "id": "51e271f5-61c6-44de-a5bc-0ab14ec5c830",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44924cdb-55ce-4cc4-b8e5-cb21cdff7db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e15266e-83b8-40f8-9259-639de39ed45f",
        "cursor": {
          "ref": "61887bc8-5ba3-4f1a-b934-6c876a055ddd",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6679b73b-e79b-45f3-a844-c36d58113093"
        },
        "item": {
          "id": "5e15266e-83b8-40f8-9259-639de39ed45f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bbe9e2b5-d1f1-40dd-ab5a-5c7c960ad0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4ff489-64eb-45a1-8710-8c0220ffeda7",
        "cursor": {
          "ref": "e47b6862-233c-4f77-9a46-067e35523620",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d25d0fc7-a559-4898-b1c4-bd94b7d486d8"
        },
        "item": {
          "id": "4d4ff489-64eb-45a1-8710-8c0220ffeda7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9189cb34-5059-49ad-8228-31b8835bff83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5e2902-5d9e-4167-a4e7-b8dae088b45e",
        "cursor": {
          "ref": "409fe302-18a3-4504-b5ab-0d49f8e6122e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "482728e9-a349-47c8-a6e2-a1dbeb67ecd6"
        },
        "item": {
          "id": "6c5e2902-5d9e-4167-a4e7-b8dae088b45e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "81fd9af7-591c-4e4e-a969-39b218cde1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8706bf56-9a92-4ee1-9b11-06745b56011e",
        "cursor": {
          "ref": "2ad2500c-4944-402d-9961-90c9bddcb9b7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c15910ed-a696-41ee-9c87-9a51df9bf50b"
        },
        "item": {
          "id": "8706bf56-9a92-4ee1-9b11-06745b56011e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "efd76c6c-4980-46cd-bb47-07ad26986c41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "21d84bcc-0823-411a-8d4b-e4825e583d6f",
        "cursor": {
          "ref": "3501b539-bf0a-4705-92fb-c93a2a4531a7",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bd104d59-dd4c-4c72-abfa-f88ab76a121b"
        },
        "item": {
          "id": "21d84bcc-0823-411a-8d4b-e4825e583d6f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f5e35960-063e-4db6-9023-0602e07a8755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5095e7-3539-4f18-a6c9-3083f0523d61",
        "cursor": {
          "ref": "67484b63-8ec9-406f-ab8a-53e4adb60929",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "298b3bb9-e3b7-4db4-88d7-cb806fa9253d"
        },
        "item": {
          "id": "5a5095e7-3539-4f18-a6c9-3083f0523d61",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3b430792-42b2-4422-b3f8-2e8e9f6d7a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b332697-c7af-48e6-9b5e-04357749c868",
        "cursor": {
          "ref": "565a69ac-1325-431a-902a-e449b7ae3f91",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4cd3d168-94cb-4c3b-bac3-e576b2dcfb0f"
        },
        "item": {
          "id": "6b332697-c7af-48e6-9b5e-04357749c868",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "becf09d6-5396-4915-9ec4-48c4cdb74dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124cd568-d70b-4bd0-bd91-609e6f1f471d",
        "cursor": {
          "ref": "61c11bc2-0ac8-4439-998f-6a0cbc25bae9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "57c089be-9262-43cf-86c9-dd3d3f388e4b"
        },
        "item": {
          "id": "124cd568-d70b-4bd0-bd91-609e6f1f471d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "31f7bf66-3ccf-4423-a5e6-d6d2845b546f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e83eb7-fe22-44f3-ba11-cbcd6d57c8c3",
        "cursor": {
          "ref": "c82e27e0-ca28-48cd-bbe1-9936654942df",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a6a23b37-339c-41a0-a708-05a78d6959e8"
        },
        "item": {
          "id": "78e83eb7-fe22-44f3-ba11-cbcd6d57c8c3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c906f6fc-5534-4a2d-b40a-3a6348f2dd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eca0aa6-1064-4dbe-9773-71545854d095",
        "cursor": {
          "ref": "f221fc5d-ff1a-4622-94e7-548f30c2c7e2",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d897fedc-1be0-4185-8bad-945d1d7be9f6"
        },
        "item": {
          "id": "1eca0aa6-1064-4dbe-9773-71545854d095",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6f99bd35-b6fb-4430-89b7-195224938768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e16ac77-c8ba-4985-8fc3-9a0e7aef2dd7",
        "cursor": {
          "ref": "fcbcd2a8-5ca6-4bcf-8d79-15de96f797a5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d3d834ea-548a-47b4-b46c-2d00d4ea59d6"
        },
        "item": {
          "id": "5e16ac77-c8ba-4985-8fc3-9a0e7aef2dd7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ca9156a1-4e38-4d79-9552-78951b5cf95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca197c3-cb09-477b-b575-1f7c26584d82",
        "cursor": {
          "ref": "60310333-9ddf-493f-9f38-7d5188496c4d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "27be466a-a294-44a0-91ca-c5a356672d12"
        },
        "item": {
          "id": "1ca197c3-cb09-477b-b575-1f7c26584d82",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dc86b7ce-be3a-4fef-9fc0-7022a14a065d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6626333f-b7e9-41c2-8681-d080dd3c49eb",
        "cursor": {
          "ref": "ef231fcb-b34d-417f-8868-6bc659d21b85",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9dddd990-0d8b-48b6-a5a9-3884718f2c97"
        },
        "item": {
          "id": "6626333f-b7e9-41c2-8681-d080dd3c49eb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "92b8c23b-065f-4d2a-b5ba-ef3080335397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96125300-6c0c-45d0-b30c-8c1198d31342",
        "cursor": {
          "ref": "dae54b80-9b33-45b8-b8e7-739f75a2697c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "df99b718-e9e2-4e65-918d-0607b08e592a"
        },
        "item": {
          "id": "96125300-6c0c-45d0-b30c-8c1198d31342",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0663c510-4f7a-4fc9-b3ab-efc9c33796cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7207b45e-691a-4424-9990-568c2648f0e0",
        "cursor": {
          "ref": "036434c3-2573-41cf-ae7c-502309f753b7",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4361e603-94bd-4e8d-aca0-0a4affb3d4d0"
        },
        "item": {
          "id": "7207b45e-691a-4424-9990-568c2648f0e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c6af347b-d3f5-4369-9d61-6e8da97d236d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206af653-90e7-41de-b02e-e2c5e371ff41",
        "cursor": {
          "ref": "8fe430b3-efda-42aa-a419-11f3318d68b3",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f6d9ce59-fe18-40fe-9758-4319f5575924"
        },
        "item": {
          "id": "206af653-90e7-41de-b02e-e2c5e371ff41",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2b386597-dc81-44e8-b2b7-bf7d077c60da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a19394-5b21-48c1-bff0-c35a5763e64b",
        "cursor": {
          "ref": "e6db20c7-39b3-4ce4-a2d6-3ba7f0146500",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b176122e-8bfb-463c-a64f-99f147991609"
        },
        "item": {
          "id": "45a19394-5b21-48c1-bff0-c35a5763e64b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b5210a50-1085-4f89-81c2-a4dc44c422af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b17754-0749-403c-8b22-3d9004f0c382",
        "cursor": {
          "ref": "4a55deb0-a9f4-48b4-be45-62f35b4ddc20",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "620b6601-8b29-4af5-834c-a5c8397dd25c"
        },
        "item": {
          "id": "a8b17754-0749-403c-8b22-3d9004f0c382",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7074af19-bfa3-49f9-a495-b135356c1702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9affeb28-710b-46c3-b8bd-5865007e2fc1",
        "cursor": {
          "ref": "2e0437a8-67d4-4fc8-a146-0dec266ee773",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eded7057-a08d-4cc5-bb71-a84636cdbfa6"
        },
        "item": {
          "id": "9affeb28-710b-46c3-b8bd-5865007e2fc1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "83051361-ee7e-4bd8-ab7b-906932cfa089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb6c4a4-24bf-4bae-81f1-86b2c1b1eb9c",
        "cursor": {
          "ref": "777690d2-3c80-42dd-b993-1806408485b1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "36510dac-1347-47fd-b86b-553867e882a1"
        },
        "item": {
          "id": "6bb6c4a4-24bf-4bae-81f1-86b2c1b1eb9c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6c4ec4a2-c9fb-4a01-bdc5-2a49a0ca2583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1253dd74-05e6-4069-ae9a-30ee7cf1205a",
        "cursor": {
          "ref": "c9bccffe-95ea-4437-8ea4-c7410bbce66b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "88fc998d-eaa2-46b2-89bd-a989c78bcd7b"
        },
        "item": {
          "id": "1253dd74-05e6-4069-ae9a-30ee7cf1205a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "263968b5-10ec-4bd4-b1a1-01ed7677a208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de30e683-69ad-4f16-8c1d-8775ec567093",
        "cursor": {
          "ref": "34186a3e-1aac-4b9f-b5f9-b11a163822c6",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ce1b6d68-bc6b-4f59-913a-ba4629578920"
        },
        "item": {
          "id": "de30e683-69ad-4f16-8c1d-8775ec567093",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "32ca8e68-f692-4a7e-afa2-4429986178b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d895b20e-f53a-4354-bd45-27fa80adc61b",
        "cursor": {
          "ref": "2eeb9191-58a9-4327-a02d-862a042ea17c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cd57b28c-c5e8-4f41-a6fe-f483faba32bf"
        },
        "item": {
          "id": "d895b20e-f53a-4354-bd45-27fa80adc61b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "18145ce9-2e72-43f0-8770-d94cfcc13c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd050fa-2832-4e32-8557-2f9ba0417fda",
        "cursor": {
          "ref": "abe24d10-7c1a-4b8b-8f8d-b981c654ef5e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "743a0c8e-3992-49db-b4dc-4b1acaecd7ad"
        },
        "item": {
          "id": "6fd050fa-2832-4e32-8557-2f9ba0417fda",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "68124472-acde-4d20-98f3-c5d384ea123b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf7ae32-95f2-4579-add7-9a1228c7c628",
        "cursor": {
          "ref": "56c2b65a-3558-40fc-935b-0983b7a1b907",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1e5e3fbd-9760-4703-b56a-e67e2c564a43"
        },
        "item": {
          "id": "3cf7ae32-95f2-4579-add7-9a1228c7c628",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1afdfaac-7493-498c-820a-25d46ec779eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49ff1d3-b904-4c3c-9990-f0dd60b6a852",
        "cursor": {
          "ref": "1cb9a882-b275-436c-bef8-e0512f7da785",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "283ce862-4314-45e1-8bdc-a3ffcac4fe98"
        },
        "item": {
          "id": "c49ff1d3-b904-4c3c-9990-f0dd60b6a852",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6a204d96-9a6a-43ff-afa8-fa80da2e197c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0a100c-c203-4327-b96d-1a55d44abe29",
        "cursor": {
          "ref": "917be27f-30de-4e58-9ccc-0474baa6ea14",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6e9aab73-8e82-4df7-afab-15be3073ee17"
        },
        "item": {
          "id": "6c0a100c-c203-4327-b96d-1a55d44abe29",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e0fcc764-0cfd-4486-af40-8e43207829f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219cb2b0-0156-4ad7-8e25-bfe730ba51f1",
        "cursor": {
          "ref": "60595d5e-1dbe-4f8e-b0ef-20e02d2d3f9e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2846fec5-9c73-4d55-be18-0b7158cafcbe"
        },
        "item": {
          "id": "219cb2b0-0156-4ad7-8e25-bfe730ba51f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ca80d617-ad68-4843-84ff-a289a3181a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3f69a8-48a0-4ff7-9f13-41b850494872",
        "cursor": {
          "ref": "e883c81f-7be5-4942-a88e-65e4632e2a7b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3e19c9b8-212f-4833-8e75-3a99ed866455"
        },
        "item": {
          "id": "6c3f69a8-48a0-4ff7-9f13-41b850494872",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "24fc08f8-f0e0-4147-bab1-16b2af71e375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0eabe4-8eb3-475c-b8f9-c7c303affebb",
        "cursor": {
          "ref": "0ebf176c-cf32-41dd-912e-494e7abc9bb6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2dd57bc3-474f-4809-9852-95b7a9bdb1f6"
        },
        "item": {
          "id": "eb0eabe4-8eb3-475c-b8f9-c7c303affebb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "dedbfa6e-5edf-4231-bead-5fe54fda4348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f131a5e-5a65-4a88-bb8e-022ec2ace85e",
        "cursor": {
          "ref": "75f332d5-c962-4483-8438-81c601705cf9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0f770b8c-6b78-4674-8c02-5da17440d7a9"
        },
        "item": {
          "id": "8f131a5e-5a65-4a88-bb8e-022ec2ace85e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "00fdaaea-0a15-46e4-a19e-91e448a97be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216b6341-5235-4792-bb2d-815f2264038c",
        "cursor": {
          "ref": "9d147a56-23af-496c-910c-201371c00ad0",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f3a7439a-4d8c-4a82-bca0-e3cd27a49832"
        },
        "item": {
          "id": "216b6341-5235-4792-bb2d-815f2264038c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "090ca129-2353-4f0e-a552-f3d72a0f4343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d378c42b-1851-4266-a8f9-d844078cd27b",
        "cursor": {
          "ref": "dc9b1767-8d55-4412-a229-4767c53d8d9f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "52fc6d7b-3ea3-4ed5-bdff-fe5cd8867629"
        },
        "item": {
          "id": "d378c42b-1851-4266-a8f9-d844078cd27b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b5043716-4fba-42a9-90b7-50eed3b96732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a987468f-7aab-44e9-8038-453d23ae83cb",
        "cursor": {
          "ref": "6fc0ed7c-30d1-49d5-b3a7-273996d8cc4a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3acb580c-6d32-40a6-b85d-00ab48f91dd7"
        },
        "item": {
          "id": "a987468f-7aab-44e9-8038-453d23ae83cb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fe2ade9c-b195-446a-a094-58b695f74f57",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "83b33543-3d00-446e-b152-7c98b3fd53ef",
        "cursor": {
          "ref": "8efff0b8-865e-4590-9608-c819e232bc5f",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b9d90453-0aef-4005-b19a-bd9d50e89d78"
        },
        "item": {
          "id": "83b33543-3d00-446e-b152-7c98b3fd53ef",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "87cfda6b-2e6a-42de-a08d-9faf36365b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435b36eb-36fe-4bb0-bc66-296547b261cb",
        "cursor": {
          "ref": "8202c2a3-919c-4abd-8e59-6d595e1f9ee4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1df08362-b5d9-49ea-82f9-4752c59326c7"
        },
        "item": {
          "id": "435b36eb-36fe-4bb0-bc66-296547b261cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a83e6736-5f85-4a59-ac4c-1c105019f437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cdec48-7304-4738-86f3-955ca6892084",
        "cursor": {
          "ref": "f1e28e86-dd10-447b-86b7-6a9e0bacab8f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3f38370a-48f7-4f26-957c-099d9404934a"
        },
        "item": {
          "id": "50cdec48-7304-4738-86f3-955ca6892084",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e8b007cf-fc31-4db2-bfc2-f4dfa66d9b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3d666e-4bbf-4828-b3c2-2a02dafb6bcb",
        "cursor": {
          "ref": "c01cad90-cdf0-4dc6-8d33-a2c40f094182",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "576b0eef-bf9a-4b0a-a965-d20faa20c2d5"
        },
        "item": {
          "id": "fd3d666e-4bbf-4828-b3c2-2a02dafb6bcb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dd9cf24c-2b46-450b-8320-9bdc6fcbbecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa1ef1c-0391-45e9-b6ee-2f09f23f0385",
        "cursor": {
          "ref": "54d9e867-6afa-41bc-952a-160c1445db1e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7c259ff7-0de2-4b9b-a246-3cf1b77bd706"
        },
        "item": {
          "id": "3fa1ef1c-0391-45e9-b6ee-2f09f23f0385",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "67504c1d-221c-4679-afd2-cc3f148fa9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8153222f-9ef5-40b8-966c-42c6e75031ae",
        "cursor": {
          "ref": "a87e937a-e213-48eb-a234-808573f423e9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9b8edb17-e441-4273-bbf7-28d5ae7cdc01"
        },
        "item": {
          "id": "8153222f-9ef5-40b8-966c-42c6e75031ae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a625b2a2-953c-4d6c-befd-dd16d0749a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6735f23-cf31-4b52-85dc-80fd92920273",
        "cursor": {
          "ref": "286ba49b-ee67-43b6-8cc0-cc7e7e445702",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "33f11fa9-ccf7-4861-a5a0-9dbd23ee4a2a"
        },
        "item": {
          "id": "b6735f23-cf31-4b52-85dc-80fd92920273",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8db2f5c4-40db-4ec1-87e4-afff564a7e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c5d6eb-68b5-4863-a4dd-942228964f05",
        "cursor": {
          "ref": "1c60146a-a8dd-48b8-8452-52a807cfeb1d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "05645b8b-5924-4fb6-90aa-97c32a46e9fc"
        },
        "item": {
          "id": "49c5d6eb-68b5-4863-a4dd-942228964f05",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a3bf8954-6620-46d3-8b4c-9094dd257955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e271f83a-348f-484a-a3c9-3518deb5b37d",
        "cursor": {
          "ref": "711f0345-5426-4402-9234-c1fb747f99b5",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ebcb4f31-c17a-486e-9375-1e660799e17b"
        },
        "item": {
          "id": "e271f83a-348f-484a-a3c9-3518deb5b37d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "892ef9fe-6715-4082-97cd-598be9716a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6d1dc8-0910-42a7-a309-d468a4693e14",
        "cursor": {
          "ref": "3a1eae26-9b0b-4b01-b6c9-2f8dcd43d316",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4f7045fa-d86d-4f7d-b2bc-ea1afc2819b6"
        },
        "item": {
          "id": "0c6d1dc8-0910-42a7-a309-d468a4693e14",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7281284e-9e66-498d-8dcf-a71fc2b0fa44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f7bf7e-f5ba-4dfc-b682-d060b80d7b51",
        "cursor": {
          "ref": "4ee54a46-94bb-43dd-8087-e0b91818a895",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "85492314-7027-42cf-bdcc-5897e7a6b3d0"
        },
        "item": {
          "id": "c9f7bf7e-f5ba-4dfc-b682-d060b80d7b51",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4de22f20-3e5c-4cb8-884e-c56ebc6facd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126740dd-2cd9-48e9-b49c-e0d7ba36076a",
        "cursor": {
          "ref": "cc68b896-eba2-478d-b1ad-eb8075b41224",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1d964511-8519-4451-9a9d-2bf1c7cf89d2"
        },
        "item": {
          "id": "126740dd-2cd9-48e9-b49c-e0d7ba36076a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "257e0cad-f325-4aca-b527-1414be6a818a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3cfaa4-442a-431b-a520-e7418f3008d9",
        "cursor": {
          "ref": "7775ed30-ba1a-4261-8dab-a1604aa1fc3a",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "69f8bf34-a839-4566-b8e1-3e27fc29bebd"
        },
        "item": {
          "id": "fc3cfaa4-442a-431b-a520-e7418f3008d9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e4b6f81e-1ea0-48a5-ad1f-45a406f4d8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1c8c9e-9086-472b-9c75-d953aee432f4",
        "cursor": {
          "ref": "28a5916b-6aae-4313-b109-5629cfd8e66b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9f72e291-9ef2-4196-86ba-7882bb8a70aa"
        },
        "item": {
          "id": "da1c8c9e-9086-472b-9c75-d953aee432f4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5db7f850-21f6-4bea-a498-db2b6ebf37c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55584a5-4be5-46f8-b834-b579e7c6719c",
        "cursor": {
          "ref": "3ca5c4bf-9fa5-4e95-b894-dd5b49a9e24e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d4a42ce9-6993-4225-aad4-1d4ccc946697"
        },
        "item": {
          "id": "c55584a5-4be5-46f8-b834-b579e7c6719c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e30deda4-e7ab-456c-b463-6175399d14f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449ff7e5-0078-4295-ab72-1853926b36c4",
        "cursor": {
          "ref": "9af66f73-4a48-4d3d-b515-b170d8211057",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9f920eee-6ce8-43c8-9c22-fe8ce917d419"
        },
        "item": {
          "id": "449ff7e5-0078-4295-ab72-1853926b36c4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0f9b136d-f017-47b6-b2b1-00ec546931b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e35687-7db8-48d4-9138-cc8b824f2bbf",
        "cursor": {
          "ref": "abc5ce96-b1a6-450f-8ad4-d41a18710cc1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "957ee374-facb-430c-b4ba-ff7dcd6a4e6a"
        },
        "item": {
          "id": "a8e35687-7db8-48d4-9138-cc8b824f2bbf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f751db9b-6ae0-4487-a356-05b802cacfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4f62cc-a6b3-4ad4-8a4d-c9e74eac7bbb",
        "cursor": {
          "ref": "265fba29-436c-4d84-bff2-a252089ab30f",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1d9f5723-e122-4552-8956-6d99685c4841"
        },
        "item": {
          "id": "7c4f62cc-a6b3-4ad4-8a4d-c9e74eac7bbb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b9275645-6a02-4885-a9f0-05dd8a422f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e25296-756a-4f60-b527-fc6395757398",
        "cursor": {
          "ref": "244e061b-bcf6-4350-85e3-dae36fe52b07",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7ffd1c55-fa73-443e-9d61-c7911cbac47a"
        },
        "item": {
          "id": "d2e25296-756a-4f60-b527-fc6395757398",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4d80190a-05bb-437d-bfe9-806c082a9f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546a89b7-96ac-4ea5-a527-bfd198ca4add",
        "cursor": {
          "ref": "3e231cb4-3390-480c-93b6-540f0d322464",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "192aa70e-de41-4bd6-a05b-6f2741516ddf"
        },
        "item": {
          "id": "546a89b7-96ac-4ea5-a527-bfd198ca4add",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d215372b-0eae-4633-be30-6a80d1142cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3b8cba-b485-4e26-8361-0380768b2b61",
        "cursor": {
          "ref": "c89a792b-5373-4cad-9169-9a2079d5718e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "92b9c095-a425-4a5f-817e-453c4c8a085e"
        },
        "item": {
          "id": "7f3b8cba-b485-4e26-8361-0380768b2b61",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "25679eff-0f9b-443d-848e-d611dc70e91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af442966-52a7-455c-b65c-702ac60cc53f",
        "cursor": {
          "ref": "2003f6a5-82e6-4d71-a499-cf5f0c102484",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6dc5bbdf-b751-43c0-b389-0ce11c435a01"
        },
        "item": {
          "id": "af442966-52a7-455c-b65c-702ac60cc53f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f88a276e-ff16-4764-b3af-a3138799838e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab650c84-78d6-4eb5-99d4-b481adc37a22",
        "cursor": {
          "ref": "f61f8382-30ae-42c2-b078-e331cb98a67a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8878c7ea-f120-45f7-85ad-2f21e4d3f015"
        },
        "item": {
          "id": "ab650c84-78d6-4eb5-99d4-b481adc37a22",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "293f2ab8-02a5-4625-99fb-c1c7b2f3a26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3211600-08bf-42b5-a9f2-a64bdfa4b23c",
        "cursor": {
          "ref": "eee4088d-9b78-44e4-bcda-c25a7ac48cf5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b11c73b7-8a9b-44fb-915d-948ea972e7cb"
        },
        "item": {
          "id": "e3211600-08bf-42b5-a9f2-a64bdfa4b23c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b2f0fac4-ff18-4712-af74-7957e77c4d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5227dd-da67-4bbf-98ac-987a56319279",
        "cursor": {
          "ref": "c7874ab0-63fd-496f-b927-f5e751d95c50",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "12aaed05-b666-43dc-8851-19f199dd5430"
        },
        "item": {
          "id": "4b5227dd-da67-4bbf-98ac-987a56319279",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "381f07df-d226-472d-ac88-75ac0af37076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e5d564-84d7-4bc0-bd4a-3fb3013b3d91",
        "cursor": {
          "ref": "c887debb-b2a3-4ca6-8369-9826c3036940",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "98d982ae-3604-4db8-a289-ce3be28a0b1b"
        },
        "item": {
          "id": "11e5d564-84d7-4bc0-bd4a-3fb3013b3d91",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5385ed56-5771-486f-a39c-89ce9ac30ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7623ae5b-7d6b-4556-8a8d-479da2ace63e",
        "cursor": {
          "ref": "6d911343-1278-4783-970a-bb230b73defe",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8b732b7e-0abf-4d3d-a284-44bbeb2358a9"
        },
        "item": {
          "id": "7623ae5b-7d6b-4556-8a8d-479da2ace63e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "51a5f1b8-de46-4f17-a708-3f19808d10e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2f6260-c1e1-4b76-a56c-cd1395e54856",
        "cursor": {
          "ref": "1265cf92-1bc0-4a25-a054-a24a45fc8c5d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e1a74e85-3790-4d6d-b7b1-b132b79ccc99"
        },
        "item": {
          "id": "4e2f6260-c1e1-4b76-a56c-cd1395e54856",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f04033ee-6fb0-4579-b87d-5ea7cf17df2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c393ec-0023-45e6-bb74-070f44f2f99e",
        "cursor": {
          "ref": "c9fc0abb-6402-41b8-a208-80cea0da064b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4a5a33aa-f6f1-4917-84bd-1c1aedca4036"
        },
        "item": {
          "id": "23c393ec-0023-45e6-bb74-070f44f2f99e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bfe91e67-edcd-42c5-90d8-1d506b455619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3e206c-be68-4444-97a1-edc317e62207",
        "cursor": {
          "ref": "647e8bc4-a728-44a2-9094-e23ecd8bdb50",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "72deb639-6d69-4749-a117-9d8c422ea47d"
        },
        "item": {
          "id": "3a3e206c-be68-4444-97a1-edc317e62207",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "efe33d27-4b45-414a-b629-402251d34726",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "bdd1e422-3409-4470-9ba3-becea5ab82b4",
        "cursor": {
          "ref": "47318f9d-7fe7-42af-aeb6-c26022ed4608",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "61f1446c-86c6-404b-9630-216443a098b8"
        },
        "item": {
          "id": "bdd1e422-3409-4470-9ba3-becea5ab82b4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c80e1be7-0fbd-42b9-bb93-d6726b484715",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d2869d66-173a-430b-beb1-904eea222d8b",
        "cursor": {
          "ref": "6122744d-c9b6-429f-b3a7-2f9602dd0c36",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "acd56c0c-8f7c-4a73-b38b-db649f095a4b"
        },
        "item": {
          "id": "d2869d66-173a-430b-beb1-904eea222d8b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "31d17671-c9c5-40dd-90cd-b1db27963040",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "edb7c355-dfc8-43d2-aa47-fed6c2d22d5a",
        "cursor": {
          "ref": "059c87d9-f85f-49bc-ae0e-7b0648a56b60",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "029b6087-791a-4590-9b32-c09391e28c53"
        },
        "item": {
          "id": "edb7c355-dfc8-43d2-aa47-fed6c2d22d5a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3ba6dffd-c157-441b-aca5-0e1d0596bd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d5152e-9fe4-437a-af2c-0a2e5e45109c",
        "cursor": {
          "ref": "aa1053a5-5b7c-4c56-afda-c21ff6da2b68",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b75eec6d-d413-4260-b94b-e9e711c525a0"
        },
        "item": {
          "id": "00d5152e-9fe4-437a-af2c-0a2e5e45109c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fdc05f4a-b6e4-4aa1-962f-986bb591c2c6",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "fec9657f-b7e9-4345-8db5-f5d0a4aae5af",
        "cursor": {
          "ref": "4c29b59b-2855-4e13-ad72-f9d8e1634818",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e80e6e51-4b45-431c-b71f-40d7f0f12475"
        },
        "item": {
          "id": "fec9657f-b7e9-4345-8db5-f5d0a4aae5af",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9f990af4-0153-4776-8ea4-b9255ef4f2b1",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "11f8c383-7fbc-4ad1-8d69-e615bc3dfcaf",
        "cursor": {
          "ref": "b2958c15-0ba4-4c33-993f-75fbefdc0032",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1e38a7f0-2a2c-4dc5-b207-ce6116117c20"
        },
        "item": {
          "id": "11f8c383-7fbc-4ad1-8d69-e615bc3dfcaf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "584805e7-83f7-401e-a2ab-b1af5a815c3e",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "961dd36a-f06f-4f7d-a2a4-b130ed16f797",
        "cursor": {
          "ref": "a43cf456-639a-48e0-8f62-13cdeb0fe36f",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c9b6142a-c5ce-4646-b0ed-25f9bf2a1c36"
        },
        "item": {
          "id": "961dd36a-f06f-4f7d-a2a4-b130ed16f797",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29167cb7-26c3-4b8a-9465-30b56a146c62",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "944404c7-c5c0-4a33-a2ea-04ae825f3fa4",
        "cursor": {
          "ref": "13f01f3a-afd0-43de-aebf-dada262e270f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d0b65112-4091-4591-a0e1-ae2cbeca52cd"
        },
        "item": {
          "id": "944404c7-c5c0-4a33-a2ea-04ae825f3fa4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bfd52fc5-35de-4387-80b5-ff87fb66cebe",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5827ac6f-d63a-4b1f-81bd-fadb5967eada",
        "cursor": {
          "ref": "0b88eee2-d365-4727-ade0-97e8dc60b67f",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7c041e11-fa82-47f5-83ce-4088576aeb0d"
        },
        "item": {
          "id": "5827ac6f-d63a-4b1f-81bd-fadb5967eada",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4e5950c1-5677-412a-a3f0-1059f38f5be4",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7e6559a8-eac8-4ba2-bf46-7166ea4315d0",
        "cursor": {
          "ref": "fce9e6e9-b66b-4ae4-9ac0-6418d07e1247",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cee3e29f-2e9b-4672-9df7-93aba1c657e9"
        },
        "item": {
          "id": "7e6559a8-eac8-4ba2-bf46-7166ea4315d0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1d30d239-bf4e-4305-8613-7aa6b42f0b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913fe9cd-e164-4419-bb78-188edeac1a86",
        "cursor": {
          "ref": "ffcc281e-5a22-4ab3-a455-a1abcf4b0d2b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8818e050-2946-459f-b3c5-02cf7baad976"
        },
        "item": {
          "id": "913fe9cd-e164-4419-bb78-188edeac1a86",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6d148aad-da88-452f-8de4-bd8810fc57f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52d4674-7d06-406b-a1af-4dae9adce5d0",
        "cursor": {
          "ref": "1035ad36-4a08-40b3-893e-8cbc5009f229",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2f5d89d7-2c7c-474a-a84a-d196f86209aa"
        },
        "item": {
          "id": "b52d4674-7d06-406b-a1af-4dae9adce5d0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "57969ccc-4daa-46e5-ad5c-8c2ce86649a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43b8d0a-ee74-47c4-bdf1-52635e5572fb",
        "cursor": {
          "ref": "12f64d02-fe1c-4064-8511-73180f502139",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "43a21469-e923-4174-bb7c-97694717830e"
        },
        "item": {
          "id": "b43b8d0a-ee74-47c4-bdf1-52635e5572fb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d5905ff-cd71-4f84-a84d-b84d29fdb778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0544fc3-4570-4fbd-b0ab-711c628ad910",
        "cursor": {
          "ref": "206b55a1-240a-4027-bc32-c6a49c3d43a8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a07b664d-7175-4edc-87a5-58e25fedae6c"
        },
        "item": {
          "id": "c0544fc3-4570-4fbd-b0ab-711c628ad910",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f5e72585-8fde-4698-9adf-f2d590bf7f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f017d38f-6610-4e18-b9d5-2ad25cd6fe10",
        "cursor": {
          "ref": "8f7462eb-49e9-4366-9e94-a08322ba5940",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "70d276ae-5c7c-404e-bd5c-04e92da5b8dc"
        },
        "item": {
          "id": "f017d38f-6610-4e18-b9d5-2ad25cd6fe10",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9480219a-6ac6-4438-b344-af92643962c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c99d9c-c48d-4385-b85d-20b7d3df91fc",
        "cursor": {
          "ref": "64b5b54d-f800-46f5-81e7-d7ede4b1bfca",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3c7d4fdf-91c2-438a-8246-ad2d779722cb"
        },
        "item": {
          "id": "a0c99d9c-c48d-4385-b85d-20b7d3df91fc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2d41d10c-f092-41bc-98af-525592ace726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4955b1e9-5cd3-4479-99fa-12d5e2dbed9e",
        "cursor": {
          "ref": "64615679-7652-40a2-b833-65e2292e990c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "eb5ef5c4-f996-4aa0-951a-1b597e3567b3"
        },
        "item": {
          "id": "4955b1e9-5cd3-4479-99fa-12d5e2dbed9e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d6a108e3-4b79-46ec-8bd4-8ca6e2afb39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93df866-ce9c-45f7-821d-074c7fead651",
        "cursor": {
          "ref": "a4a3691a-7a98-4bc8-97e1-5e499311085a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eaa08625-8cf5-4774-a590-fbf2bf48176b"
        },
        "item": {
          "id": "b93df866-ce9c-45f7-821d-074c7fead651",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c55770ee-9698-4e38-aa82-d95aa6975e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97aa10d-8a47-420f-9dd8-c59065bdf306",
        "cursor": {
          "ref": "759f83d7-a4db-4f59-8b98-4a10de11d0f4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "37cba4fa-0381-4f10-84f3-6bb1f51502d9"
        },
        "item": {
          "id": "b97aa10d-8a47-420f-9dd8-c59065bdf306",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5cb2eda0-78f8-4c7d-ad48-e1c13b2ea0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f0748e-4b49-47b5-b757-a2e866b1d6bf",
        "cursor": {
          "ref": "42065dbb-5ca7-4e6e-8f62-1031631d4021",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "399f7ff3-8eb0-482a-a938-4653b6391dfd"
        },
        "item": {
          "id": "12f0748e-4b49-47b5-b757-a2e866b1d6bf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52a50944-2ad0-4562-ae80-1f0b1b8b8796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed745fe9-a01f-4aed-8dbf-a2632c76c105",
        "cursor": {
          "ref": "426d66de-b1c9-4ad2-8a79-01dee4b0a1a8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "884a81a1-6016-45d9-adb3-ab0242f12008"
        },
        "item": {
          "id": "ed745fe9-a01f-4aed-8dbf-a2632c76c105",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bd6422c2-e32c-4c44-af81-11d0911ddc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce86c3fd-f53b-4bd3-935a-797975f9c6d4",
        "cursor": {
          "ref": "15f0a1e3-2585-4536-a5d3-d3675575cac6",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "63e2dbc3-e923-4314-8aff-d286514889c5"
        },
        "item": {
          "id": "ce86c3fd-f53b-4bd3-935a-797975f9c6d4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f549ec24-b538-453f-8311-cc957316a864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61456894-e200-4052-8be6-a3c9271ba445",
        "cursor": {
          "ref": "322f0635-0088-41a6-9acf-803cb75ef307",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cd08d171-3fc9-4539-875a-7f37c3a9d559"
        },
        "item": {
          "id": "61456894-e200-4052-8be6-a3c9271ba445",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "60f7f5c9-d881-4b0f-b20e-1dab65316718",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "47c8442f-2870-42ac-8314-47e5aaa76c3e",
        "cursor": {
          "ref": "d1fbb56a-7536-4dfc-b993-e96c27345dbf",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9d464415-aa75-48f5-be47-cf7d610ea3ea"
        },
        "item": {
          "id": "47c8442f-2870-42ac-8314-47e5aaa76c3e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a6d9c2aa-41f9-4ad5-84d6-f3b904f41b12",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "745e4418-b902-4035-88af-e3900da12153",
        "cursor": {
          "ref": "d9f6a44e-d1ce-4980-b0e1-ec1cbc1f4025",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2f3cee1a-f596-45cc-8aef-1ed26fc4e6f5"
        },
        "item": {
          "id": "745e4418-b902-4035-88af-e3900da12153",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ac2ff371-2645-44f3-9d11-3e383bd6473a",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c243b2a8-7eed-4f2e-b6d6-9e02b90e911d",
        "cursor": {
          "ref": "c18b695c-1cf2-4dc6-ac09-1002d0c209ba",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4870c083-17fb-4ab8-b922-89d33b65f16b"
        },
        "item": {
          "id": "c243b2a8-7eed-4f2e-b6d6-9e02b90e911d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "de58ec58-7093-4ca1-899f-9d2b2941bc0a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "07fb4c2e-35a6-4603-82ae-6df6d56a90a6",
        "cursor": {
          "ref": "e64caf57-4c35-423f-9408-29c03413e32f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e9943781-ce4e-43de-867f-5e1d7cb8a878"
        },
        "item": {
          "id": "07fb4c2e-35a6-4603-82ae-6df6d56a90a6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4dce7b29-cb00-49ea-9160-506bc1ca8968",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8f23cb11-f80f-436e-af6f-2a812bb9eece",
        "cursor": {
          "ref": "1a72e58b-6f51-4abc-b2f0-8e328e5c21e5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d1378945-6c41-45e5-8c0b-acb55cea95aa"
        },
        "item": {
          "id": "8f23cb11-f80f-436e-af6f-2a812bb9eece",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0107461d-dd80-4090-a862-66beba6f6b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c729f466-48a8-4884-913a-3e05320bb1c9",
        "cursor": {
          "ref": "54f3eb97-19c6-4ee6-b8be-b4b1ab5e1360",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0ea972b2-57c6-4f2e-b4bd-f80b8f64012d"
        },
        "item": {
          "id": "c729f466-48a8-4884-913a-3e05320bb1c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "262d5709-432f-4b4a-90c6-ef204ab74793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd8bad6-c14a-43cf-b5cf-590ccc7050a1",
        "cursor": {
          "ref": "44b3eb52-7858-4333-a80a-e4dbaed7cc13",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3ab546ec-3914-40e6-8a13-ae6ed0f708fd"
        },
        "item": {
          "id": "ccd8bad6-c14a-43cf-b5cf-590ccc7050a1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fca1f855-d1a5-493d-8480-99cd602db30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4e3f0d-8e2e-4687-8228-9ea2216ffa31",
        "cursor": {
          "ref": "4485b72d-8ae1-447d-a6ad-413cc74d2479",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bcd4c349-3bca-485c-8099-ba64a898e96d"
        },
        "item": {
          "id": "7c4e3f0d-8e2e-4687-8228-9ea2216ffa31",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "54708d82-ec17-48bf-baee-53e04e8cf18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddc2ac4-0489-4840-8061-9556fd4bdb7c",
        "cursor": {
          "ref": "3a2e0c6a-b417-43c6-a3ce-f968a2db082e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "874a26a8-afe8-48e6-84ab-ce0bec2e142c"
        },
        "item": {
          "id": "cddc2ac4-0489-4840-8061-9556fd4bdb7c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a4dba078-3af8-466d-8645-daf2d73cdeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da74d91-c935-45cc-81ee-22d1d5e16452",
        "cursor": {
          "ref": "81c19de7-5e23-4470-83c5-a1bc6ae1ad4e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f37d93d7-ae73-46fa-b133-490467da5f8e"
        },
        "item": {
          "id": "2da74d91-c935-45cc-81ee-22d1d5e16452",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3cc2a62b-9cb3-47f9-8675-ae8d98515dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd335a5-1ee1-4d27-a588-46e62076dd31",
        "cursor": {
          "ref": "889de6ac-a037-41a4-b30e-33d7203819ef",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a8638edd-4800-4d6a-8c35-8d3fe1838200"
        },
        "item": {
          "id": "8cd335a5-1ee1-4d27-a588-46e62076dd31",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "70abd247-c483-4bc2-a1d2-adb3c6772685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca8f4cd-dc51-474e-b1a0-5ad80fa4234e",
        "cursor": {
          "ref": "f4bfc33d-fc6b-41b0-b461-8865cfd154a6",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2fa79b52-f75e-4f06-a12f-105ab19e3508"
        },
        "item": {
          "id": "5ca8f4cd-dc51-474e-b1a0-5ad80fa4234e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bcfb7b86-e6da-4f70-b615-89b0bad1bf7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c96ff8-138f-42a9-86f1-2220a821448f",
        "cursor": {
          "ref": "73ebec8d-e4db-46fb-9f70-793a2bc6bd33",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "59108d14-5868-4633-8bf4-73429eb8e5c5"
        },
        "item": {
          "id": "55c96ff8-138f-42a9-86f1-2220a821448f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b64e4c04-92b4-4c37-bfad-97c2f4bf3d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9774ac-1a26-48f7-b4e5-25a246bb41ee",
        "cursor": {
          "ref": "0e771a4a-b4d2-4179-bb2e-1b3fd5489b70",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "02dca70d-8ba2-48be-9d62-31fc88683f9e"
        },
        "item": {
          "id": "6b9774ac-1a26-48f7-b4e5-25a246bb41ee",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "71ec4cb8-386a-496f-a1a6-81f65a199356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9b7034-c07b-4be0-8fbd-f3270e168034",
        "cursor": {
          "ref": "95c5c360-57c1-4c16-9540-7f48ca01ce93",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6c82ac42-5d2d-4e37-81a1-768a08265a2a"
        },
        "item": {
          "id": "cd9b7034-c07b-4be0-8fbd-f3270e168034",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5c05e0c1-aa43-4f3e-bee1-270cf2e9177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff92a3b-aec2-4a35-88c3-16579b4b72c7",
        "cursor": {
          "ref": "cb1beabe-a7f9-4077-a2ac-8af218998055",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "35a771d0-9f52-4673-95cd-8f01c4ca5404"
        },
        "item": {
          "id": "3ff92a3b-aec2-4a35-88c3-16579b4b72c7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7333999f-acc8-4fa9-9904-e92b094a546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1925c40-0164-4c9b-b79a-a88db78cfb39",
        "cursor": {
          "ref": "92e5e8cf-c5fe-467b-b846-a4e576e7ee2a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7f8fdda3-6252-470f-8de2-5efc30713d36"
        },
        "item": {
          "id": "d1925c40-0164-4c9b-b79a-a88db78cfb39",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "404dcc4a-e3d2-411b-aaad-dc8675b0c842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ddb81-4fef-4f65-8334-f768957ef10d",
        "cursor": {
          "ref": "1db69d6e-6bde-4695-a970-4b226de872cf",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5928b2f8-3d8c-4ea3-a852-422d1433f126"
        },
        "item": {
          "id": "626ddb81-4fef-4f65-8334-f768957ef10d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0c10d92f-0813-4992-a3ee-db2dfb09e783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e717d07-53ff-4960-90e5-999ae00bc11e",
        "cursor": {
          "ref": "5dfbcb32-f2d5-4500-b78e-a3792214dd6b",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bc3973e7-c8bb-4fa6-8a09-a1635b45cd98"
        },
        "item": {
          "id": "6e717d07-53ff-4960-90e5-999ae00bc11e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c622d6ae-eff6-40fa-8d67-9149f5bd7066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9ce8f0-34e4-440d-8f42-e2255f0e5f9c",
        "cursor": {
          "ref": "bd689d44-062a-431a-b765-c53ebd1df286",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6e7de0aa-16ac-4fbc-b1a0-8256b6bd5c0d"
        },
        "item": {
          "id": "5f9ce8f0-34e4-440d-8f42-e2255f0e5f9c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6999267e-7740-4c92-b86b-9ec14ae13a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5948eee9-490e-4b6d-af5f-65421fb2f142",
        "cursor": {
          "ref": "7ee23d28-84cd-465a-b3a1-10a5ef898bab",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "91261e55-1bbe-4dc8-8786-4c9e1c1b6be1"
        },
        "item": {
          "id": "5948eee9-490e-4b6d-af5f-65421fb2f142",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4f224bd3-a91d-49fa-922f-6662a5e5cb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7817b6d-d22b-4ad1-99c0-03755a50acbb",
        "cursor": {
          "ref": "7bb8a215-b005-4c06-954d-126863e56aaa",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "216579d9-3e2d-4fd1-ac03-62da90413e30"
        },
        "item": {
          "id": "f7817b6d-d22b-4ad1-99c0-03755a50acbb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "522bc7e4-f7a5-48e6-ac9c-248672d9ebf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f59e4a-39e7-43be-9f77-61cbe4bfa85a",
        "cursor": {
          "ref": "54c2c254-c9df-4933-86a4-4d93e151663b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d73d9222-6b42-4384-b4b6-285ec73aff73"
        },
        "item": {
          "id": "32f59e4a-39e7-43be-9f77-61cbe4bfa85a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "90d53ca1-6ae8-4701-bb39-7c7c353be1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d50222-8e26-4fd0-8134-523e11fdc94f",
        "cursor": {
          "ref": "949e8037-9c14-4e46-9521-cd048659e76f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5d6fa214-43e3-4a33-97e0-673a4b078ce7"
        },
        "item": {
          "id": "a7d50222-8e26-4fd0-8134-523e11fdc94f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cfd3ea1c-f6a0-4338-9d1d-1708e41a5fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea44a93c-c999-454f-8b9a-45421770adc5",
        "cursor": {
          "ref": "9532d33b-5a38-4f14-bfb1-4200a5446667",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0f5b82a9-5b30-49f7-a793-93922e30d085"
        },
        "item": {
          "id": "ea44a93c-c999-454f-8b9a-45421770adc5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6b09ef5f-3717-4cab-841f-b43c899c0812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0594b977-ae4e-43bb-a893-cfa4ed8ffd85",
        "cursor": {
          "ref": "c1010084-3cb2-4a28-9e5e-ac6b864596d8",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "03fb5c55-c876-4010-9632-c1138edb4d99"
        },
        "item": {
          "id": "0594b977-ae4e-43bb-a893-cfa4ed8ffd85",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "af90612f-f390-4f36-9aa3-ea149687bdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629c318b-5a04-4651-96cf-191e538cf5ad",
        "cursor": {
          "ref": "e4d0e9fc-1310-4b20-b8f8-cc2e095bea81",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cba408ed-0070-4a74-9bf4-232f3ccf81c9"
        },
        "item": {
          "id": "629c318b-5a04-4651-96cf-191e538cf5ad",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aedefb8a-1e59-4f1b-abf3-fdd483607f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da68b78f-4463-4c00-9855-6e6cf3a843f5",
        "cursor": {
          "ref": "95abac4c-4665-4d68-a85e-effd4815c151",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a863b0c3-1576-4f3c-8b34-c7a8d7a18665"
        },
        "item": {
          "id": "da68b78f-4463-4c00-9855-6e6cf3a843f5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "80d70130-b40c-4ef8-95b3-35b52567e6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746928c0-dd87-428d-8899-552d322c2d45",
        "cursor": {
          "ref": "641955e1-f896-46af-ba48-08e38474f860",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6e72d781-cb83-40c1-ab0b-88e82aca52e6"
        },
        "item": {
          "id": "746928c0-dd87-428d-8899-552d322c2d45",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7a01717-b7c4-4bf7-a514-d4077ac6fd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f79e94-62e2-44dd-829d-205f71d5ed57",
        "cursor": {
          "ref": "ee73e3a9-5c0f-4369-bd07-41afdfbb36df",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e775519d-970a-4a48-a9fc-2070e4d4d71b"
        },
        "item": {
          "id": "95f79e94-62e2-44dd-829d-205f71d5ed57",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f28fc247-e47d-49db-8a94-106e1b66335a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f03fb3-d003-4635-8adb-efb129116759",
        "cursor": {
          "ref": "bbd312b4-00d2-42f5-9a0d-0d7a8589c336",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1d0c3be1-5738-4948-98e3-c56c3f9d9359"
        },
        "item": {
          "id": "37f03fb3-d003-4635-8adb-efb129116759",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "20a75aae-e058-4e52-8267-e16a3be51b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a016034a-082e-44be-a598-382ea397af28",
        "cursor": {
          "ref": "c3aa559c-55d7-426d-b59b-f5dfd13ba926",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f603f4da-175f-425a-aa70-2bb4e76c4533"
        },
        "item": {
          "id": "a016034a-082e-44be-a598-382ea397af28",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41a2ce44-3c48-4765-be26-76265d8f99e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3022f403-c54d-4688-a062-7d26f266cbc5",
        "cursor": {
          "ref": "14c01016-6ec3-4afe-879e-ac701e6e6310",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "af757602-a8db-4420-822d-b4f7732a5755"
        },
        "item": {
          "id": "3022f403-c54d-4688-a062-7d26f266cbc5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7a13a365-a381-4cee-a268-75576c02fb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62099e9-6b8a-4416-b8d2-5f2521410a79",
        "cursor": {
          "ref": "77dbf760-ed12-4b44-ab83-d21297e16095",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e9ffdbf6-b7f9-4326-bf0c-8d3ce21aa58f"
        },
        "item": {
          "id": "d62099e9-6b8a-4416-b8d2-5f2521410a79",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4b347e06-b5f7-4add-81bd-425050d4eaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b2ed5a-49de-4795-aa3b-a6b522a61249",
        "cursor": {
          "ref": "74b0d51b-0abc-48fa-a065-f99bb7c4286e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d637f38a-5356-40a1-bc47-db7e7e5a4176"
        },
        "item": {
          "id": "87b2ed5a-49de-4795-aa3b-a6b522a61249",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "18a36efa-0bbc-483a-9c25-9ef4fc33e989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f858e53-d71a-4e44-b114-e0b3b86c22b3",
        "cursor": {
          "ref": "989cf422-2756-4fc6-ab90-4ed1440fefce",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7bf84c86-fb9c-4151-b344-0a4ce1560eb5"
        },
        "item": {
          "id": "6f858e53-d71a-4e44-b114-e0b3b86c22b3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "270f2416-9100-4170-843e-ee53f1256f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60b99b8-22f3-4f27-9082-c4b634ddb034",
        "cursor": {
          "ref": "ccbe7836-35a3-43fd-a6b1-1c8e6d02cadd",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5a8f006c-fdcb-42ac-a6dc-8dacd304665c"
        },
        "item": {
          "id": "a60b99b8-22f3-4f27-9082-c4b634ddb034",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a6b12d26-418e-47fc-8e9c-ece1cdf12709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9219c423-b118-4af4-9bd8-e9d957c74768",
        "cursor": {
          "ref": "c84c514d-4d5d-4b45-bdb1-1aee79e069bf",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3a1c615f-3f4e-4c64-911a-5d6c90979d71"
        },
        "item": {
          "id": "9219c423-b118-4af4-9bd8-e9d957c74768",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "770cabf0-1197-46d6-898b-d81a7383b172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64142d3b-239a-483c-b6b9-89648b70822c",
        "cursor": {
          "ref": "7380826d-b170-4905-82bf-1f7b5db90eeb",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "24c5d9da-6116-41bb-bf54-a40a9302b2ce"
        },
        "item": {
          "id": "64142d3b-239a-483c-b6b9-89648b70822c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d070f979-cc8f-4e0c-a95e-a910164b24c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216fc0a2-36b2-4314-a431-5aea2225ae43",
        "cursor": {
          "ref": "bb429ccd-72f2-4046-9c7d-2533c4e5548f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cbbd61ef-dd22-4250-b7ab-5547e7105151"
        },
        "item": {
          "id": "216fc0a2-36b2-4314-a431-5aea2225ae43",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "071e461a-1fb2-4b08-9485-84711a5c08e5",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "f9f907d4-54e7-49f9-8562-40714cd6c44c",
        "cursor": {
          "ref": "83774498-9425-43f2-afec-4fea49ddcaac",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4a9fe1b5-c684-4613-89db-af1d85ea6a6f"
        },
        "item": {
          "id": "f9f907d4-54e7-49f9-8562-40714cd6c44c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "07974edc-ceab-4f7e-bc0b-b366f72fd1ae",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "275d5ebb-d5e9-40b8-a596-ca5329598ae3",
        "cursor": {
          "ref": "a6c05fec-c6ba-420b-b0aa-925050e57cb6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0f4a03a3-093a-4776-908d-a4f050f4b7ed"
        },
        "item": {
          "id": "275d5ebb-d5e9-40b8-a596-ca5329598ae3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f134bf1a-6f54-4530-a379-73db0e356fae",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "401a36f3-26ce-4b20-bd19-3a867da0b62a",
        "cursor": {
          "ref": "394cef0c-19d3-45ca-8ecc-8db080e9647e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ded08ecd-57ca-4e72-bd8c-4ddc664057fe"
        },
        "item": {
          "id": "401a36f3-26ce-4b20-bd19-3a867da0b62a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f0f0d184-2d97-4759-9209-dbcf11e403c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401a36f3-26ce-4b20-bd19-3a867da0b62a",
        "cursor": {
          "ref": "394cef0c-19d3-45ca-8ecc-8db080e9647e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ded08ecd-57ca-4e72-bd8c-4ddc664057fe"
        },
        "item": {
          "id": "401a36f3-26ce-4b20-bd19-3a867da0b62a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f0f0d184-2d97-4759-9209-dbcf11e403c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7335751e-1943-4509-be41-3013e55b3083",
        "cursor": {
          "ref": "f57bc5cc-6812-4c18-972b-2baceaacecb4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b27b9543-1a33-4927-80d0-2a25c0b84c3a"
        },
        "item": {
          "id": "7335751e-1943-4509-be41-3013e55b3083",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0add0f89-546e-46a8-97d7-ba72a40f88b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f304a3-0036-4b0b-b24e-b7a192578a1c",
        "cursor": {
          "ref": "b984b8e8-171c-4c67-88f5-3794c5ff10b6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9664e148-0873-4d5e-8ceb-c48cb5194a87"
        },
        "item": {
          "id": "12f304a3-0036-4b0b-b24e-b7a192578a1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6ab22337-5cf5-4578-8739-e73eb1375bec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}