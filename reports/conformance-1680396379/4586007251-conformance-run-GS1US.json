{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "22fc1e43-5b3d-411f-8216-f54dc5eced24",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f18481de-b739-415e-adb2-2932352fef4f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bf40ccb-cf90-47bb-898e-e46bf7b6fe04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56512e0a-2cc7-4fb8-a9d4-69e6cbdf0d17"
                }
              }
            ]
          },
          {
            "id": "33fc2270-3ddc-48ad-bca6-14d1f7292e25",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e3feae2-2ad6-445b-96a4-39244d201bd0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7902705d-9dea-4b3b-ad24-7ed17ed17e70"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2aff8a05-c992-4499-8087-e1c9e8bf4906",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eaea6ab8-bee3-4dba-8715-bb618f279b77",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b1000ed-7380-4d19-8312-e3628d0fb164",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93df282d-2b18-4410-89f0-61321e83892e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33e755c3-eab4-44bc-8b76-f9f2db246f92"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43833453-9920-46d7-a816-c58fac269f90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15f526fa-0b43-4749-b1c1-370c3ee1ebb5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83f40b05-ee31-4b7b-9b98-915a5c639cd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "984b7abc-0a8f-4374-8ccf-83d22696fbc1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6de2b09-0c57-4000-98eb-ec91b4822eea",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d2d7d268-2749-48e1-999f-8085bb27b268"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c3254a5-1346-4d65-b322-bf5dedfdda03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f86352cd-7720-4652-8158-60d213cb5ec5"
            }
          }
        ]
      },
      {
        "id": "85b31927-3368-42da-bf0a-c3e1f327a41d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1f7ce7af-e7e0-446d-a32f-c669adea302d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3df048e-4031-4667-ba5b-10aead943704",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "96b013e6-eae6-4e39-b7bb-73d850a1e02c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f31565-6e10-4a7a-81e3-16f4f220dbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2a5944b-449c-4e88-80a0-7de0050a1a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0090b627-3266-41db-94df-186e0c8089ee",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120aad21-bc63-4544-b19e-73075a5541f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "064c36f6-305c-4ab4-9301-d840a3b73a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e673a6f-221d-4dfd-8a49-198d3dd2dd04",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0766458e-8b60-40d2-b0ff-087de6dfd697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62b0bbb2-6d13-4548-877d-2e274feb9504"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec0d2aad-f2c6-4a08-ac68-09a6f07080c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cae882e-0c12-45d7-9c84-ed5c52a58ab7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a27529-6c21-44be-9c03-84273ffac24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e000d5c-f8e5-47cf-92f1-1613f6ceb5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24d9874-87cc-409b-8ae2-e2e88ee4df5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f88b3d-5660-4a03-a70a-806dc884cf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354452c6-ae60-4979-8ad6-9ed0e29ee42e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5e3947-6beb-4a5f-91ce-ff9aade5ac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1004f9f5-5428-4192-93bd-890fd2b3ba04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76b8709-3317-42e2-844d-6be53a1bfd12",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c176b9d3-0c13-468b-b7b9-3261eaf385d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2af2db41-8ba2-4bc4-ba30-b94dbb0c7572",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d72772cc-27a5-4764-b7e7-092860bd8428",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac25a259-1011-4821-b299-8980961f1a5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e4ec6d68-0ab6-48f2-8c88-a4f11c429b77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6dc793f-aa87-4fcd-be27-bb73770601c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ce585cc1-7e44-4c5f-a1bc-48db9a64dfdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf1806fa-2a8f-444d-b71f-ef7ee98e86b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46bcfe59-c756-43b6-92ec-16d592437b38"
            }
          }
        ]
      },
      {
        "id": "12d04ec9-c1b8-4abc-81cc-c87f6332dbf9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2ff95e39-5e33-437a-9270-144aaf90325e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb20fbfa-47b6-4b5b-96c1-de8e6694802f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f3f6c772-c630-47d7-8522-b1f23479e62d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72192086-d3b1-453e-94e1-19df9ff2e91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe5fc73-eca0-4e8f-9dd1-4b28c750585e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7e3e1a-94e7-4ea4-806c-3599c11461e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b5dd6f-5be3-4aed-9c6d-041b8f65b9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb13436c-4ef0-4bef-82cd-fc59f7ed6c91",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7582b383-1794-44c6-a226-66defb347f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a802d11-d22b-48dc-90f2-763cd2bb09cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c070ff-cb73-43f2-8a0b-561912b93b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d277d572-c3e5-4fb2-845e-c8e613e968f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343298d5-6a10-4649-909d-e5d5cd05a268",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3e834c-845e-4eb9-90e5-f1470437029d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd318a8-3b5f-440b-9543-782de836f100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab93caa6-4147-4b13-aef0-63dd78fd15ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11a06a7d-ed04-49f8-acf7-65855272b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c2ae30-7388-43e8-b509-774240289e07",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d88c44-3450-497d-8e03-6bce0768e82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ede6d0d-002d-42b3-9ed4-1f60763bbfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9feace-2684-420b-8ffd-e6ac4cf9ba6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ad1bc0e-8341-4871-982b-1099f7fea213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24957cbe-136a-48aa-9e6d-e84af54fc802",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffde6d95-4fad-479e-9991-56c266a03e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d194b045-55e7-4540-9156-ea9c105c5c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e5b380-baed-4d33-b18b-28a0ef5b5c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0660c87e-e767-4bcf-9ea3-6c837f70b0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc059f-9c64-46c7-a69a-1e099e570ba7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4cd47d-d36d-4c8b-83ac-c78d6759899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57772660-5aff-4148-be83-fee13d35560f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc85a3c-7cb8-4416-93d9-91b03d602a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc11eff1-8ec3-420d-9f23-3d0672f7ff6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ee499d-e524-4649-bcba-60b018e326ab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6673a71b-248f-4332-b17d-c125d1b36f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1814e7-5ab5-4324-95be-82ab0b2f90f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e44408b-2f69-46d4-93a6-e96ad99ef06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e00fbf2-486a-4bcc-8cbd-c350860eda98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9506ca-9b1b-4755-a634-0b86b7491371",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8323ce05-5478-4ad4-9dce-6ee57c895e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aec5759-7965-48f6-8b79-fc3e6095e682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b828eb-7536-4c21-b8d6-77976826d9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da45970-e918-4c65-8f17-2cc8603c2f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81927dd-9214-416b-b33d-7a4efcc280a5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26ffbe6-6dae-4226-a6ca-2e582c440558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7484d59e-e534-40af-83e4-2c2128db7b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4291c6b8-d040-48c5-a13b-3ce37c5d5356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df5a1ff4-cec0-4e61-ac4b-0f6595627263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba6b76c-1a50-4e19-8192-9940a40382f8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f411b71b-eb24-4d93-92b2-0b56151716bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08919223-f1c9-4e77-9f14-7fcc7ce96e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d95fb9-8730-4186-868e-01e3ed8455d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfce858e-a41c-4c45-8843-2327d80da7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520fbd7b-9c1f-4563-9ee2-97d49a17ac68",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c17521-1a64-4e94-9740-4ebfef704598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a913051-f605-4d64-925c-73a67c9972e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ad3b61-01e1-4584-9d5d-cd388f4a3844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b96b1e27-feeb-4ec1-84c3-fe386cb2d5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec13a6e5-67f9-4dd8-bd77-96613cbff558",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a2c0e6-28dd-4447-8007-a91968d77432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e58e904-9ed0-4692-b2c3-65d4c54ad0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b565463d-30d3-4d4a-81ed-d4e983b809ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6be92ad6-50a0-496a-8b79-05988a667f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c0dcd7-b8f5-4974-825e-112626f182bd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028dab2b-a823-43c9-88fc-7022ab063547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e09afb7-6bb4-4375-8ad0-a522f9c2a102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2dfbb1-0383-49cc-92ae-7a566b50ee21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd8746de-d358-43c3-a3d6-097d616fcca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2cb329-63c9-49d9-ad29-eb73679c8545",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517d7c73-ec64-4a6f-911c-0ad04f7dfff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760b9fd0-9323-4996-8651-3731aa96f543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0727a7-600e-4247-a728-106ecf396a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b029d575-a3cf-4b81-bdeb-88d0af7a535f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60a41bc-5023-4971-b011-6177181b1d8d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441c7ff6-d2e0-400d-a9ae-7e3b85b5bbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377ddc3b-cc4e-4283-a9fc-0dbfeb538086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05f1e9c-40d3-4df3-b772-8a51b2472c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26445193-565d-4da3-bbb4-543ebf94d205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e09195-a184-4a91-aec9-6a774206ff17",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30359c26-46c3-4d97-bcb6-41e57f0f5713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3296030f-a6b4-4dc6-9c9c-960ebd240bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122e1f5b-441d-400f-aec5-a4e77e9e58f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abe703c2-c28f-4f8f-8665-20b2fa38b1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1650b4e-9075-4644-b7be-69fc930f6897",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b329083-0350-434a-9a0a-633a4008a802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144e46b1-683d-4ea9-9b67-cde6d13a3461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e039e602-0e1e-4497-a807-a6b8308bcc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cf82363-e009-4d9d-9602-cb33d1cfdb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9daaadf7-9973-492a-a648-aeae81d53e87",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eb3e09-1172-4c7e-82f7-b1ebdfa39a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6348d4-d655-426f-9653-1f8de4f4fa3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d324acf-aaf2-4410-936b-63f4172a64f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c75790-81f5-4f5e-b1fd-4cdeb461cbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbfbadb-6a1d-4275-8c20-af170ea96316",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c8246-e278-419e-88ce-538ad98ecb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e659e854-1b4f-4cca-80b6-e78c9356475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68645eb9-f1da-4c16-b89d-0ebc3c165636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a55a9fa-78de-445b-90cc-7b1faa20b2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17655aa7-5dcf-4d14-b067-e49d10b211f3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085307f3-225e-45c9-a9ec-aff930450e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b18edc-659b-4ae2-9201-321c4b581ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffbe603-f7bf-47d2-9bf4-133db9f2e8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc813546-e984-4c4a-b3b1-ac610f6d2468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a76bc1-6ed6-482d-a6e3-e58f7ff19e8f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb3b8d7-72fa-47a6-bad4-2147ce727bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54468dd5-7ac3-4476-841d-b1b2a0d743a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fae06dc-4b9d-42ae-9fd7-ce9ff49820f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7294934c-2ef4-4991-bf54-2ed398a32508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc5104c-b82c-4194-a1d4-3787c5443688",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd72efa-a1a9-45ad-b4b0-4b01b7c16437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a88b340-9d5c-44da-9a68-cf9e436825dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1855dfc1-ea0c-4cee-867b-e711d9ae59a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2545e733-2b69-4b80-903c-f99be557475e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392a87c9-2704-4acd-851c-e78e6de146b2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1081e697-d695-4064-97eb-a1edc2ae0af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275ea37b-90ec-4da1-b5b1-85f12e6c65a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51d42d1-d2ca-4762-813a-ab46e4a6fc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac8c20a-29be-49f4-8508-61f5f7dbb5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3a9062-dc96-4f5c-8c16-327adf03ccf3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e60cc5-fe1e-4e90-835e-d1f326eb690b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38baf55a-506e-4946-b0ac-65984ca2014c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e14e9d6-c519-4e2d-bf9c-5453e08d187a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d9e760-02ab-4033-8b01-99df61916319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac330f6-8fe4-4d0f-9875-41291da3403b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059fb85d-c82f-4747-b0fe-db883991ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd766e23-6a00-42b4-a6f7-1cb63f4823d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e74170d-541a-4b11-bf71-c84cf7f09e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7580bb-aa73-4931-b94b-d3f223741757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0d7ce8-da6e-41e8-90a9-cc1cc9b77d88",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013284a8-efbc-4b5c-bc90-b7f3c9a69c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d14db3-2412-464a-b89e-85eeccecabd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b933e15-2b48-47dd-bb09-b2e6e7b159f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22272e4d-22a1-4baf-9e25-fad10193e1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef6f6a6-b484-4355-9f85-93ac16edb0ce",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7cda11-d396-458e-bfbf-c060346cf994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315c0ca7-aa04-40a8-8f7b-629304b432b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1373fbb0-7add-4d55-9b0d-0367ed148204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75233d00-f289-4c93-8a33-267e1a51aaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a5c733-d277-4c31-91d5-5707868637a2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228720ee-491f-46b1-b1ab-51004c904b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18aa9cb-ad8a-48cc-b097-73e6f4582dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5bd1a5-c24b-4d63-bb7e-5b0b03d59346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6035a797-e2dd-45bc-a916-9fd0e06d98a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a7e83c-f776-4873-bee6-f443bb8a0e18",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d6662d-169a-4b27-99ba-e34573a43724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084bbeef-a6f9-4403-b226-4eaa98943166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5388691a-1568-4f81-bee9-10b9ee3c695d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca43d190-172b-4c70-8042-4d180edab225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da766c3-086b-4c6b-ab07-70ede4dc399e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e4edf0-801f-4766-81f5-97dc5e3365f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3b17a5-8e50-4a7c-8383-e94a686bd373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4087bf4-25ef-4975-b012-ef3caabbb4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c53e3b4-01bc-45e6-9d2d-65b17a2558fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd30312-58c7-4a34-92c0-78b2d01413dd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c004c4-edf9-4e08-a478-1de7e6ac57ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c77a9db-1d01-4037-b2fc-4fe828d95449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd353901-1674-452c-8c88-aebaf771bc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef799ae4-d10e-4286-8c45-2083e6219afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848b3ea4-7b5a-4a63-8383-3e1def39aaba",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d03217-fbc3-45e7-b0c0-f62a87aa5802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e01c4a2-37df-473e-b858-e47b88c38287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4468f7de-8453-4119-9563-74d093060923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9130fc1-a44c-4226-8073-43a7bd19457d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6167889c-f5c6-47ac-9214-e50f76c75266",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77be615e-91dd-4a08-8b4a-32ec337a6fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6452b97-a6fe-418a-84b8-9d6db422bd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac65b0cf-e538-4e47-940e-bffe8c48881e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b84e2b-d811-41ca-8747-20e6c5cf8814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2e7d4b-4372-49c1-8243-0705a8fc72f9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd20805-58f2-4a7a-afb5-5e22d7b36c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3e2578-9849-4e9e-bc06-5a86cef49c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808c932b-deca-4f1f-9ae2-d83ae3396b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b3e7ff-1df9-42cf-971f-45daba64f672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa2dc37-42ec-4eba-a61e-637670c1053c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a494eb35-512a-4671-9ef1-bd27719adeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9c3760-ddf7-4c0e-9ac3-55d17b2defa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b82f953-4a80-414c-9508-ba7ef4e5b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "39a8442a-31d8-42d3-ace0-0aefcf85a997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94180616-1757-4216-9f33-0e2c138a9dd8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3adfe9-d2be-421d-bcc0-122365849e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fee43b0d-62e1-4d47-81ab-6e5e323258da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b941d70-6cce-463a-a54d-74383f3537b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1af6eb9e-1495-48cd-addf-52317738328c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069451e3-c60b-4a07-8251-5287a317abdd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf204f2-e154-4642-95c6-ee358c1e8733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d10d78f-966b-4196-912e-fda6bff3f2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a316e73-c36c-4fc7-a127-7659a013a3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac7102a-0be9-4b40-8922-d22dc4bd9101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5653dfe7-f3db-48cc-a2c9-67676810ae5a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3d1bef-9f6f-401d-8b20-b6ab692a3662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceac02f0-e56a-4c25-94a6-89312296277a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f8fb52-3367-42ac-ad99-a3e99bf6b85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49268fa6-0077-41a0-ad2c-3428c4db944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110796d-5503-4c0f-910d-541096d4aafc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b37ee0-4b75-482a-b441-2b8a3c6b379e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a9ece8-ae3d-4941-bce0-b88480cd0213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5345b621-d2f2-4c40-b82b-fc2e255587e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d460056d-a0e5-41a5-87be-fe3bfe8d544a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb7e8bf-617b-4730-b374-98a452d7d0ea",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154c6cf6-5a42-41f2-9e08-8a0b61925ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ee76af-4f15-420e-b732-ea8c80fbe347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a586ec-a2e2-4961-9b3e-dd64cce20087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f923b5-d8a9-439c-98ae-1d183c3ef399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469d3777-2905-4ab1-8a55-e997d1a3a33f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622cd3a0-130a-402f-84f2-e54283654be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa99d0d-8cf2-47da-90a1-b61a1d3ed0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd3edf5-1647-4f36-aa62-ef2936679461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdd4c79-92b2-4daa-a3f5-4b5595a178e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae46e4bd-02c3-4228-8d38-d2a2c98bb2ef",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9da1cd-c215-4b64-a57d-8d986314d70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776dc1da-f73f-444f-9a2c-e84dcbe19629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bbcd8c-0510-4b64-a06b-302037ca3502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bc60a8-29cc-4860-886a-36a78f1caecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88a69c8-c1f3-4b1b-b2a2-ea3bf348b38f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49427412-f534-4003-a2a2-0904814cbb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a40c1c2-cc79-4a11-aec2-ac55d9b3afeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba65b44-4fcb-4456-b62b-59ba0744598c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa71e8f2-fb5c-4d71-8606-c90d875d978b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff7eb98-6e70-491b-9514-1427d8c80993",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e105133-b6c9-48e9-98e2-fe407760be67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab8159a-104d-4191-8e2e-15c3c2d39bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4d1d96-74cd-4adf-baba-89e687321074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f404337-8b54-4448-8de2-314225b47a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3c4305-d8df-4dd5-9d67-8ca6c7b096f2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d09b81-b7ec-4315-b4a4-06edb0a179b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e92fdd5-c40d-4a90-85a1-887f5dc8bb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07eb15f6-b7b5-4b9d-ae6e-9b5a28695ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d35b203-9c16-4ec5-a680-fa712e4918d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8d44fe-8a00-4e12-affe-ccd8042364ec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f19ddd-3c4b-460b-8a12-8bbec09da715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f83e31-60b4-4cad-90f9-8f10b2f44a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701b15b6-fa16-41d9-8390-d25841c7945a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7aab547-8ea5-420a-aa84-39493b009e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a4b04f-43c3-4b16-9ec0-36eeea49904c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4352ae-9104-428e-ae78-18429d5e0045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e9db9d-e09c-4848-8e44-840919d578b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bebc49a-c0be-4c64-bdd7-63ee09121fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fab95c7e-bdc9-4690-8472-71d9cdb55d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f13761b-adbf-4848-81f6-8481d29e4667",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bd6250-da61-466a-8c7c-3c75f8c4bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78758dae-e125-4b01-82fd-8fbfd43ab661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74829a2-840f-4470-a298-39937716b3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b0b60a-db09-4def-8a2c-3b56d1f61620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cf47c6-2b69-4dd2-9cd6-4797e3a69e8f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5d9888-788a-4242-91da-2ff598a12ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63fb054-d3c1-426f-880d-89beeb73c49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7102722f-ae44-4287-8b50-73bc15072bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26d5faba-1cfc-4e30-9b89-521369920237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec20dd4-a512-4a77-a344-a64947700eb0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd975329-01e8-4bba-93aa-8a49c0e791ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543ab186-8196-4399-bd61-87333123d3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18018306-99ec-4c3e-b272-94954de03e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6df4ef0f-14d8-4bee-80a4-562731d526d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1968af7-5a9e-4966-9aa2-f3d3ab5cd4d0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceebd683-cf58-45dd-a7b6-d9d747710497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86a8f2b-594b-483c-b9d4-dfcb9dcc0916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2df8c3-111b-4978-8881-aa6b550597df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc4a52f-59e0-496f-8266-068b3433696c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2b2434-3ae5-4177-b143-120170cc03bf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dfe5fa-c56d-4b59-b8b0-e2f40e13e910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dc4257-0171-42ef-bf4d-328329d125c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9840a45-71e2-429f-875f-ce07a902bdb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2533c85d-ebf3-4c89-9278-adef1ba13193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba0f6f4-3669-436d-8794-7285569d19fa",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479a060c-d317-4a66-8288-59a599c6d103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27eaf72-b2fe-47d7-9449-1be54df36e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f9b07b-bea9-4117-996f-6fb48079fb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4449a4db-7b64-4355-9092-5025d2e4fe9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a209cb2b-6eee-4f80-a1a7-b0d9e4487767",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c754c15-d801-4193-9962-8e8f65ddc9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97688954-2e67-43a2-b87f-1c44280c5591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae08706-2095-431e-937c-03d299569627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a2716c-5373-4f84-9949-43fa946f3b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6297b0e-2d06-48e9-af4a-4787dc9aad1d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f6cba5-16e5-49e9-9add-cd3d40397b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf5894f-83d0-4551-a4ad-b15888777922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c3c83e-074b-487b-998a-7adfeada78cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb0f2d3-0a6d-481c-bc24-080c71d9be62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6df4402-cd45-4070-b440-5901c0c589e6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceef05b-dc13-4b87-81d4-613530acf5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9e7a4c-9946-48b7-a430-fb198898700b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93263b84-1128-4764-a913-ec6a162de124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cba37545-a80a-4629-b321-338ae36a9a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3be6d8-23e8-41f0-92fd-81162f437158",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8813114f-c9dd-4db0-8077-cf8d23af7877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130acbc1-2f39-410b-9682-1cc0a813fe8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bd0074-de93-402c-a1d3-9f51e95f3f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b80bc54-bb98-4198-955a-7922a4934825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123e2a7d-ec50-4bc7-9cdb-01fb6c026f84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9889e042-1b42-4afe-b71b-1ee2d84bbc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c6d679-bc70-4e49-a714-2323f7addc56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a18cc77-1031-49e0-9212-17112e98f0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3acbcce-246d-46da-814d-f0473f649cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca18bed1-8353-4234-91ac-bcb200715b1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535121bf-3053-43b9-bb5f-897957a2aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc10d617-8ba8-4c2a-a7bc-b42b6c2d5e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc695c7f-31e5-43d1-a750-36c774d2606c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c0738e-2ccd-4360-9ebe-9663ea92274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f38eaa5-ccb3-4705-b2db-450898396b24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4875811-44a6-496c-8c88-5ed3e492d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4015c31-db10-4cff-b7dd-c35de4f3b187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e03c239-1088-44ae-87b3-6cec656375b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f351e9b-2f3d-4e74-8385-056246cd7d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f155db-ca57-4e72-a14c-d150879d4b43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db51c01-2080-4fc9-b5e1-a1806edba4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2561f3ac-f00e-4913-9699-feb02f556684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6f5673-9b9a-4956-87e1-f2cbc4a6ced1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2a4bdc-73fb-49e5-90a1-dff186f498eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e3f434-770d-4fd1-8504-1a2d322386ab",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca02f6ca-7b95-4f85-8638-0af336abd2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4ae19a-975e-4cfb-a783-afd9fc92e14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dec5d4c-49b7-4a0b-a2cd-cc463d6449ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a01fc7e-b53b-46db-89ca-06ec05047b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707bde26-acb5-478d-bf29-e4cd7677541b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b90f09a-107c-4e39-b300-991f8f33b93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8490d231-720e-4752-8d5b-541488ece7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995c25ce-1a0d-42f8-8dc2-8b1b122ea7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bf67f7-efa8-4bae-800e-856c602b5c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35522402-46e2-43c8-9c6d-cb6282ae884a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367c0fa9-2df2-4d4b-8c54-c1d92629df85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d93a7c4-4ed1-42d4-bca2-f4cb5ae82928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb62557-4dbc-4549-9b49-2f91470e6497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ab3644-19d6-4358-aa3a-64d2aaff29c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4279011-7d84-4149-a7a5-fc42e13be1f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6685ce41-484a-439a-a5df-ed7fadde37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5c5661-9fdf-4129-b4a8-a840b7535ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3c13fa-3ab3-492d-85a2-e81b2b8cfdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0523a396-7320-483d-813a-a761d4a6b698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb4570f-e339-4792-930c-ce84224ef2bb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca1f501-b18d-4e99-ae1c-8498606fb5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f72ae9-88dd-4038-be21-9e8d3b54880d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50edf982-5572-4ae6-8f27-cce82f717848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44e8e6a-b434-42de-a6a3-514e8a2eb822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45936ca-4313-436e-8627-23f56aacc045",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7076e10b-d54c-41a6-9a5c-51b48b57b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4535bcb-d86b-47d5-a8f4-4e01900ee260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194bccd8-7bdb-47eb-b483-47a22fd01c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1e0d32-1249-4d46-898d-677c29b3adf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3ab1a2-ab0c-430d-b54b-46757c25049e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06da954b-da56-4650-87b4-29d94c964ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1d285b-3e36-4d5d-bd25-7be3d49673ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e58b5f-6e73-475c-80dd-39f0da22fb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "073f82a2-f8d0-45aa-a71c-8d2c1e95fb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e2eda7-7dc8-434a-accf-2785f5cb8c84",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6637faa4-61cb-4d51-9901-ab27167bed8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d3c013-b53a-4aed-8c4b-2d5df25cc6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e00be8-c05c-4181-8e33-3a02eb11af77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6702764-540a-42b6-aa3e-2c313fae62aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5af16bc-0508-4e7e-ac1d-8bff65c2b5b3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9a0174-1c58-420e-bb77-b14bfe5a76b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09abf689-a053-421e-8915-31436edbcd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a54e85-326b-4535-92d8-62b30abbaa89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6bfd9c-0dda-422a-ae08-b021334fa82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2b3547-f354-4a27-aeec-844b4f56cb69",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1f86a3-70e3-4d9a-ba5e-42be8314dcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0275e68e-e33c-45b0-b564-bd69d38159da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda12cfe-d7c6-4a5c-bec9-35fbff32d507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8059a79f-5ad5-4075-bb48-57fdee509296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ac666a-94e0-4ddc-adef-d09016176662",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08067506-e437-4c2e-b296-539bec548d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e9f97d-36dd-4f2b-92f3-dabc50a96577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d826f59-da3e-4ade-8d7c-8e6f6fcc8f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf824505-84b8-4f6a-8c14-70716eb88d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dee86b-cb0a-4b5f-b06f-801308bcddc5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004ee54a-eecf-40d5-a918-e4968ff22482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ecf7d0-bd8e-4003-8eab-1c2ea820b342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aefa74d-57eb-4bdf-8f22-02876f894a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "410cfa6f-e3fb-464f-af0f-6c43570fdfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e470aa-41cd-4ed5-8e09-9f339aa5fe76",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa63766-dcc0-4e62-bcd9-6f8f9077a51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4228febc-56aa-4ab8-8c9f-adcfb663270c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b228139-2756-4735-a121-b384e8141a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1cfcf69e-d753-4932-a529-986e22e7187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ca852e-5016-43de-90eb-3877c4daf25e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725d292a-1788-4488-9cc6-6ac73d1485f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f7f26d-b183-4421-b156-98c13c01d9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449fd485-423f-45b2-9092-11370e98e127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c48e4f1f-b834-4885-9d25-2496c9a5b603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077b8491-0e04-4c58-942f-7e21b0cf2d5c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8057fb-7cd4-44e6-a622-9746fd2b47a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14138ee4-c6d1-41aa-987f-d5cbe279f1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710f17fb-f10c-4f62-974e-64513bc32612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c471cbe1-f05d-41ea-87de-0942fd92dbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2237b5dc-d41e-450f-8d5d-22951fb25000",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764393c3-53fa-4697-bef6-b377be06bd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a1c6da-8b37-454b-816f-59640f511ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4f043f-65d8-4fd1-8bdb-dce228c9058b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9fa877-12d3-435f-acd2-c60b1b583354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339485eb-9bed-4097-baff-9411a76619ee",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668a3954-f2a7-4a03-b32f-e28882b8efa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e15cbb-2df3-4591-8348-72a9dfebe6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051e0d1e-d508-43d4-8ad3-7892464e4d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2637cd8e-79eb-4ba7-aed7-abecf1fe63b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17e16b1-72bc-4731-9310-2aabf7715d48",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e621ad-b6bb-4b8e-92c4-d7846b06dfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b922f4ca-9eb1-41fa-a790-fd7c235bf6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f686eb8-5150-4533-8c7d-86260212f843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f98251c-aea1-4ae9-a8e7-43bea685a8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94940a4-a5bf-46f3-9b6b-13dd4b9860db",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8999438-60c3-4844-8518-a6417da1b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d69679-5af0-4cbf-9699-59b05338b6e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b2657e-8dfa-4757-a97e-ed1c547a92a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a1c931-fd5a-4605-8c1a-31fbabe8bcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab73680-ba90-46d8-b612-2ddbaaae5676",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702abb33-38d9-4427-80c4-5358f090760a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb931c6-59e8-46f9-ad70-e842ba9b4d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d73beb3-1cba-43d2-9b2e-80ab90cc9369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8610be-0e28-4261-9bfe-aa3b7e88a41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee451a39-e60d-4277-b201-0b41a9fad769",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfee6a2c-78ad-45f7-8345-80306507f85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e37fb8-f95c-46d0-b342-243d2ea7fcdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d488c075-c915-42d9-b554-b1a2abeff7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "deab3a93-0aad-439e-bcd1-ea1a4d3fbc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5677d9-bba7-428b-b037-1f45b50706fa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7b0be7-13d7-4d79-9f6b-405a2f5ae63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65573794-f252-40ba-b157-228e53ca295b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b896a4-2fee-428e-9c2a-48721f6856d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f247651b-e5f5-4f6a-9056-86725cd7640e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4124fa2-7c68-4ee8-bcd9-f07e27ec4a7b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c0d4b5-09a3-4ac0-a600-b26f960c5e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a076a49-9350-4615-91ff-2ebe9561317c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646c032d-d06b-424a-8100-e4e57b1985f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fa2989-50aa-48df-9b1f-dac3a77988ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce4967a-1cd2-48ea-aeea-5439606ed436",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542ec948-1cd7-4fe5-bbcd-a1171b2a0ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9097360-d318-4046-9e67-b2e9c0e649fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd767ee-bde9-4154-92b1-1eeb206d7a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e045651f-c0e2-46d5-b0c4-f5d86f89fc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb4d14d-def7-4319-a14a-804cafdd1ddb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921ab80d-3640-49e8-8258-1a377a25e371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd0766c-653f-4885-8381-59f09aab6910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b38fb03-2799-4390-b4fe-c94b81ec771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad89ecdf-1ad8-4846-877f-b1fc4af99603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb898e45-1a2d-4e37-89f2-bd279d0f95fa",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f70d21c-a3f9-4de1-b6a7-d248dc21bbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638c5913-a2a6-48b0-b5cf-04c27ebd0c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b119c2-04a7-4b83-8878-626556b55340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45885deb-ae6a-425f-9480-67679a0d749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757e9f77-3d6c-4801-aa5d-67a4558550ca",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9680ec4c-2978-45b2-a8e3-014486de91fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93234baf-6080-44ce-bad5-89851b582b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06e302b-360e-4d44-b7c2-7eb75012fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c247d9-a883-47d4-b378-e1b9de24ff80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a29614-e59c-4f05-9b51-6e194ae759c5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38afc4f0-f75d-42e6-a55d-1590bc48b2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fc0a20-ecb7-4257-b244-7ad63bdf560d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e71816-120f-4172-b520-446ef17122b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29bf2391-440f-4037-9d90-00c9b48e1d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d2825d-521c-4d09-af5e-ac8cea79c9bf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43615506-3e20-4312-b797-56b03311e851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b6a56c-3060-480c-b656-d746ee50e5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4139450-9c4d-474d-bb92-4d78c9269385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d09d926-0f3d-440c-9e73-d291bdb6a24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293190c0-1aad-473a-9186-a0575b00c23e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b369839f-1a71-46d1-b188-1bec52b0c41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c57cdc-cbaf-41ca-bb4b-fba9fe9dc142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a965d5-fd01-4bd9-8ec7-c7aced278ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2da4c30-b161-47bd-9ec7-b64b97439b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76865b55-a244-4bbd-9d22-90bdfa736d08",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c29683-28c5-4b30-a2d7-23506354a050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "25c4691a-fb3f-42a6-a982-bcafe57d78c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f56a06-efeb-42d1-bd07-56efccc90cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0b664c-54e5-4dcd-8a55-18ffec8be15d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d6a8d7c-9faa-4ec9-bea8-78a26c473ee7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "574d06dd-b3bb-468b-a0d8-b458ddd6a702",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2850049e-ba0c-43b1-8815-a8055e45315d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb7f1acb-3b81-4a8d-8909-d83e3d6f0cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caaca22-226d-4528-af70-9fdc5edd4c57",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8351607-d162-4106-8f6a-59bf47898423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c358d6af-b6ad-4ea1-894e-87437d11f7bc",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7eeb684-2379-4eec-a928-11a47ab90573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9856eaf8-df8f-4546-a30e-c9e4d542df70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e349fc4c-da17-4a33-b474-3c21c25e62fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e903011-4c3f-4e49-ae6a-c07b4056e30d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72fc1dec-da70-4887-9f74-f08448d93409",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3723c1eb-8405-4423-b7a8-dfc70f6df6df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcfada10-77df-40a0-bfa2-80c331596ea6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e693cef4-3b60-4922-bc79-f154e6a859bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d8d6c62-f101-4765-8108-d900f188ca9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2ea0ddf-9cff-4495-9952-2dfaddcbe2ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb6ea2d2-d1ba-44c3-844c-93a1da6d272d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db2bc02d-b2a6-4c3d-b816-41b8aa1c06ff"
                }
              }
            ]
          },
          {
            "id": "be910d34-d5bf-4cee-87a6-7be1bda458fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d319803c-d31b-40b8-b3a8-0d74e29aac8e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bbeb5af-f62b-4198-9cfd-b71ba6e9ca75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05c0b46f-e9a5-4937-ab0e-be075232de72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6499f96d-3256-4ad9-89b5-dc38db77ca77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d1a9897b-405a-4d68-95f1-69be7e25f4e0"
                    }
                  }
                ]
              },
              {
                "id": "3c88a923-517d-4292-8b39-a2da391e216a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c35835f-5500-49be-b67e-8506635272bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ca31d26-29ed-43f8-86b6-788e9ce02082"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5284205-14c4-4692-bd14-001b4a63bf69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59277a5f-9ab5-4b87-98b9-8a5f391958d5"
                    }
                  }
                ]
              },
              {
                "id": "4293baae-2937-4bdf-a3d6-9284d1f1f3c2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d46dfd4-e9f0-4d9a-8000-7bdd4d19edd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86b01c75-f1ea-4cc1-9705-6e5a4cd8948d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb34cb31-0c70-45c8-a904-6dc7223c770b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d089c24-074b-48e4-9b61-29f47632401b"
                    }
                  }
                ]
              },
              {
                "id": "c02db67d-90be-496f-bde2-a986d22e681a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d466c60-e079-445b-99f1-5bb5cb28ef95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7492325-567c-46fb-ab10-47d612c7f483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34581f8b-57ef-4c0c-bb53-f6cf9a422f9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "06d8a81c-f5ba-44c7-939a-af02ab707a0e"
                    }
                  }
                ]
              },
              {
                "id": "25fd697d-95ac-4bbb-81dd-058a9d636c5e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd7d6d4d-5f7a-4bec-9484-541540ad17c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7770877-4c05-49a6-9df2-bbb5132f2c5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73ed6f29-e9dc-49c7-8462-74be59cb4f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ea070aee-a990-43bb-bc10-c197a6efe3c4"
                    }
                  }
                ]
              },
              {
                "id": "6941861e-2e0e-4627-9f64-bfa53ddb57f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ac4d584-a675-4ae4-9d0f-7c22906aad71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a83c82b-77b5-4760-9c49-952bffa3df62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f118244b-1c95-47d4-a299-38fa5abd8fd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b45bdf64-39f7-4e9f-94d4-cae23a3504bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ffb17488-dc09-41e5-82ba-52e7d08e4058",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4105817-10d5-4bb0-99e9-b9968519d54c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4538bc10-0705-456e-9e08-83402721c8f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bcf8bef-55cc-4a91-bb8c-6c5a09888695"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7356154-b57b-4ea7-9c94-026a014fa3a4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "113d48e1-3b44-4f9f-8618-1bf6fe97422f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "779425d3-400a-47b0-999b-539b2e5cd5c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69cfac78-320b-45f9-b944-16d5d6e2d0f5"
            }
          }
        ]
      },
      {
        "id": "241ae80f-1943-4184-b7a5-e028280636f6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "219a5f77-fe17-4235-be2b-254c01dadb2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4bf6cbf-dc3d-46b4-82d1-804d18df0cbb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "92903e6f-794f-427e-bcfc-6be2b8c70b07",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716f82a0-5593-4f7b-9f39-48854ee50f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c9b738-1937-4b38-bb6a-f9b3a5ff0760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199cd6a6-eb7f-456d-becd-3f53014ad3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed8e325-f174-4ea3-99cf-3ae53ffbf9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb53d7-4db9-42ee-9acb-1bb8083f9af8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83c8bbc-6a4f-4674-8865-c912a6ad1d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a56c48-2fcf-4be1-9dac-2e3afcc164f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a7fb1f-984b-4daf-bfca-38327e629aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f86328c-8573-4db8-96c3-10c1e6c070de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c03799-e00e-4d38-8527-5d3966f8b201",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6158bf3f-9fd7-4480-88f7-9571b42f020c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278fcfd6-ead3-4332-acf2-209ac090c9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6270ae90-fcd0-481d-8d9f-80c2e8d40242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfdd35c-23cb-4aac-bbbf-51ddc0228cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2251d349-230d-4dab-8350-d03990fddbcb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f04d25-4474-4b58-a639-c90b51027813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05011bcf-d601-41cc-9c61-a158a19788d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fab7a5-0be5-4801-8db3-8236c5bc919e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e7d32e-5e8e-4aa3-b60c-1431157a1ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea7fbba-6a38-4651-8efa-d1ed2e1d415b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a8a407-d703-403e-b1d6-4c7d116b48eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a47d8d-ed10-4be1-9fc4-2b52cf224d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b3fb9a-045b-4a4e-9454-7c12c024d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a3ad84-856d-48b3-8474-ee8b81e4822d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f9a31e-886f-4a2b-a4ee-58fc32f65a02",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fdb71b-4b64-4b4a-b1a1-48aab95a5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777d26dd-f6b0-4dd6-915b-7a8a9e6c0f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18992392-922e-40a4-af84-0845200a092d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "032e7883-3230-4d8c-8eb0-42e5923f5209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b492f7b-b9fb-452c-9416-3234e121dd68",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab256761-7a51-4e18-be8f-3ac4ad623015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0dc1741-4f64-4cf5-bb14-8a33f9592567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb72acfb-4751-455e-8da3-5c6da025da41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "af15c94c-bce4-45cc-81c2-89a89098d683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4bf98a-4ffc-48fa-a64c-8f8adc83a2cb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6983715-4f42-42ca-80c3-4a6858b39a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92cdefd-a649-466f-9568-3bc734775d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cac3e54-801f-4198-ae7e-ce3f441f0fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9113e32e-7947-4204-8181-c4784db14669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951d03af-ff0c-45e6-be3d-08e8b03d2748",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2a2923-b4f3-487c-835b-df8cec2be6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284b699a-9d0c-4911-a86e-9df9d882e054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d60790-45fc-4a37-b8ff-312a2d7a07bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b57a7334-32c1-431c-90df-c003f512acef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fce86ac-6bcf-4d51-9b82-6e3568a3b65e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7502d6c3-64c9-47f0-8c27-329e2a03ea5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1561b7-d40d-469f-b44f-acee202d4f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3bfe16-7e8b-4a75-a98c-6aee85517032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d79a642-f20a-4576-a145-58436656ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c9028-7156-46e2-9a70-87aac109f8ac",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae91da9b-7e5f-40c0-9dc6-039327c1c0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e8db97-4483-4841-ae7b-18ffb798a610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ee6a57-e4c3-4c87-be54-8343a6dbc6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4fccf608-d59d-4465-b295-a9e394f4d1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdba818f-6793-4cb9-a9bc-17483c246898",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a96b0-57d3-4ec8-961f-e3e41453b84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab0d2fd-3401-4cf9-b9e5-131ea9c8e478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ef6c54-d03c-4363-ac4e-591c7ce348b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2942b8e0-46e8-404d-9d0d-c2e995b6ae2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc19e031-afaa-4407-bb8b-d728bf77bdd6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4782335e-ee9d-49e9-99e7-d97178f65fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78440a75-a4b7-49cc-bd81-87ad6f9f6cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc54a9e7-03e9-4367-ba46-0c3747272677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f51e374-f414-4bd9-8f6a-3c1d63589de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4a2ed-4a0f-4cf6-bd82-6e7246c0a5ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8a026c-e6e7-49bf-80da-db3c57f9e768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166120b9-a8f2-4564-980f-5aca6c21075b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbab543-cf4e-45e2-8e05-b33060e48d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "847d0013-7f3a-444e-b400-8f04574a77b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84fce9a-1a73-406f-8ff9-3b30d31b78f4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44fc705-e9d7-4469-b5d7-416e9acd72ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb27db6-0e5c-4f69-8d72-e9a31b8a43b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a3cdd8-e2d1-4e15-8c9c-c891cb1e3a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef171265-2896-42fd-9d72-fa7e11314647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3152dcd7-bbad-4895-ad32-5fdab4e65b08",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94b9ab1-ac42-4ce3-85f4-bf15c17256de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4375ff39-f8b3-43c8-89e1-3b551f765b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f6bb46-0a2e-4ae6-9d3f-24e88d6f9116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "468ac2e3-67f6-464b-b4d6-8c0cbe9c9eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eee48d-24d1-4097-b6cc-cdce8a613898",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba284cb-8aea-4c2c-a633-464bae2e7545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e9058d-0b4e-4a75-af36-1696d32f1059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ef12c0-fedb-471d-9a8f-66b9b25614bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6490319d-7299-45ad-9082-a6e9b688d43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f0aa23-57a7-4a73-a577-7594c8bf3573",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e3c0fb-09ff-4757-a8f4-04b7e107837d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15421f7d-4c05-4b37-95da-6f1db79b8112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72251399-7f7e-4db9-9add-815d12e1ce7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbaf1d94-1691-4b4d-97a8-6533dacf2ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a46911-c28f-4306-8e82-963a36a20b3e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d677e03-230e-4518-9c1a-3d63a68636fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635f0096-3602-4866-af57-47911c7b8373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efff9842-b38a-45ba-ae7d-9efe87775e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66973688-b406-4a60-828f-b44adf570c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625e619b-8d6f-4414-80b0-81054607c189",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e112cad2-7130-434c-bfe2-767349b7323e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9dd388-9695-4f85-ad55-dfe0cbff3cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccc6124-b23a-4308-bcbc-1851538f1427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22880ae-4e7e-4e38-8cdc-4fc283fcc21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e7c077-e6f1-4e70-8daf-abaa2a1bd761",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525bb298-2d48-4e7c-b248-2422e029e43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b272dc63-6cb2-425e-a307-612025603481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff240ef-637b-40d1-97d4-ed532093cb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca750e0-156b-4e02-81cf-d72faefe9b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3877d6a1-fea8-4bf9-a665-a4e750dceb9a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e265e314-84c8-41b4-b196-aba9d34a38bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6980d4b6-57a8-4bc3-b483-6478a70b9856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f0954c-2cc2-42de-b58e-42a7a23e4e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0951c331-99a3-4074-885e-c28213b25b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c73136-1182-491f-9467-25ecbc38608e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a762a1-e114-4d33-9ad8-ab522b39ad29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f686c913-d479-4697-b36a-21fb149be62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302147ee-501f-4167-b625-c1e9a26d20c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "297fd1f2-2599-44b0-81c7-7c384785e003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97eba06-8b88-4e7a-b11a-d9dbb36b9a2a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1ad5c2-d639-4f23-965b-c4f8131e8bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8e179e-1fab-4270-852e-45938648941a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3ba325-566a-473a-a2f3-6114d9811e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "770b15ae-b318-459a-a86f-55261f5e5d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9444b861-7c2d-4968-8e5b-72b4dd6d039f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e6701a-797e-49df-ab27-9908527dc751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc810f3-d60c-4f79-b455-cb7795571be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56a697d-6478-44e8-961a-89ff7442833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbdc1c4-29ba-4d47-b70d-a1fcf566f93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5eb8bbd-31b1-4da0-b6b4-aabf938038e7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff495158-87a7-48bb-b8e7-abe935ffad23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d785b00a-1127-4e12-8925-6142edb2fd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8443f061-b0bc-4e8f-8281-261b16baac8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1874a0-00d1-4776-a669-570912e49f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63849bf5-34c3-43c6-b633-780daa903b27",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78eee059-1099-4d9b-823d-e567cf86a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed91f670-8acc-4780-a0de-ecaa70fe08d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f79cb8-e197-4c07-94cd-045d7308439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a0920f-4745-430d-a79a-d02417b9ffa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff177b01-f43a-471d-8768-1ac16c295e35",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49d9bf9-8106-4f57-951c-d5aa2f84729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a493e6d-3e80-45ff-93fa-1bc2f7f5000b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caadc39-bd01-4d78-8c85-d0b509fcf644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d14f1ef-2167-44f3-88c0-19ca321e4606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d49cebc-9d40-4929-ad0f-9a7ee7a13be3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1acab2f-ffec-47cc-a99b-713f6c6c9d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e39a46-63d0-42d4-94c1-c1f3f0738cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7cdf49-8e15-41a6-a712-a9a82b8f8c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b584119c-df7f-4572-b271-393e709abc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb4d1fe-3bfa-4657-8e1f-1090aa3f300b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff7c3c3-1cdf-4b48-b883-3296bee6b394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea866e13-37e2-49e6-a40a-c32e56dccbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1a0a89-836d-42ad-a6ab-c5bb9253240d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "054cb20c-c184-4cac-9e41-c71816ff5dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1e57f7-306c-4148-823f-480e24c20f05",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8251eef7-1d6e-4af7-a4e6-8ef57adc3845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693b5c8e-6e6b-4e82-a8e3-c5030c22e54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31478853-6bbf-496f-90dd-ab4b5ede7909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9932da-2f28-4b9f-8a32-216d9366060f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c28ef8-e9da-4fb5-9a3b-e19a1a3d90b1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7953c1-03ed-43b5-a6f4-10410673c2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad78e056-f409-40d5-a799-33e86f9ed764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293310b4-ad4b-40f3-bec2-89185cdb374a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f90e926-eedd-4d8b-83b1-15801864e40a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "617d8bd2-8094-4bad-ada1-6740ea7a5b9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca1702ad-3c07-4b19-96b2-3583b2bb9bf3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576497d0-d2b0-42c7-b70b-090ae2c15c20",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "246a7f07-debb-4295-8119-b32bca2ace16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db7df46-b89c-4abb-a8d7-b550d7b70516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70998a9f-2e08-4b35-9bae-0c7c214fdf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9add69e-6a37-4c93-9e02-8095471df7ec",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de091c6d-0946-4267-b986-b3c1bdaaa59e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2ab49e-c658-445b-ae9e-d7eb8e3cf3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0517af4d-e4f9-4eaf-8e4c-ff568b6b9040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "551c6047-e990-4eb7-b041-6e01c4ab274d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38e7b17e-e339-487f-a502-7b2f9fec6a84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f813f45f-a9dd-4c0b-b569-4c4c10ddfd7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d99887b1-fb8b-477d-ac01-e8aea2d4f0bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "077eec93-b90e-4aba-8fb6-272e21d1abdb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c2f1e75-a90f-4ed3-b24b-b8fd0d52663c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "071c9685-0088-4b45-a875-f6ed7a43c158"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95e19f3b-b749-4f8b-900e-57b2237ee056",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f29c067-28fc-4cff-94eb-4b96fc1c8ade"
            }
          }
        ]
      },
      {
        "id": "53fa2c5d-ba12-42fe-8400-10a40d33dc5a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "410d2df6-4d99-42c9-ad04-abfe548422b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5819d2b5-1950-4960-aab2-db50e89376f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f80886f9-27d1-4139-bbc0-dd89c9cee683",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8abad40-0946-4502-969c-b006b7877e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99428984-ae11-4797-8b8c-9be6adfe06d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1063c6e2-1880-43a1-b163-084f1b615635",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84483d4a-2362-465e-9ac5-3df94684c1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81b6af2-e7b7-4762-abdb-791345a0796d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5088cd3-ffbd-4437-9e39-3ab76fc4c7a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68624739-ab7e-4063-a01a-d2f6d72d23df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b34147-7403-4198-898f-0a07f8da2da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4923bf94-9316-4100-9045-b581b23e2fea",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d68e925-0f28-49b0-a84b-f325737d048d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1713ad62-0bca-4bfb-84f5-7638628d0f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e7ccdf-4b21-4526-98ca-a61d0d896e7b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9fa479-1458-420b-80bf-f29997956899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b568b47-bb41-4adb-8bb6-62ead2e8343f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d05e717-d980-4ee3-923f-3f0534558b93",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce6d80a-164e-46df-96bc-d4f918667233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f16e91f-1138-42f1-b3c5-7611b4853455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d0db24-71cc-4854-ba1c-5225672e1165",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b3dbf2-bd3e-4696-a5a3-4af24ce2ce00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da25e09b-7fcb-41dc-94f8-54be66f61e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6664deff-5e6b-49b5-9c7b-fe8a9495f571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d29029-7924-47da-b8d0-2c9f9add7686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4ba343-81cb-4e00-afdd-0ea99b13a010",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e05d30-2058-48af-a3c7-c1c4fc6b8bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb0d07e-afc8-44bf-b97f-ec37059d3424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67e7435-eefa-4c86-bf00-fb39a8a65d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2d1ee8-5fa1-4eef-a1e4-d20f92a76389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de571973-c8c4-4ef4-b687-57eb83c9cdcc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebef492-d9a0-4430-afee-c2fdf34653fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86447175-edc4-4d97-9441-a3ee7126a9aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e46f719-bf80-4c5b-8114-9f5e12627358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0660e568-1699-420e-a759-66ac4f7ead9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870640fa-9d50-47b1-8c78-7d3821481c07",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af9f366-77c1-4876-be2f-023600d6ff81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0392ba95-c322-443c-85bd-8fd418f65b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d76b97c-7758-4ebb-aa55-6bf56e205f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df195eb6-5b89-412b-ad51-413789435014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e74cd1b-b992-4b73-83b1-9ea3eabcdf69",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7c1aa5-ec7d-4572-9a07-ff768c805562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96563dbb-f304-4da2-8fc4-9b175bea8126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852209ff-eed5-4d34-8dc6-000443b09b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19b1f03-edb2-4868-ae16-ad8da4798a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1056e510-82b5-46ee-8be3-87d4ee75760d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f50dd6f-2642-4fb7-9f6c-684750434802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71e3cae-664d-4e58-aeea-d9204422d078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d11d989-cd1d-402a-bb44-d373289eec12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ea4db4-d480-4559-a33d-b9d859b80b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8582b47-963a-4752-94ff-07c04200257d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8883d58-4bf4-40bc-9606-f50e1618db41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea3ae16-a6be-449d-993d-0f5795cc13b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f145dfb1-66c7-4d92-9104-fa5c6ca4f58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bf7aae-2491-4713-8f11-6231055a34de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901dc770-643d-4503-b206-bbf27be6dde8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb73caaf-8dca-4802-a631-29cf0687fd2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c24b56dd-4a35-415a-bd9a-1557ecbfbfe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04de875-6466-4c3f-8db1-a1943546f320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5271becb-42a8-447e-99a1-d25a0aa171f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d476bb-d179-4959-a682-cab0a3d087e7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306e5f7b-995d-4031-ab6b-f38813f101e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4c41de5-7b8c-455f-a6c8-5bf8e858d10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb32b0e-42e2-4bd1-9883-1f461ce872c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cc0952-f092-40eb-85f6-6c78aa2c1824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4487988a-10f3-493d-8e43-0ce2368a2dd4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ddcad-519c-423a-8809-3788902ad4d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4d56da7-7f2e-4b81-93cb-178d7ecde658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4bf9d7-6086-43ed-a800-4596eb539744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d343d767-7fa1-4db5-8799-65130fb6e565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b3a4c1-bbad-4a64-b075-8707bb80e9a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5c8c5f-4944-4a37-8a56-f63cc98b8daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44237a22-1b2e-439e-b4da-c1d5cbacd6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "299dd4ca-b87a-4a92-a727-4f366353c814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1891a2-c4c7-4261-afe8-52ad19cac42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107abd94-a0ed-4aba-a989-6a9d261d7b61",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfe895f-2fe7-46d6-ac5d-54e9d64dc56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee054e6-37ab-4c1a-bea5-8169efed8fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3888cae-bcd0-428a-8075-81f44ddb311f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ae7e02-9e84-468d-bd48-9004e50cb74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf0696d-af37-4309-96d1-5d08db949bb1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec352bc-56c1-4e0b-b840-93ecf1093bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1462f5-56b3-4c44-bed3-be1f4380ee7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4c6143-2c14-448d-b141-39f3574f17b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8213442b-a093-42ff-8999-d75c377d3f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaff2cf-71e3-497d-add5-d453c728b8c8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d721f35-16cc-4e8e-8a0c-4399c63c887a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03eb397-3d78-4e52-8029-3446b6903741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3335eaff-58a2-4c07-8a20-21299e458c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1a056a-b1af-4da2-8653-3e3c683c3586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4871c33-9dff-4aca-ae82-fa81296b8de1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea905ad-8812-412b-88c5-f21f4a3c386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f342b9-78e8-44f3-8580-62f884f4ecd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e510e79b-1a4e-43bd-9235-be1cbf2fc58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29d2bd6-73cd-4bcd-b952-0529cf3d2019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03aaa215-dac9-404f-90ad-012d5007acdd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9900ecef-12ea-45ef-a416-304a7a8588f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60d5f6b-5251-4b53-85d9-2448f9c9d0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eab0a7-5472-441d-95e2-8a77ed084cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534d4c00-250f-4ba3-bd89-f85807071460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171a48ec-3cfc-45d0-a586-8478274b0e21",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50123a35-7b91-45ee-8e39-cc6a17a3d004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc698c5-8218-4a47-8a4d-909a1d728c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9e39a9-7349-4fd6-96fa-a4de22659db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1929e46a-ef2b-484c-86dc-758b0f396b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5530ed81-feaf-461c-b2df-03516c444701",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b40227-14ba-4954-81a4-c4235da10ee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3afaf160-71ae-4a61-b3be-037884f258b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68148eed-0540-4409-a063-cf6995d33b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c7e8b7-8c69-4518-b549-5f67b40f2140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c67b80b-5816-4dc8-bd58-ec2292b57d46",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5267d2f-bbb3-47f1-92d5-3b44dc84d8af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e17fb62-47d6-4a8f-9438-1ce700b459d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2d6435-2e88-460e-93bc-b86f1da1bf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfee7ee-1e93-4fa3-9b3a-9b84d1bb9ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf01078-5f96-4d57-81cc-ce10d2ab8bea",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a466705-a632-46b9-8258-600a64b5acaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85334fe-a19d-47e9-b301-a158e2be6278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eddcc1f-7bdc-4382-9f7f-9cff5fa9c8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c9a91d-5a67-453a-84ed-2aeeb300d35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ae76b1-e185-4793-8881-451f20be748a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21579d1a-6c6b-4897-aeeb-2cfb6a520d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5be81c6-adb7-4c56-8331-7c21f26d0cee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6e37ba-7ce0-4d2d-a7e8-6cb7f1a94aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd5ee162-98d4-4c8c-995c-e8b370909125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f1f837-947a-45ea-8940-2d24052e87fa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910513e9-a554-4177-a8d0-9ebe731c8fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b40e46-3a3a-457d-ab74-ff56817fc2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d355014f-fb3a-40be-9bb0-4dc74a7a78a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8052dae9-7ab9-4ae0-b061-1d466a9427ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30c1e2b-cb27-4a87-9bd8-c0945a6a8a2b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84983aa2-9ad1-4f4e-b3d7-9dcd6aa9509b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d86dc6c-8c8b-4552-8317-4caa77c9c0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fd7347-333a-44c2-b223-95dcbcd90a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b004b7-8dde-4b95-a480-414f4a85cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5059ce-6ad3-4bc4-84a5-fe457531db74",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449f72a4-9c6c-48c3-aacf-f430ec3b4845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8c6d0c8-ed2e-49b6-9d2b-0f69207aca46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9db3cb-3e85-4b15-8473-dfbf1464beef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab597fa-a85a-4cc0-968a-98a9fe5998e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593e2db9-6a69-4365-934c-e001d5b99280",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01409ee-0680-42f4-8b63-d77cd4af56b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de0290a-fb52-49f6-9314-a44627b80df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bdf0e0-9caa-4d4f-accd-9188a2a746e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d69a0aa-9cc9-4546-868f-5b529f97aba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95969bfe-b5ac-4e30-89be-033812c64431",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94968ca7-4525-4e8f-8586-c65911afc8a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc22b306-693f-42dd-af41-26c92db0e24e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406e8b24-cfa6-440d-9025-57122f5b614d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a714d9b3-3615-4a0a-a00a-f6cd093a1c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc725a91-48db-4981-b231-880d46b18c21",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf7a9ef-0a60-4941-94c4-bc8decfa5708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e672b8f-86c4-4fc0-880d-7cf28a4af632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3958721-2071-4364-8616-be00b18ea325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f682c87d-cca2-475a-b2e2-854bca6689e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428990f5-2dda-451a-b77b-609566ee6988",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9c6467-4b8b-44e3-8705-f57c9d23dfb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c965935d-7875-4e74-955e-f4df999b24fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11047b11-1d44-4cfa-ada1-fef7289878fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcaace0-d4b4-4c86-8197-734834ecf9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd5404c-831b-4c07-969a-e8cf26015093",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9854b5b-ae51-475e-b6de-da6b7779e965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a048b4b-3cd9-4eb6-bebe-d196eb928a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7ce88f-54a5-4f8a-be70-5fa3f29ac9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4238aeb5-23db-44a5-b152-0ca3d33efcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5068880b-6e65-4947-bcc0-8643e697d7d6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52ed2e2-6e8d-40bb-8bbd-a7795d4001c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb3ba45-91e5-4629-b884-a639bea3fb20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f12b83-ff0e-4a8b-b388-58314242ad89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461360ea-4add-49f7-967f-bd2890ddc223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4218dc64-19e5-438f-bd0c-2d6383e7df99",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0383c3fb-7f59-4f3f-9d4b-95191eac9004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6fa7e9-f8fb-46d3-a4cf-c344ffaf7d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb77b830-0a4c-45fe-86f7-9f72882ac134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1258893-379b-425c-bee7-8dfc96567d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2408aff6-20e5-4668-a6e1-4ff1868f6faa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f857af6-6dea-4c6d-a092-c0f6c1b97a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bcc693-111d-4b3c-b431-9a31c7e9d1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03659040-0f48-421d-8c41-6c9ea8f1b04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0693ebb-6d14-49fb-b8f4-41ed65b92df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2feb27a2-6269-4479-8904-f901a377cdb8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129ddc16-912b-462d-9d59-149fa9988096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5ddef7-46a8-4577-8bd9-772064bc08d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73804206-a81f-4209-b8e1-fea5cd522529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb953aab-62c2-454e-afc8-814f41de40d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f1b3a1-6ad5-4228-9513-6e85a72161ea",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803a1c96-6565-4ac8-8718-7f00c4e8bcd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d35b9d5-cbc0-42b5-9c62-5a1f67c6330a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf367d3e-1d86-4626-80e5-593617ae3e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e7a95b-9500-47bc-b1f4-6b70deb04f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1875d6fc-5998-490f-941b-f636b2c413c5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2623cbb-9da8-4588-9322-33e8b8a1f2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8da9ee-0bed-4a3b-941a-2f49f598bdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d37ee1-c6f8-42ff-9cb5-e41e2bd8580c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb90de29-8337-4c7b-b8c2-583de829712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377cb3cc-6cfa-4515-b373-0b0ce39bb681",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b19fd1-a4c4-47e0-9f20-a7c5f9d4f098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965ff0e7-43ad-42b6-8f85-b5cde36f9f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979dd21f-6e54-4b1b-8c13-d6b069345312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492d108f-ac94-4c71-be40-59ac8f78bf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd36d6ea-c779-4978-a5fa-4cc984e89a6b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f57a95f-6adb-4ea3-bec3-c5c4cff7e57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068db6cf-3748-422a-8c55-6cf1df9b7e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0840156d-e2df-47f2-8fcd-4aad093effe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63719e32-efa7-4fb2-aa20-c371c8e3f70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770fcfad-9b83-421c-bddf-bd04669df6c1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbe81fd-5695-4db5-b3b2-785cf503c4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f11fe6a-ac62-4782-a606-5b618e82edef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee04caf-dde3-42a8-b25b-ee637b8b7fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773ce66f-dce8-449e-a486-8d5578d28e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6800b9c0-f2da-4c50-9f1d-36890c4f3c22",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c121a2-9d5b-451b-868a-0d90c14c6552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabaaa36-9256-410f-b4c3-292eee0ebcad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88840e58-eb7d-4e80-a0d8-24052b092395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd1cde6-3005-43e4-ab50-405eddf612a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8af8e1c-97d6-4fe8-8c43-6a8c3e100fe5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7689e671-285e-4312-9049-8c5740125637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819e55d2-5069-418b-bd30-c1e9e0a27128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39405a2b-a414-4c9b-a4cb-d705b3f66d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce4e911-28e2-4b24-bbfe-e055a1c3ad80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafe848a-2e4e-4eff-b009-89741dcb1c97",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757a0536-ac5f-4c3c-be92-17d5703f7f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74536ac9-6c45-4985-9a28-5db61907f246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b306bc3-7969-47b1-be3d-e50598260d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1067e0-66c2-463a-9496-293fd5ef2ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1df217e-8235-4455-b066-d6e036d65537",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed374c5-9b09-42a9-914d-d2ffccbd9db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a108b76-5da5-4d13-a50b-7a83228a5470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacb209a-bca7-4d23-b8a4-890886901518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed407dd-ac0a-436a-af63-3885b5377f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21816173-0b04-45d1-8909-2f582cbc3bf9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fa7cfa-06f6-4e2c-8cb5-00452a5f73df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3324dc2-4369-4c86-ab2a-fd3d66faaa58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864be4d5-439f-47a8-847a-9bc8cbc14d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b01894-2a76-4f6d-9c2d-35bdf74111af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27774ef-2b48-4eaf-baf8-02abd216463c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6275fb15-f065-4760-812b-2a26ba69e88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70183cb7-1d91-4389-8879-a4b243effb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d39738b-893c-46dc-87cc-118ce3c1c0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1604fa5-b58f-4de4-97c0-971b674aa7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646ac46a-69c2-4aee-86a9-b7799f7328ea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0dbbdd-7d7f-46e8-b7c2-2017b454fb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6bef5e-6869-4fd5-afec-87fda7be3fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b782fc3a-cad4-4efc-8f87-260cff1a5bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d48c67-c814-4703-869f-1023591dc0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbc9404-1b74-47c3-a9b9-044087a073e6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8652d824-23cd-4a6a-a5f5-2a53c9e3838a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e7e4c2-82a0-43b6-b351-310f36e6354b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cb14f2-6145-4339-81ee-200189cb9476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f7f340-15a8-4562-a9ed-d287c78c5cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29568e00-0115-4443-808e-3238546e9c9c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb575b90-fce0-4145-87b4-b3d7e1a8ffb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccea8067-6629-4866-b6d9-173804bb8c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fa7145-f02d-4bf9-bc3c-982937677dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a7fb21-e957-41b6-bf98-c4f8ad2a519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4c6b5c-a58f-4c2d-9ca5-76989b118014",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5956a38-7bea-48be-800d-37eeb0d0a1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2803d94f-397a-4d01-84da-8ee8ade3eb34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9dd464-f2fc-4095-b1b6-007c882ae0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac89787-468e-4da8-a276-91f65f7f3e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f092bc-2608-496a-b939-232ff3d086ec",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a770ffee-6967-4ffe-8d7d-0b976d3acda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe7592f-471c-4dfa-b97e-57b828fc13d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dac27a-69b5-4e86-8d44-f24a3081e138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a163e744-9e87-44f5-8efa-7b71c79aa0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b11694-a1c8-4688-b63d-c4b8666215fd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6489fb-701e-47a6-89fd-db058278c93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abecf837-3ba5-47f7-a764-e97f02dbffc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03fb5bc-759b-4438-8ae7-d7ff56706eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198ea20b-4954-4fe6-a25b-58b8edd6214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c1eb13-16fc-4c6d-bf42-d440839a9221",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2f414b-a632-4fef-bd75-90d138006823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64834ac4-aa10-47a8-b2c6-b79495cddad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdeecacc-43ab-4578-b28e-ad74d2eec748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e9da3f-5235-47ac-bb0f-954bad7a903a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e4e0fa-3fa6-45a9-ac9f-46ef62cb065e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e653442-7b03-4929-8d24-bf6684dad2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c785dcf-1bb1-4dbe-b010-fcff17e7bb5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6309bf-a39e-4929-a1b0-27776a24b2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1a2d3e-37f5-47d6-9cb8-bc92e751637b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f0a512-0128-448a-8ca0-41025259404a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59b92b2-d1c9-49f5-a4b2-24c28d1c8be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf897da-47c5-48bc-a296-da695d4d63a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb9bd50-fefb-44e5-9d41-61b1bc4108e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8eae7d-0cbd-4278-92cc-a3d3c6118f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3cb9c5-735f-4801-a509-76c70956c7c1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f67ba4e-2229-4c76-bcb9-87f090f2d4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a8ef5c-7eb0-4121-8b0c-9f84ea26de77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8d7d8-1ea2-4e24-83c8-de0e1bd6e0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1bb88d-d335-4147-9301-99adb306ee2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5c2b4c-3182-485c-9c89-761a08518e4a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88578fff-946b-4372-8a31-ffc88b3819f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01633e48-90e9-4460-8c8c-3212fb12a7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7f05ac-e829-4984-8973-23d263dd4c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e798450-3300-494c-873a-ea89b9170bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402650a7-7a98-4a79-8a62-69c07d338a42",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf35557-5932-4f45-9a9f-cb8f6afe55d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa467ae9-f2d9-4c5a-858c-34cb833dae97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195f04cd-79eb-4581-ba7f-250a87158dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb84828-2ccd-4975-9244-e6459fca8af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e6d102-eaca-47ef-9a41-c09dfd0984bf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf1460c-27bd-413d-acff-937e0450d974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4c06a4-8ced-4942-bed7-f791f1d6def5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3f2793-9d58-49db-a58c-6ba8386ac6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7b4dcc-6290-4800-9d50-6e2a901ae114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6cf66e-d333-490b-be19-fb896471a385",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a2d7b1-9626-4609-ba3e-eb05fd271d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e00d9f-7ad8-4041-ad93-752689e48a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bbd818-298d-43d2-8b93-ecddde4cfd62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1221648-9b2c-4de7-8d5a-afc6abfbc51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b5c9ba-89d5-471d-8045-787e2fe01f70",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fb8e53-d543-482c-a2e1-bb5445b0e7f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdbc0903-6c26-4080-8ccb-3cf8a4f96e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabaf007-5074-4fe4-ad9a-925ad232bedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8668ef34-80b5-4e70-b736-a8cd71b14e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49af3a3c-916b-465b-baaf-7076fe844e51",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdd6ffa-58f8-4497-bc28-054aa75a3872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a85deaa4-8e97-4cd7-b3d6-542204e5f6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe38048-739a-4208-907c-293bcf826f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0129001a-0a8c-4e56-b969-e63f2b4dfebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36d6a93-35be-4447-b691-5fa860234ddd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624c1162-6ae5-4816-ba46-cb225082f92c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05fafe79-a326-4208-b4a9-acec3f6d34b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed88f826-9b3e-4150-8247-05ee26441dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc409b3c-2c85-4052-85a5-14d31f4ff6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ea427d-44e5-4d1e-ac41-883497c4e69f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94b2bc0-4ea5-4eab-8354-f69a52807390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071c5ffe-1264-4e20-a485-7b3bb1afa04f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9377e9d-ee8c-4125-9f4c-18d6cbda933d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81379da2-69fd-4f91-8ea4-1b8a96a8e843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9154a52-cda7-4677-bf24-a2af8a17ef55",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7862200-17ea-411c-b84d-7fd347d79738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da89acd8-a4c4-40a1-876e-6537c1c7b04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88734b8c-ac0d-4efd-8609-57db6968610e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6119530c-c207-4812-93bf-d821fb91c780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd41941-db47-4af8-b3bc-ce129081545e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bc6da8-67ac-49ec-9736-50172e8defbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e82939-06af-4971-ba54-350d74b34d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7b64d3-041d-4fce-808c-61b671b1e2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ece4fb-c163-432d-84ad-86c54dc647b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e10555-885b-43a0-891a-4d1b8a328a38",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a85fdee-7e4d-4839-b65c-5d27bbb8f2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30ac87f7-2250-4019-b917-031136d42ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccddad86-2eed-4051-9b7a-3ec2b46a0e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c843ca4-ed49-4654-961a-37450731c06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8c3a36-76ca-4117-85d1-2cf7b7b44000",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb414545-8956-42db-a66a-cb3f4e8165c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b44f6eb-ffa3-44e3-9207-585e936865d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39967135-ed2b-4bf5-af55-49c8518027a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fd5609-feab-41e7-acfe-7fce064e9525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eaa059-f230-44c2-9865-b42f901489ff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21c06d0-6af7-4db6-b876-22c0ead9271e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745faf8a-5f69-42ee-8bb1-00189563a07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcab8be-8256-4da7-8fb3-0be554e33041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76340c18-e259-49e4-882d-bdbf05f0bb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa49c810-2acf-4d98-aa28-04aa80882ece",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2509f5a-fb61-4979-aafb-3eea04c9cd9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c13b91e-439d-402a-800d-ecc4632fb99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907f99c8-9bd2-4cde-b5e4-f2375abd89d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9833d43f-a52c-4204-9da2-5ae6d159929e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf059b04-1d3a-4a08-a164-2e85a6470c47",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27301a3b-3537-41c5-a2ec-9389a6ef2136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba0c8d0-51c1-4c27-8698-0f48664b0cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33e45b0-c9a9-4362-86dd-89f78446b151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bc744d-50dc-41d4-8a8b-b7d100206bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0fe20a-093b-407b-9037-9154c0839b58",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70509653-3bea-4b88-8c98-3c78d8e7faec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa908be2-0413-474f-8112-1182f50a9261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ad95a7-a7d6-4254-bf6d-09df925f1374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42bf887-44f7-49a5-a57b-3cbbe18ccefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a2f30-7d97-4ab9-bcd9-c1f69e5bd228",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d4108b-460d-4059-8802-d5800d5b3245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11af3e2a-e3c9-4724-9d92-282313edb7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fb33cc-e2dd-4cde-9cad-3f825f6900cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bebd9e1-9a3c-4aa0-9cde-53ba85fe6992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e344ea5-7fa3-4018-b685-f1628201fe67",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d4c6e6-cb1e-4527-ade8-b371f5d44ad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b52b44b8-b34e-44a6-b2a0-40ef9a48a202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eb1e2a-2a90-40d5-8da6-8f0e1f7f0f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8724628-f156-430b-98ae-f1daee15c35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cf8e05-fc7f-487f-b632-0aff9ff739e1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f7d1f4-6294-4ec6-b604-255372495a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80c466b-3082-4d36-ae12-a2d11e230baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9af5cf4-0542-4d16-9b68-ea29591069dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15593a1a-5a9d-4892-abe7-01ba47bb5b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba25713d-7eb2-4426-947d-f0ab864559b8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6014eff-03d5-4324-bb6a-b63140bdff04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c352ec-c3c5-441b-abd1-d409ffd614e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd63912-c3be-4cac-8000-a8ca31501da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f8915b-ab43-40c7-8935-313c01d6afcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e54d71-ca2c-425b-a1ad-081225e65d0e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80f8413-4159-4ef2-b06e-96602d518483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c668bc5-5e98-4713-b08b-1dc44a766ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06abcf13-4af2-4eb8-9520-c0d9aeb2a71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c27c125-1b7b-41e7-8407-dc125b8d6bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadb23ff-3a66-4d3d-8121-c208dc10c9b8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0f6517-0e5a-45ee-bbe2-bcf4980cf6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39b9dec-c567-42af-829d-a4ff32d4661a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb9edd9-e2d4-4ecf-b889-33098d5c88a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b816b0da-82f2-4a0e-97c4-65a88d33e223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1217b89e-a099-4334-adf4-7da8ef55c351",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c924ca52-9f5d-4059-8b88-70083f6950af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f66c612-f910-4fca-a398-4b42a8b43821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cbcc48-63fe-43be-8391-a16c0b60c8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3151bb45-d2f4-4301-adf6-7b8899b42298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa30dc98-fdb7-44e7-ad80-5bd458ebf529",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619fd260-33f9-4e33-bae3-50a4514cae7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c0c83cb-dce9-48d3-af15-9e1974ee8c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abc2e02-0a99-4786-8f7e-4f42b409c7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b37ffb-89e5-45b0-9573-baf1783ebdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba964d7c-0687-44f5-8060-cb3a7ed88095",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377d24f4-7583-422e-a6f0-eeb272631ea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3729e713-296c-4e30-b650-1ee8c555eabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3427a5ea-ad1b-406f-8111-6c34277eea8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31e33aa-ed67-427a-ad0f-462eb4a6dede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b53e01-18f6-453a-8dc4-0714fcdbbd22",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bbbb31-c2a2-4916-9bf4-650b0fca0e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409e8045-17ec-4913-8cc2-95bc19540e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131543e0-b6ae-40af-8bc0-5fea32d16afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6042298-6243-4136-923f-506aad8a8474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9354945-9540-4caf-b6f1-945fcf1125f0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2480fa13-4a83-4ceb-a603-888544289895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e13f5e-3c90-48d0-b534-67e97eb9006d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eace588-4fd9-431e-acd5-391c3540bd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b99022d-b76b-4959-a1e2-7d5d2671d8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7768f7-9b39-4857-8069-04382e2ee54f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b793a8b-a4a0-45a2-b333-4f4ef6e9d5fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f0f1b03-7a44-4e36-8429-568ec644b666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38338a4e-5967-4a56-8f8a-439c1529ef63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f480e4-12d4-4968-b551-703d87e7fcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef83c07-747a-47bc-b6ef-910430e6567b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9996e82-4057-438a-a8fe-97a92e1b2064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68973d71-2579-4fed-8eab-4062196a02bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cf4dc8-63f6-4db1-8853-08288e3db6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628d4c8c-e7c2-46f7-bc26-68f9488a1ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590579b2-253b-4804-a111-c0afbd6f99ae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543356f5-7238-4cf8-a534-73c05f23d619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180ea79b-321c-4566-a0c2-5aef20ffa7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4c578c-8902-405b-a480-dfc360eae107",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5ee708-b119-423f-bf47-7ddcaa4f02cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3500cb-2614-49f8-9a9b-8e0b532b700a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9875f7c2-7902-482b-9aaa-f745f4f7d331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2508a9c-36cd-451e-a26b-852e8bd02ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a2e92c-0e9d-4cd5-9ebd-d42eae2c58c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b46756-691a-40bd-9e7a-34174743aa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6457a32e-6446-47bd-a325-8d3bc6ae35d3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8478da69-c7a3-4c39-954c-f941a87b06fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa7f8fa-adfe-4e57-8bd7-f171d38c808e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe29e984-f8da-4e0f-9e89-cec9956fbd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05875bfb-9399-48fd-b015-3fff15bf4c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33663cae-633d-4a72-8880-5f4db551f5f7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a4e725-0729-4f6b-a828-b5b64a624c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18e900c-38c5-4d4f-9b7e-83ede858ebc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c8bdb4-4c62-4447-8b8e-1c4416650c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffca25c-5efc-4037-ab31-264ce10a3f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31f8cbd-b114-4bf0-9196-ea04354e174d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33144316-d708-4fe5-8b53-4f9c7b5c9feb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a228a7-e412-420d-bd36-54cd64e89b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be1fea0-099c-4751-91b2-e4a6054057e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2740813b-eac1-4172-8d69-887e9267f9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea622880-d093-4b1d-97d9-194c2d693650",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c17c6e4-012a-49bf-bde9-e2c1cc89105c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c86d3d3-89b0-43a3-8ad7-ad3576c3a909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283bbaaf-7929-47c5-bd61-3aa1254ae978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6dd851-3b0e-497a-8c0f-a63ee31ae4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580d0b5c-723a-4fad-8909-e68c5a2ad819",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd791b7d-0028-4528-8923-e0e377ed05b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04982681-1fed-44cd-af2c-3a44724702fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b29381b-c0fe-44e9-85b7-e6561ff55941",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f946a99f-9adc-4447-b077-d9ad9a884a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a96c4d-3554-4722-b848-501ec8f64ec2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66a28e3-16d0-4397-871b-6f9038ec6565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3c5cd9-9477-47a4-a61d-79c0c88f9ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1d3e34-bbea-4089-b4ef-2e99236ad32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90106021-ef0d-493b-a2cf-48df8100a554"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c641eb12-cc0a-4b41-8617-7fdc88cdc295",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc72973e-0a91-4e0a-a03d-6d6b86adda4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e19a4c6-4484-4581-b987-d769f20e00d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47056532-b456-4dd9-8c45-ae0a910e27f1"
                    }
                  }
                ]
              },
              {
                "id": "e3b608f4-b9bc-4993-b263-1c2821cbed1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eaa9a447-28cf-4b5d-b09c-3d3435c2735c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1956a9e2-8118-420f-9d04-c28e5de31ead",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fbd54fe7-0bbe-4be1-8548-168ba5c1ea9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9852edb3-573e-437a-ba3d-7eeba8179e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e19a4be3-d194-4c3a-8b38-4483ac82310e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7326cae2-d3b2-4a9c-a4bd-d77f3da2dc99",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c83ab81-ac1e-4eff-9c9f-da8104a52900",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c3563f77-308f-472e-bfec-67932d2fb429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2ccb4a-7d22-414e-97a8-0eeb9ea7c07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c7739e5-2268-4038-a0a3-19cd14578f63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf604c0-0aff-4cd9-a04a-095cb0f72853",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2912cc2-65ad-4804-8182-a013ab081851"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f46248d6-34df-48da-bcc0-181b3f4cb890",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f90f76-eead-4d46-a5e4-b6de97de1b46"
                    }
                  }
                ]
              },
              {
                "id": "a71f274b-af4a-4ccd-87e5-4bf48867162c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e7f87ac5-f056-4031-ba60-19afdb3d17fb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def40d6b-63c5-48c7-9f0e-2b66e4df6180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "362586f3-35e8-4b41-9eee-e1aea26da0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c84e22-42ff-429f-9b62-294bc82c180e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f1c962-09e1-4868-8491-e7984de34e86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c08cd17d-6fa7-41fe-9228-05b96029dd01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da0299e6-308d-4e89-8e80-00c4c7ed4e10",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fec2b36-6aa8-40f8-b77b-e97a537d730d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "59adc71c-5bf4-4a4d-8c09-8168f98c6ce3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "685d1696-9c95-4408-afee-efeecc396bff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dfe3f7e-7865-4f5e-adf4-922da798af78"
                    }
                  }
                ]
              },
              {
                "id": "aa0e3a8d-f09b-44e9-8f78-55a3a9891b35",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a447036e-5685-4090-82c2-373c1eb97438",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c9edfe97-af73-4ccd-a6a3-15b0841807e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "164caf8f-e3d5-4fd5-89c5-ac550331300e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e0bcad9-afd3-4ef6-a234-439c4b25ead2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d7baef5-cb14-4900-975e-037229906e8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2c47628f-0fef-46b7-aed7-333af4e7349b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1a20fd8-3c6c-474e-9a87-19680f80f672",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73d5c5db-5ca7-4a20-87f2-cba3b5e2201c"
            }
          }
        ]
      },
      {
        "id": "7c6fd6f3-895f-4201-b201-187938dd9a45",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f2f7c5ba-fe5d-4a42-8d48-5237090cac4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f209fec4-91bb-4bf5-9f47-16ab2a528e13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5ed5b0-b482-45d8-8a62-64d4edc7ce07",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "90824af6-56e3-48c7-ae32-3a2f736160da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f3dc0b-f4b1-4324-8e91-33dfd634b4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ead7ea03-c3ec-4cb8-bed6-05d4e6e113a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5514a7-af7e-427c-bb24-a30b76275372",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f15e7b-79ee-4da6-bf05-2b5a20de5886",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a981bce1-e1cb-4219-aa17-bc4dc79d5d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39baff1-aa78-4b0b-a5c5-a2e7f09e4a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76ff7093-6c5f-4854-8156-e346888d0482"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31394997-25ea-4367-915d-a34fec5bae1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56c672d7-caf6-43fe-98b5-78ebd1f53c88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eb6f93a-9e23-426c-bd0b-614ccf0e125a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffae24be-f336-4a71-bea6-1c7bda43c20d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd63468f-4ca2-4ea7-87af-423a8387d256",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6198685d-4617-4ddb-8739-5879fcb4a86c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "608e3a0f-dcbd-4bcd-b734-eae32b1a78d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e50cbf9d-f92d-4e54-bdc7-fa9865402c21"
            }
          }
        ]
      },
      {
        "id": "96023c28-df74-4676-9fab-156d7f51faaf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cfa83635-97a2-4089-a6eb-8fcf15648ed7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0acf7ab9-7147-497e-87bc-7c1cc1294f5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "685f21b8-abf0-496f-bb9b-5743f5075756",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72055205-d435-4765-a966-4a7fa59a1518",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c7ecaee-2e68-44b3-b733-01e8e5f8d88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca50f04-7b29-4454-ac52-d3b193aefa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d741ba5-bd06-40c0-9092-452df575f178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85522f25-b5bc-4b7e-ad3b-05de8a797391",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2237ccb2-c525-4d57-bbcd-428ed7f4a551",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "126d19e1-92c6-4411-9aa3-f3e531da5175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75929c12-f5a5-442f-8876-967e8e27b7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3215ab5-b105-48e6-9a10-658f1111e862"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "599b8cd6-eaf7-4928-91be-9d1a8b001bf0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c601245-531c-41c3-a228-10b85396cbc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6a86c7e-c184-42fa-b66e-81a7822d25d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd8bf85e-834f-43e9-8fb8-b98175978929"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cd116fc-6584-4668-b8ce-8bc6090828f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "beb2c53f-5d13-4435-b457-22feb7a2a541"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04e27541-a906-44e9-bda9-2ab7608e7213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ca355c6-0ab2-47e2-b26c-e86e025eb178"
            }
          }
        ]
      },
      {
        "id": "d00a5614-8407-4bab-aca8-68610a17cdac",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "efb61612-02e0-4110-aada-fba15db74031",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85fd3277-5e91-4b8c-879a-33d06a09fc90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d739050-96ee-465a-a4a6-ef721534e8e4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b734df79-54c6-483b-a395-29de98c2867b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b4ea5b0-cca7-4199-9153-a7e6711f2c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47d68c0-79ca-4a81-8e82-fdd2f2d360d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdb14b07-a590-4af1-a977-2a7265e6c131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e071a1-ffbb-422b-8b7c-6b6873798534",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213da44d-e7e0-4e26-8d83-baa7984a46bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cb55d31e-4ba1-4119-a49f-eddbb7228432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585cd842-d279-4249-99d5-664590e3ed31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf514854-3bb1-4528-ace2-e2a19963d9ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2beee423-32bf-4f5c-8dec-b7db60c004c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6dd5b8b-1881-47af-a4db-50d233f36c7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f31e4d2-eef7-4170-b98c-86dc6ab864b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da561211-e8bf-4505-b290-b9f6833450a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f96961d3-661e-4fc7-a02b-ac4cd4c88722",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ceafa92-f89f-45fa-a14e-68c360fd6c02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cc5a2da-dcc3-4e54-98d3-b0059f867639",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73591e47-5b4d-4dd8-99a7-23671afed20f"
            }
          }
        ]
      },
      {
        "id": "6d43a79c-0e90-42f5-89d7-eb5a2109ca8b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4b62ac6-13b6-4db4-afba-51255c3a8a2e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "030133c9-6470-4c64-98b2-b410ee66a7e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "97e549e0-0264-431a-85ea-4ddb858487e4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce019735-c895-4cfd-868b-e48844826e22",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bd43486-85b5-4785-aaba-f9b2de917efc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.29999999999984,
      "responseMin": 12,
      "responseMax": 8866,
      "responseSd": 833.1019113022041,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680395976587,
      "completed": 1680396057008
    },
    "executions": [
      {
        "id": "f18481de-b739-415e-adb2-2932352fef4f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ec6711ff-3feb-4dfa-89da-614312efc934",
          "httpRequestId": "ffa62242-20a5-4a56-b33f-e3268f21cd53"
        },
        "item": {
          "id": "f18481de-b739-415e-adb2-2932352fef4f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2da59855-9be5-4a56-a21f-15c41dd85680",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 0
        }
      },
      {
        "id": "33fc2270-3ddc-48ad-bca6-14d1f7292e25",
        "cursor": {
          "ref": "d350e25c-70ac-4e23-a292-352b027b6d70",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "74153bee-4871-47ec-a9ea-a6e7675a4072"
        },
        "item": {
          "id": "33fc2270-3ddc-48ad-bca6-14d1f7292e25",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "98d1cdde-4fb8-49a2-8994-9c8247b610bb",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "4b1000ed-7380-4d19-8312-e3628d0fb164",
        "cursor": {
          "ref": "f0a2c3a1-fc05-4595-9c81-29ea0df7fde9",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "55bd6680-ecbf-4c22-b985-35bb536bff75"
        },
        "item": {
          "id": "4b1000ed-7380-4d19-8312-e3628d0fb164",
          "name": "did_json"
        },
        "response": {
          "id": "3c7a35ad-a95d-460b-8d47-4a292feaa8ad",
          "status": "OK",
          "code": 200,
          "responseTime": 400,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b013e6-eae6-4e39-b7bb-73d850a1e02c",
        "cursor": {
          "ref": "2f96b95c-c5b0-48c1-927e-ba527c17465d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0fc60fb-3dc3-4d94-a7be-0188123082cc"
        },
        "item": {
          "id": "96b013e6-eae6-4e39-b7bb-73d850a1e02c",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ccbfc17-4c0f-4fbb-a9c4-7cf88df94f57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1113,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "96b013e6-eae6-4e39-b7bb-73d850a1e02c",
        "cursor": {
          "ref": "2f96b95c-c5b0-48c1-927e-ba527c17465d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0fc60fb-3dc3-4d94-a7be-0188123082cc"
        },
        "item": {
          "id": "96b013e6-eae6-4e39-b7bb-73d850a1e02c",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ccbfc17-4c0f-4fbb-a9c4-7cf88df94f57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1113,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0090b627-3266-41db-94df-186e0c8089ee",
        "cursor": {
          "ref": "d58bd5f8-07e8-4080-ae7d-f560f5300540",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3f85cd3e-2c1d-4741-88f7-4acf0d7d4bc8"
        },
        "item": {
          "id": "0090b627-3266-41db-94df-186e0c8089ee",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ac09c154-0c7d-4c1e-86bd-214d6407c770",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e673a6f-221d-4dfd-8a49-198d3dd2dd04",
        "cursor": {
          "ref": "d689371a-0859-47dc-903c-822858dcbba6",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d01158a2-c463-41c7-9666-6c2078395102"
        },
        "item": {
          "id": "2e673a6f-221d-4dfd-8a49-198d3dd2dd04",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9ad549db-cff3-4bbc-a560-2822a9791556",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cae882e-0c12-45d7-9c84-ed5c52a58ab7",
        "cursor": {
          "ref": "197d4137-88b9-47e4-a0b3-8f6d8bb5f175",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ab4d0250-4860-4f54-bef1-7a52c3e06b52"
        },
        "item": {
          "id": "2cae882e-0c12-45d7-9c84-ed5c52a58ab7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "033fd67f-df1e-456e-acc8-c1a8876dae79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "354452c6-ae60-4979-8ad6-9ed0e29ee42e",
        "cursor": {
          "ref": "78a612e5-c269-43b5-9770-120f3eeafcdf",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7692383-b756-4232-973d-195bdf809dbf"
        },
        "item": {
          "id": "354452c6-ae60-4979-8ad6-9ed0e29ee42e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6c876a17-3987-4d4b-872f-bee49b64852a",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "354452c6-ae60-4979-8ad6-9ed0e29ee42e",
        "cursor": {
          "ref": "78a612e5-c269-43b5-9770-120f3eeafcdf",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7692383-b756-4232-973d-195bdf809dbf"
        },
        "item": {
          "id": "354452c6-ae60-4979-8ad6-9ed0e29ee42e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6c876a17-3987-4d4b-872f-bee49b64852a",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d72772cc-27a5-4764-b7e7-092860bd8428",
        "cursor": {
          "ref": "a332a2de-b603-46ac-9cb4-6027da1b9121",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "132ac612-c473-4b3a-9a4e-2c0426374895"
        },
        "item": {
          "id": "d72772cc-27a5-4764-b7e7-092860bd8428",
          "name": "identifiers"
        },
        "response": {
          "id": "7d88f7ed-126f-4a0f-bbdc-f124e17f5fda",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f6c772-c630-47d7-8522-b1f23479e62d",
        "cursor": {
          "ref": "afd0fe83-c7ed-4f54-b2ff-e2c10ab8e791",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82212b77-9914-44e8-a826-564366b25f71"
        },
        "item": {
          "id": "f3f6c772-c630-47d7-8522-b1f23479e62d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8baea93f-2836-4b5c-b3d6-dfa43eb13653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f6c772-c630-47d7-8522-b1f23479e62d",
        "cursor": {
          "ref": "afd0fe83-c7ed-4f54-b2ff-e2c10ab8e791",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82212b77-9914-44e8-a826-564366b25f71"
        },
        "item": {
          "id": "f3f6c772-c630-47d7-8522-b1f23479e62d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8baea93f-2836-4b5c-b3d6-dfa43eb13653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb13436c-4ef0-4bef-82cd-fc59f7ed6c91",
        "cursor": {
          "ref": "8b23e959-5a61-48a3-aa35-ba7aa96e9c16",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a96d93e8-2e2d-440b-aca7-14894f582ed1"
        },
        "item": {
          "id": "cb13436c-4ef0-4bef-82cd-fc59f7ed6c91",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c9add1f2-1d15-4b15-b5ee-3bf5bec567e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343298d5-6a10-4649-909d-e5d5cd05a268",
        "cursor": {
          "ref": "9dc56b83-3750-48ee-a574-0b336f1bd750",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a339766-e451-41fc-82fe-8f5eaa04880b"
        },
        "item": {
          "id": "343298d5-6a10-4649-909d-e5d5cd05a268",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "71ebdb60-aef9-4c0c-bf53-ed2264a75025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c2ae30-7388-43e8-b509-774240289e07",
        "cursor": {
          "ref": "3ecb230f-acc2-4cd6-9dad-71f6ec105ae6",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a3ff2578-2ee1-4acf-9774-4853f5d5f185"
        },
        "item": {
          "id": "17c2ae30-7388-43e8-b509-774240289e07",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cfcf6d62-5645-451d-8ea1-a61196176785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24957cbe-136a-48aa-9e6d-e84af54fc802",
        "cursor": {
          "ref": "125a7cae-7962-482e-b711-3f14cb97eb32",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "412ff7cf-836e-4ecb-b19c-1ee614e2e193"
        },
        "item": {
          "id": "24957cbe-136a-48aa-9e6d-e84af54fc802",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5e376fc0-2a32-4f44-82c0-df0577910738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebc059f-9c64-46c7-a69a-1e099e570ba7",
        "cursor": {
          "ref": "a91f1f95-889b-43d3-9f6e-033b69f86e21",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8339807a-713e-4841-a70d-89c23492d21e"
        },
        "item": {
          "id": "eebc059f-9c64-46c7-a69a-1e099e570ba7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5f9e141a-da48-47d5-bb44-4cbf0997eeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ee499d-e524-4649-bcba-60b018e326ab",
        "cursor": {
          "ref": "333ac71b-fb8b-4413-a808-b7a92d00d124",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "08933a48-43d5-445a-9fce-ed2b780ec148"
        },
        "item": {
          "id": "28ee499d-e524-4649-bcba-60b018e326ab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9c2b9e3e-ffd3-4310-8c5e-e07fd796eefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9506ca-9b1b-4755-a634-0b86b7491371",
        "cursor": {
          "ref": "0aa036c0-1631-48e6-89a7-0a2a706dbe1d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b7d34e00-ec2d-45c6-acdc-35b936ab1b53"
        },
        "item": {
          "id": "8b9506ca-9b1b-4755-a634-0b86b7491371",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "489dcb0e-7fd1-4e2a-9c2b-1249c979012e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81927dd-9214-416b-b33d-7a4efcc280a5",
        "cursor": {
          "ref": "4f1fc514-6165-459e-9524-fc470bff678e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b35ccfae-c210-4acd-a50e-cf88ce94e6d0"
        },
        "item": {
          "id": "a81927dd-9214-416b-b33d-7a4efcc280a5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c6b8fe0e-8ba8-46c7-84c6-4ff9b82e9ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba6b76c-1a50-4e19-8192-9940a40382f8",
        "cursor": {
          "ref": "bb25e6fd-fdf2-4a82-8d97-56ca6220becb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5b8ab191-3536-41ae-9dce-cebe05948cab"
        },
        "item": {
          "id": "2ba6b76c-1a50-4e19-8192-9940a40382f8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ce272c5e-6e90-42df-8092-31b6a4569d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520fbd7b-9c1f-4563-9ee2-97d49a17ac68",
        "cursor": {
          "ref": "2c19130d-9fd8-4130-9aad-cc78bbd9d0b6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "32a7b21a-931c-4dd7-8253-5411d7591e4c"
        },
        "item": {
          "id": "520fbd7b-9c1f-4563-9ee2-97d49a17ac68",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "831a578a-191a-4e15-98d2-fdec00dd2526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec13a6e5-67f9-4dd8-bd77-96613cbff558",
        "cursor": {
          "ref": "27e20488-9492-41fc-81e5-09df44e973ea",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "48d7316b-3327-44be-9d21-dedf8facab2f"
        },
        "item": {
          "id": "ec13a6e5-67f9-4dd8-bd77-96613cbff558",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e218149f-65de-4d13-aebf-11e7da212634",
          "status": "Created",
          "code": 201,
          "responseTime": 774,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "54c0dcd7-b8f5-4974-825e-112626f182bd",
        "cursor": {
          "ref": "3b4cb943-f4a9-45f5-a3ac-9d26744712c8",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3e012fb9-a9bd-40a1-94a4-3c85b5990b95"
        },
        "item": {
          "id": "54c0dcd7-b8f5-4974-825e-112626f182bd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4b51ffd9-69f7-4b70-91aa-14dd15b2de51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2cb329-63c9-49d9-ad29-eb73679c8545",
        "cursor": {
          "ref": "8c81654a-c6b4-4d53-9525-ea4c004d71be",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "946f0644-d327-4013-b183-8945dc207f1f"
        },
        "item": {
          "id": "0f2cb329-63c9-49d9-ad29-eb73679c8545",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3fad3d73-1474-48a9-82c4-5533f115f1da",
          "status": "Created",
          "code": 201,
          "responseTime": 8866,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a60a41bc-5023-4971-b011-6177181b1d8d",
        "cursor": {
          "ref": "747e631d-d756-4149-b09d-7f5211869a72",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a1677f2e-4421-462e-8cac-d6c5a21b72e2"
        },
        "item": {
          "id": "a60a41bc-5023-4971-b011-6177181b1d8d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3d7c5cad-bfc5-4937-8b4c-dbb6fa93c7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e09195-a184-4a91-aec9-6a774206ff17",
        "cursor": {
          "ref": "ca8a7ecd-04d6-4d34-8f77-9dbc91f14ea3",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1be4ed53-3cc1-421c-8e42-00e6c763b59e"
        },
        "item": {
          "id": "27e09195-a184-4a91-aec9-6a774206ff17",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "676981bc-95a8-4184-8c89-5916afb12fa9",
          "status": "Created",
          "code": 201,
          "responseTime": 2694,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b1650b4e-9075-4644-b7be-69fc930f6897",
        "cursor": {
          "ref": "7b769702-e072-4c27-b9b7-400b3adbf738",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa7da796-38b4-48c2-acf6-e81e0bd4f86c"
        },
        "item": {
          "id": "b1650b4e-9075-4644-b7be-69fc930f6897",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cd12b5c7-f707-4199-b77f-3e7656d6e430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9daaadf7-9973-492a-a648-aeae81d53e87",
        "cursor": {
          "ref": "6b6beb0d-c190-4ca6-9868-c1d8096926d1",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dca24783-b80b-4f0e-9069-137e09be24f2"
        },
        "item": {
          "id": "9daaadf7-9973-492a-a648-aeae81d53e87",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0db53861-986c-4836-836b-c33584bd8b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbfbadb-6a1d-4275-8c20-af170ea96316",
        "cursor": {
          "ref": "b8e0a43e-df49-4faf-be19-021b41d1770f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bafa396b-04dd-4ecd-a414-979487fd32e6"
        },
        "item": {
          "id": "9fbfbadb-6a1d-4275-8c20-af170ea96316",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b4ad24be-86b1-4bca-b792-f80d1d420aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17655aa7-5dcf-4d14-b067-e49d10b211f3",
        "cursor": {
          "ref": "96c7ee9a-b658-471d-9641-d2ae3cd03f3d",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "676639c3-172c-4cd8-be65-04649e164a64"
        },
        "item": {
          "id": "17655aa7-5dcf-4d14-b067-e49d10b211f3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "435cd3f5-6bae-47c8-a0d8-de9e2a6ed463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a76bc1-6ed6-482d-a6e3-e58f7ff19e8f",
        "cursor": {
          "ref": "11de8b4b-48e4-4f97-bf4a-7af61ef68808",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa3ddb18-4465-4887-a009-1429bb1526a5"
        },
        "item": {
          "id": "78a76bc1-6ed6-482d-a6e3-e58f7ff19e8f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c022c04d-66e5-4764-9d1c-174eda8e8864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc5104c-b82c-4194-a1d4-3787c5443688",
        "cursor": {
          "ref": "66eba21b-fcd0-43f8-8b3d-94da47aba2a8",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2da0978f-6b3f-44e7-97bf-2906bf2e485f"
        },
        "item": {
          "id": "bbc5104c-b82c-4194-a1d4-3787c5443688",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c73d0b61-706a-4e65-8158-95af6ed228ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392a87c9-2704-4acd-851c-e78e6de146b2",
        "cursor": {
          "ref": "e79a3b30-4738-4aec-8e0d-270d627561d8",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b5056f2f-1453-4c32-be0a-9ab9a766d07d"
        },
        "item": {
          "id": "392a87c9-2704-4acd-851c-e78e6de146b2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "975af40c-079e-4643-ac33-344a5c6be758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3a9062-dc96-4f5c-8c16-327adf03ccf3",
        "cursor": {
          "ref": "369898cf-5a8a-48b4-b906-4d518c8a4177",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c717f12d-85c4-4f14-a185-f01aec3f5a37"
        },
        "item": {
          "id": "ff3a9062-dc96-4f5c-8c16-327adf03ccf3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "af7ab4da-7d00-44ef-bd12-57bff0315f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac330f6-8fe4-4d0f-9875-41291da3403b",
        "cursor": {
          "ref": "60ec803b-a028-42a9-ba78-cdd0d5fcbef4",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "aa608f8b-c378-4354-9fe2-04d5d2e891f3"
        },
        "item": {
          "id": "cac330f6-8fe4-4d0f-9875-41291da3403b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f1f9147-9faf-4a91-a600-a5f8ac3e1ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0d7ce8-da6e-41e8-90a9-cc1cc9b77d88",
        "cursor": {
          "ref": "f6abe99d-285d-4ea3-9766-8f0cb67b0773",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e20c056e-38b9-49b2-a319-302089f4d295"
        },
        "item": {
          "id": "1b0d7ce8-da6e-41e8-90a9-cc1cc9b77d88",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "831d638e-3db1-4be5-ac5e-735da68791ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef6f6a6-b484-4355-9f85-93ac16edb0ce",
        "cursor": {
          "ref": "d48a621c-12e1-475e-b7ec-f99d8499b8a8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a54130e9-afb1-400e-8d85-7ddd17c79885"
        },
        "item": {
          "id": "8ef6f6a6-b484-4355-9f85-93ac16edb0ce",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "71cb487b-f442-48bd-80ff-dabf22813787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a5c733-d277-4c31-91d5-5707868637a2",
        "cursor": {
          "ref": "4cad1a49-7451-4d35-9e66-356a8dbbda67",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6c98a046-860f-47b8-9dfd-bac98517243c"
        },
        "item": {
          "id": "83a5c733-d277-4c31-91d5-5707868637a2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "832a08cc-043e-4cc5-9c25-d34c2046fc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a7e83c-f776-4873-bee6-f443bb8a0e18",
        "cursor": {
          "ref": "6578ada8-2846-4f33-b9dd-4f2087ac6eb3",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "50087cf0-e1e3-4a1c-8b37-fb8e0b2036a8"
        },
        "item": {
          "id": "98a7e83c-f776-4873-bee6-f443bb8a0e18",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "64d71b9b-f3cc-463c-ade1-67d03fdd401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da766c3-086b-4c6b-ab07-70ede4dc399e",
        "cursor": {
          "ref": "5cf5789d-1133-4ff2-8a1d-e00902cc2e62",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "26addbd4-1f90-4bb0-8305-d9a98ca15ed2"
        },
        "item": {
          "id": "0da766c3-086b-4c6b-ab07-70ede4dc399e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "98198675-4e92-47cc-b009-891c8a346852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd30312-58c7-4a34-92c0-78b2d01413dd",
        "cursor": {
          "ref": "9a056d50-4d00-4d2d-9612-175846df8248",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "869e63e7-e4ac-4512-ba07-a28406a3dc6b"
        },
        "item": {
          "id": "6cd30312-58c7-4a34-92c0-78b2d01413dd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f3168b81-03fc-487e-a6b2-760d8cadce4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848b3ea4-7b5a-4a63-8383-3e1def39aaba",
        "cursor": {
          "ref": "da2750fe-9ba6-45d8-81f5-83d82ca419ed",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "46f66699-202e-49ed-a1e1-252a9196d050"
        },
        "item": {
          "id": "848b3ea4-7b5a-4a63-8383-3e1def39aaba",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "65bb960f-fbac-47f0-b257-8a0cf50898df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6167889c-f5c6-47ac-9214-e50f76c75266",
        "cursor": {
          "ref": "d7b3c96d-5ad5-43d3-8881-92318cf6e5c7",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ab3e11ad-c059-4b15-b4e0-7bb072f92bd3"
        },
        "item": {
          "id": "6167889c-f5c6-47ac-9214-e50f76c75266",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "75f4b6c0-a2cc-44b6-a95c-69d3259726f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2e7d4b-4372-49c1-8243-0705a8fc72f9",
        "cursor": {
          "ref": "57a8b857-b070-4202-9a8f-4f7c86fa75e2",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "36720f39-9d9d-4839-a7d3-2b78784fb249"
        },
        "item": {
          "id": "be2e7d4b-4372-49c1-8243-0705a8fc72f9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1919b124-7087-464b-9750-d2307eca3171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa2dc37-42ec-4eba-a61e-637670c1053c",
        "cursor": {
          "ref": "22273bc7-8f2c-476d-a041-97edfd500b61",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "813a17db-5155-4ae5-97f5-ba7f9fdfbb51"
        },
        "item": {
          "id": "3aa2dc37-42ec-4eba-a61e-637670c1053c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "74b8f2e1-3a1b-47e8-8887-6f10aef00f35",
          "status": "Created",
          "code": 201,
          "responseTime": 2720,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94180616-1757-4216-9f33-0e2c138a9dd8",
        "cursor": {
          "ref": "8e706190-b674-4524-ac14-d84e718faa6d",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "71bc4176-c3db-4b5b-a24a-117486823d29"
        },
        "item": {
          "id": "94180616-1757-4216-9f33-0e2c138a9dd8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cf1f55b9-5639-4b78-8c79-a9f78f1c60f9",
          "status": "Created",
          "code": 201,
          "responseTime": 4280,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "069451e3-c60b-4a07-8251-5287a317abdd",
        "cursor": {
          "ref": "b92f150d-809a-43a8-898f-41db704dd2ab",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "92c6b695-10c8-447a-89a9-9ca151f53d8b"
        },
        "item": {
          "id": "069451e3-c60b-4a07-8251-5287a317abdd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "92277c70-a9ae-4c48-969d-4937d3edeaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5653dfe7-f3db-48cc-a2c9-67676810ae5a",
        "cursor": {
          "ref": "2b363bef-3207-4f59-b9c5-65c76298e202",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4800542d-ff81-476a-8f76-5453f2589084"
        },
        "item": {
          "id": "5653dfe7-f3db-48cc-a2c9-67676810ae5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "eaddb0c3-5f78-4513-b314-df9f27613ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c110796d-5503-4c0f-910d-541096d4aafc",
        "cursor": {
          "ref": "f74c3b55-31a9-4317-8498-2bc10fe80e98",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "101de268-1284-4774-ab9e-6cd35abf3f3a"
        },
        "item": {
          "id": "c110796d-5503-4c0f-910d-541096d4aafc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e6225a13-dacc-45b2-9308-01dca8a0d5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb7e8bf-617b-4730-b374-98a452d7d0ea",
        "cursor": {
          "ref": "e5e27fd4-2c58-4308-a6bb-6a199427e135",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e41e7aa7-e00d-4d0b-a0cf-54c19d4986eb"
        },
        "item": {
          "id": "3fb7e8bf-617b-4730-b374-98a452d7d0ea",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7ce04a17-3f1e-498a-b032-6428964ce441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469d3777-2905-4ab1-8a55-e997d1a3a33f",
        "cursor": {
          "ref": "b9a97072-6e95-45e9-a57d-d6e0a15180ce",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82ea7016-d82d-4118-b8be-f7f0506e0ac0"
        },
        "item": {
          "id": "469d3777-2905-4ab1-8a55-e997d1a3a33f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e399f58f-6ef0-45b1-859b-a354d7e40d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae46e4bd-02c3-4228-8d38-d2a2c98bb2ef",
        "cursor": {
          "ref": "00d3b378-2ecd-4572-ba5b-0adc9205c48b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e05def37-09e2-4d51-9795-db858113b167"
        },
        "item": {
          "id": "ae46e4bd-02c3-4228-8d38-d2a2c98bb2ef",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "796c6042-51ce-4cff-a7c3-b936ce511ee0",
          "status": "Created",
          "code": 201,
          "responseTime": 3180,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d88a69c8-c1f3-4b1b-b2a2-ea3bf348b38f",
        "cursor": {
          "ref": "9d7bf98e-2f56-4ebd-9354-9512f33b843d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bb4e4e2c-81ec-4c2b-ab37-b14b5c0a3d03"
        },
        "item": {
          "id": "d88a69c8-c1f3-4b1b-b2a2-ea3bf348b38f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1ebd5542-e696-496d-bfe4-398bbaee3641",
          "status": "Created",
          "code": 201,
          "responseTime": 2677,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3ff7eb98-6e70-491b-9514-1427d8c80993",
        "cursor": {
          "ref": "a33de034-bffe-4baf-8273-749e6fd3e846",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8b0719f7-10b6-407f-9e61-b02a8d9c30d3"
        },
        "item": {
          "id": "3ff7eb98-6e70-491b-9514-1427d8c80993",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5aff5916-d691-4546-b913-9ab1d584fc00",
          "status": "Created",
          "code": 201,
          "responseTime": 2819,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1c3c4305-d8df-4dd5-9d67-8ca6c7b096f2",
        "cursor": {
          "ref": "b766b206-7547-43de-b9d2-3faf03a8c51a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dccddc91-0a55-4ac9-9126-08fcbdcd9d27"
        },
        "item": {
          "id": "1c3c4305-d8df-4dd5-9d67-8ca6c7b096f2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7005b0c5-ebe6-41f1-a303-f0ff9ace9bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8d44fe-8a00-4e12-affe-ccd8042364ec",
        "cursor": {
          "ref": "5ac21e62-16f5-430a-8fff-9ab153db0b43",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "debad489-8b89-4011-999c-dc9645c8c5cb"
        },
        "item": {
          "id": "7e8d44fe-8a00-4e12-affe-ccd8042364ec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ce6fe700-49e6-4a1a-a990-062c78b53db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a4b04f-43c3-4b16-9ec0-36eeea49904c",
        "cursor": {
          "ref": "82c32220-5c2e-4cc8-84fc-b0f0b18192c7",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "66a8b356-0ab6-40ae-899d-bf02d73e3954"
        },
        "item": {
          "id": "d6a4b04f-43c3-4b16-9ec0-36eeea49904c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d47a053d-31f4-41bb-a35b-ea7aae103cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f13761b-adbf-4848-81f6-8481d29e4667",
        "cursor": {
          "ref": "1580999e-eb81-47a1-8c65-ee383a4af838",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b2da8040-3ebd-47fd-97bb-33e20d7ed432"
        },
        "item": {
          "id": "7f13761b-adbf-4848-81f6-8481d29e4667",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1238e204-5576-4325-9cb8-74f5b53d3d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cf47c6-2b69-4dd2-9cd6-4797e3a69e8f",
        "cursor": {
          "ref": "80883270-1bd8-44dc-b6d6-c38f841564da",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d6dc7d98-3f4c-4e00-a6dd-daecbbd0046a"
        },
        "item": {
          "id": "a1cf47c6-2b69-4dd2-9cd6-4797e3a69e8f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dda3895e-8e24-4910-ac67-d9ae9623cc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec20dd4-a512-4a77-a344-a64947700eb0",
        "cursor": {
          "ref": "117cb2b2-5bd0-4cf7-826d-e43f32781e53",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a63b342f-4590-4dd2-b690-f35aa903b107"
        },
        "item": {
          "id": "dec20dd4-a512-4a77-a344-a64947700eb0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c05fec40-744b-4b7d-862b-185ad60e59d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1968af7-5a9e-4966-9aa2-f3d3ab5cd4d0",
        "cursor": {
          "ref": "e137d51d-592a-48ae-9b63-852cff50a71d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4e39b9a4-582c-4931-82bd-4247dde44871"
        },
        "item": {
          "id": "f1968af7-5a9e-4966-9aa2-f3d3ab5cd4d0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "25021a54-edcb-4a01-a1e5-aaf5e52434ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2b2434-3ae5-4177-b143-120170cc03bf",
        "cursor": {
          "ref": "f88bd4ab-0fe8-4ef8-a026-fc6bb0efb4b8",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5fec0cf4-237c-4655-8826-743419effa06"
        },
        "item": {
          "id": "8e2b2434-3ae5-4177-b143-120170cc03bf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fd09ec35-3dfe-4cc5-80d6-7ed77c8a9190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba0f6f4-3669-436d-8794-7285569d19fa",
        "cursor": {
          "ref": "c4597348-0e05-47c1-b620-e4ea7b83618d",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b4237f05-88bc-4c8b-a844-e3d7d043b52f"
        },
        "item": {
          "id": "8ba0f6f4-3669-436d-8794-7285569d19fa",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6d38a42f-820b-4a6e-95ee-08efa5bb2a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a209cb2b-6eee-4f80-a1a7-b0d9e4487767",
        "cursor": {
          "ref": "49adfe2d-df89-4f87-93c0-83e86fd7d9b5",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "31d52f83-1a8a-4ad7-9772-b2ba2851174e"
        },
        "item": {
          "id": "a209cb2b-6eee-4f80-a1a7-b0d9e4487767",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ccd59bde-af19-4683-8d90-eec633c99a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6297b0e-2d06-48e9-af4a-4787dc9aad1d",
        "cursor": {
          "ref": "c37f8a79-a12a-434e-8f7c-d65009246136",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5a4c10c0-cc7d-48f6-a343-36ba31068f49"
        },
        "item": {
          "id": "f6297b0e-2d06-48e9-af4a-4787dc9aad1d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "757d7c26-cac5-40bb-afdc-4eb85a6e743c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6df4402-cd45-4070-b440-5901c0c589e6",
        "cursor": {
          "ref": "23997e94-fc8c-4d82-be5b-76e199e56346",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "11bbe6ed-5bb2-417b-b793-b79e9426196e"
        },
        "item": {
          "id": "d6df4402-cd45-4070-b440-5901c0c589e6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "beff8ed9-2bc0-454c-a297-1dbdfb7ced8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3be6d8-23e8-41f0-92fd-81162f437158",
        "cursor": {
          "ref": "7177ee3a-90d3-489e-abff-89830e1c7a1b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "87f58267-193a-494f-8cd8-1513967422a1"
        },
        "item": {
          "id": "ed3be6d8-23e8-41f0-92fd-81162f437158",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f009712c-c8ec-4596-b315-8e7ef68a73c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123e2a7d-ec50-4bc7-9cdb-01fb6c026f84",
        "cursor": {
          "ref": "b905b21e-cf93-4c0a-b6b3-3db870076c8c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "255f54df-681f-426a-8736-732f82da6c0c"
        },
        "item": {
          "id": "123e2a7d-ec50-4bc7-9cdb-01fb6c026f84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a792503c-0cf2-4e9f-81ed-32139cab5309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca18bed1-8353-4234-91ac-bcb200715b1d",
        "cursor": {
          "ref": "5c0df0e5-e842-47e7-9105-50d260ef41b3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "de1682ed-acce-4d7b-a26a-793b248c7cf6"
        },
        "item": {
          "id": "ca18bed1-8353-4234-91ac-bcb200715b1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "31353f7c-db2e-4ffb-9684-5490d95ccc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f38eaa5-ccb3-4705-b2db-450898396b24",
        "cursor": {
          "ref": "234bc184-4cbe-4e86-a00a-a658ae5cc69e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5edd2180-f7f1-4b9a-9eee-24ee707f4c09"
        },
        "item": {
          "id": "9f38eaa5-ccb3-4705-b2db-450898396b24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8c30a380-99cd-49ac-88ee-b37b6c0aa726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f155db-ca57-4e72-a14c-d150879d4b43",
        "cursor": {
          "ref": "719e5b92-cc67-4487-99c2-6e2be25fb4c7",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1d3ba690-3095-46a2-a5a6-77b30ca725d9"
        },
        "item": {
          "id": "d0f155db-ca57-4e72-a14c-d150879d4b43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c39be484-975b-4976-acf0-d757a6ffc2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e3f434-770d-4fd1-8504-1a2d322386ab",
        "cursor": {
          "ref": "0b792084-98e8-4f12-8d1a-4593476cfb7d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7dde2ea2-706f-45e1-b6b1-dc768ab43f9f"
        },
        "item": {
          "id": "76e3f434-770d-4fd1-8504-1a2d322386ab",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0411b625-e878-49f6-b315-357d01685ab3",
          "status": "Created",
          "code": 201,
          "responseTime": 2458,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "707bde26-acb5-478d-bf29-e4cd7677541b",
        "cursor": {
          "ref": "440651af-a08e-41fd-bde8-b995eff644cf",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "29273cc9-0996-4374-8871-127714faceea"
        },
        "item": {
          "id": "707bde26-acb5-478d-bf29-e4cd7677541b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "07add644-45d6-4f56-9a51-e94eb4e9408a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35522402-46e2-43c8-9c6d-cb6282ae884a",
        "cursor": {
          "ref": "faac4f3d-9e2e-4afa-ab44-17e2c667f711",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "88398dab-6a4e-451d-b06a-79d1afda68a4"
        },
        "item": {
          "id": "35522402-46e2-43c8-9c6d-cb6282ae884a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eb19f2b5-2511-4f13-9dfb-901ddabdf9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4279011-7d84-4149-a7a5-fc42e13be1f1",
        "cursor": {
          "ref": "e2a969f6-9162-413d-b05c-89dd9c901a56",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f99e9dd7-3063-49fd-8ab5-fd1b04d81ac1"
        },
        "item": {
          "id": "a4279011-7d84-4149-a7a5-fc42e13be1f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e1f25bf-7570-4445-ab65-4d37907205b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb4570f-e339-4792-930c-ce84224ef2bb",
        "cursor": {
          "ref": "d3a6fd76-ab1e-4203-aecf-faa8d2b63501",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7c656ccb-e0bc-40ec-ae9c-f9be8957d193"
        },
        "item": {
          "id": "cbb4570f-e339-4792-930c-ce84224ef2bb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "13b691e0-1e40-4602-8419-929c7d73b8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45936ca-4313-436e-8627-23f56aacc045",
        "cursor": {
          "ref": "5cc6b2c2-9383-45c6-9450-78dfb42f15b0",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "79bc0350-45d8-4738-bf03-6e88dfb32faf"
        },
        "item": {
          "id": "b45936ca-4313-436e-8627-23f56aacc045",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0bde4194-8cfa-495d-87b4-871a1f9281d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3ab1a2-ab0c-430d-b54b-46757c25049e",
        "cursor": {
          "ref": "cf929878-aea7-4e42-92b0-622b5fbac6d3",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "49ac8962-be84-4096-ab44-ca1eaaaa06f2"
        },
        "item": {
          "id": "aa3ab1a2-ab0c-430d-b54b-46757c25049e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "22beecb4-836f-4052-b21b-298420491d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e2eda7-7dc8-434a-accf-2785f5cb8c84",
        "cursor": {
          "ref": "102baec8-6c8e-4924-b748-9fabf23ce407",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d954fa65-54e0-41fe-b76f-ded289c2b420"
        },
        "item": {
          "id": "52e2eda7-7dc8-434a-accf-2785f5cb8c84",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b2c31c29-e303-4e97-bc0b-ceb4896e79ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5af16bc-0508-4e7e-ac1d-8bff65c2b5b3",
        "cursor": {
          "ref": "f6040db6-9939-4d4d-aa48-88f0c687657c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7bc98658-75d3-4455-bad1-af2545d58222"
        },
        "item": {
          "id": "b5af16bc-0508-4e7e-ac1d-8bff65c2b5b3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5b591186-c896-417f-b5f8-35b0120b4bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2b3547-f354-4a27-aeec-844b4f56cb69",
        "cursor": {
          "ref": "7b4c2e2d-8488-4135-80d7-eeb31c91a2fa",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dc6de97b-6c60-4352-9f43-8699a92306ad"
        },
        "item": {
          "id": "0b2b3547-f354-4a27-aeec-844b4f56cb69",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "caa65193-0165-4a3d-9932-cc40d4076f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ac666a-94e0-4ddc-adef-d09016176662",
        "cursor": {
          "ref": "62a4e5b7-2342-4132-b002-a2b48aff0029",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bb506414-c2ad-458c-a6c9-7af8f3e82ae8"
        },
        "item": {
          "id": "b2ac666a-94e0-4ddc-adef-d09016176662",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "168de71a-2ee5-456d-8739-f650a1f8c43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dee86b-cb0a-4b5f-b06f-801308bcddc5",
        "cursor": {
          "ref": "3df60dd7-a1bc-44f5-a473-7db763cdf03d",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "deccce4b-1399-4f79-9564-c693ae7dfea8"
        },
        "item": {
          "id": "01dee86b-cb0a-4b5f-b06f-801308bcddc5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3cd0c7fe-c187-487a-923f-5349cf0e95fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e470aa-41cd-4ed5-8e09-9f339aa5fe76",
        "cursor": {
          "ref": "46214be5-1a24-448f-b940-ddde363fa7dd",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2906319c-1846-4415-9300-64b1b8d04d7d"
        },
        "item": {
          "id": "d6e470aa-41cd-4ed5-8e09-9f339aa5fe76",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cbf1dcbe-a5a8-4411-98e2-fdec759366c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ca852e-5016-43de-90eb-3877c4daf25e",
        "cursor": {
          "ref": "f34d6f62-4805-4e2a-b38e-fe1cfcff6354",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ec8635b6-900c-42b3-8e92-1b6a837eeeb6"
        },
        "item": {
          "id": "61ca852e-5016-43de-90eb-3877c4daf25e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e142e11e-2808-4157-adfb-b72072bfc850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077b8491-0e04-4c58-942f-7e21b0cf2d5c",
        "cursor": {
          "ref": "df7fe4e3-1037-464b-af17-274fd641a6f1",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fbcf15fd-7fd0-40f3-8008-11f7ed511228"
        },
        "item": {
          "id": "077b8491-0e04-4c58-942f-7e21b0cf2d5c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2f412a44-d348-44f0-a66a-d7f86cc9f838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2237b5dc-d41e-450f-8d5d-22951fb25000",
        "cursor": {
          "ref": "94375ee2-4771-49b7-bd73-8293c051fa82",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bf60a0b1-fae4-462f-845d-4c4c9706c0b0"
        },
        "item": {
          "id": "2237b5dc-d41e-450f-8d5d-22951fb25000",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8b60ad66-0f76-43f7-970a-03dc0d1e306e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339485eb-9bed-4097-baff-9411a76619ee",
        "cursor": {
          "ref": "a72a3602-8a77-4772-8083-deee5ee2f090",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d80c4149-d458-4215-bb82-3f29a0435b34"
        },
        "item": {
          "id": "339485eb-9bed-4097-baff-9411a76619ee",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aebf95d2-628c-4453-846a-4bf534614eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17e16b1-72bc-4731-9310-2aabf7715d48",
        "cursor": {
          "ref": "ea6f71da-c2a4-4a4c-8836-84d6dfccb1fd",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "14289e74-4264-452b-8ede-752c44d7ef90"
        },
        "item": {
          "id": "f17e16b1-72bc-4731-9310-2aabf7715d48",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3f37bea6-5870-4734-ba8b-3655309df542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94940a4-a5bf-46f3-9b6b-13dd4b9860db",
        "cursor": {
          "ref": "2e17da84-e1d1-4e3d-a1f6-578c8d936576",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3f0c61a1-24db-4dd4-862d-c3b641146467"
        },
        "item": {
          "id": "b94940a4-a5bf-46f3-9b6b-13dd4b9860db",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d55059c7-58fb-420c-acad-d53b82a40b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab73680-ba90-46d8-b612-2ddbaaae5676",
        "cursor": {
          "ref": "2e9aeba1-9522-49e3-8697-19776281c178",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9ff76fb4-cc4e-43e9-9b0e-f9936847b318"
        },
        "item": {
          "id": "7ab73680-ba90-46d8-b612-2ddbaaae5676",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b7412ab6-6a2e-4367-92ce-b6fa4c00115d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee451a39-e60d-4277-b201-0b41a9fad769",
        "cursor": {
          "ref": "82587efe-8403-490d-b0db-54eb0c10b804",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c7396a2b-81db-4159-9bc4-1459fe5f8408"
        },
        "item": {
          "id": "ee451a39-e60d-4277-b201-0b41a9fad769",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "154d3289-403d-4ff8-a592-9322d31d626b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5677d9-bba7-428b-b037-1f45b50706fa",
        "cursor": {
          "ref": "a6e3e381-4436-4537-bf75-d3a4c880f24a",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b991a753-6970-4565-bc7c-0612f641136d"
        },
        "item": {
          "id": "9e5677d9-bba7-428b-b037-1f45b50706fa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc5dddb0-f259-4804-89bf-b038d80183b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4124fa2-7c68-4ee8-bcd9-f07e27ec4a7b",
        "cursor": {
          "ref": "2c510cb0-f73f-4ae8-b205-5c11b3fa6e88",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a55515d7-cfa6-4530-8b40-f622ee5cde9c"
        },
        "item": {
          "id": "e4124fa2-7c68-4ee8-bcd9-f07e27ec4a7b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e1c6294d-cd09-4769-9720-624919f4c8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce4967a-1cd2-48ea-aeea-5439606ed436",
        "cursor": {
          "ref": "b009ba92-e0b7-41fd-b26e-dc693ef6f6fc",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c759fadc-5b52-45cf-99df-2a48b720ad78"
        },
        "item": {
          "id": "0ce4967a-1cd2-48ea-aeea-5439606ed436",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3f34b16b-77a3-42e2-9291-f594cf87243c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb4d14d-def7-4319-a14a-804cafdd1ddb",
        "cursor": {
          "ref": "507f49ab-9ded-4a4b-9a0c-d0b57d9e9555",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7a88b519-fc77-4ff5-8619-0a5baa515a93"
        },
        "item": {
          "id": "8fb4d14d-def7-4319-a14a-804cafdd1ddb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "760cfa46-b4db-432e-8d67-99e474a60402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb898e45-1a2d-4e37-89f2-bd279d0f95fa",
        "cursor": {
          "ref": "a40a9e63-23ff-49a9-af63-0d3f15f99892",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3b5c249d-4b34-4c01-a3ab-3c408a23963e"
        },
        "item": {
          "id": "bb898e45-1a2d-4e37-89f2-bd279d0f95fa",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9343a87b-120c-40e9-aa4a-44fc293672d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757e9f77-3d6c-4801-aa5d-67a4558550ca",
        "cursor": {
          "ref": "d0200fb7-cf58-4295-b718-fbf7f3f75064",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d34055e2-804a-4ed1-a286-3f07277a963d"
        },
        "item": {
          "id": "757e9f77-3d6c-4801-aa5d-67a4558550ca",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2013fb36-072b-47a1-b63f-1b8d49c4d831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a29614-e59c-4f05-9b51-6e194ae759c5",
        "cursor": {
          "ref": "d500d67a-6c67-45db-a18f-72e072cf6448",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "12a59b2a-a931-4337-abcf-e7c6f6f9c54d"
        },
        "item": {
          "id": "f4a29614-e59c-4f05-9b51-6e194ae759c5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e018ddff-a6ba-4e00-929c-b028faa17b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d2825d-521c-4d09-af5e-ac8cea79c9bf",
        "cursor": {
          "ref": "46660c46-7590-4528-9cc7-745f9cc10b7c",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a0bb9ca-b84a-4412-9282-5b65451ce132"
        },
        "item": {
          "id": "21d2825d-521c-4d09-af5e-ac8cea79c9bf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "03b02be0-dfce-4667-964b-2ec9df08a347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293190c0-1aad-473a-9186-a0575b00c23e",
        "cursor": {
          "ref": "7b7ab899-9d40-4c5b-8bc2-6200a59628fc",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "72e7db28-eede-4d38-8f0b-2e6aec19cdd2"
        },
        "item": {
          "id": "293190c0-1aad-473a-9186-a0575b00c23e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1720ce25-7224-415a-86b5-a3a9d679dc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76865b55-a244-4bbd-9d22-90bdfa736d08",
        "cursor": {
          "ref": "07742895-9dd0-4813-83da-7ecb2be7d27f",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f083b3c8-5587-4640-a7d1-0103df513b03"
        },
        "item": {
          "id": "76865b55-a244-4bbd-9d22-90bdfa736d08",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "38e508e9-2825-48bb-a375-832aa0c30fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574d06dd-b3bb-468b-a0d8-b458ddd6a702",
        "cursor": {
          "ref": "4eb3fc8a-b913-4a42-9421-3b994e794ebb",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9caa5880-b3d4-4053-9860-07289b3142ac"
        },
        "item": {
          "id": "574d06dd-b3bb-468b-a0d8-b458ddd6a702",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "372a704b-ea6b-4c32-a97c-76f4d1f55fd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c358d6af-b6ad-4ea1-894e-87437d11f7bc",
        "cursor": {
          "ref": "d89df5ed-df9a-4d8b-9bb4-c21e8af33384",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5568d6ab-0388-48b7-a47a-a66be66cdec7"
        },
        "item": {
          "id": "c358d6af-b6ad-4ea1-894e-87437d11f7bc",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "dff6cc15-450f-476b-b03d-f2f7dbbbb3df",
          "status": "Created",
          "code": 201,
          "responseTime": 2221,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d319803c-d31b-40b8-b3a8-0d74e29aac8e",
        "cursor": {
          "ref": "d201bd53-f629-4e0a-9deb-6332059ae26f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8abe02d7-dfe6-4009-b5c7-befb7178c083"
        },
        "item": {
          "id": "d319803c-d31b-40b8-b3a8-0d74e29aac8e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "24f0f94c-7431-4a68-bf39-ab9cfb794fd0",
          "status": "Created",
          "code": 201,
          "responseTime": 2535,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c88a923-517d-4292-8b39-a2da391e216a",
        "cursor": {
          "ref": "e6bb89f7-2512-4551-9f9d-7c0200f309d2",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "33fd2943-0c6a-4f2d-88b7-3224194d00a8"
        },
        "item": {
          "id": "3c88a923-517d-4292-8b39-a2da391e216a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d56135f8-28fb-4989-864d-dd56a423e526",
          "status": "Created",
          "code": 201,
          "responseTime": 2747,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4293baae-2937-4bdf-a3d6-9284d1f1f3c2",
        "cursor": {
          "ref": "e3fe0752-7426-4fa5-b0f4-7fbb9a4995b7",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "83acfab0-a695-41bf-9a03-781cbb0482f2"
        },
        "item": {
          "id": "4293baae-2937-4bdf-a3d6-9284d1f1f3c2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dc48f2c1-a599-43ff-87ff-787ce24001c4",
          "status": "Created",
          "code": 201,
          "responseTime": 2357,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02db67d-90be-496f-bde2-a986d22e681a",
        "cursor": {
          "ref": "1fcb7c32-7265-4b13-b423-feca8f851191",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "15b8fb93-0551-4c33-8c49-2cce257dc5a8"
        },
        "item": {
          "id": "c02db67d-90be-496f-bde2-a986d22e681a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "60369db2-19b4-488e-928d-78e1125a083c",
          "status": "Created",
          "code": 201,
          "responseTime": 2415,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fd697d-95ac-4bbb-81dd-058a9d636c5e",
        "cursor": {
          "ref": "033cb537-0a01-4507-93a6-3316ed5c23f4",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6beaf489-62b1-461c-9be3-d110870b40e5"
        },
        "item": {
          "id": "25fd697d-95ac-4bbb-81dd-058a9d636c5e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2ee5486f-84e4-4e1c-bdc2-535c8c041d9e",
          "status": "Created",
          "code": 201,
          "responseTime": 2463,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-02T00:40:34Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-02T00:40:34Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "6941861e-2e0e-4627-9f64-bfa53ddb57f3",
        "cursor": {
          "ref": "a3bb09ce-f0c6-469d-8217-1ee19f805c83",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "33fff601-7dfc-4f8d-9228-db4c0e25040f"
        },
        "item": {
          "id": "6941861e-2e0e-4627-9f64-bfa53ddb57f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b5b7a00-2e03-42e3-b7e4-de747f3da5f2",
          "status": "Created",
          "code": 201,
          "responseTime": 2447,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92903e6f-794f-427e-bcfc-6be2b8c70b07",
        "cursor": {
          "ref": "b029a71d-3767-4684-bb0b-745a763c705b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ef0ed37-f71f-4d8d-8163-efd4cbcfc8f7"
        },
        "item": {
          "id": "92903e6f-794f-427e-bcfc-6be2b8c70b07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3f6e3071-327a-48f7-b3e5-4a72112fd2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92903e6f-794f-427e-bcfc-6be2b8c70b07",
        "cursor": {
          "ref": "b029a71d-3767-4684-bb0b-745a763c705b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ef0ed37-f71f-4d8d-8163-efd4cbcfc8f7"
        },
        "item": {
          "id": "92903e6f-794f-427e-bcfc-6be2b8c70b07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3f6e3071-327a-48f7-b3e5-4a72112fd2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb53d7-4db9-42ee-9acb-1bb8083f9af8",
        "cursor": {
          "ref": "759f8e17-def4-458b-9431-ac81ece1e58c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3825dcda-fae5-4290-8080-7a638c0eb90a"
        },
        "item": {
          "id": "8adb53d7-4db9-42ee-9acb-1bb8083f9af8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b4af59c3-1e44-4852-b70c-e9dc58fae96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c03799-e00e-4d38-8527-5d3966f8b201",
        "cursor": {
          "ref": "a46e777c-20ab-496f-a935-d62832ee8f68",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ddebdb08-66ea-4b4b-b35f-6ea253e2eb6a"
        },
        "item": {
          "id": "60c03799-e00e-4d38-8527-5d3966f8b201",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b344f33d-0b2f-491d-bd90-08d22914bce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2251d349-230d-4dab-8350-d03990fddbcb",
        "cursor": {
          "ref": "912bf43b-9fd7-4a20-a8a0-955b29643219",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dd763750-497a-4f74-b7e5-c11d0631e486"
        },
        "item": {
          "id": "2251d349-230d-4dab-8350-d03990fddbcb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "86157b94-fdf5-4b9a-8e3c-efaae9977922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea7fbba-6a38-4651-8efa-d1ed2e1d415b",
        "cursor": {
          "ref": "48fa0ea5-0073-4622-9829-f0ae5e44705d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "15e24b67-0670-4e79-a324-e1857d20831b"
        },
        "item": {
          "id": "2ea7fbba-6a38-4651-8efa-d1ed2e1d415b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2f0f52f-feea-493c-b1f8-8a63bf09f318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f9a31e-886f-4a2b-a4ee-58fc32f65a02",
        "cursor": {
          "ref": "7cb073e3-1929-46e6-9449-6f98929a94a6",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "52e314b6-9619-4110-be80-947a0b3cac5c"
        },
        "item": {
          "id": "c4f9a31e-886f-4a2b-a4ee-58fc32f65a02",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b900ba4-250a-4d2c-b0f1-7ca1edbcead2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b492f7b-b9fb-452c-9416-3234e121dd68",
        "cursor": {
          "ref": "6462a5fb-6a21-4f09-8c54-4b614a980354",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "12013f0c-b450-4ed9-b964-6199b865926e"
        },
        "item": {
          "id": "9b492f7b-b9fb-452c-9416-3234e121dd68",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bca6b01a-f82c-4311-85a6-66a11fc77396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4bf98a-4ffc-48fa-a64c-8f8adc83a2cb",
        "cursor": {
          "ref": "40f3ef99-3328-45b9-87e8-a505cae9be61",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7a0163f1-667d-4771-b7c6-26d6a78ef0d9"
        },
        "item": {
          "id": "1f4bf98a-4ffc-48fa-a64c-8f8adc83a2cb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5f102a5a-f73c-466c-8982-f3c83ba1f991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951d03af-ff0c-45e6-be3d-08e8b03d2748",
        "cursor": {
          "ref": "5d6e9d72-c218-40ae-b891-45f1575eb02d",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5a0bac7d-042d-463e-8aa5-37e475c6e6e9"
        },
        "item": {
          "id": "951d03af-ff0c-45e6-be3d-08e8b03d2748",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1fd0eeee-6c96-4adb-8ca3-e1c9d29eef33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fce86ac-6bcf-4d51-9b82-6e3568a3b65e",
        "cursor": {
          "ref": "8b51218b-c6fe-4535-a323-aa3c4c04f519",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7d2da164-f77d-437f-8463-db0c88bade79"
        },
        "item": {
          "id": "4fce86ac-6bcf-4d51-9b82-6e3568a3b65e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89750677-758f-4fc5-8306-262071553ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c9028-7156-46e2-9a70-87aac109f8ac",
        "cursor": {
          "ref": "f37af35f-60e7-4f71-b8b7-ef7173d0871e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2c7f961d-8bea-427e-8570-4efb01b0a795"
        },
        "item": {
          "id": "8a9c9028-7156-46e2-9a70-87aac109f8ac",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "32449426-2f36-4d57-a50f-d76346edf5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdba818f-6793-4cb9-a9bc-17483c246898",
        "cursor": {
          "ref": "2d5bf4bd-1108-401d-bf1d-a308db314611",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "63b95928-c0b5-4514-9f73-f9ae8b03d6ce"
        },
        "item": {
          "id": "bdba818f-6793-4cb9-a9bc-17483c246898",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8120bd0c-a9e1-484c-82f6-1105f0db21a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc19e031-afaa-4407-bb8b-d728bf77bdd6",
        "cursor": {
          "ref": "1a8aab1a-ef81-40df-801c-d2ce0018bc61",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8853d794-faad-4dfd-a785-3da58cae8782"
        },
        "item": {
          "id": "fc19e031-afaa-4407-bb8b-d728bf77bdd6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "de050d9b-9a2b-4bcb-943d-4af03fe6a813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4a2ed-4a0f-4cf6-bd82-6e7246c0a5ab",
        "cursor": {
          "ref": "e223c42f-0cf6-45ed-ad39-d7a8edc1c688",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ce9b0464-3bf0-4ade-bc05-64b2b1eb0b05"
        },
        "item": {
          "id": "27e4a2ed-4a0f-4cf6-bd82-6e7246c0a5ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5ea77a84-730d-4708-bce0-8358a1ffbd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84fce9a-1a73-406f-8ff9-3b30d31b78f4",
        "cursor": {
          "ref": "7463944c-175e-453c-b20d-5ecb0b7a07fb",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7f88513a-af60-4a52-b4bf-64765e31a46f"
        },
        "item": {
          "id": "a84fce9a-1a73-406f-8ff9-3b30d31b78f4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6fd84376-ae60-428c-93f8-1706c91d39f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3152dcd7-bbad-4895-ad32-5fdab4e65b08",
        "cursor": {
          "ref": "17bbd6ca-9eba-4134-a816-b5bd5934bf2a",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ab47bcda-bc9f-48b1-98a2-4a1bbfcfd950"
        },
        "item": {
          "id": "3152dcd7-bbad-4895-ad32-5fdab4e65b08",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3b20d775-fdeb-4631-b771-284943a13402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eee48d-24d1-4097-b6cc-cdce8a613898",
        "cursor": {
          "ref": "9fce4d49-9e7a-49c9-9de5-bed1b686120b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "51a547b3-02f9-4cb8-aa03-c53c336af41c"
        },
        "item": {
          "id": "90eee48d-24d1-4097-b6cc-cdce8a613898",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "896307d5-2112-428d-b73d-06f2c227dfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f0aa23-57a7-4a73-a577-7594c8bf3573",
        "cursor": {
          "ref": "2b4eecec-3d9d-46dd-a948-98d8a11a7fd8",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9bcec641-c432-488d-9b96-e281bcb624b3"
        },
        "item": {
          "id": "33f0aa23-57a7-4a73-a577-7594c8bf3573",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b21f4492-2f40-4cd1-8f4e-c0922c621f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a46911-c28f-4306-8e82-963a36a20b3e",
        "cursor": {
          "ref": "c20024a7-595e-42a6-a828-bec6fb0ba057",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fe5e9240-7c1d-4644-baa8-77355ef47b09"
        },
        "item": {
          "id": "d9a46911-c28f-4306-8e82-963a36a20b3e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "642c9cd3-a669-4a94-b897-51395434ef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625e619b-8d6f-4414-80b0-81054607c189",
        "cursor": {
          "ref": "f86b16cb-7a89-4429-949f-96b753e1e31b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "eefad0e6-12bc-40fa-b981-bf647974d287"
        },
        "item": {
          "id": "625e619b-8d6f-4414-80b0-81054607c189",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "89a9915c-b8ee-4efd-81ef-a920908f81e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e7c077-e6f1-4e70-8daf-abaa2a1bd761",
        "cursor": {
          "ref": "6d15a312-8f5f-42f5-b2b8-fbcf7037912e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7c421bb4-a326-4497-9d83-dc401e5c64c1"
        },
        "item": {
          "id": "50e7c077-e6f1-4e70-8daf-abaa2a1bd761",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c066a59e-e018-490a-8cd2-fd7827cace2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3877d6a1-fea8-4bf9-a665-a4e750dceb9a",
        "cursor": {
          "ref": "c689882d-0a38-4a03-afb4-ad7b767b9b49",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c41a0e7d-d6aa-48c3-a767-ca1277272f30"
        },
        "item": {
          "id": "3877d6a1-fea8-4bf9-a665-a4e750dceb9a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a3cd224d-cbe4-4841-9294-f976ec3442f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c73136-1182-491f-9467-25ecbc38608e",
        "cursor": {
          "ref": "0288d69f-f032-4c6f-bde7-2d15ebc9daf2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5a842bc3-96c2-4e6b-99cb-84d232050729"
        },
        "item": {
          "id": "f8c73136-1182-491f-9467-25ecbc38608e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0f6db626-9b0d-4f2d-a0de-819b19414700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97eba06-8b88-4e7a-b11a-d9dbb36b9a2a",
        "cursor": {
          "ref": "a9c1774c-3afb-4c46-94ae-676927dd674a",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0b057643-cf02-4b0e-afc9-0c05689ceda1"
        },
        "item": {
          "id": "e97eba06-8b88-4e7a-b11a-d9dbb36b9a2a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "91969a69-06a5-42a6-bbcf-c66e25d0cc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9444b861-7c2d-4968-8e5b-72b4dd6d039f",
        "cursor": {
          "ref": "a7a8100f-4e2b-4d78-9409-728d01229e8a",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66e4380e-a69b-4a85-8849-603bf4b2d1f6"
        },
        "item": {
          "id": "9444b861-7c2d-4968-8e5b-72b4dd6d039f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "46ef4cec-e1b6-431d-8ffe-73db1eb92dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5eb8bbd-31b1-4da0-b6b4-aabf938038e7",
        "cursor": {
          "ref": "a6e7bb87-4799-483c-b8d2-df6944aedb79",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4ce3585e-a322-4422-a52f-2330b18bbde5"
        },
        "item": {
          "id": "f5eb8bbd-31b1-4da0-b6b4-aabf938038e7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "09c444a9-f04b-4a7b-aa5c-585a43682222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63849bf5-34c3-43c6-b633-780daa903b27",
        "cursor": {
          "ref": "69947c54-ab93-4e8f-bdda-eaaddd422ec4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bbf8c31b-1291-48b3-b4c7-b250d1e97200"
        },
        "item": {
          "id": "63849bf5-34c3-43c6-b633-780daa903b27",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2a8d0cb2-b8ee-4e6a-be6c-29a302ebf45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff177b01-f43a-471d-8768-1ac16c295e35",
        "cursor": {
          "ref": "5659f583-de60-4db4-b3e4-ee6f815aa46e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c7c5c9d1-8501-4407-b6f0-b6a8066481c8"
        },
        "item": {
          "id": "ff177b01-f43a-471d-8768-1ac16c295e35",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3c07b358-a6e2-4ccc-bab3-214745303812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d49cebc-9d40-4929-ad0f-9a7ee7a13be3",
        "cursor": {
          "ref": "d1f7eb89-8773-4cd5-85b4-18f1314d02ee",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0b7a4465-7969-44de-997d-51176fedb74a"
        },
        "item": {
          "id": "4d49cebc-9d40-4929-ad0f-9a7ee7a13be3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01cd63ff-d0bd-4406-b4a0-06b2e5633ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb4d1fe-3bfa-4657-8e1f-1090aa3f300b",
        "cursor": {
          "ref": "898e217a-8707-431a-aed2-2460f1774895",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "12fda746-f3c8-4bac-888b-2fa0307758f7"
        },
        "item": {
          "id": "dfb4d1fe-3bfa-4657-8e1f-1090aa3f300b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5e311d4c-57b3-4062-aab2-1734fbfed3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1e57f7-306c-4148-823f-480e24c20f05",
        "cursor": {
          "ref": "b892b620-3bcf-489b-b86c-7136257e4a57",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a82a2364-e156-4a5d-b1cb-97a782925395"
        },
        "item": {
          "id": "ea1e57f7-306c-4148-823f-480e24c20f05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bff7790b-143b-48f8-9844-fb4ed568437b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c28ef8-e9da-4fb5-9a3b-e19a1a3d90b1",
        "cursor": {
          "ref": "30990520-9a8c-488a-8eb4-94eeb7dd3ea6",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a39b6da2-33a5-4a08-bf7a-cdab19e61e7a"
        },
        "item": {
          "id": "b1c28ef8-e9da-4fb5-9a3b-e19a1a3d90b1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3d8053e4-ec49-4521-970e-d46c0136c643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1702ad-3c07-4b19-96b2-3583b2bb9bf3",
        "cursor": {
          "ref": "172ad3be-f7bc-4217-a02e-d992fa32c173",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6216caf3-749c-4912-a8aa-345deb8abf41"
        },
        "item": {
          "id": "ca1702ad-3c07-4b19-96b2-3583b2bb9bf3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "300cbe6f-c549-41c2-8c77-cfbf1ccbbc56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e9add69e-6a37-4c93-9e02-8095471df7ec",
        "cursor": {
          "ref": "5504cef7-77bb-463d-8bb8-112260854646",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bc1516b2-b329-472e-a26e-824de3a91fc6"
        },
        "item": {
          "id": "e9add69e-6a37-4c93-9e02-8095471df7ec",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "52c77025-05db-4740-a023-582ddef56d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f80886f9-27d1-4139-bbc0-dd89c9cee683",
        "cursor": {
          "ref": "3c0244f9-ad3e-4297-95b4-9fb045eaa07e",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "35bbe11e-9a95-4eca-a23f-f18d765d97f8"
        },
        "item": {
          "id": "f80886f9-27d1-4139-bbc0-dd89c9cee683",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7799181e-9948-482c-9b03-a3fa39d98ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80886f9-27d1-4139-bbc0-dd89c9cee683",
        "cursor": {
          "ref": "3c0244f9-ad3e-4297-95b4-9fb045eaa07e",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "35bbe11e-9a95-4eca-a23f-f18d765d97f8"
        },
        "item": {
          "id": "f80886f9-27d1-4139-bbc0-dd89c9cee683",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7799181e-9948-482c-9b03-a3fa39d98ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1063c6e2-1880-43a1-b163-084f1b615635",
        "cursor": {
          "ref": "15ce3696-4749-4ef9-81d7-89fc5657278d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a79b11b5-6ec5-49f7-aa76-e83ac1b7a238"
        },
        "item": {
          "id": "1063c6e2-1880-43a1-b163-084f1b615635",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "53428d9e-17d8-4829-8c3c-ca4ab6a55c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5088cd3-ffbd-4437-9e39-3ab76fc4c7a0",
        "cursor": {
          "ref": "f8a6937f-ccb4-496f-b274-eca61758351f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f82268c8-8ece-4698-862b-c66155c932aa"
        },
        "item": {
          "id": "a5088cd3-ffbd-4437-9e39-3ab76fc4c7a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bf0bda4f-d13b-46c4-b055-5347b468c34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4923bf94-9316-4100-9045-b581b23e2fea",
        "cursor": {
          "ref": "c2d18a0d-a3af-44c0-b56b-20c553d7295e",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe5a8107-d4d3-4024-9d23-c38407378155"
        },
        "item": {
          "id": "4923bf94-9316-4100-9045-b581b23e2fea",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ff226c70-6e6b-4551-865b-e18ebf226dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e7ccdf-4b21-4526-98ca-a61d0d896e7b",
        "cursor": {
          "ref": "e08fac2f-8528-40a5-8dab-fe258b2fe402",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d86abdce-d88c-4e08-90df-fa1009f4c539"
        },
        "item": {
          "id": "75e7ccdf-4b21-4526-98ca-a61d0d896e7b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "99dbbe59-829f-4030-ac02-c409175beff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d05e717-d980-4ee3-923f-3f0534558b93",
        "cursor": {
          "ref": "d5709f00-e4be-4166-80f6-c74eefe57855",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d1667c8b-4577-4bb6-b591-bfebd2fa5456"
        },
        "item": {
          "id": "2d05e717-d980-4ee3-923f-3f0534558b93",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9644f241-aa4b-47f2-9890-960694a03921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d0db24-71cc-4854-ba1c-5225672e1165",
        "cursor": {
          "ref": "5a60a820-1c40-4c98-a3c7-b922122c3d54",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3c17d7fb-80c9-4a6d-9c55-d215251556b5"
        },
        "item": {
          "id": "e7d0db24-71cc-4854-ba1c-5225672e1165",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4fe5a3be-1f01-4c05-9ffd-a7d97430a1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4ba343-81cb-4e00-afdd-0ea99b13a010",
        "cursor": {
          "ref": "9b8be292-1306-43f7-9f7a-844722ef18a4",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5a23d4c5-abe3-46cb-acdb-80ecb4b2fe3f"
        },
        "item": {
          "id": "2b4ba343-81cb-4e00-afdd-0ea99b13a010",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "164fe821-3dd0-4b26-abb0-88b58cc11b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de571973-c8c4-4ef4-b687-57eb83c9cdcc",
        "cursor": {
          "ref": "cda2251c-05c9-468b-86ff-8bb329344f64",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2cf75a65-924b-404e-bc72-b8ec83b7d9ef"
        },
        "item": {
          "id": "de571973-c8c4-4ef4-b687-57eb83c9cdcc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "79729359-6803-4371-b268-aaf41990e514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870640fa-9d50-47b1-8c78-7d3821481c07",
        "cursor": {
          "ref": "cb6c6b6e-1890-468b-bdae-567fd94a230f",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d0d94b20-e0ea-458f-b5d3-8d021fd8ef93"
        },
        "item": {
          "id": "870640fa-9d50-47b1-8c78-7d3821481c07",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "17fa207c-4e3c-4a36-aea1-a84bafb3b048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e74cd1b-b992-4b73-83b1-9ea3eabcdf69",
        "cursor": {
          "ref": "d960c877-d0c3-4433-a536-c7c8fe7be4e5",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a57d085f-8458-48fa-965c-f3a9b0f9e521"
        },
        "item": {
          "id": "1e74cd1b-b992-4b73-83b1-9ea3eabcdf69",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9106347b-7cf5-4d48-ac58-ffbb16b24399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1056e510-82b5-46ee-8be3-87d4ee75760d",
        "cursor": {
          "ref": "0b2765de-9282-46f5-9d29-b417f48c7adc",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a112d951-69b7-45bc-b61d-a7f67a59e495"
        },
        "item": {
          "id": "1056e510-82b5-46ee-8be3-87d4ee75760d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5c5d702b-0474-4bb2-b0ee-12ecd2af378e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8582b47-963a-4752-94ff-07c04200257d",
        "cursor": {
          "ref": "8c28b2cf-c293-4bbb-80ad-b2e4ab95fc1c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8f41269b-9892-4807-973c-840033522135"
        },
        "item": {
          "id": "c8582b47-963a-4752-94ff-07c04200257d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "744e620d-6766-4024-a125-3ef817ef0a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901dc770-643d-4503-b206-bbf27be6dde8",
        "cursor": {
          "ref": "2d3546f2-0e58-4226-8d0c-025aad33de90",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "663e0dbe-fdbf-4fe3-9176-093edc9ededb"
        },
        "item": {
          "id": "901dc770-643d-4503-b206-bbf27be6dde8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3ca44b3f-4ee9-4081-afea-14efb7d66ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d476bb-d179-4959-a682-cab0a3d087e7",
        "cursor": {
          "ref": "ca22ac77-6093-41e7-bc25-0541bb8fd477",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3605b912-7395-4013-b26f-c95657f91d8f"
        },
        "item": {
          "id": "48d476bb-d179-4959-a682-cab0a3d087e7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5ea9a39f-7116-406b-88de-e796cff5f00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4487988a-10f3-493d-8e43-0ce2368a2dd4",
        "cursor": {
          "ref": "f0364860-c5dd-49ac-b037-4be916c6ed8a",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9bf4e200-1f90-4d9b-bd5a-a082859762ee"
        },
        "item": {
          "id": "4487988a-10f3-493d-8e43-0ce2368a2dd4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "918d7d68-9f70-4d27-825b-67c8bd75ab27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b3a4c1-bbad-4a64-b075-8707bb80e9a8",
        "cursor": {
          "ref": "0d061d5d-452e-4e85-9119-02af8df130c9",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e8807b01-7081-4017-932c-36c6470ea849"
        },
        "item": {
          "id": "f8b3a4c1-bbad-4a64-b075-8707bb80e9a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ce751ead-711e-4f29-9a07-d0231f9a835e",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "107abd94-a0ed-4aba-a989-6a9d261d7b61",
        "cursor": {
          "ref": "3090b697-686f-4324-bc9c-9bc63a997af1",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a3981793-7b3a-4ff1-baef-1ce18cae46ef"
        },
        "item": {
          "id": "107abd94-a0ed-4aba-a989-6a9d261d7b61",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6cce631c-fe51-4475-abbc-78dd6f2b9a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf0696d-af37-4309-96d1-5d08db949bb1",
        "cursor": {
          "ref": "b41c3dd9-224f-44c7-b743-1b5ccd6eccf3",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8da35fe9-36dd-4ba7-a80c-5ebd2d080ba9"
        },
        "item": {
          "id": "1bf0696d-af37-4309-96d1-5d08db949bb1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "aa1a9654-0ddb-4d71-82b0-821bb4142705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaff2cf-71e3-497d-add5-d453c728b8c8",
        "cursor": {
          "ref": "87d23827-e26d-4d23-949c-c231394c313a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a4c1aea8-baee-4e19-a5bf-6c7fb11a8c10"
        },
        "item": {
          "id": "beaff2cf-71e3-497d-add5-d453c728b8c8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "49b0b257-e979-49a1-91e9-2bd9d076f95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4871c33-9dff-4aca-ae82-fa81296b8de1",
        "cursor": {
          "ref": "7b75e1c8-f05d-4ee5-8e8c-1c811e18f3bd",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9188047d-52ec-4c46-b321-26964c947f1e"
        },
        "item": {
          "id": "e4871c33-9dff-4aca-ae82-fa81296b8de1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6029521e-7c9f-4705-813f-586bc830e6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03aaa215-dac9-404f-90ad-012d5007acdd",
        "cursor": {
          "ref": "e851daa0-adf9-47bf-bdb9-f9c30f4cdcf2",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bd23982c-ecca-49e8-a73d-09aae90e3495"
        },
        "item": {
          "id": "03aaa215-dac9-404f-90ad-012d5007acdd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "61eda64d-ef03-4da1-b934-fd712f6560cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171a48ec-3cfc-45d0-a586-8478274b0e21",
        "cursor": {
          "ref": "2bee1294-c471-473d-b35c-bad593685e3f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fd558290-20c2-4d45-8f21-fd9b71a15c91"
        },
        "item": {
          "id": "171a48ec-3cfc-45d0-a586-8478274b0e21",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0ab9dabe-393c-4ae2-9a57-7cef848d9ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5530ed81-feaf-461c-b2df-03516c444701",
        "cursor": {
          "ref": "e32aea93-d84d-4098-841f-4b5cef273d10",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "70cfec94-9af6-4f69-84ee-6a3fd1b0cc4d"
        },
        "item": {
          "id": "5530ed81-feaf-461c-b2df-03516c444701",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "220181aa-7009-463b-a4e9-a361af58a35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c67b80b-5816-4dc8-bd58-ec2292b57d46",
        "cursor": {
          "ref": "b210887b-3559-4ce8-a697-0967d71b5692",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9dae5a2a-03bd-457f-a328-58696aaafaa7"
        },
        "item": {
          "id": "7c67b80b-5816-4dc8-bd58-ec2292b57d46",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e5d383e7-bb9e-473a-b5e4-4a20a85555ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf01078-5f96-4d57-81cc-ce10d2ab8bea",
        "cursor": {
          "ref": "fff56884-9629-4e8a-9803-51d3b97a2640",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d832ab14-202a-47cc-8b84-e16d76edebf9"
        },
        "item": {
          "id": "bdf01078-5f96-4d57-81cc-ce10d2ab8bea",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "22e512d2-e49c-4f91-9cc9-c633127a5889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ae76b1-e185-4793-8881-451f20be748a",
        "cursor": {
          "ref": "c4105fc7-0a08-4543-b031-1fc9a9d8ac91",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "de325db5-9d08-4e7b-88a2-31e02bd94936"
        },
        "item": {
          "id": "93ae76b1-e185-4793-8881-451f20be748a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3fd5fb32-f8c9-4ea7-90b9-7ee012253ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f1f837-947a-45ea-8940-2d24052e87fa",
        "cursor": {
          "ref": "2a91752f-167e-471e-b9e0-0bd4826b7a56",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "76881d64-b7b9-4a48-adc7-187ed0a3c47e"
        },
        "item": {
          "id": "e8f1f837-947a-45ea-8940-2d24052e87fa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "43127c88-c7f8-4a40-89cc-c02c2ee5b2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30c1e2b-cb27-4a87-9bd8-c0945a6a8a2b",
        "cursor": {
          "ref": "8b82c487-a2ff-423b-971e-cbc4df6fcd31",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "54131109-b355-461a-b4cc-19ad2a30438f"
        },
        "item": {
          "id": "d30c1e2b-cb27-4a87-9bd8-c0945a6a8a2b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "67723978-2af0-4551-b844-bbfc0e7de37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5059ce-6ad3-4bc4-84a5-fe457531db74",
        "cursor": {
          "ref": "779f2703-2778-4cbe-a68e-743ff64a0ee8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "42dceb4f-ac10-40f8-a44e-ca120f0613fb"
        },
        "item": {
          "id": "2e5059ce-6ad3-4bc4-84a5-fe457531db74",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4ff92c0f-62c6-4e53-b244-e56361da1332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593e2db9-6a69-4365-934c-e001d5b99280",
        "cursor": {
          "ref": "cddcc739-af5d-476d-8be8-59ff845b3082",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ce7b617c-0db7-4d1a-b926-6edef3686af5"
        },
        "item": {
          "id": "593e2db9-6a69-4365-934c-e001d5b99280",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c39640a0-0837-4487-9080-81617c7a92ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95969bfe-b5ac-4e30-89be-033812c64431",
        "cursor": {
          "ref": "1927999c-f261-426f-8167-aecdd7b7adb5",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e2ae9506-eb1a-4f8c-a6d0-1d92b23f9c42"
        },
        "item": {
          "id": "95969bfe-b5ac-4e30-89be-033812c64431",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9fce18d6-027c-4e84-a14d-4d11122ba48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc725a91-48db-4981-b231-880d46b18c21",
        "cursor": {
          "ref": "0df5ea6f-8194-4298-908e-ad90920ccfba",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "93652f93-f4a1-4a22-8f98-cb6b847155c6"
        },
        "item": {
          "id": "dc725a91-48db-4981-b231-880d46b18c21",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a2aa9ddc-74d9-48de-ab2b-a7901a2897f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428990f5-2dda-451a-b77b-609566ee6988",
        "cursor": {
          "ref": "1c1f11b6-77c0-426f-853c-4386971df762",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9fc6ae77-65a8-46ac-a775-ca95d34ab734"
        },
        "item": {
          "id": "428990f5-2dda-451a-b77b-609566ee6988",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "970aea64-b395-4d97-b2b0-f4a065e39649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd5404c-831b-4c07-969a-e8cf26015093",
        "cursor": {
          "ref": "f424a23a-ee65-4c42-ae8a-cf90b3bab21c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bbb0af60-cef3-4626-977b-d00576892085"
        },
        "item": {
          "id": "acd5404c-831b-4c07-969a-e8cf26015093",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dd072856-9b90-4f57-865d-1f5d8af48773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5068880b-6e65-4947-bcc0-8643e697d7d6",
        "cursor": {
          "ref": "6e7f3c6b-5c6c-48a7-a100-a5f838c7bf1f",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c0bf54a4-6634-4aa0-b41a-cbad44f9cc11"
        },
        "item": {
          "id": "5068880b-6e65-4947-bcc0-8643e697d7d6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3ee5aedb-ef64-4ea8-9af9-5a9834a33854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4218dc64-19e5-438f-bd0c-2d6383e7df99",
        "cursor": {
          "ref": "5ea5e8e0-d5b4-4ef0-8242-5c4e0aa0cf45",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "07c9caf3-acf7-4531-ad94-63461db91503"
        },
        "item": {
          "id": "4218dc64-19e5-438f-bd0c-2d6383e7df99",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7aa3069b-4c68-44c5-8abc-b2af5233179a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2408aff6-20e5-4668-a6e1-4ff1868f6faa",
        "cursor": {
          "ref": "9e690e7d-adcd-4e1a-9c5d-c7852939a991",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "582db033-a9c6-4ae1-bd9e-9c788abaf697"
        },
        "item": {
          "id": "2408aff6-20e5-4668-a6e1-4ff1868f6faa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6f49da5f-1fdf-4c69-95c0-888a978c9bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2feb27a2-6269-4479-8904-f901a377cdb8",
        "cursor": {
          "ref": "a7d5f562-19f1-4ab3-8c01-859590aef6b8",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "53b7964a-3e85-442f-a617-b769142eb5a9"
        },
        "item": {
          "id": "2feb27a2-6269-4479-8904-f901a377cdb8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2d65592f-1898-4f26-8230-5731bdc432f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f1b3a1-6ad5-4228-9513-6e85a72161ea",
        "cursor": {
          "ref": "8e3f2e00-f61e-4c53-854c-c13714883920",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ee49eb54-f5cf-4660-99c8-55a213af6f46"
        },
        "item": {
          "id": "31f1b3a1-6ad5-4228-9513-6e85a72161ea",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9bc05b2e-a23a-4fa7-a4aa-2874a8fca4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1875d6fc-5998-490f-941b-f636b2c413c5",
        "cursor": {
          "ref": "4b19173d-3d43-4812-b640-d4156f8281ae",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2a121938-ab41-4ef7-beff-5f227f45ca51"
        },
        "item": {
          "id": "1875d6fc-5998-490f-941b-f636b2c413c5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6a0bc7ef-fee1-46f9-8328-92a6eb2f0957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377cb3cc-6cfa-4515-b373-0b0ce39bb681",
        "cursor": {
          "ref": "18ba1ff7-4c3b-450b-92ae-a923ca6a9575",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fffa7071-4ea3-46a5-af2f-43057f1c65ca"
        },
        "item": {
          "id": "377cb3cc-6cfa-4515-b373-0b0ce39bb681",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c247f74a-c07b-42c2-951c-63304e079478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd36d6ea-c779-4978-a5fa-4cc984e89a6b",
        "cursor": {
          "ref": "418353ce-fc73-453d-bfb7-5b15141457f4",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5cf6892d-933f-41a2-95bc-d42c6a23d2ce"
        },
        "item": {
          "id": "cd36d6ea-c779-4978-a5fa-4cc984e89a6b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a4c39313-c01d-456b-8c27-59e7638c17a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770fcfad-9b83-421c-bddf-bd04669df6c1",
        "cursor": {
          "ref": "9a59023d-9cdb-47fb-9008-9456a3841947",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "371453be-f0da-4a73-8b2d-5a6f71ba509b"
        },
        "item": {
          "id": "770fcfad-9b83-421c-bddf-bd04669df6c1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "020c9b87-df36-4d44-964f-2899539c755e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6800b9c0-f2da-4c50-9f1d-36890c4f3c22",
        "cursor": {
          "ref": "cf1e0656-a2bb-439f-8816-0815f455e904",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5a039e52-c775-4df7-9ab2-2a306034bd50"
        },
        "item": {
          "id": "6800b9c0-f2da-4c50-9f1d-36890c4f3c22",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c9b7f70-6274-4b97-992c-3ffdfb80f2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8af8e1c-97d6-4fe8-8c43-6a8c3e100fe5",
        "cursor": {
          "ref": "c22a4f1a-ed41-44cf-9ffd-44bd19f48ce8",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3e48a072-ed50-44e1-970b-8d6ec80b2f2e"
        },
        "item": {
          "id": "f8af8e1c-97d6-4fe8-8c43-6a8c3e100fe5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a9588ed6-885a-447d-971a-5934c7e19377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafe848a-2e4e-4eff-b009-89741dcb1c97",
        "cursor": {
          "ref": "49d70f94-03ed-4855-b33f-9c8d1e89227a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "269c1c48-05cb-4f1c-a301-ce9ea7adf925"
        },
        "item": {
          "id": "fafe848a-2e4e-4eff-b009-89741dcb1c97",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "74e953ef-57a4-48db-a153-1dd2c78bf70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1df217e-8235-4455-b066-d6e036d65537",
        "cursor": {
          "ref": "b51031a7-b96b-41f2-99d1-998da84f4503",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "69aaaafb-8e28-4ad5-bd68-d49e5d935cf8"
        },
        "item": {
          "id": "a1df217e-8235-4455-b066-d6e036d65537",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8e5ad3e0-b44f-45e9-8dea-97c8f31047ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21816173-0b04-45d1-8909-2f582cbc3bf9",
        "cursor": {
          "ref": "2c963537-ff1c-490a-9ade-44de3224fb7a",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "121d66c7-270a-4eab-8245-6b698f917920"
        },
        "item": {
          "id": "21816173-0b04-45d1-8909-2f582cbc3bf9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e8598e46-9f42-4216-b851-83b526473c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27774ef-2b48-4eaf-baf8-02abd216463c",
        "cursor": {
          "ref": "fa2521da-abce-4adb-b926-684e0c2ddbc8",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4eb06997-ed72-40c5-ac07-b1007edbb32d"
        },
        "item": {
          "id": "d27774ef-2b48-4eaf-baf8-02abd216463c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "aff647b5-d0a6-4f24-8078-b19d14bf830f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646ac46a-69c2-4aee-86a9-b7799f7328ea",
        "cursor": {
          "ref": "0c87373c-7924-4e1c-8a15-1883afad1183",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "04663c4d-35d2-4602-ba59-6f2040805c1c"
        },
        "item": {
          "id": "646ac46a-69c2-4aee-86a9-b7799f7328ea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1bce54d0-f551-4e47-a6c3-a9ad2e500e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbc9404-1b74-47c3-a9b9-044087a073e6",
        "cursor": {
          "ref": "b6436388-f06a-4d80-b7c3-2d87ec6cff67",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a4565cce-0a7c-4b1d-b28c-0f95e93383bd"
        },
        "item": {
          "id": "abbc9404-1b74-47c3-a9b9-044087a073e6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d822db2-bf24-45bf-ab12-097d4f8cffe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29568e00-0115-4443-808e-3238546e9c9c",
        "cursor": {
          "ref": "f25dce70-1ddb-414e-90dd-6251dbaede43",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f3963fc0-0fc0-44db-a616-f9f0834501cf"
        },
        "item": {
          "id": "29568e00-0115-4443-808e-3238546e9c9c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "16e4b12a-5cde-4b71-87b6-d0d6f2873b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4c6b5c-a58f-4c2d-9ca5-76989b118014",
        "cursor": {
          "ref": "c02c26df-fd1a-482c-8b94-06e906b9d8b5",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "19d5f83c-0d67-4a20-9154-8888f81398af"
        },
        "item": {
          "id": "6c4c6b5c-a58f-4c2d-9ca5-76989b118014",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5c3811b0-c04a-460d-a93c-d90b7590d234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f092bc-2608-496a-b939-232ff3d086ec",
        "cursor": {
          "ref": "61f9010f-2d14-45c6-b79a-6d6f0e08ebe0",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0b02e143-749c-4482-84c5-bedab2578302"
        },
        "item": {
          "id": "51f092bc-2608-496a-b939-232ff3d086ec",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2b5645e1-1191-4c79-b8ca-fed373852d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b11694-a1c8-4688-b63d-c4b8666215fd",
        "cursor": {
          "ref": "d1829413-a2f2-4a61-959d-8735f2220440",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "168547c8-7f66-49ef-80e4-8e0b080cfc90"
        },
        "item": {
          "id": "04b11694-a1c8-4688-b63d-c4b8666215fd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "552b6092-b637-44e3-9866-977d6a7689a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c1eb13-16fc-4c6d-bf42-d440839a9221",
        "cursor": {
          "ref": "f1c4df0e-663a-4dcc-a16f-875991659a54",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6f7f8e08-9db2-4395-86a1-1536e1bbe7e9"
        },
        "item": {
          "id": "66c1eb13-16fc-4c6d-bf42-d440839a9221",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "44bf92a6-a9a7-4452-8fdf-c0d37b102eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e4e0fa-3fa6-45a9-ac9f-46ef62cb065e",
        "cursor": {
          "ref": "35b3af9b-52b0-419e-a5e2-c99e51a72a12",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "55007589-f354-490f-9ccb-4a7b0a7f558e"
        },
        "item": {
          "id": "98e4e0fa-3fa6-45a9-ac9f-46ef62cb065e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "89680f1d-ac2e-40a1-bc9a-c491461f0275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f0a512-0128-448a-8ca0-41025259404a",
        "cursor": {
          "ref": "2355eeaa-53a7-482c-9bb3-6440e5431e59",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "88c9e105-a989-4f84-8396-4a784b31ace4"
        },
        "item": {
          "id": "04f0a512-0128-448a-8ca0-41025259404a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ba52b0a8-2bf1-4934-9022-c7ec80348d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3cb9c5-735f-4801-a509-76c70956c7c1",
        "cursor": {
          "ref": "20bf2f74-1849-4fe0-ac2c-02e8e9e02bad",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "871b3326-de80-40ce-a738-8f4729ee0138"
        },
        "item": {
          "id": "6b3cb9c5-735f-4801-a509-76c70956c7c1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "526b7f9c-35aa-457e-9c1f-12252fb4da58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5c2b4c-3182-485c-9c89-761a08518e4a",
        "cursor": {
          "ref": "5e4d6f75-0944-4920-aa3e-b7a8c29bf6e7",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e9e6f2fd-f708-4cdd-84a7-3adaa7518c3f"
        },
        "item": {
          "id": "fb5c2b4c-3182-485c-9c89-761a08518e4a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ee471e9-b25f-4340-a587-465b781e9815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402650a7-7a98-4a79-8a62-69c07d338a42",
        "cursor": {
          "ref": "79abf9b3-5612-4be6-afb3-84950eb37562",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "72bf4009-efd7-45e5-b065-c06ba3e9ef57"
        },
        "item": {
          "id": "402650a7-7a98-4a79-8a62-69c07d338a42",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4ae701a5-a0e3-48e6-aadf-f6e255cfc10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e6d102-eaca-47ef-9a41-c09dfd0984bf",
        "cursor": {
          "ref": "4d17b539-4bbf-461b-ae81-349d0d9bac53",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c21403a2-251d-46e9-8e57-a8f7bcde46ab"
        },
        "item": {
          "id": "34e6d102-eaca-47ef-9a41-c09dfd0984bf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ffe665f-20bd-47e8-bdcf-f6f20f97b2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6cf66e-d333-490b-be19-fb896471a385",
        "cursor": {
          "ref": "2c440beb-afe8-4a82-a72e-2f74a04a8ea2",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "591a7f37-a245-4a5d-a5b0-533febf04ae4"
        },
        "item": {
          "id": "7c6cf66e-d333-490b-be19-fb896471a385",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3901847f-1ad9-48db-95d2-0da6504c2431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b5c9ba-89d5-471d-8045-787e2fe01f70",
        "cursor": {
          "ref": "5ee76e40-ed31-47f3-825a-304880183cba",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fe6e6bcb-6c43-4ad0-8790-95de76dae3a6"
        },
        "item": {
          "id": "61b5c9ba-89d5-471d-8045-787e2fe01f70",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "85d0a391-ef00-43a3-b9dc-6f4f37f3413b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49af3a3c-916b-465b-baaf-7076fe844e51",
        "cursor": {
          "ref": "df001e05-1418-4514-a703-1c8c718658ac",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "008caa1c-e4af-4173-b360-30f90d77d9f3"
        },
        "item": {
          "id": "49af3a3c-916b-465b-baaf-7076fe844e51",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ddc172fc-a4b6-4bb2-b0ff-8e4341a98dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36d6a93-35be-4447-b691-5fa860234ddd",
        "cursor": {
          "ref": "988f4224-ff9f-4d22-8aa0-cd70b6156ae6",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6ffb506d-4408-494d-8b11-94285badd76f"
        },
        "item": {
          "id": "e36d6a93-35be-4447-b691-5fa860234ddd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0f18d305-c5de-407f-ac9a-fcfa071b77ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ea427d-44e5-4d1e-ac41-883497c4e69f",
        "cursor": {
          "ref": "c441e635-f768-47e9-b3f3-30b2fa500dcd",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0bfe53d3-2b27-4bc0-b8b2-5777e0532ca9"
        },
        "item": {
          "id": "17ea427d-44e5-4d1e-ac41-883497c4e69f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "956aac1b-02cd-4622-8583-ef1cea755f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9154a52-cda7-4677-bf24-a2af8a17ef55",
        "cursor": {
          "ref": "82824f09-1a10-49cc-913a-8383741fa898",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "da4fdbc5-6754-4429-92d1-cc9c23135e61"
        },
        "item": {
          "id": "b9154a52-cda7-4677-bf24-a2af8a17ef55",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1a9ad086-3c97-4e96-90c0-fb745a0ce214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd41941-db47-4af8-b3bc-ce129081545e",
        "cursor": {
          "ref": "a97c2dee-d87f-4d69-ac12-2ead33c3990f",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cb414eda-2b19-4691-a7c4-3a76d709c6bc"
        },
        "item": {
          "id": "fdd41941-db47-4af8-b3bc-ce129081545e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "95a8b397-fa1b-4a27-a943-4033e6e6151f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e10555-885b-43a0-891a-4d1b8a328a38",
        "cursor": {
          "ref": "f77da67b-2ca1-44a5-ad42-6c1e9c9e2ee4",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "129b8a9b-fb0b-46bb-b1b6-621a90630209"
        },
        "item": {
          "id": "f2e10555-885b-43a0-891a-4d1b8a328a38",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7f71201b-3057-469a-91f3-7cb35be3b455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8c3a36-76ca-4117-85d1-2cf7b7b44000",
        "cursor": {
          "ref": "3cf4aa9c-4a03-4cb0-a98d-d4a961b75fca",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a443e7f6-6a7e-4c53-a386-543cea9186a8"
        },
        "item": {
          "id": "0f8c3a36-76ca-4117-85d1-2cf7b7b44000",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f50b52a3-a47c-4922-aed1-90195932b2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eaa059-f230-44c2-9865-b42f901489ff",
        "cursor": {
          "ref": "5972e702-5101-4d69-81bf-a18eef9cdb00",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "159211a9-f210-4541-a83c-121261844712"
        },
        "item": {
          "id": "16eaa059-f230-44c2-9865-b42f901489ff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b1c3dfcf-1b02-403a-81d5-da4e3fbf9e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa49c810-2acf-4d98-aa28-04aa80882ece",
        "cursor": {
          "ref": "62c228d4-586b-4aaa-8c37-c180b058e98f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4846b66d-fd6d-4b74-983a-d5914656935c"
        },
        "item": {
          "id": "fa49c810-2acf-4d98-aa28-04aa80882ece",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f3556812-1ed2-4813-baf2-1f7a5176526a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf059b04-1d3a-4a08-a164-2e85a6470c47",
        "cursor": {
          "ref": "b450f2c4-73ab-4d98-b17a-9c4f5a9eaf1f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2ed68799-b515-4d2a-a1c1-fa45b698249d"
        },
        "item": {
          "id": "cf059b04-1d3a-4a08-a164-2e85a6470c47",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "db322e06-c824-44c2-8b7b-4c2df08a6da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0fe20a-093b-407b-9037-9154c0839b58",
        "cursor": {
          "ref": "af8325f5-61a5-4509-aa3b-01335c8b5bcc",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "83a8ba58-c6fe-4444-9e4b-9475ff68898b"
        },
        "item": {
          "id": "4a0fe20a-093b-407b-9037-9154c0839b58",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "91f1d91f-1a03-47a0-a0f0-3f202b7f72f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114a2f30-7d97-4ab9-bcd9-c1f69e5bd228",
        "cursor": {
          "ref": "a1b7f565-2f38-4f6b-ab7c-9c58a742c48a",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8dc111f6-f9f5-4a59-a19e-f9d641e14142"
        },
        "item": {
          "id": "114a2f30-7d97-4ab9-bcd9-c1f69e5bd228",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e2f5c2d9-9b9e-4acf-8a0e-c968d980fc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e344ea5-7fa3-4018-b685-f1628201fe67",
        "cursor": {
          "ref": "72073add-07aa-400e-bd04-1a7165b7048b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cf704808-dd7f-4332-84bc-4cb3e6d83f00"
        },
        "item": {
          "id": "6e344ea5-7fa3-4018-b685-f1628201fe67",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4c615f46-2a07-49e4-8509-39b74536e692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cf8e05-fc7f-487f-b632-0aff9ff739e1",
        "cursor": {
          "ref": "f4e805e1-7282-4c80-8737-18509b07a47b",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ba30d7b2-bbe4-4e42-82e1-2117c36c5e82"
        },
        "item": {
          "id": "d7cf8e05-fc7f-487f-b632-0aff9ff739e1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fddf8044-0857-48d7-9d7c-9c09af33bded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba25713d-7eb2-4426-947d-f0ab864559b8",
        "cursor": {
          "ref": "a4517a68-2759-403e-aa69-d1a50e336d44",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "044328de-6c44-425f-9841-095c6253b688"
        },
        "item": {
          "id": "ba25713d-7eb2-4426-947d-f0ab864559b8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "298a16b5-dc73-4aa1-b571-db0c31334bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e54d71-ca2c-425b-a1ad-081225e65d0e",
        "cursor": {
          "ref": "3827ee7a-8f3c-40af-bef0-6292cf5cdaf4",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "97db6f98-9fbf-40df-860a-3997881f8a3e"
        },
        "item": {
          "id": "d2e54d71-ca2c-425b-a1ad-081225e65d0e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "87b108e4-6e33-4133-b9a2-40a8ac13509b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadb23ff-3a66-4d3d-8121-c208dc10c9b8",
        "cursor": {
          "ref": "83d3a2be-ab31-4985-91d5-a34c3d7827ef",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3fb3a10b-cb27-417b-88cc-bcc6ed81341c"
        },
        "item": {
          "id": "cadb23ff-3a66-4d3d-8121-c208dc10c9b8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e2d68e0-537b-46db-a96d-d270518c6d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1217b89e-a099-4334-adf4-7da8ef55c351",
        "cursor": {
          "ref": "0ccd0a13-a862-4c04-ae05-76e3114e927a",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3cbd3939-6e41-4068-b20e-fa40ace530d4"
        },
        "item": {
          "id": "1217b89e-a099-4334-adf4-7da8ef55c351",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ca4ef415-c268-4fbd-a36d-b306a9299bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa30dc98-fdb7-44e7-ad80-5bd458ebf529",
        "cursor": {
          "ref": "955b832b-2860-4f0d-a6b1-3eed17120b91",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5cb661ff-347e-4243-b852-ffa01cbda8c0"
        },
        "item": {
          "id": "fa30dc98-fdb7-44e7-ad80-5bd458ebf529",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7d95c213-5c62-4384-b317-2b7064cba529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba964d7c-0687-44f5-8060-cb3a7ed88095",
        "cursor": {
          "ref": "bb139e65-1b5f-4bf7-b3bc-371951e2a61e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e5ea1b83-cf0c-4f4e-b15b-84447b0b8465"
        },
        "item": {
          "id": "ba964d7c-0687-44f5-8060-cb3a7ed88095",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d5f7ce0a-d138-49a8-a851-992de5c23099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b53e01-18f6-453a-8dc4-0714fcdbbd22",
        "cursor": {
          "ref": "f3e2402d-3aef-4e0a-b0a7-016bc1f12db6",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bee50df8-f90a-4ba4-b7fa-862b256c46c9"
        },
        "item": {
          "id": "f8b53e01-18f6-453a-8dc4-0714fcdbbd22",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6bdf99d5-f4f2-4f77-9b6f-2381ed505ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9354945-9540-4caf-b6f1-945fcf1125f0",
        "cursor": {
          "ref": "fe28f39c-8193-4940-835e-0df1e6d993b2",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5bc46d57-42bc-48c7-a63b-61aaa2ba95a0"
        },
        "item": {
          "id": "d9354945-9540-4caf-b6f1-945fcf1125f0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e95eb969-8240-4b89-98e2-b41cc896d186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7768f7-9b39-4857-8069-04382e2ee54f",
        "cursor": {
          "ref": "4dc600e5-b8d8-4441-bacd-70ef7d9c65c3",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b0886b9d-8908-48c0-9ef4-26e738a091cb"
        },
        "item": {
          "id": "3c7768f7-9b39-4857-8069-04382e2ee54f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "414adc47-5864-416a-bd4e-1aaea630b91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef83c07-747a-47bc-b6ef-910430e6567b",
        "cursor": {
          "ref": "18093441-16cc-4deb-8aab-838fe7d6be8b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0de9ce4f-afc5-44a4-b9d4-83ac1ad5112c"
        },
        "item": {
          "id": "9ef83c07-747a-47bc-b6ef-910430e6567b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3a144462-98a9-4648-a202-8dbe7ade8469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590579b2-253b-4804-a111-c0afbd6f99ae",
        "cursor": {
          "ref": "1554e772-b141-497b-b092-484e1f3b093e",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bd11274a-5c3a-41cc-b0e0-bec8c967cbe7"
        },
        "item": {
          "id": "590579b2-253b-4804-a111-c0afbd6f99ae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2d5106a9-84ea-4f7c-8dcf-fb4fc67167ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3500cb-2614-49f8-9a9b-8e0b532b700a",
        "cursor": {
          "ref": "08735273-8b52-4d02-ad7d-1580a06623dd",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "23a4a62a-a246-4a7d-a31c-8a2174a2dd09"
        },
        "item": {
          "id": "2b3500cb-2614-49f8-9a9b-8e0b532b700a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "103d93e1-24aa-4d37-9cfe-17dd1917b293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6457a32e-6446-47bd-a325-8d3bc6ae35d3",
        "cursor": {
          "ref": "0151fa72-8121-485c-9c43-bc377df8b29d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9a258cb8-028c-4216-84a7-3f6eec0a16ea"
        },
        "item": {
          "id": "6457a32e-6446-47bd-a325-8d3bc6ae35d3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "afe70830-3e74-4fa4-aaf4-f8f38a0964a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33663cae-633d-4a72-8880-5f4db551f5f7",
        "cursor": {
          "ref": "4ae2f631-f7c8-495b-9fac-f7fd064dd776",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "52561f49-a461-49dc-87cb-7a62a67073b9"
        },
        "item": {
          "id": "33663cae-633d-4a72-8880-5f4db551f5f7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1ec6d2c4-7656-4422-b4b9-ac631a78b1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31f8cbd-b114-4bf0-9196-ea04354e174d",
        "cursor": {
          "ref": "ece93803-d166-4a31-84f8-ae10efac6385",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3a5ae616-dd31-4dc6-b718-94869c93981f"
        },
        "item": {
          "id": "e31f8cbd-b114-4bf0-9196-ea04354e174d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e41297e4-88cf-4fd9-a921-5fd79e22dcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea622880-d093-4b1d-97d9-194c2d693650",
        "cursor": {
          "ref": "4cb5d20f-af09-4eec-9775-9e3d02e0b06a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8ec72807-020f-42ef-ab6f-7b20623bc3a2"
        },
        "item": {
          "id": "ea622880-d093-4b1d-97d9-194c2d693650",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "190f477a-095c-43c9-ab0d-52b081dcdd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580d0b5c-723a-4fad-8909-e68c5a2ad819",
        "cursor": {
          "ref": "6ebf0841-932a-4ed0-9928-dea5e29c3f06",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "aa2b3ea4-be70-4e9b-b6be-909361ddce8b"
        },
        "item": {
          "id": "580d0b5c-723a-4fad-8909-e68c5a2ad819",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3b8614c5-1bc3-4580-b323-b3f7b929d3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a96c4d-3554-4722-b848-501ec8f64ec2",
        "cursor": {
          "ref": "1f25afb2-8172-4ed6-8460-1bd0ec3ac06d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4c1d849f-3fd0-4716-8aa9-2a76deb69cef"
        },
        "item": {
          "id": "10a96c4d-3554-4722-b848-501ec8f64ec2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7012752a-c2cb-4ce8-8177-70ed1d5a6f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa9a447-28cf-4b5d-b09c-3d3435c2735c",
        "cursor": {
          "ref": "463c06fe-7839-4e8d-afb1-fff673cf87d0",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bf71afff-2ef7-4db3-97f6-bed1535c56d9"
        },
        "item": {
          "id": "eaa9a447-28cf-4b5d-b09c-3d3435c2735c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4c9b63a8-9208-4c6c-8760-661dd896dfd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7326cae2-d3b2-4a9c-a4bd-d77f3da2dc99",
        "cursor": {
          "ref": "1e6534e4-448a-4392-96ee-573de0b6b6fa",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae26affd-7a7b-4170-b526-a790114139e2"
        },
        "item": {
          "id": "7326cae2-d3b2-4a9c-a4bd-d77f3da2dc99",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6c616fca-0c9b-4bfa-8635-0d7a5980a2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e7f87ac5-f056-4031-ba60-19afdb3d17fb",
        "cursor": {
          "ref": "51d508f8-f8b4-4141-98ff-25277874feb5",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7adb9333-2d91-44c3-9528-2e7ea4f885f7"
        },
        "item": {
          "id": "e7f87ac5-f056-4031-ba60-19afdb3d17fb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7d77edc6-61af-4e8e-8659-12d40ec6d936",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0299e6-308d-4e89-8e80-00c4c7ed4e10",
        "cursor": {
          "ref": "99097d6f-483b-4449-95e3-c2c3c4e56459",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "64accb04-09c7-4caf-a6cf-110b7fe0671b"
        },
        "item": {
          "id": "da0299e6-308d-4e89-8e80-00c4c7ed4e10",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5d161386-25a5-48a9-8a04-496fa377bd35",
          "status": "OK",
          "code": 200,
          "responseTime": 1866,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0e3a8d-f09b-44e9-8f78-55a3a9891b35",
        "cursor": {
          "ref": "6ac5c135-a47c-4e95-b75a-f516d888b27f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c9da8152-4134-4346-87ba-4764e47dfe60"
        },
        "item": {
          "id": "aa0e3a8d-f09b-44e9-8f78-55a3a9891b35",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "23422151-0a36-4aa2-bd5e-dc6c8f54a5f5",
          "status": "OK",
          "code": 200,
          "responseTime": 2212,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
        "cursor": {
          "ref": "461ec2e6-6451-4320-b59d-5a4fe31240d5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81e22a34-a4bd-4236-89ad-c6c4e5d75318"
        },
        "item": {
          "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de40f342-fb5a-4530-a4b3-16f174858b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
        "cursor": {
          "ref": "461ec2e6-6451-4320-b59d-5a4fe31240d5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81e22a34-a4bd-4236-89ad-c6c4e5d75318"
        },
        "item": {
          "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de40f342-fb5a-4530-a4b3-16f174858b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
        "cursor": {
          "ref": "461ec2e6-6451-4320-b59d-5a4fe31240d5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81e22a34-a4bd-4236-89ad-c6c4e5d75318"
        },
        "item": {
          "id": "eb0ff7ed-067c-4534-95da-20e251031a95",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de40f342-fb5a-4530-a4b3-16f174858b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5a5514a7-af7e-427c-bb24-a30b76275372",
        "cursor": {
          "ref": "e12aebbf-0f77-4f20-80f4-ff1800fa930a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5dba8630-58d1-452c-bfa6-f4f1d3b72c81"
        },
        "item": {
          "id": "5a5514a7-af7e-427c-bb24-a30b76275372",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b3e760e8-81b7-4f07-a0c4-33ff725a719c",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "685f21b8-abf0-496f-bb9b-5743f5075756",
        "cursor": {
          "ref": "16651d62-ed03-4fbb-8b94-6dde242b08b1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "396e4128-4786-410d-b690-526c567a1fed"
        },
        "item": {
          "id": "685f21b8-abf0-496f-bb9b-5743f5075756",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4a978af0-43db-4cac-83db-8ae29803486a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "685f21b8-abf0-496f-bb9b-5743f5075756",
        "cursor": {
          "ref": "16651d62-ed03-4fbb-8b94-6dde242b08b1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "396e4128-4786-410d-b690-526c567a1fed"
        },
        "item": {
          "id": "685f21b8-abf0-496f-bb9b-5743f5075756",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4a978af0-43db-4cac-83db-8ae29803486a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "85522f25-b5bc-4b7e-ad3b-05de8a797391",
        "cursor": {
          "ref": "471de8ec-43d8-4ee4-b96a-07011063b019",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ac0be218-455c-4fe3-8109-b75fd1d2f4ff"
        },
        "item": {
          "id": "85522f25-b5bc-4b7e-ad3b-05de8a797391",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "dfb5b8df-bcb5-455d-87a3-34be137daa06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6d739050-96ee-465a-a4a6-ef721534e8e4",
        "cursor": {
          "ref": "ad73abe1-afbd-4356-9376-9bf3ebb4a0b9",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "539f8933-f7c5-4339-bc51-dd28cb6d96e2"
        },
        "item": {
          "id": "6d739050-96ee-465a-a4a6-ef721534e8e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "87e52d5c-f433-4fba-b49d-a1a2c60935a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6d739050-96ee-465a-a4a6-ef721534e8e4",
        "cursor": {
          "ref": "ad73abe1-afbd-4356-9376-9bf3ebb4a0b9",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "539f8933-f7c5-4339-bc51-dd28cb6d96e2"
        },
        "item": {
          "id": "6d739050-96ee-465a-a4a6-ef721534e8e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "87e52d5c-f433-4fba-b49d-a1a2c60935a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "34e071a1-ffbb-422b-8b7c-6b6873798534",
        "cursor": {
          "ref": "6a673bd0-d75e-460d-a9b3-3567ac37f065",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d45d5a63-5540-49d5-a840-1f7b12897539"
        },
        "item": {
          "id": "34e071a1-ffbb-422b-8b7c-6b6873798534",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2031bd7c-9a1a-4dcf-97e2-a33609e59346",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}