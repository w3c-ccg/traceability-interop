{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cae5e112-4cbb-4c4c-80b0-837f983a1fa5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dab9905e-0c9f-4a13-abdc-ce7d3b5b63be",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4446e859-f3ec-49d5-994a-38f227205c50",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fad10df6-a7f0-4e08-8c16-d8e7290deab3"
                }
              }
            ]
          },
          {
            "id": "72126905-6cc0-4b21-b131-ce94e447a5b9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54049a43-7dd0-4c2e-8dd0-109b793283e9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e9728518-50c4-4e66-b389-614d374835c8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e39366bd-3d20-461b-a3d5-a4962d9074e4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f3d8b03c-b116-44f5-ada4-f44b10e0f9cf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c8fdee6-6b3c-4a2f-8011-4be330175b96",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d213f1c-ccb4-4ede-ba3b-dd84e29f47a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "145c9ef2-bcc9-469b-97a4-cfd46dccb030"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "913f7718-bb32-456b-bedc-b7bea7fd2aed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef4ec8fb-adbe-420b-91f0-3d4a53bec77a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1407f4a-0a04-4824-9470-3c883b8ead36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4003551c-2bd5-46d9-a579-eacb9098a750"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dde0fc81-a6cd-4007-865a-6bb36dbd2e2a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "31b2aebb-c40e-47b8-9c59-ea9591a26072"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "831938ea-a43c-4b28-acff-5db1cb96d711",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94612470-c4c5-4f54-8286-2492c03840ab"
            }
          }
        ]
      },
      {
        "id": "25ead030-b85d-4d2d-92e4-d0fe7df144df",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e05ccf24-7bad-4dbe-acbe-b47edafe45f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7d065b5-92c1-4b2b-938c-3f0acbaaa760",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebd3fa3a-efd9-4697-8ecf-1939c28babcc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfe42bd-0255-4b04-b446-ba8df23d3710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df1590c0-ffb4-481d-a242-ae5f7026a5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c83d60f-9c03-4485-a2e0-7d90e924eff6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c9e3c7-a1c9-407c-b6e3-55766fe2cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba2a4c59-9757-456f-b91d-e0a11dc8579e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b06fe3-ebbe-47d9-bc26-e85e54eb0482",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76daea1f-63ee-4fcc-ba0b-4492b96078cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4e3ea02-573c-4d8b-9327-7db05767735b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1af8474e-f2f6-457b-aadd-3d468db6e4f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1247895-0b11-4cbd-bcc7-34ccc9e7e79b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbf9a70-b388-4fae-be06-965da9251da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ee369e3-8461-44be-a878-b76bffc912e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc5f671-26a6-43e0-9d9f-d60195150ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c3f775-a4d2-45fa-b556-7a10c5ba3d62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3a693867-b1a6-444f-bdd7-809f40636ca1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8fef5328-41fa-4932-8a7d-2f330bf17c1e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d48b45b2-acb8-4a5c-9bfd-619b6497fdd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a7872a22-3c9c-47de-be0e-d9910631c3e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eecae9f5-e118-40e5-99f5-cb8ffec470bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eafc3276-f93f-411f-806c-f9600e6400d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "470a952d-12a8-4433-afe3-56d1e28fe918",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78198e41-bc70-42db-a983-e0fe04c5aa07"
            }
          }
        ]
      },
      {
        "id": "6d7b9f2b-98f3-4eb8-bbc2-f77866a9a525",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "22a654e5-4437-4a49-bdae-ec2d080f171e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1149e03-71c3-47db-bbe5-582049c2c88a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "239cf2b4-3431-4779-bb6c-aef875a677ec",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd46eb2-7e7a-4a68-97fa-97b44ad85a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e1bf4a-4f47-4c4d-a1a4-cc70785d67ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b121b290-7569-4541-b964-94329ef21690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3bcd701-840b-4584-b06a-4cec86417736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c7a376-91aa-4c51-8cdf-9441d3660a0d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8bbfb6-42b9-4892-9701-d8e6b6e7c278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da02576-42ee-4108-ade7-63a7ff806100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71f64f1-54c3-47a3-bf86-07c8b2f5982f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2ff8b01-16dc-4e5b-a037-8aca5faba128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832ac613-0996-4478-a1b1-24397eb03085",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317f8406-2f9d-4966-82bc-bde05645a557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa8765b-cd76-4aea-b307-8525670f8c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee897127-b795-429b-b1a1-baca489f5561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0c3c2cf-2d03-4998-9453-cd9d5fb2cb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23930f07-96ae-407a-9149-951969bbccc1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25df20da-4287-4246-9261-d1002ea7351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88ca040-42e7-4f1c-a954-2e979c26a786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4846de97-f149-495e-be51-69d3d5593c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22269305-95e0-4025-ae76-d6d9284099b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a463874-8b12-4859-9b08-6f47db170eda",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ec0fb3-b4d0-436d-b237-8eec15164783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979be1b2-b644-4e2f-96cb-5c034708116e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b8540b-1839-4dfd-8ac5-31eb91e9a32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68e8b3ea-3781-4b62-bd8c-7e949ed4704f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0af439-17a0-4bce-b63c-3c3b30d7298f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb09ca3-3951-4827-885b-0434552d9e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a79a7d-259f-4ed2-8c37-fef48682cbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e258fc-9447-4e7a-9332-793ef81ffffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4bf4c2a-ddaf-4a99-8dd9-7f62071430ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855bfe2e-0391-4f04-8444-6182ff9cd8ba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51f0a4c-416b-4dbd-8bb9-ab778eed110a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4ed5c9-2f04-41e4-9088-b0268a5db7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7a40a7-8fdc-4340-84ff-891e26732385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22dc2a96-33c2-44fc-8fa0-94f410264c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68c49ca-aa2d-42b1-88d2-e70b313eb4fc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5797aa6e-15b7-4ac4-9846-ed2746e5e3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781b0d90-232c-43e7-8a7b-3a7b309110ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fed17d5-d8ce-4b3a-8949-0c53a85ec0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a40c052-6619-460b-8d8e-4781400e7592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afa8234-2a10-4de1-b809-28d547f01f93",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4772b7e-0bd1-4d70-b151-a60f6daf5695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9438ac93-64e3-4517-8fdb-d28052f57df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2a67ef-ea3c-4332-9ee3-14262261d1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb0ef490-7ec0-4976-920d-ec3c2895ae9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41e72c6-da76-4161-998a-bab18f0c26b9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db4f3b7-0b89-4549-8acb-448303ace9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35be789f-1570-44db-9432-58e52e508554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dd054a-0bcf-4723-8e80-5e96c3e71106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df5e6a0-6c01-4414-ae91-568d46743668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd62f6c-e885-4e77-a879-da050cf0d0c5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60998aca-593c-4018-b55c-d36327f93eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0459f9ee-a022-40eb-8d82-ee4467e8596a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfd9595-c31a-4ab9-a992-af6a8ef3519b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9893207-1737-47b4-a21d-ea2c5c428283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6054bf-1eb9-4992-8e19-87961d16b952",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af478e21-342e-4ed8-a227-113491436aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88b66a5-eec9-4306-a449-5b360879fea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c573da-bf67-4b92-9a40-0b11cb99768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2a626e5-5f44-4d9a-a8dd-e5138a04ef36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e7786e-3bfc-406e-87bb-d8982b84d0d1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eb455c-15b5-4e33-98c3-dc3395f54f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eabfde6-2e07-418d-b794-9177d8632c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83d8be6-78b9-4765-994a-8de15a008a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be16995b-698c-45c3-ba78-77b881c7a82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8736d870-e00a-451f-9a4f-4add23e7d115",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956ea4e1-61e1-44b3-ba26-92d1af21fe34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb79acf-0f69-4dbd-ada0-81a5f897061c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f82a87f-6d22-478c-8a71-465b6cd3ad39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f83c4a6-d782-4dea-a7ff-d29b51aad287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7053811b-1c27-4ec8-9fef-38ffe19a0aae",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bec4a61-c6f1-40c7-8cf1-e2681c88fdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128b5fb2-01d7-4a78-a5d8-d048a0d70cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e9cf77-ce07-48e2-bfc0-1ac3636ab6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "610ff1b3-e686-4046-9cd8-05234a857bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96d2d81-53d1-42c8-8c2a-4a734f3c9ffa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbd958e-20bc-4424-9696-85a399d93294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b14470-183e-405c-a0ec-7dd010de98c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ff17bf-6059-45b4-bb09-a74eb5cff12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3718d657-dfb4-4447-b33d-6aa4a54406f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1c4027-4390-45c1-9a3d-ee67f201feca",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f975599-c789-4b01-8f6c-c8a7760a374d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a7340b-2f91-4403-b20f-979ed7ab2672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db16deec-ebaf-4272-b773-5333e491445c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "387a1904-46a8-4be4-b2f3-71f65ab4754e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f243cc9-71bc-4d1d-8685-b38cb30f67af",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee71c6b-4814-451f-8954-522f304a2154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c740d4-a979-490f-bfe6-b808464beaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78582534-f529-43fb-8f30-9fb8e8e2bdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "151181cf-3cb7-4598-b162-ae634f929d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31d3858-005d-46dd-a351-1425b12e91f4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad8fc37-0cdf-49be-b585-845e7bc3d2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92162897-d3f0-41bd-a052-bfe49f1bc402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fecd850-ab89-480d-8ec1-115b7bc321d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1980ee1f-e3ab-47d9-8b3b-f04b47c3bee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3bb631-c801-44f8-84a0-7ff606202159",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fc0e67-66b7-4a7d-b3c3-ebe87fcc1ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784250b7-afc8-4a4a-8a80-681bb06e5978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385d3b8b-36b4-4560-966c-b459b57bd987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40320df1-876c-4b0b-8bbf-fa0294d3fe93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a959fca-cfac-4e3c-b1d8-1bc4e0c6d91d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafa11d2-3d2d-46bf-9d05-fd81d68ab9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f1db2e-477c-4d8d-953a-3a697944cc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1535dae3-69fe-450d-863f-8bfe6f3446a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1666def5-4341-4dce-8c90-ee4bd8859143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed629651-706f-4cdb-9ba3-467aee6918fc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d6a03f-b9d8-4427-85c2-c2c2150cba9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ed03de-05d9-4be6-be69-66148550e54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c81179d-705f-4676-94ea-bcdab03769b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee869972-de9a-4514-a42d-0b5a09ff5653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6f320f-e5a9-42bb-9a12-758f290fbc24",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81eb0b80-ab3b-42f7-be70-6d88ffe208ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076a09af-8b54-4c1a-8f38-856a46bfabee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3a0053-ace9-4aee-bd43-1e0997c8b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cef524-8a90-4d2e-a494-5411b2b14ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dfdb59-8e87-4f46-888d-6a8a7eff8fe7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23edbda-58f4-4d47-a88e-f6d3705ccf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbde1a13-2420-4c3a-a4fd-e218019ae7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82400eb-8af9-4545-a82c-87dd686f2aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d14a70-d590-4578-bfcc-70885352b922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aef8f31-62c8-4307-8f63-9f02d4f480f0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ef148a-618c-4e97-8c30-314f422dbf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e66641-a173-497e-9768-e2f940ae2ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f099b979-6057-4b8e-84c0-74b41f2cc4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bf49ae-fc17-495b-8720-97177f2ff965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f7b8d5-f92e-4d53-a519-93853eb0b7da",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5671d6-8e55-45a2-9064-d8de57348ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672ec3a0-d2f8-4738-a57b-025a9d240121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7968ac-9e86-466d-ab2f-39f5b6c8cefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "972b0bad-36c6-463e-9fc1-d1e409e5f89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd61db3-779f-4116-a248-f4d12d5207ea",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58111520-9a38-4411-b87e-4b71a910c733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7556800-f72f-432f-b65a-45af64e797f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f50204-9805-4f32-8520-c5242642b173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0836ce0-e890-4d24-bab8-a646bbb80a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33696de-f489-4847-8a8e-99b54a3035e0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90137911-1ff3-4e36-9131-fe7a1795a04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224f52c3-57d9-4272-9c4c-25efe9570998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8e1a83-aaac-4683-b5b0-8380f3622aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85274c20-52f1-4fcc-a83f-8d6e2b5013a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6436a998-e15a-47a0-b39a-ecc8a9559611",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d802b9-bb6c-45bf-895a-e4186c7abf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b0ed87-a7d9-430a-aeb3-2525845da389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c418a729-1332-4c41-aa0b-29e4909d3f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f29309-0968-4d6b-a3d1-346f262b3beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cdb726-cfbb-4da8-b2dd-c835439c4ed2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d125332-e44e-491f-9432-ddcd32b1af15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b148e27-7803-4616-85c2-1dd09bbd04cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5920099-40e5-4207-8496-96b83cb6923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5bb866-8d61-4415-8fd2-671fa721ed2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b67f85-392f-48d2-9a75-381579a4c8f7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d543e8-3f50-44bb-bc57-605b4ed19217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284d1d5c-362b-4445-bd05-d5a4f0ba9ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1651f9a6-4d4c-4bd3-a703-0b9b18f71c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "182a3331-e90c-4468-b067-2995daf7dea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee0f858-99f8-46b1-8360-3a78b78059ca",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcdc6b0-0de6-4868-962d-5503fd7cfc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3e8e81-d4ff-48bd-bc71-fce36c4ee6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c379ec-21ee-43c4-9e97-481206d51889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ae1a23-1db1-4d65-8b1d-4c16060e0440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9db731-26ed-4505-bbbe-076d8b35e368",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b802c7-165a-4367-a780-480e22fb23c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6682fc18-1c2d-41ca-a667-1e1b6c7339cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54d60b7-752f-4e85-81f1-db3d495f5f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77be76f-d364-4f02-9645-22a9d693032f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b3989f-3303-4e93-95a1-5927097f931c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c1c8c2-a1a8-43a0-8b40-7e02692e294b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6e1aab-f7a1-49de-82e4-5308efc5c905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c9f465-5ed3-4c6f-bf83-1711de7e36d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf68501-33eb-40c0-9386-b04bbe82ee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cd4aa1-8b24-484f-8e54-6c9c09d0d5a8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e85f3a-f823-4a33-9aff-254be245fae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ee26d5-740c-4e9e-9806-f0de5e95c68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c09fe36-9066-4dd4-ac0b-d27ec7738b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b55eafef-5da6-434f-83c0-b1b86484ad2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52112e21-3018-456b-af3d-148d79af43c0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dd8934-a997-476a-a69d-7b2c70a9c78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55a59cc1-dacd-4524-9130-1486b4747c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e73b1e8-e5d1-494b-a458-6150ecb1f89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7773cb9b-d3c8-4534-bbb7-2b4bb79ae207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c658c05a-4d78-498c-946b-9127aa418672",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f3bb47-5797-47a0-af36-8c41d7c393cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d6c6db-de6b-41df-81eb-3cada7f043cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8081fb73-e578-4d08-9142-5be22723a85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da707362-0ea3-41a5-93e7-64c2a719e7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f219383-f5e5-45eb-bfbe-256d56468122",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c9d33c-e389-428a-83fa-5d52b46d56b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f059be15-4692-4952-acd9-11aa05abdfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43be0ce5-1abf-4720-ae15-a0afb01629d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f82ff957-6755-4107-8fa0-390cd17c5423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf80acf-9c6b-46da-bd36-b0205008b92d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940dc2b0-2b35-4d88-9082-44d56e92490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3999e5-def6-4abd-a2f1-f6d1f424c04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2189a256-04a5-4c6e-9f48-8165f55cbf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb0502b-a6f7-4b46-9ca8-a55a38baa8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636e10e9-58a1-4956-806f-fafe1dfb7c06",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e95f49-2374-4d8e-a454-7b8e2e8a1e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054586c1-e7ab-4597-a093-442035a49ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15506362-40fc-4746-b2d5-591395fa0349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5a96b1-21db-4edd-b7df-deba9d564394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d520d3-878f-46f7-adf4-c845d542ce86",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fd9622-e551-433b-a866-3c5b6c20328c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9c3732-425c-45ad-8e52-b33c8100f45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f38ff53-ed63-4cf4-a5f6-085c31a92e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6b4b8e-6a98-4935-90ec-381f91e41a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d13783-7d39-43fb-ad56-d31eb11d5187",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0613af1-a0da-4925-9f55-4c472c3dbcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9770cfd-8426-4fc6-8b94-b80f56384e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eba23c7-d642-4fd5-882d-9900676c504a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "32bf3e48-502a-44ec-9cf5-b21ca4759741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af64b536-bbba-4b90-9996-40c03689ccf5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2ca017-975b-40b7-bb2d-496ad8a2bb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4faee2e-a0fe-48e4-9875-b743ef541d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf0a9d3-48e3-4a44-9e0e-694658f82214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "728cb862-604a-44e5-9db0-9843d5c4ba08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8daadb9b-1f4e-4cff-8ffd-b9cfc0e72e16",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44350df1-2384-4d28-bb17-844d8ca8833a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cc874c-16fa-4bc2-b363-dc1efbe2da58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b1a2da-ad4a-4d92-ab13-0fb0489a268e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f91281-0afe-4322-9cc3-138a4bcaf6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa57d69-3096-495c-a0de-6447c04416b5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3ba099-1c60-4919-b38f-ac483cf69064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be38095-2650-4ff1-a916-2daf3bf9b9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28372a1-c756-45ad-a446-77288b75e159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20afcdfc-86b8-4809-aa03-db968a185420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3cf2a4-52a5-43f5-9635-bd5aaee83b4c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e083a38d-2668-4b80-9453-c8b42453dd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c51606d-b506-4563-a3e4-bcac944c2c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf210426-688f-48d5-aac3-84dd23c92d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a74d28b-f8da-4551-99e0-e28abe65a15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9bfe65-f37f-42db-86ca-e61798166cb9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed06723e-2c32-4ee7-845e-3d1289d0ba9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f3a4ff-7fbf-4f87-89ad-097456d886bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ac86a4-5f35-4949-b33c-2967895bc600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b6b992-963d-49b3-abb1-b0f348165167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6094f3bb-c38c-486a-8941-8c12a6ee8f51",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aba434-93c3-46a5-bfff-1c1ea85ade38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74b3ef0-184a-4bec-a5ca-f29a11fe835d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf43fc2-838f-4e02-9727-e8ce55838e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38604d9b-4cf5-4214-b898-11a9f50f4581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e68ad56-a426-4d3b-ac75-c851d090c951",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b25442-8c2e-45d6-bf93-407449728ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5889ebdf-3bcf-4081-a49d-de9858a01dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654d7173-437c-46c3-b996-154096ccc000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6b6e9f-5b35-4006-84bc-bd35f2b6e91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d820b5-8c4c-4a19-8867-eff1c0429bde",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb345330-e66d-4c30-b00e-701e5ef96034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51971c6b-5a88-4b7f-b6ba-5d32be5fd360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ec690f-a970-4c13-af9b-e0dc8dc23737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8744b8-cf28-424b-aa38-aa645e404896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4851796c-fb48-4778-bc7b-8a6800d9909e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df91f5bc-ac9f-4094-9dd8-2bbe1ac2a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbf1e4f-6f6d-42b5-8721-180532d31c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e215be4-e7d4-4185-8722-48efbcad98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "168e84eb-2e73-48c3-9e11-d58a77ce5c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603af634-6c2f-49f9-afdf-12f12786bdde",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaee0f7-b91a-4264-8e50-878ed2dfd4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a54c62d-f6e0-419f-9175-014730e73433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee8b44b-39cf-4728-a8e2-6942ecb212d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7abff9df-88a4-4e94-9591-87216469ba72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45301c67-8192-48fe-975b-7d86d5694112",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1aa42b3-b25d-497f-950d-44259d8096bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73fcf77-4bc6-4a68-b1a8-cbb0e6cfe5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc5d4f3-b60f-4e5f-a87d-f6e05c3451be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfdf8fc-e44c-42f9-b020-0876912832a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2686ead5-df08-4af1-8240-90613e4a372f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908824f7-6274-441b-a26d-beadd9225a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461a9f9c-fd71-4d9c-a8d4-63a2713ce3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b51754-662a-443d-aba0-961b40883713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f988390d-474a-42ee-a6eb-f6bdc6a2e47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1eb586-1e68-4b86-90c4-ca40d4f9303e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653d6781-2386-4d6a-b704-a8b5e36fc8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e78e64-5ebd-4241-9715-ebcbecbc18e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e200144-a889-4948-b264-a4048ec8c267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5316c62a-163d-440f-a1ba-d17eb564fa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c004a3a9-837d-49e7-b241-67fac4d2a300",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901222fe-26d1-4fe6-8358-44fa2de4a8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720267be-2d59-450f-8950-64c9c7a516f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d31bea4-c2b2-4fac-9a3a-a32518e8fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e64c5631-a265-4ac5-9b6c-025fa1ffe2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ac8902-d99a-4fac-a34c-1c9d6545a19c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a997fc9-33d8-4892-b394-d53e6d24dec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe1f8b9-adad-4df1-9f58-c71815654817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ed6338-3218-454f-951a-7b46ed923416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf2df52-acd8-4dee-81df-7b3b710dc24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f375ae75-d5df-4030-959a-d18b166a1607",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b225db37-593d-4677-a477-6493ed3ae93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c38c2c3-89ee-4d3e-82c6-fed0d318594e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f3be9f-e40e-4ec2-ba3c-bb3dff5838df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b62941e-f9cc-4bdb-8c04-37eacee5a32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb60915-696e-41bf-a2ef-06a7bb1aec73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db5949f-085a-447b-9e1b-8d159ab4c09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4aca90-62b3-4222-9b98-cb0cde88099c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0c40f5-20fe-45e1-a6ff-c0d827eb0382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae622529-da30-46e4-868f-daf2ed513ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1113f9e8-9745-4149-9812-ee1a4bdd9fd6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c71281-0701-4d0b-aaa6-139c9ea5f924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6061349-376c-4313-94ee-2fbeef4458fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0078eb2-8213-46fe-bb6a-e3ac7c0e1603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8e8a1e-9881-4c61-abdc-18c9b9d881ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255f8d44-e56d-40fb-916d-936a08e69f8d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d19abdf-634d-4031-b04f-28b6fef54670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a5a41b-c6c5-4ab2-b744-720063d1c4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff43620-62b7-4f3c-a1aa-1f399f952120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3528e5eb-cfe6-4126-abd2-0686b057c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52f3eb3-c9bd-479d-9a26-9e7f923f9fb9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b53c452-ab7c-4be2-9876-8cb48f2b0313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775ad285-8e0b-4755-9b03-72cbeb3dac01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dad70a-fd3f-492d-89b7-3db60d049033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed451210-ed6a-48d0-9cda-8163b17b18c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee698a9-601f-40db-bad1-2ad31abd1c50",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf7d0df-f4ce-4591-8c60-5c80aa8b144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f188a6fb-2577-4e22-b290-69d3c90b42e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0948008-2d8f-4222-abd5-9c4e5d2b8f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d970cf0f-195d-4e5d-815c-33682d551778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0542b7-6c50-4aae-af2c-2947e0ed1147",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3659d5-f2af-475c-b48f-e270f87a5a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab558d95-a93e-4466-93d7-432abcb4a503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55771b25-3058-4c9e-89da-dda66e94e326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50dac5c5-1f3a-4126-be18-70e407cc7ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e854e4dc-7c71-4b97-af31-9fd684633928",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac8b298-22bd-4ef5-9cfa-a207a5254d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe746b3b-ec18-4a8b-bd6d-7bd337a5019c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8107a277-11e9-4b54-96d5-a1ec46ed10b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba93543f-7289-492f-a991-2e7aaefae6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e069baac-9749-4805-90e1-ba76ad9edbf8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c024a2cc-2008-42f3-afdf-1967994f4e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b859a7-68e6-4e95-8166-148561ba11cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abd78ab-43b6-4c7a-9a35-fe870042e1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "985be0a5-ca24-4cc0-a182-4d0f7252e922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67669ea-d812-48a1-abe3-81dcbdc241a3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b775bb28-4a50-4191-99fc-a7194833afc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed67ffcc-c4e2-47e3-a8b5-87a728448456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0898fac8-176e-4ec8-93e5-3b5833e6d914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc57747-da23-4d46-998f-c7fe1558f0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca21795-1451-4daa-a5bd-3d13e44b33e5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642b21ff-4d89-4123-aeaa-c39301ae8308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e0d0c9-f725-407e-9161-1de7f54e6263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c60de92-10da-4284-98de-f8868d916b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3766b0-4ff1-440c-9024-7eb594af5441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa87f30f-0a85-4e75-8c87-28739a53d731",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024ed292-9059-44d0-a230-73be434f5a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947792b1-d33a-4413-8c6e-b4c78a273d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d301951-f551-4f67-b8e9-1baaeca01037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a4cda4-646e-4710-9914-e77b70d20d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235c73fb-8c43-4d48-8b84-728a5c62163c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bb2080-3cc0-4d69-b2df-688b636cc92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51453d71-fd8e-4519-a736-b5c545879162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03be6107-339c-4264-adac-4e1324faee0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a513fc4-6493-4021-8151-7cce63faa640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc9263e-2d53-4897-b3f8-9d93065c1356",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c13b519-897b-4ec3-ad62-1969336cf9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f4b523-0066-45a3-a799-d4896d6d6314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee3fdd7-113f-413a-8791-ee6f98096487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a162c32c-4d16-4c65-8f3d-288942479412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ada8ade-d667-41a4-b0a2-2e1f1dbb3555",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0435e56a-2a61-408f-be2f-ce0f2b99a54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a533d6f-6e40-472b-a784-8620df78814f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf23dc6-d355-43b5-95dd-51843806a4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a87009-5a1c-478c-ad49-21e471d03fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1f6990-14a4-4ea2-9623-75a41463b3f4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4effbfe-ae19-4166-b16c-bf5a8b8fcc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a275b24-842a-42b1-83f2-ed3423959597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbc5639-34db-4c28-a924-939d72c58456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c967cc3-a8de-41ba-924b-f079e279fa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2507c4-cbf6-44dc-ade8-11de4bf9951b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2a553a-bb75-45ed-a4fe-8fdadeca2d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4a5f35-ea58-4bbc-aa5f-e1391f352da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed72d3d9-2cec-4a47-9e23-948ea727817e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fea10de5-f2ae-4c6d-b5f0-dd008a09ab77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1946657d-6dcd-4824-8451-3400ca5bed1e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433afc72-8f9d-4832-b02f-2d7602c0159f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ce8efc-3d35-4112-9505-fea39ff65d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64e0b3a-6f6e-4942-88ff-251e2a6500f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d396b840-610e-41fe-b055-f9d96e1667ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3915fbc-a34c-42eb-840c-3c63d104c6d4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e02cb7b-4ffb-4b73-8215-53b690e3dcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07707a25-6ec0-417e-b944-b975dde039d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93b84f2-4a8c-4306-8cb0-057039773ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f60ccd7-c564-4fd3-bec1-142594589fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060097de-8742-48c1-8217-45748a45e323",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cd43f5-e803-4c19-b5bf-ff2da55819c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c2ade2-7188-434b-bf23-434172f3d7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f943c12-8adc-45bb-97b7-382874133916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0b8a69-2b02-474f-99d9-d6f1f949d2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89d9e62-f64f-4e6f-a3e6-249a21d23ef6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5664596e-9955-43c8-bf14-b70627f92e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ee3acc-3722-41c5-9d54-5e2c4e2d218a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e58100c-4510-4051-8c57-352b06162dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "170b2568-9b92-4309-b898-92ce5f62cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a723959-0932-4820-82cf-9675c9cad928",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a270381b-f36a-412d-89bb-76b25e5be24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f1b295-6ed7-448e-babd-516f9fba8c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a910da-0f79-4fbe-8165-71ebb65a6dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83550b13-33a2-4c25-bfbe-555932ddbd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbacb14-16e8-4ad3-8282-def2975ac81c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a448e03-50cf-4974-9091-351b9dfe4b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd19de5-2969-459e-9666-84660e35d0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd6269e-7d71-404a-ae94-fd1de711626d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7805a49-29e9-4304-b27d-b3711a64f919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94abd55-31d2-4697-8bc7-833f35cb8656",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56194ea0-c13a-4c38-ae08-d8622b493f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db553293-cd0e-41ad-af2a-e50a25db66fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b51f456-563e-4184-9644-ef29ce16a3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eeb5ef8-32ac-4bd1-96d1-907695a7114c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823d8824-b2c8-4553-90b6-8b9142a2e51d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce11c42-b1db-4558-a571-58e7d62da00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f67f579-82f2-48e8-b2b3-002d01faca7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3d96f0-59dd-4ab1-84f6-8c8551e0187c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8be159a3-e7c0-4c86-a100-351a4b856f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9bed8d-2799-43b1-a781-a572575c22d9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c19902-3573-467e-9b5e-ef0d01dcb850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f097db-afcc-4049-8676-704043523d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d25eb8-fbf9-4e45-bf7e-8c45228c2cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc6c016-3a3e-4232-8a5e-199998c5731d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31ae204-eaf0-4844-b097-638a826a06cd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6ec727-6685-451c-9dd3-5e3c44250e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78065dd4-c494-427e-b53f-afd7fc6ab6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce5177c-9d70-4af3-b38d-216aef02df69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e06efbd-8d07-4e0d-8066-860d2d111900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cefd52-00d4-43e7-87d7-e414446898a2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5229d7dc-e30b-4432-84b7-a0ca4132f1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6ca3c4-b8f1-42a0-a0ab-849d3e872131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e2df33-981a-4085-88df-7a4d9891fd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57da1856-06cc-44ec-aa29-910b7ddd294c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d28bd6-e7c6-42b2-9d2e-da057a8a94c0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c1dd1e-3b86-4131-b9b2-ac755384ef54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fc191c-5f18-4cbc-8c7f-be3d3ef24a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a09b8ec-339e-4bf8-a974-9e20d5dc4f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5614e4-1475-4aea-98e9-50f42ed7c3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19a4b5b-fd8d-4afd-8d90-e53fd05fc2dd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3aead31-1bd1-4cd1-897d-2b68277bc5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f63d0d3-ce03-4c5b-bd22-01a3e6686902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb78161c-6034-44c1-a196-6f68c7350cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a452f73a-8c31-4c14-9e3b-7beb62d9a109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03291ca7-0af9-4f26-9e87-5042a911812f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1de21c8-4880-416a-ae83-fa4eea5ce35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56f1366-f75c-45c7-81b1-97ceaa6b2c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105ab7aa-d8e4-4bb5-9087-ae5c29a117cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5c735a-0308-406c-b47e-f1dcde4d79c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c7870d-a55c-4811-9d1b-911c68d7fe8e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd03942-a2fb-4255-bc47-0e372a1d7917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a1d021-995a-44fa-86bd-e8e10db3bbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a4635-5895-4bb2-8458-feecfb910ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "558ca435-559f-408a-8ee1-ca0179fd3388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcd37cb-90d8-49fd-80f7-63f60336963a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e57ebe-856b-48da-ab5e-8f30c45072e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b2bb01-9052-499a-99ec-00e793c34a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a596066-b645-4b65-a34c-91dc36ceaa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebde2589-751f-43eb-9ab0-edd1a31ffffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388af10e-337a-40a3-88d9-782c01a9a348",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bf3057-c9b1-4f4b-91b5-6d0ded10557c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce6d98a-3e95-44b6-bb1a-d769b0906be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8be4b87-6539-4367-9bf6-84494caf33b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aca12e1b-74e9-4ef7-955a-658d21dd879e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f363d6-8e14-4ea4-824d-fa951bf2e155",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbf5b40-284d-4ef1-8c3e-809b0b96733e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed97e4c7-863c-4a01-bed6-faf5cc213b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16df51a-15d1-48ed-a205-e822b7fef0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "80115a3b-a59d-45cc-8fa8-d729954e3e53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d2ac3c55-9061-426b-93b7-f2252eb26237",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5414227-ba65-40e7-bc97-f66a50e8ea0f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dd6a79-9e66-41f1-a56d-6067e198979a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "791d5689-92e9-46e7-8f35-4c72baeb41f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424dff56-5dea-4e34-8068-7c4fe05058c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e08143e-ca98-4eea-8d3f-ef70b0af004d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b94d9fb3-b641-4d1f-b182-d5f1179c4879",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ac95846-b2e4-4f71-b180-6e70bfdba704"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9a30380-de98-40fa-bc07-51f85d39c3dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "373a07a7-8076-4249-8e3e-ed20da3ae3f3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60cf3b72-50de-4369-915c-a2607569fd47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0895ecb7-bf5a-4f7d-b721-140481676c65"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c702eced-cb93-4f30-a2b3-5f954f2b4543",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d4a396d-fb12-4736-8432-8d9598af026e"
                }
              }
            ]
          },
          {
            "id": "c4507bda-6946-43b9-b9f3-e0c035e71090",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef501a17-86a6-499b-b180-80a168222938",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e6dbfbf8-51c4-4411-9652-5fb6cdd10023",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083b9011-9588-4597-a816-13e203a27207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "846c9461-56e0-4583-840e-2fb072c61638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e82b5-4b6f-40e8-9bcf-29cc96c23b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b45155-75fb-4149-b533-f662b90535f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2537eb7b-aece-44d4-9b24-015e2e526cb5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f238e86d-55e4-4e0d-a1a2-a8a731b2f039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad318664-5d98-4231-85fe-17f671d89a89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c10ed4f-9b8d-405d-a6e5-d6a951fd74a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a02cb6d-9388-4734-8c2f-56a09759f377"
                    }
                  }
                ]
              },
              {
                "id": "c92a4dab-df15-47f3-bdc0-48fa4e0d9db5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d20de5e0-cff8-43c0-8429-da55c48c5106",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "371f86d3-081a-4700-9281-84452faeefd4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0205dbe1-ff43-47a5-89ee-b593a7130207",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b153ea67-ff76-49e6-a8fa-aabde95e4308"
                    }
                  }
                ]
              },
              {
                "id": "f6763fb4-adfe-4e8b-8541-e771fb5e5e48",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ec03e5b-b039-417b-9637-93d65a00ece9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8197c5fd-e218-4f33-b438-6d44a1647b11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10b135da-2234-4ff9-8bc8-f8952343b4c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08fc80c3-5c56-475c-9235-86f55f9d228b"
                    }
                  }
                ]
              },
              {
                "id": "e75ab60b-793e-403c-8160-cff47f99c6c1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "960466e9-a8fc-4be5-81ad-4dadb7e63b60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfc671d7-7de5-4f75-9cd7-f783289ca292"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f1849b4-2a40-4d85-b516-cc16276a44da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c7111a53-fa97-4a22-bb80-64139e7d47fb"
                    }
                  }
                ]
              },
              {
                "id": "53bc591b-4ec2-467b-a4df-c5e214aee56e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f3ca7f2-0028-4ffe-9aea-607fc6f34baa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9a931ec-1180-4323-9557-fff570930325"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc7489a9-6194-4ecb-9004-94abc49c9dc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "88cca2d2-3ed2-48f0-ba7e-141c4b7e96ac"
                    }
                  }
                ]
              },
              {
                "id": "ab204e8d-f4d5-48fb-982f-6e84348df4ff",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf500cb5-6297-4b22-bea5-74699d36aabc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51883faf-a2c6-4183-ae51-f0b1221f66df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a764ec16-0c44-40b0-8e8d-45aea1a9edb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "47f833ea-1c3a-4aba-ba09-92a8daa5ea0c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8133146f-1061-4465-ba9b-5ffee24d0655",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e550b226-7e2f-4f1b-9602-066dd0593a57"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "36f87683-bba6-456a-8c09-312771c09c8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d5d5efb-df01-4ca1-9d67-be4341a752b8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "153a515e-086c-445d-b1b3-1b7a60ddd8e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d2376e37-9886-46ff-8025-d75736d5c66f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "805132a1-0888-43d9-8ff3-6e25f5025a44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bd992d5-d260-4c05-a7cc-dc1ece1ab970"
            }
          }
        ]
      },
      {
        "id": "28591e3f-c18a-4d3a-a65e-d346f7582156",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "41e61333-994f-4806-bd8e-62ef07c48756",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bf8f1b4-fbc5-4abe-8337-751de7eed2d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c73ab07f-5210-42d7-8573-3b618a894693",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634ae667-cda7-4adc-8c5a-c6b717c74050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e077020-2887-49b4-adae-e21a687bd844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9b080c-9bc1-4b10-9ec4-eb0167b47d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ea6444-5dc2-461e-92f1-4c842c3f598a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75e2fd2-1b84-4b8a-a024-c908c9b121cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eefa07-7113-4fc6-a318-c89204a5faa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf09d2c4-f945-49f6-b906-425a9269705a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8739eff-177c-42fb-b10c-17f6a47480b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "633348f0-a97d-47cf-a575-4b86cf4ab9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2236280d-dfef-425a-9e34-cedc937a8522",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0130d46-5401-4420-84e8-bc6bd3273868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dabba6-83bf-4e4c-87f2-ce96977f1aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c6ebae-61c4-4478-b783-6f6bc7f27d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe74dd2-a828-4fbb-b11d-7980d48c7393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8547d19f-384f-449d-a340-21d808d46796",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380c08a2-e6c5-4b2e-9763-b81b3c59a935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18752d69-986d-495e-adf8-2a771836329b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dbd423-638e-485a-82a0-01b99c8fdf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6feb902c-b47e-4071-8d81-b3acbcaa03ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6947edea-40b4-4c39-bd30-c439e7f4fb3f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9227b10-4d56-40eb-8b4b-85b110c0267d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc21cb3f-3f5e-4161-9964-9fd1b4f8fa1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4277cb89-30d0-40ac-922a-08bf424a8512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ede4538b-f1d8-449c-8c35-4a87a75b63f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ef77e9-b642-4a90-9fdf-86ff5d65be95",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ba6154-9837-4154-9ba5-5364e53d630d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f9e0a3-46e8-4cf9-871e-73d058dba565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230a5f63-6161-4830-857f-13ffa26d85bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f760b229-675e-435a-9ce5-87891ec04dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b06d5c8-a196-4dc9-b5b4-98b29a9bbc2c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d764c9-305b-4c73-9777-f476f6851027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06fec6b-739b-436b-8743-23abab80e913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d012da-6e1f-4382-b5b6-7ab7249a2076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e5da2d-2210-4bc3-8ed2-14f646917d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632a9546-a03e-478c-a807-ace00282af5c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeb85e7-7e98-4ddd-97de-ee311490e76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08374479-6522-4391-a19b-c6c42e6c4b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcda61a-eeba-4882-812e-cee53bf50b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac33d672-e6de-4c1a-8bcf-d7cc63a2af8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b008d73b-f437-4ea4-814e-261ca09759cd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143da3ca-6dae-4e79-bf46-e5dd6d1af743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48d1d91-d5e6-4919-90bb-ed8a56d00da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c5b098-7218-475d-a9a3-e9e4534cafe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd00807-94d5-49e9-aceb-f58887cb6571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcee4654-fbde-4109-b0ab-de34a3ba28cc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6972e1a9-5074-4e1b-b3bd-37358b8b67a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8141910-b3e3-4e17-8934-1b86ffa6b7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c16ead-ebd5-4ec3-a4d1-b211b2de3e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb96a4a-13d3-45dc-bc05-32427983b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c237b43-838d-4d26-a22e-6fe44d14bff8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12273f1-f375-4274-b080-f3ac6a848d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6f1284-c345-443e-8cce-4683d943ab02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340e8a1d-e9ba-4c70-9532-5ba94c9d7761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c9d008-4a60-46c3-b76d-0bca8af22670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe24ab4-4cc3-4fbb-9de8-8ca58f6c0b3c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033f6b47-5567-4c8d-8281-15d212449796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932af39d-4ee9-46d0-a253-5b473535f55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ff7f19-b84a-48e5-82cd-b30751ecc4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40ac6e9d-2c2a-43f5-8be2-3c49a2f274fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81083bc-30af-41c1-9028-e40231b43f00",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b5778c-931e-4b56-84b2-bbb8e50942bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7635d48-0ba6-4e4b-84de-a8eccdc40b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dca3c73-9fcd-42f0-83ad-ce51b0326fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfacf048-2eee-4e42-ac25-f9bc68a8958f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e922370c-d570-4c85-b175-67a3a89bbcd9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34147e7a-ef87-4f1b-ab8d-37098a2ddc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d691e0-08d6-4133-beb2-6770c80c9e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da4c764-4289-4a29-adb6-cf83cf1d5b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9fa5aa3-6502-4903-b485-e6812779562c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eafbc2-955d-4940-89fa-0a4eb918a63f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b081a17e-d71f-41af-aa1f-33a8fe522d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0fb48e-be26-44db-bc56-85017da9eab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14a9633-c002-41c4-9f6d-7def1cf397f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "27e75608-3266-4b7e-b048-b022440de509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdb02e8-5741-4586-ae6e-4927bf9bf8ad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8601f6-a364-4d24-988c-105a54720d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a70f55-2205-4947-8424-23ce8e9e598a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429ba595-96a2-4d73-a1de-923b5522d742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99192927-64fc-4670-9757-309f303fdd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dab181-5954-47b6-9858-51aa82f4dde9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70895ff0-b263-43e2-ad0e-b4167896b6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfd5993-1b18-4293-b032-2b28027e6208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa19c9e-301a-479e-bef4-659abaf7e4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "00421de2-30ac-4863-9ed6-dcb508a4f0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b877c10-c4b1-41c6-a7e6-ac7c7841cf72",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90919951-d767-4b76-ad17-48a4fc38f67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3667764-72c5-47a4-8b3d-76acf269e03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca67b80-73ae-4b30-91e9-2d62d84f1bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7988fa53-78e0-49ae-b4bb-95f21a4439ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92359e50-9cb9-44f3-9f63-241e33b42c53",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9556bb89-c10c-4789-a7f8-5cd7238c6779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fa5260-143c-408e-b68b-87d26196ca16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ac114b-27d5-4554-91ff-cd5c1871c45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d91ac706-13d6-4137-bc82-9a8b35e26407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4669cea1-b495-4240-baf5-c82d5a03ce98",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925ecb08-b84b-4e4a-8891-6bbf583230c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8654dfc5-e938-4b15-9097-01f31e230bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d035ac-37ae-4402-928a-e76d2636f41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1347e8f-2dc8-4182-9452-e76e0a3df161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a82fd91-1edc-4c5e-a406-cfcbccf9d97e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ddec71-76e9-4367-9945-4a41171ab47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed00f72-3bc7-4df1-ba58-15737d71c573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cbbcea-6eed-40a6-a46b-b6f39c85b1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77e44b3-d010-4d10-8d48-51dbd064a7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262d7401-c409-4f7e-aaf9-b069229175a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ba9caa-c995-4445-af59-0b5fbd0b4ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ead4d55-a8b1-4c8c-94d1-82639ba3bbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a07dfb9-1059-4418-b8f9-e386dd7eee12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "167ca7a6-c4b6-4422-b732-d223c8eb07e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce176a1-f2b3-4b9f-a3d1-9129799e7559",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fca6c2-9aad-4854-95f2-70d975f59d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e342b651-2280-4a59-8aa6-742d528e4cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27739477-bd84-45c5-b669-d7eda0374779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eccc6c1-c176-4c37-a174-23e4bb3463f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a315afb0-c184-4e1f-ab88-46d881309fda",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa70e30-efe4-4db2-9cbd-aeb43f97f105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83989f04-6561-4fc2-9954-dd245ef2ca08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59113c35-aa4f-448d-b875-867b61251d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb8a0a9d-570e-444a-b797-d15eb75cee43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6688ffa5-9d18-44ca-a8c3-d2c20faa192b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d8d8ee-3045-406e-a786-548c9c1561f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4e683b-6c9c-4a30-b783-0aa522c15914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca774a9-a210-425d-ae7d-2f854302b416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd3a5a2-c584-48e9-a850-3fb2be702cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7c4d8b-f954-4e27-9507-c2ffbd665d9f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87be10f4-d415-48a7-95d0-1bd2b217a614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76c30e5-c73f-4d31-8ba1-24c3172595fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8c9041-e945-478f-bf0b-4523ab56e08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50ef14ca-81c3-4e8e-b22b-e0fe2b45db18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bcb8da-513b-439a-83b7-f60a37014031",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d9ffdd-b297-4103-bdd1-7cb5f44d3f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb65cc9-3fb3-458c-a271-62474de9e9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addaa954-44cc-49ea-973d-3273fd8daa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2528814c-bf19-4094-a4ec-e19e97ee9c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef33498-1300-4f25-949a-29a4ffca0a9b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036adccd-32f4-45a9-854f-ac9534e5d396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cac4e8-130f-4049-8baa-d5b42bea940c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55360f50-f47f-4515-bcd1-e063712286ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e335e8-2830-430f-a0cf-de460130225c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fdf4d4-e3a8-4f0e-9e92-9146730d87e9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5351071-8cc4-49b0-8169-7c926ff5281e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ef5a62-e10f-4c93-9058-3757e004ebe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174e6213-89c4-49ce-b8b9-6b94151308ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2635f3ed-4e2a-4d1f-9242-23b76947d9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7c4660-2a31-43e1-84f5-ba3eeda3b474",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af0521c-eb44-44ac-8131-2fab80cb2779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e70c8ee-a3a7-448f-aa2c-3e26830d2fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7a95ec-f46d-4661-9a66-4a67eef98003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2597ca3e-92fa-4797-8833-aecd97a4e314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f4938b-0661-4000-9633-f4d3622f1c2c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50be937b-7030-4cc5-b8f3-7fbdc27304ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2784355e-5a03-4240-ad3e-5d06b03703fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d303edd-ceae-49de-b659-575d266cf07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "093231e5-bb7b-486a-84c6-c2972095458a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61b0179-da01-4b4e-9b17-6f1fd7b747c9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907beb76-f83b-4f23-ba27-5678f78e4396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5926231c-c0fe-4637-b694-0d8c92ea329b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c334d796-7774-4757-a2bb-f2c90b97a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9a6f70-2de0-44f3-aa54-51c0938fab9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc7403d-31a6-47e0-9a47-5da816f4f480",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b86257-7d07-43cc-aff3-1098852745b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70909aaf-50b6-4e48-a5d2-2c11966612a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f031f0-e1fd-462f-b994-d72f3fde134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "643045c8-6aeb-4f8b-a331-400d454f2f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbd3d11-357c-4033-bb06-9c6138e3dece",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77ae04d-3bf8-46c3-ae9f-9a548bfd8ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7638775f-6e10-486c-8f7f-d0e068ce28de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a0e6d5-36fb-4330-9c0f-caa118e7488d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5d2d02-0865-4983-afe8-c84b34405aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa8422b-9f02-4f6b-b766-1d7e60f2ee98",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ebb520-48c2-471c-9b85-01f215b612ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b7bb41-bbd5-4b5d-aa2f-5161dad7c4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ba6bed-37c4-4856-9bcf-ed1cd31fe02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5aa8ea-a388-46d7-8398-d43a3de017ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc02710-8db3-4a29-bc57-e7f24f811e0e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b00f7fe-777a-48f4-aef4-e949b92ffda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d05d119-e9c8-44a3-9e52-db33e64c5933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cdb53f-a2c2-4f32-baef-6a5322f1d452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61dfb8a8-48e1-4784-8814-34de7d38c238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815491c9-afcc-4a25-8877-2d2a58929665",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e86c31-ea64-400c-8e41-d3bb6e291da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b26dee1-f136-4e68-8ad3-4ba7aac48cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcc0ef9-7324-40c7-b509-869069a25d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "675e90a7-785f-4525-af78-ef9ac53742e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a71bf35-2659-4566-b676-8f8f665e715f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fe75908-f4a7-43c0-a952-df53347418b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad21bd6-c8e6-459f-97ff-f332a8454244",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9b884bf2-161f-4a40-8554-853694f6a8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ab2182-0f6b-4226-8a49-4c0f67355d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f3a0ae5-1e94-4cfd-bdc2-3274579b6195"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20747b4f-774e-411c-8923-5e5cbf0ff261",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51cf628b-797e-4682-ad5b-ffc95e8d43da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "123c33ec-c6f4-4038-a61e-0df229e2fdc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d10362da-b1ee-4854-bac2-50c315d34721"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc0e4d73-cad1-45ae-b7be-55bf2f86a905",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2fe81aa9-2a27-48aa-bd0f-e84773c27f9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24ba01f4-2ad5-4154-becd-b1761234d10d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cefa8cc7-2b40-42ea-b42a-f5438cd37be8"
            }
          }
        ]
      },
      {
        "id": "e779eaa0-3bdd-4dd1-be86-89cf72931f17",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "05100505-3341-4d59-b4b6-3c688f162cd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7dadc127-a0d1-4935-a7c0-c6fe92932070",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "122a012d-362b-4d6d-b88a-dd0360b69435",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e781437-d986-410e-92af-2bd881141c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac527028-95c5-4939-b049-7e07eb1405e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35a0eef-7220-4cae-bd53-e722506c117f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03abd198-6611-472f-b848-62884e0f33e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c053143-54d8-4722-92db-8809aa1c8192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86ccdb2-da03-4099-8dba-350b9f9a9b9c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2eea74-9082-4e8e-b01f-876ff07829cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19c47ab-3197-48de-90ad-c7bd26ee3c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9544b484-72ed-45e5-ab2f-c6e2de8304c9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77708edc-e2d2-4c65-8b9c-717719d6fd3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79f859b-cb64-4859-a2e1-de952f72c849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea7a53c-340a-4c48-9fa3-68736066dd05",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70462aa-fd27-4d4b-873d-e3928d8feee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1a44e6-5989-4690-9e76-5fda289609fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c53436-45b6-4b6e-8328-f69d172d2fef",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4055f511-82fa-4b9a-aff5-12a515bfc76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae018cd7-d9cd-42d5-a408-2ab7228f7be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89be03d7-ffc7-41e0-b344-9614e708e9dd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f3ae34-cef4-43c4-9039-2e71e0303bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c741934-9288-44c5-af39-14f41ecb1c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b225045-cad1-4da2-8134-878e1fa3d71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9b5caf-8c72-42b9-9145-a0eb346cb03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d1c090-490f-4b17-a887-049dc44023a7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f748fcad-412f-4f07-a5f9-5c4ea20b3d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65527191-15b2-405c-985c-89a51c95df2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a6fdab-6018-4f9f-9967-e7475381c969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717c0e9e-c4b6-4ef8-8738-f91ec6f6db5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42daea73-1cc8-433f-a323-870416049268",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a35d6f-0550-42bd-92c4-10ea18caabe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a130a5b4-4c72-4e18-9907-1b3a7259ed44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14108cde-dbab-44c0-b3a0-261821d1bd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055c4c7d-a931-47bb-a1a0-73228b80b5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf17ba74-96d9-474c-92ff-39b61653dab8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac492103-7e2a-4a6f-8b7f-45f602ef24f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dfaea05-14ba-4011-bf56-a1978666fb69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5be901-d916-4696-b84a-0929ab1cd482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee88d54-c877-45f1-b454-f31911f6df9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fcc5e1-d479-4190-8984-344649f5855f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5699834-ba37-4b7b-91ad-8be859563a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f9911d-c234-4ad1-8ef5-c4f79b513466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc33144-0eb0-47d8-a81d-2a50df1e113a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe63aa6-3e39-4c10-888f-8e7ce57ad615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d2c81b-0495-4cce-b616-472480f0e3b7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea50225e-0ed7-4f99-8fab-e0ff17b3c19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f16d4d7-1d6f-415a-a964-2827eac393f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65e08d6-f249-4a49-b7f5-60e683035eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cea4f1d-f52a-4f86-8c7f-d9f05a77b777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd373628-8c0d-4893-aa8f-0bb1cc5b2d22",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b276c3-570e-4003-a194-a3167b53f598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc5826f-6555-4e02-a616-62bb35888dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49228830-5469-479f-a21b-711ee8ff15c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216c9040-084c-4b6e-9616-85048c1a2929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569878df-95a3-4e5c-a1b6-73b5ad48554d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441e52c2-884f-4488-83ba-37a6aeed9969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5722a2-2c13-464c-9d59-046c59d65ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a2c60b-4fb1-4e0f-90c9-6855ecb90caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdf55da-553c-46ab-8f7c-cdbdbef6e3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0ef74a-6249-4cec-844a-f8ad345815a2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80e0c7a-3a7c-47d8-9cfc-8ff81940df82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ff52f4-5f58-475e-afd4-6b75df7b3d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb504afe-c0c8-4394-b0d1-03974c98348f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2789921-0bab-4015-a77c-53ac12a983b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dff380-4e76-47b4-80bc-6b34ed5bb18a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02a39df-b332-4f4a-a933-7d63df519531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4491770-8e25-4eae-9845-b8e167262665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1faf6cb8-21f1-4f89-97fe-77f18274db56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ef376e-f389-4547-9fb9-1571bba7a313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd674ae2-f8bc-471b-b962-2cd211631866",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00d8e3a-85a4-4f0a-8dfd-7335df33be44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faedb67d-9c8d-4ee3-97c1-93971525741c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556af63d-d161-4af4-9aa7-e47c32ccf9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a2911e-f411-4bf8-a606-21d346c8c71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c26aea-74d0-4f09-b5d6-9a3ee0d0f526",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147cb06f-ec5b-4afe-99c8-947515147e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b3bc51-9e3d-4356-b7b7-1ae09b1f08f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186b4a20-4ac7-4208-8390-768d2be34767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a1e09d-1694-4f34-8768-5a537fd68c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc179dc-94c7-4397-947e-d3a8167fd85b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5e2526-84d4-4408-a76f-0dc3884005d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9810c2b2-fb10-4886-97df-29c7b43c5146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e522018-f71d-47f7-acf4-c479b951c2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14c8d87-380e-4502-b538-e6e61554c7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dac4078-8bca-49d9-ae6f-179764daed7c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f0968f-97b3-48d4-bec6-7fc44b40ec9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f90483-7e06-4979-90fe-a14542859bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da2df88-d035-42b2-a393-3fcfc41d1ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d6066b-af62-4505-b489-a61af64b8648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f504aa5-62ed-4435-9459-a9e1bb639b80",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68b519a-fafb-4188-974c-3cd25f76ec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd218d72-b479-49c1-b3c5-9ff5fd6fdd35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1dfc13-bb68-49b8-b7b8-b2effd1db70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0a70b0-2fa8-41f5-abd2-f44de8eee490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a264812-f13e-49a3-968e-e42da63c62ce",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eca7b08-5e9f-4b2b-ae94-a0de927b2f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec84385-9567-4984-930d-805864abc7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8906e3-63fb-4cda-9b94-3c2a2b28e7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3942bde5-8750-4166-bb8f-180889c997e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52489bb9-03ae-4c52-9870-fab7cd01cfdf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abd10aa-251f-4dc2-8ac2-54a03b53d170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432b9c2d-b11f-43f9-b1a4-3d0e8288232c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced046c-67f8-4aff-87ac-aa7c78f07c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae50ce4-d372-41f6-b551-f92c0c8e1fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6ce5f6-aff9-4105-ad1a-2cb46121f471",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140f2c33-4aea-4ebd-ba96-cd59d9ff52ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6796d4-8a95-4a6b-aab5-98fb8a128315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c4c8c4-ea88-491d-8996-a48edb4c7506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7969962-b717-4173-b24a-cc814e742695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d77388e-3c60-46b6-8efd-7d4dc6e6875b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e439b2-a7d1-4974-8b83-c1d0f7bc40b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b03423-95da-460c-875d-722006195fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aacac9a-5764-402a-bdf9-d0a1ca437a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0038dc1d-463b-4bcb-9c35-ff496daed785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d7aa4-e8b4-4705-84d7-5a7f01cd90d8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7570aa-2421-40d6-a0cd-ef55b254bfb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0cba17c-fd70-40ea-ad3e-d9fc37b0c2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69adc89-defc-46e1-ba8e-42f72a820930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f87357-2e39-4b81-843d-4f6b6ecd45f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd6ebf4-d401-4576-ae25-8b3b4ec6dd6b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b79460-852e-41bd-ba3b-39738baf7930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc7ac61-c868-402e-8f25-0ee36d23aaf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dac8f7-bcfd-419e-9e6b-7d007e389409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28be9f3e-1cd8-45ff-921f-6f90da2f9173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9def69-b0cd-497e-bbe3-abfb66afa264",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30858d09-b1ea-4b75-b84d-8e144ac0267a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f61f2a0-7b78-4e95-a818-73c0aec87718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e4e70d-80a5-4d9e-ad4f-d109f88fe3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b02a15b-d324-4b98-83ed-1602398f0569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a722639-061a-4371-9962-cb061b681346",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fd9c92-2318-403c-b221-8e0f1d953911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca0969d-c842-43d3-a718-ae322cc2bbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbedd1f-4da2-466c-9f2b-ed28ffda0cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978b05c4-f8ae-4f1d-9430-4879dc5c4402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40dd673-2cd3-4cf3-88c9-a14044286def",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4f9c76-2d2e-4f66-b38e-9466bc02f57f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aaf5e35-f6a2-4723-8ac6-72b7335af305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b68cc9d-d420-495a-8728-51cf8a1006cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ffd898-72cc-4eef-a75d-42a7f35a2ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a81c73-5c54-44ea-a20e-1ce5249bebcf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7446ebc6-6d3b-4f41-9d4c-267ab7f5bf15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf3f4c7-2b3d-4cec-acc6-0f1581610397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa367d4-e725-457c-940c-65f5031c347e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82821470-db6c-4ab5-81b7-29ee8c4dc447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97d32bd-7a91-4aa6-a37d-5ed5f293ac33",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec27bec8-118e-472e-ad09-cf3b4126595e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc969e6-e931-461d-9e70-c2b362171848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48c02b4-2efd-44f8-abf2-1231f96e007d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1f17ae-fb86-4fe9-951e-cdaf70284213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bf7d05-452e-43c6-b77e-192e3eb35a2e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78aac27f-741b-42f1-ae87-8c8aea6e3f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e1bdf52-5bbe-4343-9c20-25b1de2e40c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922a3790-2d8a-4975-8133-7275e40e9f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6bb6f1-650c-49bb-9e74-c618f0d77b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a824944-20e4-4008-8e73-5c3886742d10",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e373b190-7f10-4eb5-b812-c261ff3ea872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b89fbcf-4ed2-4b8d-ad32-c33014a78cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a81af2d-242c-41c1-b3c1-7f018968f47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27280b9-951e-41ae-a8e7-13525aa14d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd4e0b1-d5d8-4c9c-bd35-20b906b22ed3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8f201a-c627-4716-a2f8-aa9c78c61d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5862ac63-ba4e-418b-b264-2d4db677d723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b131a1-755d-4d1d-ab6d-b4cff0138444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e391fbd-5a80-40b1-a785-e4dcf0e4b479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f41bbbc-b527-4605-a845-9ac547d07e63",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c5859-c156-4418-b42b-bb16054e32e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c5ec44-0948-4cd3-ac5c-f7d53d3bd87e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac368fc-b1dd-4c53-99fe-29d979d5566c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ff3cfe-b8e0-4fbc-af47-f02a174bfe1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35324db2-927a-44a7-9da5-2a1f9f1f5743",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75827bb5-df6a-4f62-ada7-c233cdf39f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffe5678-0ce8-4db3-9ee9-9029846f3583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b26fa65-915d-4ee9-89ed-47dea3966d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a2bf9a-508c-49d7-9b9c-8c7cca652ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fad7c42-f3dc-49b4-a9bf-5a494a071669",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96216171-0fb6-4916-ae45-be0bf0bf773d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b250449-4fbc-457d-b51c-fb40e69519e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65194dc-a35f-47ca-8afa-89d5f2e9794f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775f286e-d700-4a5b-b388-6267bccfec80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96acf0b-7fba-4f36-80f5-eb26cc7d3f11",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c234f00d-dbd9-482a-bff7-1b9b40529477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aeed9b2-833d-4941-bc2a-01284ae79613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174abfb3-33da-4b85-9542-3abce37a932e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3832d0b2-7516-4860-a260-3704b40ed6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff834a6d-c70f-40f0-bd97-f4d36e450d6c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e48aea1-a381-4437-8f5d-6ace0cbe25b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5950cf5-2540-4dcd-a5eb-8b801bbaf56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba885bd1-3167-485c-89f2-d2e80ec29013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702033c9-82ed-43f3-984a-27b8a7fce51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b909ad5d-e081-46c4-9a4e-84d82edcc459",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8aac8a-99da-4748-a6a4-747d12743dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748fbd80-80cc-43dd-9e4b-9932e44725a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9670bab-dd9c-481e-b7a9-d9a17178b462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58f95e3-6fe4-4ed0-bd80-65c25b3d3a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1d0780-0fd5-4582-9002-0b8c3019f555",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b86efc-54ba-4169-9bd4-fbd10244a018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610cb86f-3c40-44ac-9a01-7fe78b47a955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edec1f5-3aee-4e86-94c0-3e7af39d99b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aff5998-590b-4e24-8bd7-cdc14b566dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0028e6-765c-4bd9-8cda-9206700a5f2b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c193c5-1a31-4bdc-8727-cd3f04e45c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43d72da-482c-4668-8d13-fba3c00fa628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2da837-9a82-486d-9e0b-017c210f917f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226c47a9-b6fb-467f-ae80-23053875ad69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8aa06e-d975-4cb7-b00b-d63dc1b3a0f5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd2a86f-9301-4397-811b-1b0d8269058a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d4f6c5-761d-4fce-97c3-863bdc7e4d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db8c5e-2d25-4ac9-a70c-8350a308e29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5e7def-9969-4475-8e30-62065e23de6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa520a9-9cec-47c5-b796-a7638aa082f8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cc6cfe-b918-4b36-9851-45b17d9186af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5adb20-d029-4c59-8155-b57678a8f2c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4259989-6fdf-4108-9fcc-6c9c67db8427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdbbb93-972d-43d1-a310-91cec2432478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071213ee-038a-400f-a277-96eafc02bb83",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65636dc7-edf1-4e63-b10b-8f45c6cccf89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03aedbd-fa29-448e-b9b6-b85011d84311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6601f280-cd8f-4a75-9ffc-000b45df419f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72f7d0a-9e47-4dfb-9927-d293ca8eff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db9dbf3-07f9-4155-9273-3ff5cbc00427",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8736624-2468-4155-8a92-14d86fd7f5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a04cba8-5db2-40cb-9726-9de880670640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe1025a-ae1d-4f9b-bf48-24c969b75aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6d4cfd-e786-442c-a0f2-4d4be86577b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b925628b-0512-47f8-a2dc-08a64d969089",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37636f57-b653-4c62-a0d4-34abf4db0368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb889383-ba77-4d7c-a882-efd6bb32a206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c4f81e-2164-4927-97dd-9c48883c9a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7861213c-a516-477d-a4fd-2ae2f00bc7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcfcc21-7b60-4101-b730-d4d489d7f0ea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c3e320-f714-4791-89f5-2e853c3fd7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe91d7e-f209-4cf9-84e7-31ad54595574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d5aa21-2959-4276-b912-c0484fffb012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790294d6-645f-4d9a-b08c-877b530a2797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b0fec5-ba4c-40f1-853e-69e123b5e7df",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535e545f-fdf8-41e3-a412-242d7fcf0fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcbf6d8-2830-439e-940a-8aecb538e1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56ad312-a2a9-4e3e-b48a-f3704e4dfc87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dfb681-bb32-4afd-93ce-65476edcb48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5270c35-9d5e-4ff4-a507-f177825eba3d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f090fa0-d40a-4e79-9556-7ff42965be0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528c64ca-7c9c-47d6-825a-6dfcb235403b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14cad42-b97e-4d98-9107-9fcda4b4c7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83aab8d-cc73-4afc-8750-04fb47897cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac77d6-5de7-4d4f-9fc4-9435b2e6251a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a88a13-cffa-41a0-a909-b20a37a72ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafa155a-b091-4d87-a722-d638966a15c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3c34d7-5480-427d-af76-751095eaca53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23816a30-3adf-4fdb-b3dc-282fed8ea5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371f1e1b-14e9-4ef7-baa9-a17054d8f7b8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b5c394-9bdc-4ce7-873c-749596fd6512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f7e613-9413-4987-b4e4-1f800de1ef74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340be2a0-bd10-45be-a4ec-39c142ded119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa90623-37b5-4e11-abbb-b20d761b4587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f4dcb5-8b54-432a-955b-de51923aa8fe",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644b3257-82db-479d-9bc2-b91d2c9ba7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80044de6-114b-4501-83e4-7a01b45f130a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53599264-8591-474f-8e81-e3275b15cf15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f1762a-8392-4177-8783-562660b23b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8123c79-c268-4ee4-8958-034db786d7ca",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61d1938-e0ea-45e7-826a-c8f979d0a0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701467be-223d-47b4-81bf-d4ff67fd8193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed155b55-7619-4d18-8be6-c8f6e24a5b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc320dc7-e266-4fe8-b422-ed0787a4489f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363a15de-e998-4bcc-b551-cf933969301f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff000ee7-5c23-441d-a0f8-3cafbc47b275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3995697d-e223-438b-90c9-77dc31c73eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818f83b8-10cc-41a0-9ba1-e542a3aee53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5d5a0e-3555-438a-969d-61e5f34840fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc6431e-5cd0-4e72-b0d2-be41b84f8a1a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd2db6e-457d-4939-afa3-8f69338e077d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040adfe1-487f-40e4-99c4-c60ba0539b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e689aafb-ed52-4084-86b1-a77824c889d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4bbcab-5979-4976-98e7-77481110bfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d201c8f3-5505-4e78-a910-d85063f19e31",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125c4d45-255a-4997-bfa1-20fdbda94c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053ecf55-b6e9-4c06-b02e-1be6b47f7ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707e5b65-055c-4de1-a36f-95226415c96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37153cc2-f83f-4498-b791-02a2e9d847e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d426b994-3e0d-4210-8fd3-10a0785f9ba5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81de442-e78d-43ef-aaee-9e09df83777e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97909168-47ad-47b7-8bb2-e84069a61533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6967187-f2cb-47c1-bfb9-b0caed1db5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1865b7-9de6-4ddf-bb80-154a45323243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541ee7ab-3026-4dde-bda4-ba5f99639aca",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3258ebd-5889-4283-96d7-ea6d940815b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d91583-8601-4d07-9ee8-427f384c6a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3673e0d1-4af0-47e3-b480-4d8e17cd42e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be09ebc-ff9a-4e77-b4bc-0675971e4272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0eff75b-0d1d-4276-be78-930e33d29466",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0500638c-4d1f-44bf-a5ab-f874ccee3acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03cdbd34-fbec-4414-a440-dce812b12332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7c1fdc-64fb-4094-b613-428978935f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e695a13e-d722-4d15-a31f-54d5e5016043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614f952b-dbee-4075-8d0e-6a0faa0232df",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c221f749-cd69-43b3-8d65-78b741689c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ee0043-c18a-4fb0-ab33-f393a4379b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7467eb-3ac9-401c-a146-1f0b9ca4ec5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161f9be9-b3db-4118-84d8-4d975fc364ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafb6046-7c58-4e53-a2a4-d6cad4c35b55",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d360aaf8-b90d-4621-b723-0b965ce14476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0752756c-393b-47b8-ba67-76ed1ebd8611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6d7db4-e97b-4be4-98f8-fd6baac41e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13f9892-a818-4d0f-a388-cdcb2d4cf396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8307f4b0-725a-4cb8-880f-770ef775b4e9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5cffa7-985c-411f-8f54-fb2552de4c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e014068f-a4a2-4b7a-80a1-b9db0b2b0c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50bdd73-aec5-4c9f-8ab2-789001e726d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d843489-c5ed-4c92-b07b-c8317864860c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d758ac-bae5-4a91-b9a4-528629d45d48",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20e1c53-42d9-4824-92d1-56f5f316c5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a670ece-a07a-4173-85b2-15aecf1d526c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8160a660-c805-4635-8fb2-932a63aaebea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f75ef3-3be8-4074-aa4d-c046715eaca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fba8c4-4cb9-4729-bfd4-d96c83def0d3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f4ddb3-119f-4559-b685-65f0ba7f173e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e89615e-b631-43cc-9694-a770797a1ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7665532e-9c71-4c18-8be9-59ba4438735c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d1ca48-3ae1-4088-aac2-0abdad5433c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d28184b-6e7c-44a8-bc87-addb0fb47666",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78f3b4f-e334-41e6-8ad1-346a58fb4dcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdf4acb7-a432-47e0-a68a-229db6ef04ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84e2f18-6b57-468c-b60d-f07402c2ca11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b7feeb-22ca-4932-b29a-7ece84dc4624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295abdca-88ec-42f6-b96a-b6a55e1c5aae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beef0fdc-80f8-4f99-bfb4-b91405013c7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd62ba4c-08cd-4482-8c18-782c64dddf3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9176613e-3075-41f7-9ca9-c187a96d458e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b48426-b4ae-4fd1-8634-43cc582fac8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1f63b-703e-4b2d-8173-e402a27c573c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb427ac-2f88-477a-885f-0e12fe2f775b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f447f1d-14f0-41eb-9c2c-8aa3d28b90d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c7adeb-6108-49ca-82f8-fcd556725b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eedb1c11-9b89-4481-95a6-3d683357f4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd5f087-0821-4239-b980-68c194f5e4ab",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed984402-bab5-48c8-8870-3675222e5e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2625a969-0920-4166-a141-639073facaac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3eca4b-cd30-45bf-ba1c-3661085cde7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dc636d-a0d5-4930-9a93-ae5e482ba6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bb31e-da0d-4bdd-b62c-df531e724461",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f45108e-30e7-4168-aba8-af5564f9f1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9538e31f-ab3b-4863-8960-f56179866ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46c104c-a991-4d1b-a20d-8d9b6442fc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d702c4-0092-4d7f-8d0b-d654a8313218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4b1837-061a-44a8-a263-f13a9ac58a52",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d840412c-c072-452b-83bd-b69a5efe91b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27077bd2-6cb2-4501-b6ed-dfbe512e0cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7eab7-db71-4442-85fd-0351586ea0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09f994f-3d3e-4182-ba7b-56be382617b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742ab0e2-7f74-4530-a5d6-bebe549044fe",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de3cd78-8613-4c83-b054-c8a4200e807a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3494ab1b-ebb0-4333-a08a-0da270ef4431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5040fd0e-224b-4666-a512-9c62a3bdbd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c3b5ad-43c4-4fe9-8165-bb3aec3e2cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be4edcf-5f8e-4695-92f2-260fc233099e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202dcab1-97da-477d-b194-8d986fad878e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f9b9e02-7b7c-4d11-b7c5-4dc363c853ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda9f80-8a41-437a-949e-a6955d150efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f86dc0-5235-466b-ac9a-970f3e1e659f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d8bada-49a6-43ed-9e58-5df4834e1b1a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d4070d-d5d5-4a4c-b2f1-f8847e39e148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f377b287-1fde-4f43-922e-fd4fe0c88514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c02de3f-1ba8-4d7a-8a83-bbfef04deb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c21294e-6082-4d50-90fa-e174d14f4f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62546995-5d5a-4bc9-80fa-9ac0df6e21e4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf09fdb-40d2-4383-8301-68b7a837ab43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74cb77b2-5d5e-4565-9a3b-539432126c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9266dec3-1b38-4dea-bb54-c15fc89ab91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8866df3-9d32-46f2-8a46-2cb7cc323f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4176cdf9-b1f4-40d1-90e9-3087630808cd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e9c426-9e06-4de8-adaf-9353c88002b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8748b965-918d-4f22-a4c0-28528e65e908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f09eea5-a4e1-4d59-b161-fd73a88feb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593fcbf4-971a-4f11-bc38-23c305506296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c63333d-f2af-454f-9206-9f1cf693b7a7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f70eda-785d-4e97-bf97-385d3845fcdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "211e3c73-706f-49f2-a74f-9cc430f7d47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da437d94-d2e9-4191-b6ec-f7bf51721396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93720f31-4e17-4430-be24-e880a42ff1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f774c04-bf6f-4fc4-987c-3d31f35e8fc1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6e7004-3c54-4b3c-a734-4244678f297f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b62f1e-da7e-436c-b2e3-c3c33baf0007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e62537-f455-4622-b4c4-d20cafb6a9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bb4afc-91f2-4c0f-9301-6c17874d2069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373503ac-aff3-447b-98a6-4c1123dae15b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b6a3b6-ae89-4fb6-94ce-ef84262757e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60428c28-e2ba-4115-855d-36e53c0c5186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c62956-6d03-48db-9362-5740692a9582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca19511-0481-44be-8db8-e5f324c48e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84c7440-280b-4ba8-b7d0-ed495c5293df",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575a890d-4aa5-4034-8beb-fc0c9ea1941f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643e3819-8196-42c2-9d4e-565070516dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b013377-4231-4a5d-8274-36a790201899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9015716a-d18f-4501-9049-db0e39a1b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d599fb0-2cae-47b0-bfee-93869135bfdb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ffda00-f93c-429e-a2d5-ed011c7363ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226404c7-cc4e-4145-a1dd-df377a1fd442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3716bd1-5ea7-469f-8fb6-e33b0fb4a7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35ab694-27ae-4216-aa12-b8eda52a898d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51448acf-cb4a-411e-9124-8cde8ebd71f8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08ab226-c29a-47a7-8b01-55e82997ee5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587a776c-2f4d-4baa-933d-182832bf047b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8682e13-33e3-49bd-b913-028f3071c0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eafa2e1-351c-4aa5-a43b-0e4c90e958d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511624e2-9c26-45cf-87d2-3767f67d3a7a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ca90ab-5041-42a2-aca1-a42a3462a027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77b560ea-1cf7-4766-aa8b-0e46a5e48299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4d6741-1bbd-4890-8052-24c812e2c84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f07572a-0c51-42c1-ab55-6fe06b0ed29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70047e01-2e84-4f2a-856d-177353b7d914",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e99a1fb-c00e-44a9-b4f8-ea815e6d0b01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c57be69-e7be-4230-8eb9-1aa4dadebb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01be982a-9edf-47e2-825c-12a552ff0530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad8e29a-d64a-404a-8b5a-cd63683c67a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd241b98-1928-435f-b721-388318923c01",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab5e944-5f5a-4406-9815-025e691f6a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d749977-e925-41ee-803e-d13cad19f1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b37eaf5-664e-4aa2-a0bb-604763766d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9af3d8-ed2d-46a9-8409-5212c29d844c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115d15e4-33ac-4ccc-a6e1-1eb676988dbb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d11f3b-d7dd-4db1-80fc-2b1a05a758ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6ee24e-569b-4766-8dce-75feb49307e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5718ad3-0686-4981-aa7e-95a43eec0c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16cd8f8-cad6-469c-83e9-139eb064f2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb30e3e-1766-425b-8cec-4dd8b8f7d973",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d495accb-e95b-48d4-99d4-a6221a491762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a6cd22-582c-4c79-a022-faaeee44a163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1bbb97-e496-4ae8-b04f-05df1c87a233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2a2d34-3d00-48b4-ac27-c4ce154e6252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf774f7-6676-46b0-b563-fb2f025f85cd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0497e6-97c2-4632-a960-da3bf5611a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb769432-3125-4fe1-aa2b-16b49ac166d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afb8429-d824-494c-8cbf-6175b9494816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6a3563-81bb-42a6-82e0-41848c01022b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760c0176-b121-4b9a-9a41-6d40e51ad9b5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b71e616-8031-40b8-91d0-f57022288f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fb5c6a-bfdf-40fc-94ea-ebe6218ff3e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce67db6d-2086-4d95-8cae-6218a26375f4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bc1c76-6c76-491a-82d2-ea3e4ac8eac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476c2939-158a-472f-ac86-ccee2dc49360",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d76bf3-6afe-426d-9773-76f0df90f2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ff73eb-1915-418d-b90e-b345acec1828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0905c0-c021-41ca-811f-3ec257dfde64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82dca61e-331f-48d4-b221-62778fe413df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c57dd7-758e-4a64-a6e3-1a6d9b8751b0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b7ac64-a22e-41a7-ae70-041e4e9c9604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3fbba1-3ec6-4ecd-94b3-6fe6b4237ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bc7ea3-d339-4368-b7e3-338bfbdc43cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2afcb8-4f39-407d-a03a-c210f1889ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973282bb-7a12-4dd9-86f0-116203774c8b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595d65fd-86e3-4e1c-97b8-9f3c433b8f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "974ea1ae-9054-47ab-aad3-cca92eef4293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34994ef-6576-40df-9e34-c6d7ea936259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5106d2-6801-4138-afe9-91e54c174ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6107d795-71fd-40c3-8e09-5eb645f1d50b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e226a57-ffb7-4ef6-8da1-58b70910bc89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d7796d4-07a2-4a11-9611-e6b425eeac3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8675de-7be9-4cb1-84b3-84f7add3d5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7d80ba-875a-48d6-b73e-5b17090c14e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fc1302-bfad-4580-afcf-4731738c903d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5136e83-2348-4dbf-8bce-9bb011f6f0d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e1f85b8-05c3-42e7-a80a-b456a3815153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1785550-2b35-492a-81f8-ab14da73c6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21089abc-8e6d-431e-a770-378c86c99b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2f8a97-1899-4cf2-b103-b1bbbbe93b4c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41456d8a-46ff-4e67-9ce1-364606935c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec30f601-f0d0-420d-8d2d-954f23f89b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30252e61-c7a3-420c-a8b8-3d45764c1465",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f477f3-d58d-4826-8947-b0d9c1bd1089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66d34c0-11aa-43dc-b035-52d57c6daa34",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5074647d-7f9a-4eea-a2f2-9acbd0e39b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bdeef35-66d0-4e7a-a820-c0deba1a4aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05db906-128a-41cf-95ef-a9be2ebcdaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c0b9c3-bd9b-444e-a395-0889aab4571f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97a560b2-1bdb-4582-b553-c6da669231d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d482f14b-8296-4d54-a084-92c25733580c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30af3e68-653b-4ab0-8e56-2dbaa48689af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f05cb633-3ee6-4d53-9bae-192c70aa75ed"
                    }
                  }
                ]
              },
              {
                "id": "1adf2f3f-0451-45f3-8ed1-be4f6b0d398f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6b9ba35-67a9-4c41-8842-8175bb97278a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f09c3c-5799-409e-b2f9-43b514fa5e17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d2040e12-ef91-41ac-b733-683bd93185bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927b277f-f1b1-4fc0-8d0f-27983e650b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8aedb7be-ca10-4bc8-8b79-f5b875718a0b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "895b3a8b-eb8b-4b3c-9bc0-6a56d11793fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b27ffab-35f0-47ee-b1eb-2423d449db1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6f699a1-1641-4253-aa52-d45a5989ac63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c622ee4b-299f-4114-815e-457f611d521b"
                    }
                  }
                ]
              },
              {
                "id": "f2529086-6635-4e57-847e-8f8c9d364714",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "46744cfd-c646-4155-8abe-2b0f2fcddec2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d604501-71fb-452d-96bb-1c544c7c98f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "90c9e0e7-7ff6-4409-956e-3918f88688b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7353c618-dc26-4496-9d67-7b70db396970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b5841f-2788-49fe-994c-c7ab7c658dbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da4a010c-1a2b-411d-b5f0-b8c9a5e3e891",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd620798-060c-414b-915f-82059cb4b182",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b47e826-1a9c-4162-91f3-09a8eed9c5ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e9736e00-3294-461e-a6ab-7524fe59329a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53909f43-124f-4a53-b320-c6ca6a296590",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "425c0987-482d-4b45-86b2-5a8174858d6b"
                    }
                  }
                ]
              },
              {
                "id": "54851ec9-5596-4413-b388-fb90b28607df",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3d47492-696e-4513-a4e6-522d5998122f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "08ec56a2-7a70-4570-90ba-a096eae81568"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5816193b-9cb9-4bdf-aed7-6a20f497b634",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98f455e0-913a-4bbc-89ac-4feaf796f3f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd366bec-a495-47a9-be75-b418a160f34a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d7d28d20-b9af-4464-bf84-b03ff74ef206"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "302e744e-fb5f-4c4c-a2cc-a41f940a5fd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d8d0d97-bbf4-493d-9903-3c2c965030c2"
            }
          }
        ]
      },
      {
        "id": "3c4fca06-7bf2-41b7-a1e8-e19f16eecba3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "20600baa-3a94-4b53-b98a-942064295637",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a396c904-238f-47a2-93ec-5191d60e64d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5824e46-5052-4842-b859-043989f845d9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f37d3d-2bbb-4b03-9c69-b7bccebf4bcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fea3ba0f-f943-4c2b-b9d7-bfa81ca82d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9a8ed4-3512-4800-a3c7-65528736cc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eebf9f1-13ea-49e6-9558-f8d27075efb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf75a373-9188-41b9-9b09-1cf3de83da66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f0015a0-c2e6-4554-a3e6-70ff7f602f44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74f1e496-9a34-46a1-a250-f58e31abb8be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "642afa5a-c167-4dfd-9242-87f0550de374"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90727a6d-d94a-40b4-9320-c3ab8553008b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb0e289a-108a-42bf-8ce7-ef49428cd29a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a69860d7-8530-428b-b948-c1e644f7c03f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed512262-7186-4b8d-88cf-78d971f4096f"
            }
          }
        ]
      },
      {
        "id": "60a2ea16-3a26-4220-93c2-b314672ec653",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "678bc37d-7081-47fc-8553-03fb11e62b00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83c1e44e-c456-43b0-90fa-1f4fdf3244ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43506914-4972-41c7-a156-0e55f58ec094",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8405d6f7-496b-411f-91d1-9e1e446593a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfc44f72-96cb-4cee-87f9-0263e99bae30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a61155-3831-4a18-b9ec-e9e321b774b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f4c9402-15db-40cc-90a7-7affff51c429"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b06381e-0d1d-4d72-a616-1efc5f86f31c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8b7fe60-5a98-405a-b824-103a642b2a40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "474df222-bbd0-4a4e-b1bf-cc467a524a1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a749872f-413c-4ec8-a1fd-5fae1e9b5a40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "848f7ef0-0800-401e-935f-4c7fdd05e6c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e70ee40-6c02-4ab6-8934-67fdedd2857c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fda8c4c-436e-46a0-ae90-29e6bba2b6bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8e31ba2-d338-459c-9048-1409fc4ec8f2"
            }
          }
        ]
      },
      {
        "id": "96c7271c-df87-4664-ad8c-abc60c6f0f63",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9e54cb13-33d9-44a3-92f9-58df5cddb452",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bac76e59-6aa3-4c4a-a130-b840598102c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0df0381e-328d-4a2c-88f9-3231d84ff5a8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf2b93e-1eb3-4560-b356-864a539d1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ee6f72f-137e-46be-8353-20f26dd57feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9f5a99-8aab-41a2-9593-0b4b3ad8d2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eee4bca-e076-42b0-9deb-52d345d75db2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9b106a6-6bf2-4251-a4f9-fb180ea31e32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bfb1e53-e6a8-4210-9c65-f0bd65ed9bf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88ba8e72-0540-4db4-bf29-772fc7f27ce5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53314833-0781-4d7d-a4fc-0fc36ec84dfa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "add59218-7988-4601-bc91-ec2f235b0938",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "82568237-a58a-4b27-8211-259115d802f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "278cbe77-7d27-4fb9-b374-009f1c6dff5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d9287c7-773e-4186-9cfa-3a2b0ca5c0d2"
            }
          }
        ]
      },
      {
        "id": "61250047-6586-4ef6-9f65-633b672e690c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72646d30-e681-4df6-a710-f4d38aab2f7e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aef27572-8e38-4987-9bf8-92095491498b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "96e1aba0-aaee-4de8-b3b8-3a747cdf35b8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16e34789-b8c5-420f-8f1e-1aa2a1700360",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa0bf96-cecf-4ce6-b3a9-c6bf45e59b5d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.08730158730158,
      "responseMin": 9,
      "responseMax": 580,
      "responseSd": 67.12574315645124,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712190947178,
      "completed": 1712190969959
    },
    "executions": [
      {
        "id": "dab9905e-0c9f-4a13-abdc-ce7d3b5b63be",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ed977641-7dc3-4843-b49d-4d56fb6c08eb",
          "httpRequestId": "051597cc-cac6-4f99-969a-10341e1253b2"
        },
        "item": {
          "id": "dab9905e-0c9f-4a13-abdc-ce7d3b5b63be",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dca67203-c290-46e9-ad0e-e3dc2dbaed4a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "72126905-6cc0-4b21-b131-ce94e447a5b9",
        "cursor": {
          "ref": "208a4176-8c5f-4c74-b322-78da6e0fd2bb",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9a0aea5b-c63b-4d1d-93a6-e5594d5ae669"
        },
        "item": {
          "id": "72126905-6cc0-4b21-b131-ce94e447a5b9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "af844b81-558c-4009-8d22-ae32a39505a1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "1c8fdee6-6b3c-4a2f-8011-4be330175b96",
        "cursor": {
          "ref": "635a52e8-9ec4-43a6-a71c-712b82b76c8c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c5124aae-4e6f-4b30-b5b1-3938b1e7fc89"
        },
        "item": {
          "id": "1c8fdee6-6b3c-4a2f-8011-4be330175b96",
          "name": "did_json"
        },
        "response": {
          "id": "79c848ac-d3e0-4f62-a2bb-db6b51fe430e",
          "status": "OK",
          "code": 200,
          "responseTime": 580,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd3fa3a-efd9-4697-8ecf-1939c28babcc",
        "cursor": {
          "ref": "f9a83e04-a495-4892-b2d1-9653a97d0a9a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e88cb0b7-ca62-4d4e-bb35-5aae2e959892"
        },
        "item": {
          "id": "ebd3fa3a-efd9-4697-8ecf-1939c28babcc",
          "name": "did:invalid"
        },
        "response": {
          "id": "e74b7561-7be5-4fdc-b971-e1a29f90a3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd3fa3a-efd9-4697-8ecf-1939c28babcc",
        "cursor": {
          "ref": "f9a83e04-a495-4892-b2d1-9653a97d0a9a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e88cb0b7-ca62-4d4e-bb35-5aae2e959892"
        },
        "item": {
          "id": "ebd3fa3a-efd9-4697-8ecf-1939c28babcc",
          "name": "did:invalid"
        },
        "response": {
          "id": "e74b7561-7be5-4fdc-b971-e1a29f90a3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c83d60f-9c03-4485-a2e0-7d90e924eff6",
        "cursor": {
          "ref": "a2c2c145-d6a3-4a41-98e8-18971e8105ca",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7062ad3b-0f08-4ac6-8e27-35d08db5d235"
        },
        "item": {
          "id": "0c83d60f-9c03-4485-a2e0-7d90e924eff6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c1937334-91dd-4d61-8ba7-b4b6f0cd3d7d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 301,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b06fe3-ebbe-47d9-bc26-e85e54eb0482",
        "cursor": {
          "ref": "0ffbbbdb-7827-440e-b99f-9e8b4537f65d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "de7f5826-e9aa-4cd9-8b60-9df53a6567b8"
        },
        "item": {
          "id": "64b06fe3-ebbe-47d9-bc26-e85e54eb0482",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8fc2244a-c60d-47ae-8034-6f3e6610d3c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1247895-0b11-4cbd-bcc7-34ccc9e7e79b",
        "cursor": {
          "ref": "109b1df0-8748-4b72-9035-9a0dda4eff0b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "054904eb-caab-4c24-850e-2c977cf4e705"
        },
        "item": {
          "id": "b1247895-0b11-4cbd-bcc7-34ccc9e7e79b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "14dd2220-7c8f-4e62-b9e3-ba72801306f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fef5328-41fa-4932-8a7d-2f330bf17c1e",
        "cursor": {
          "ref": "9f177c59-cd61-49dd-9a7b-168523582ad3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2e80d9de-b7cc-4ea7-99d0-1cfdd5e85098"
        },
        "item": {
          "id": "8fef5328-41fa-4932-8a7d-2f330bf17c1e",
          "name": "identifiers"
        },
        "response": {
          "id": "2133a911-995f-4750-84e0-b88200cc3361",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239cf2b4-3431-4779-bb6c-aef875a677ec",
        "cursor": {
          "ref": "452c988c-b788-42b8-8a49-708cb0279543",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84a4f43c-ec06-4e20-8a82-767e70e1a33f"
        },
        "item": {
          "id": "239cf2b4-3431-4779-bb6c-aef875a677ec",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "45ed3f8b-d9ce-4adc-8bee-77f81a26fcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c7a376-91aa-4c51-8cdf-9441d3660a0d",
        "cursor": {
          "ref": "22eef4a5-b859-4865-8f8b-f8c0b67df154",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a3328b6a-70ee-4781-ba5f-6a720048619a"
        },
        "item": {
          "id": "d9c7a376-91aa-4c51-8cdf-9441d3660a0d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "293b94b3-804c-4d52-8cb8-b9290afd8a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832ac613-0996-4478-a1b1-24397eb03085",
        "cursor": {
          "ref": "b3706375-f9d2-4476-9e3e-9f5f92735bbd",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3a90ed1a-4ef8-4f7d-918b-580dc7596e5f"
        },
        "item": {
          "id": "832ac613-0996-4478-a1b1-24397eb03085",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7fa31ab6-7798-4878-9774-10bba46e3d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23930f07-96ae-407a-9149-951969bbccc1",
        "cursor": {
          "ref": "f0e3534f-5e43-487b-8ed0-e7fedf158472",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a37952cc-028f-4300-8011-46df06d4dc85"
        },
        "item": {
          "id": "23930f07-96ae-407a-9149-951969bbccc1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8550cb59-ecaa-4eb3-b226-aaf330890d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a463874-8b12-4859-9b08-6f47db170eda",
        "cursor": {
          "ref": "066740f0-8f91-4a51-aa12-60994579482a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6c6abd3d-ff12-46ec-9a0d-23bb3314b6b4"
        },
        "item": {
          "id": "2a463874-8b12-4859-9b08-6f47db170eda",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "acc47d0b-ebab-4682-b219-5f9dda949cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0af439-17a0-4bce-b63c-3c3b30d7298f",
        "cursor": {
          "ref": "73409a4f-0a51-43ce-8738-bbd0b90d4f74",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0e1e4203-f63f-4e06-8f65-8a57493b040f"
        },
        "item": {
          "id": "9e0af439-17a0-4bce-b63c-3c3b30d7298f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "48d9de97-fbee-4b84-babb-7159313baa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855bfe2e-0391-4f04-8444-6182ff9cd8ba",
        "cursor": {
          "ref": "070fe41e-44a6-4d3f-b096-a51d7a4ad9b8",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "406e24cc-8260-4bcb-95c7-4a1f0f4a37a4"
        },
        "item": {
          "id": "855bfe2e-0391-4f04-8444-6182ff9cd8ba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c86c46a8-2c79-46a5-b7de-3bbf8c9022e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68c49ca-aa2d-42b1-88d2-e70b313eb4fc",
        "cursor": {
          "ref": "6b102324-98df-4262-9450-e02276feeaf8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e1b3390d-59d7-415c-bb72-f6171f20ed1a"
        },
        "item": {
          "id": "b68c49ca-aa2d-42b1-88d2-e70b313eb4fc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "534805ab-b032-4374-9847-13cef5fd552f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afa8234-2a10-4de1-b809-28d547f01f93",
        "cursor": {
          "ref": "24cbb6cf-2bb2-4105-8c75-45f5c4efcd33",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9c42023e-4021-45f6-a5dc-b62d196b8c77"
        },
        "item": {
          "id": "4afa8234-2a10-4de1-b809-28d547f01f93",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6beb943d-3914-49fc-a67a-55f4870b9114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41e72c6-da76-4161-998a-bab18f0c26b9",
        "cursor": {
          "ref": "b56d0240-9adb-4de7-9197-1fd47b4c170c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "829ed501-2856-45e3-9219-0b8e894a1138"
        },
        "item": {
          "id": "f41e72c6-da76-4161-998a-bab18f0c26b9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8f1756cb-5bec-4746-befc-652a36f75946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd62f6c-e885-4e77-a879-da050cf0d0c5",
        "cursor": {
          "ref": "ca1ed561-1dbc-470a-aa01-326649f85569",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8e670102-6614-49c9-bbf5-03b24bd51449"
        },
        "item": {
          "id": "dcd62f6c-e885-4e77-a879-da050cf0d0c5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a810b8e3-8f28-4ec0-b9d6-1de91159a980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6054bf-1eb9-4992-8e19-87961d16b952",
        "cursor": {
          "ref": "793937a2-0d37-4206-ad5a-c8c0911f1386",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9deeeb6d-ebb2-4216-ba5e-2bcadad85948"
        },
        "item": {
          "id": "7f6054bf-1eb9-4992-8e19-87961d16b952",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8a20853b-8b2b-4b24-8b46-1a504402686e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e7786e-3bfc-406e-87bb-d8982b84d0d1",
        "cursor": {
          "ref": "05088bec-442c-437d-9068-2532394c165d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dda1fb2e-3d2d-48d3-a6cc-f1631fdca383"
        },
        "item": {
          "id": "95e7786e-3bfc-406e-87bb-d8982b84d0d1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a823db06-741b-4b8b-9947-bd17b4950e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8736d870-e00a-451f-9a4f-4add23e7d115",
        "cursor": {
          "ref": "f21ce2ef-d2bc-4eae-8b3b-21c5fc52b830",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "43f0f116-5e78-46f6-9f61-f98d278346e1"
        },
        "item": {
          "id": "8736d870-e00a-451f-9a4f-4add23e7d115",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9d90ee87-458c-4b9e-a0f4-cdc23524d8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7053811b-1c27-4ec8-9fef-38ffe19a0aae",
        "cursor": {
          "ref": "e5b8ca73-848a-4939-8e14-40a4fd337803",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "68f43a99-4feb-4456-9457-f089d42e4790"
        },
        "item": {
          "id": "7053811b-1c27-4ec8-9fef-38ffe19a0aae",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6f173b50-0821-4f05-bb43-b21de1af24a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96d2d81-53d1-42c8-8c2a-4a734f3c9ffa",
        "cursor": {
          "ref": "cecc56bb-9cb5-4426-900d-e4521558c6f9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b9370daa-ec4e-4cae-84ee-07f32d513c35"
        },
        "item": {
          "id": "e96d2d81-53d1-42c8-8c2a-4a734f3c9ffa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "46a053e9-faca-4a25-b4d0-2235ac7209e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1c4027-4390-45c1-9a3d-ee67f201feca",
        "cursor": {
          "ref": "412dc4f9-6290-41e3-9ab9-4ebffb9311be",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f8ce8601-6a5f-42ab-88d4-5c0c80bfb211"
        },
        "item": {
          "id": "fe1c4027-4390-45c1-9a3d-ee67f201feca",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b3ff4ead-7723-4554-9920-dc392a0e7684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f243cc9-71bc-4d1d-8685-b38cb30f67af",
        "cursor": {
          "ref": "f1a8610f-8dc3-4c6a-b78d-802d19d1c353",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb6cd0e0-a97b-4516-8138-7b74d3992322"
        },
        "item": {
          "id": "0f243cc9-71bc-4d1d-8685-b38cb30f67af",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5aac313b-258c-43c2-8b91-76c7d847cc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31d3858-005d-46dd-a351-1425b12e91f4",
        "cursor": {
          "ref": "b95073d5-25d3-4f3c-b69b-812818171e76",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "67b87a8c-4865-4566-9b6d-a7b25ea12ea5"
        },
        "item": {
          "id": "d31d3858-005d-46dd-a351-1425b12e91f4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2a9790c5-505b-4fe8-b1ec-2215a5261b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3bb631-c801-44f8-84a0-7ff606202159",
        "cursor": {
          "ref": "f3a42d7c-0841-406c-a3a5-44d3b623bf8f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0d4d3d47-9282-44c8-9b4c-a06aab14b214"
        },
        "item": {
          "id": "5b3bb631-c801-44f8-84a0-7ff606202159",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "99e070d0-8709-4bd4-809b-b7baf196326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a959fca-cfac-4e3c-b1d8-1bc4e0c6d91d",
        "cursor": {
          "ref": "7264d28d-d9e6-4a32-a395-ec7c89e2beef",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4954d160-b3de-4a20-878f-d5e00e112dfd"
        },
        "item": {
          "id": "3a959fca-cfac-4e3c-b1d8-1bc4e0c6d91d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "feace3b5-f931-42f6-928c-4f3baf98d421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed629651-706f-4cdb-9ba3-467aee6918fc",
        "cursor": {
          "ref": "3d5e8cdc-de05-4d12-a1d9-5b621744be7d",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5bdb527c-8360-40c1-ae50-230cd74d475b"
        },
        "item": {
          "id": "ed629651-706f-4cdb-9ba3-467aee6918fc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a13598ba-3f12-48e8-8083-c286e6f2d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6f320f-e5a9-42bb-9a12-758f290fbc24",
        "cursor": {
          "ref": "9fdc1a55-432a-4426-8730-3ded0476146b",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2e4f39e9-10a5-4fd7-8c53-0f042d6522a9"
        },
        "item": {
          "id": "4d6f320f-e5a9-42bb-9a12-758f290fbc24",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "96f5871c-c616-473e-8b5d-a9dfb122b3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dfdb59-8e87-4f46-888d-6a8a7eff8fe7",
        "cursor": {
          "ref": "beac0bfb-0025-4d2f-b17e-0de2fe62cc7d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ebcfb418-b10b-4a91-9657-aa9a3811c21f"
        },
        "item": {
          "id": "e9dfdb59-8e87-4f46-888d-6a8a7eff8fe7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "728a61e9-1ebb-4351-9ff8-020a6cd8abde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aef8f31-62c8-4307-8f63-9f02d4f480f0",
        "cursor": {
          "ref": "fbcb733d-ad06-4f03-8837-07c7305f75a5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "de8da261-0864-4af5-820b-77f81ce2a26f"
        },
        "item": {
          "id": "4aef8f31-62c8-4307-8f63-9f02d4f480f0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2b5480ff-794c-4803-adee-c86dd4f06cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f7b8d5-f92e-4d53-a519-93853eb0b7da",
        "cursor": {
          "ref": "be69130e-50a0-4bd8-a539-659328e5bca1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4f658fe7-b563-47b5-b08c-8b9b5b040bd3"
        },
        "item": {
          "id": "b6f7b8d5-f92e-4d53-a519-93853eb0b7da",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "97c27b18-58ff-4640-8009-304dfcbcb8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd61db3-779f-4116-a248-f4d12d5207ea",
        "cursor": {
          "ref": "f8e7badc-aea2-4d1d-9dd5-4eabca3b1a0e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "94c37580-635f-4196-84a2-5f88667910e3"
        },
        "item": {
          "id": "3bd61db3-779f-4116-a248-f4d12d5207ea",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4e20a531-9173-41e1-8ad1-d807f492f050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33696de-f489-4847-8a8e-99b54a3035e0",
        "cursor": {
          "ref": "27a7b6ff-7c49-4e01-9828-91db59f5cee3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ed8eb3ce-4017-43d4-a486-6708a7737af2"
        },
        "item": {
          "id": "b33696de-f489-4847-8a8e-99b54a3035e0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b97d6b97-47d9-45ed-8f90-a256ff2cfdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6436a998-e15a-47a0-b39a-ecc8a9559611",
        "cursor": {
          "ref": "040d4980-bbf8-4540-a52b-46c644f52fa5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4f352355-f160-4d6f-9548-dbb22b60dfc9"
        },
        "item": {
          "id": "6436a998-e15a-47a0-b39a-ecc8a9559611",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6bc29115-b1b4-4baa-a1dd-f4e85ec42c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cdb726-cfbb-4da8-b2dd-c835439c4ed2",
        "cursor": {
          "ref": "fdf41515-9c22-465b-ba74-26a44d7066fc",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6f1acecd-8bbc-4ba6-81f6-0b0af3f1c1a1"
        },
        "item": {
          "id": "97cdb726-cfbb-4da8-b2dd-c835439c4ed2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7f9038d0-40bf-40a1-8de9-2ba4bf279378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b67f85-392f-48d2-9a75-381579a4c8f7",
        "cursor": {
          "ref": "1bd048f4-17af-4d89-983c-a7bb104074e6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7b4cbf1d-f455-4987-8e4c-f44f7ab09119"
        },
        "item": {
          "id": "58b67f85-392f-48d2-9a75-381579a4c8f7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5a0a8f92-5593-4b50-a169-2c962ea8adab",
          "status": "Created",
          "code": 201,
          "responseTime": 470,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "aee0f858-99f8-46b1-8360-3a78b78059ca",
        "cursor": {
          "ref": "9da6a0cc-5a90-4761-a799-4c114610e5f9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dde2d7ba-b3e8-4c49-a9cd-1c41f3f27b5d"
        },
        "item": {
          "id": "aee0f858-99f8-46b1-8360-3a78b78059ca",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "16f088c0-e09b-4127-ba94-7f4f1e8fe104",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "de9db731-26ed-4505-bbbe-076d8b35e368",
        "cursor": {
          "ref": "3f16f7aa-9abd-4417-8cc2-28c878fdc6f9",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a550747b-3577-4d3d-aaef-831f5fffa769"
        },
        "item": {
          "id": "de9db731-26ed-4505-bbbe-076d8b35e368",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a4a8fb69-faa4-4762-a392-09478f8cc882",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e2b3989f-3303-4e93-95a1-5927097f931c",
        "cursor": {
          "ref": "882318ec-058f-4cad-bc27-108fcbba6544",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fa2b629e-1073-4ef3-9608-f65522130ff7"
        },
        "item": {
          "id": "e2b3989f-3303-4e93-95a1-5927097f931c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6d18983f-297c-4c41-b6dc-9da348ae85d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cd4aa1-8b24-484f-8e54-6c9c09d0d5a8",
        "cursor": {
          "ref": "41ba2022-0510-4180-bda9-2a2cf5fe4ada",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9a4efbbc-6618-45f0-bc3c-3e1e11d1d0d1"
        },
        "item": {
          "id": "f3cd4aa1-8b24-484f-8e54-6c9c09d0d5a8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7dd6b8c9-5d99-408d-ab8c-912436dc143d",
          "status": "Created",
          "code": 201,
          "responseTime": 186,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "52112e21-3018-456b-af3d-148d79af43c0",
        "cursor": {
          "ref": "00b17412-85ef-487f-92e3-d52a92097be9",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b3943194-7cd6-455d-a519-c8afc2c29ce2"
        },
        "item": {
          "id": "52112e21-3018-456b-af3d-148d79af43c0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e49de2d6-94ed-44d2-a628-a6f3a2ce5400",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c658c05a-4d78-498c-946b-9127aa418672",
        "cursor": {
          "ref": "bf7b3bf0-4a76-4ec3-99f4-7c4417abb366",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2b047678-e6ca-474b-bed9-73a247c5bc6c"
        },
        "item": {
          "id": "c658c05a-4d78-498c-946b-9127aa418672",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "930df0c5-7cc2-4234-b507-e9c180b9b4e1",
          "status": "Created",
          "code": 201,
          "responseTime": 175,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8f219383-f5e5-45eb-bfbe-256d56468122",
        "cursor": {
          "ref": "7566411c-143c-4232-bb17-48878f8dba00",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a51b9eeb-5a23-48e4-92cf-b1cae9ad4ef6"
        },
        "item": {
          "id": "8f219383-f5e5-45eb-bfbe-256d56468122",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fdc0a353-266c-47e8-a904-581d6aed55c2",
          "status": "Created",
          "code": 201,
          "responseTime": 181,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6bf80acf-9c6b-46da-bd36-b0205008b92d",
        "cursor": {
          "ref": "315a224e-9e5d-44c3-8a10-02f113de3366",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6be32ea8-4d91-49ce-b386-cc2d33f3f1e2"
        },
        "item": {
          "id": "6bf80acf-9c6b-46da-bd36-b0205008b92d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1a7300df-594f-4665-8c73-e89ebd368bc3",
          "status": "Created",
          "code": 201,
          "responseTime": 197,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "636e10e9-58a1-4956-806f-fafe1dfb7c06",
        "cursor": {
          "ref": "d7eaad47-ad18-4889-9cc8-70d3c9c86ec9",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3d6ed9a5-c1d9-4317-84dc-3726e0b2f768"
        },
        "item": {
          "id": "636e10e9-58a1-4956-806f-fafe1dfb7c06",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "121bd957-5e5c-4ad9-9fe5-e72ad0d30aa9",
          "status": "Created",
          "code": 201,
          "responseTime": 165,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "45d520d3-878f-46f7-adf4-c845d542ce86",
        "cursor": {
          "ref": "8808d125-aea6-407d-9831-2a4159518b4c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "99a0de8f-3831-4b83-8c35-aba0c6aafd45"
        },
        "item": {
          "id": "45d520d3-878f-46f7-adf4-c845d542ce86",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6d5126bf-a0c3-4ffe-ac6a-4b8976d4f685",
          "status": "Created",
          "code": 201,
          "responseTime": 178,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "25d13783-7d39-43fb-ad56-d31eb11d5187",
        "cursor": {
          "ref": "2346991d-32b6-40a3-99d5-9f2c24f9b810",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1c60a660-32d1-4e01-a41c-392820ddd0de"
        },
        "item": {
          "id": "25d13783-7d39-43fb-ad56-d31eb11d5187",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f465dc06-4588-4bdc-80b6-d26b1cd961ac",
          "status": "Created",
          "code": 201,
          "responseTime": 172,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "af64b536-bbba-4b90-9996-40c03689ccf5",
        "cursor": {
          "ref": "91bbc74c-0386-4205-9d52-3fb29874ca43",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "37c8fcf7-2693-4fc2-8a2b-9ae85fb12081"
        },
        "item": {
          "id": "af64b536-bbba-4b90-9996-40c03689ccf5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "25ea136a-8f72-4b5f-97e5-1fd56997b31b",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8daadb9b-1f4e-4cff-8ffd-b9cfc0e72e16",
        "cursor": {
          "ref": "d5e8fb02-45e1-4c58-affd-2a39e90af15a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8c912fcb-d87a-49d1-9a13-7bf666752115"
        },
        "item": {
          "id": "8daadb9b-1f4e-4cff-8ffd-b9cfc0e72e16",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6087be21-e55d-48be-8789-1a0dd62e120a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa57d69-3096-495c-a0de-6447c04416b5",
        "cursor": {
          "ref": "f640854f-1367-4f70-8aca-71cb73149551",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "09f46678-92b7-4833-a16a-59988b99d18a"
        },
        "item": {
          "id": "5fa57d69-3096-495c-a0de-6447c04416b5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1aea02d0-255e-4ee0-ab93-2b662eca6df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3cf2a4-52a5-43f5-9635-bd5aaee83b4c",
        "cursor": {
          "ref": "4495df29-0690-4770-a3b3-260aabe5bb6b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f7a6156e-e16f-407f-9f27-521b9734e1db"
        },
        "item": {
          "id": "3a3cf2a4-52a5-43f5-9635-bd5aaee83b4c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2fbbf18c-8168-4f79-bd58-70646dc32941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9bfe65-f37f-42db-86ca-e61798166cb9",
        "cursor": {
          "ref": "4545c572-6e52-4e88-b83c-417ddb3bed43",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9548d5f6-8c67-4721-89a9-3466a9aa70cb"
        },
        "item": {
          "id": "fa9bfe65-f37f-42db-86ca-e61798166cb9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f29a8304-a9b2-4bc1-949a-6d51712e17d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6094f3bb-c38c-486a-8941-8c12a6ee8f51",
        "cursor": {
          "ref": "ba41c6a1-9180-438c-8859-fa60ab95f57b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e0137335-94b0-4d74-adad-15fe5de4cebe"
        },
        "item": {
          "id": "6094f3bb-c38c-486a-8941-8c12a6ee8f51",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "45168798-31e3-46ca-9591-c77474686f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e68ad56-a426-4d3b-ac75-c851d090c951",
        "cursor": {
          "ref": "ec3061d3-9850-483b-be84-c23e2846581f",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6ce1ab07-fc85-48c0-92b5-047e4f3ae3b9"
        },
        "item": {
          "id": "0e68ad56-a426-4d3b-ac75-c851d090c951",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c6c16845-2b40-4bb5-b483-d15ba9276e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d820b5-8c4c-4a19-8867-eff1c0429bde",
        "cursor": {
          "ref": "36cdbdd5-ff55-4613-a8de-9f27eb1fded0",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "543c583b-cb98-4a4d-919c-9ef00e12ffea"
        },
        "item": {
          "id": "86d820b5-8c4c-4a19-8867-eff1c0429bde",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cef0af00-956a-48fa-acfb-092f0dbeaead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4851796c-fb48-4778-bc7b-8a6800d9909e",
        "cursor": {
          "ref": "b7fac55a-acb4-4566-9ecb-f4ba7549e7b7",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ed52352-86be-42b9-892d-1a034075631b"
        },
        "item": {
          "id": "4851796c-fb48-4778-bc7b-8a6800d9909e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e3999fee-68e5-441c-94c6-3d66ade99a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603af634-6c2f-49f9-afdf-12f12786bdde",
        "cursor": {
          "ref": "6a0a18c6-6e2c-40fb-981c-a4e51579a978",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c1047995-ea72-4821-bfd8-402367eb6ba3"
        },
        "item": {
          "id": "603af634-6c2f-49f9-afdf-12f12786bdde",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2d342863-30d5-46a0-b5d4-cd1826735a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45301c67-8192-48fe-975b-7d86d5694112",
        "cursor": {
          "ref": "186d1051-bde3-4478-88b6-07480e35c584",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e67cda79-73da-400c-a10b-9d639160a8a8"
        },
        "item": {
          "id": "45301c67-8192-48fe-975b-7d86d5694112",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e7378158-8c41-444e-b9cb-64bded0931b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2686ead5-df08-4af1-8240-90613e4a372f",
        "cursor": {
          "ref": "4e8b2856-df0d-4a93-b2b1-05259f3b95b9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d53f67c1-ead7-4ffd-a8af-0f10e3afd16e"
        },
        "item": {
          "id": "2686ead5-df08-4af1-8240-90613e4a372f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8e872979-20f4-47b9-b489-78f8aea2782d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1eb586-1e68-4b86-90c4-ca40d4f9303e",
        "cursor": {
          "ref": "a3916b2f-ebf7-4820-aeca-4a4cac9e811e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b6379fed-39ef-4537-88cb-e3a1e5b91e0a"
        },
        "item": {
          "id": "0a1eb586-1e68-4b86-90c4-ca40d4f9303e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b07c33f6-5dde-4196-b432-47b0fe3d0070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c004a3a9-837d-49e7-b241-67fac4d2a300",
        "cursor": {
          "ref": "1a721bb4-5ebe-4753-8505-aeb2a9790b63",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bd2e4134-b71a-4728-b77b-95a3dd689b97"
        },
        "item": {
          "id": "c004a3a9-837d-49e7-b241-67fac4d2a300",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "069d3c9e-7b61-4179-acad-a31a29339edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ac8902-d99a-4fac-a34c-1c9d6545a19c",
        "cursor": {
          "ref": "977953b8-52c2-4ae6-aef6-8bd97f7e754e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "99bf929f-4eee-4649-9ff8-b75d58ba1e05"
        },
        "item": {
          "id": "c6ac8902-d99a-4fac-a34c-1c9d6545a19c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a7ca0d61-7432-4515-b4ed-1184eaad60ec",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f375ae75-d5df-4030-959a-d18b166a1607",
        "cursor": {
          "ref": "c5ad9fa5-19fe-4900-9326-1bd99be3273d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "901c8e32-cd1c-440e-8a80-ab128d2e0c3c"
        },
        "item": {
          "id": "f375ae75-d5df-4030-959a-d18b166a1607",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f1ae299a-1eb6-459c-9731-56991e64cdcb",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fcb60915-696e-41bf-a2ef-06a7bb1aec73",
        "cursor": {
          "ref": "425ef40b-a264-4776-a603-1b80867da27f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a72d3ddd-0fe0-42ed-8abe-ef9b5b548652"
        },
        "item": {
          "id": "fcb60915-696e-41bf-a2ef-06a7bb1aec73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76c6435e-a71c-4917-b08a-074e4e5fadc8",
          "status": "Created",
          "code": 201,
          "responseTime": 198,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1113f9e8-9745-4149-9812-ee1a4bdd9fd6",
        "cursor": {
          "ref": "7c73ca7c-a019-420a-b3ff-4690e01c6259",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "56e54330-57d1-4cfc-9deb-530d04563762"
        },
        "item": {
          "id": "1113f9e8-9745-4149-9812-ee1a4bdd9fd6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df916838-99bf-4aa9-a410-09cedae49e62",
          "status": "Created",
          "code": 201,
          "responseTime": 193,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "255f8d44-e56d-40fb-916d-936a08e69f8d",
        "cursor": {
          "ref": "fe4eaca1-2bdd-4bec-8eb6-40b138929910",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8ae795a5-e979-4e89-a6ba-b89608584167"
        },
        "item": {
          "id": "255f8d44-e56d-40fb-916d-936a08e69f8d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b4808e85-8cc6-4110-aa55-0496247930ab",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d52f3eb3-c9bd-479d-9a26-9e7f923f9fb9",
        "cursor": {
          "ref": "7b18283d-157d-4649-bd24-91933a705c43",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3f318b4c-4374-4202-af00-729a0c71bd98"
        },
        "item": {
          "id": "d52f3eb3-c9bd-479d-9a26-9e7f923f9fb9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e46b3a24-7c19-4c8c-b130-7e56d455c2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee698a9-601f-40db-bad1-2ad31abd1c50",
        "cursor": {
          "ref": "9fbf3df7-07c0-412e-af4a-bea2a403d9af",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8b28a581-4a1e-4621-9ab8-29bfc4ad9c96"
        },
        "item": {
          "id": "0ee698a9-601f-40db-bad1-2ad31abd1c50",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "70462d5f-969f-47b7-bb6b-f236d9347692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0542b7-6c50-4aae-af2c-2947e0ed1147",
        "cursor": {
          "ref": "a8091528-9a66-42c5-8820-a962c4155472",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fa193064-7e6f-48e1-9657-f0169c21ec66"
        },
        "item": {
          "id": "8c0542b7-6c50-4aae-af2c-2947e0ed1147",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca4ea02a-aa70-4b0e-b814-71f9e48e9445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e854e4dc-7c71-4b97-af31-9fd684633928",
        "cursor": {
          "ref": "e97bb280-1cc7-4f05-8f1c-51a37d29983b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6bccfa9f-30fd-428d-8620-dd32871d28bb"
        },
        "item": {
          "id": "e854e4dc-7c71-4b97-af31-9fd684633928",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dca687a9-4225-4ffa-81d3-16543a13b9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e069baac-9749-4805-90e1-ba76ad9edbf8",
        "cursor": {
          "ref": "50ecd3ff-f0f6-45cc-b15d-43e38bf56b1a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6cb170d7-cda3-438c-bc93-04d4a93a4fc7"
        },
        "item": {
          "id": "e069baac-9749-4805-90e1-ba76ad9edbf8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0a440730-2569-4220-8306-562ba6a2a385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67669ea-d812-48a1-abe3-81dcbdc241a3",
        "cursor": {
          "ref": "cc28a3bb-390b-4c39-9467-1066b6a68e07",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "91db8f24-5ed7-45b9-9f89-cafe020fd258"
        },
        "item": {
          "id": "b67669ea-d812-48a1-abe3-81dcbdc241a3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "976cc807-a873-4ef8-bbfb-71447fb1b2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca21795-1451-4daa-a5bd-3d13e44b33e5",
        "cursor": {
          "ref": "15ea36c4-618e-4fc0-a9d7-f72229873c47",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "772f9966-6786-4c56-8eee-ffbc45498aa4"
        },
        "item": {
          "id": "aca21795-1451-4daa-a5bd-3d13e44b33e5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7931f803-72f9-45a3-a23b-9fbbf9e06f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa87f30f-0a85-4e75-8c87-28739a53d731",
        "cursor": {
          "ref": "553935a9-8267-42ed-a4ad-438048de4224",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5321611d-bc67-45df-8f6e-0abaa678b644"
        },
        "item": {
          "id": "fa87f30f-0a85-4e75-8c87-28739a53d731",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f4eda87c-5a4c-4d02-83b0-ff4c2c06c644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235c73fb-8c43-4d48-8b84-728a5c62163c",
        "cursor": {
          "ref": "7222dd02-92dd-4845-9431-db75034f4bf4",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "58205c31-7ca9-494a-9ac4-c40a78d59d8c"
        },
        "item": {
          "id": "235c73fb-8c43-4d48-8b84-728a5c62163c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c7335f0c-b5fd-4d9e-a81c-365e12a6460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc9263e-2d53-4897-b3f8-9d93065c1356",
        "cursor": {
          "ref": "a8571f09-39eb-4368-a125-2c39188ba2e4",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "72c39edd-d0cc-47d8-8fec-593d94db7112"
        },
        "item": {
          "id": "cbc9263e-2d53-4897-b3f8-9d93065c1356",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "82b13935-337a-4ea1-9dbe-585959df0516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ada8ade-d667-41a4-b0a2-2e1f1dbb3555",
        "cursor": {
          "ref": "fb76af3f-e827-49a7-a5f3-d6299be5a0bc",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2baa1dc5-6e79-453d-b9b2-a766d6301613"
        },
        "item": {
          "id": "5ada8ade-d667-41a4-b0a2-2e1f1dbb3555",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3d21beca-66b9-47b4-add7-e3a238fe0c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1f6990-14a4-4ea2-9623-75a41463b3f4",
        "cursor": {
          "ref": "66be4dbc-99e7-4f05-92cd-a38c49c1264f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "31cd1260-12cb-408f-8187-f54665915aab"
        },
        "item": {
          "id": "4f1f6990-14a4-4ea2-9623-75a41463b3f4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "295edc9c-22e2-4440-8899-13baed3c3917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2507c4-cbf6-44dc-ade8-11de4bf9951b",
        "cursor": {
          "ref": "dbdc6675-2b6e-4e0f-af42-a1808ab0fe8a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "222d76c3-10a5-4e14-8678-eae0d34b4063"
        },
        "item": {
          "id": "bc2507c4-cbf6-44dc-ade8-11de4bf9951b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "13be5fd8-de04-4377-afab-b5c9024da185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1946657d-6dcd-4824-8451-3400ca5bed1e",
        "cursor": {
          "ref": "efdd5655-eee1-4d68-b5d2-70fd60365e5b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5b1bb1ba-0bd2-4a9b-839b-0fe1fd79e9fb"
        },
        "item": {
          "id": "1946657d-6dcd-4824-8451-3400ca5bed1e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "90531cf1-79c5-45ae-b08c-3f768e4ddaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3915fbc-a34c-42eb-840c-3c63d104c6d4",
        "cursor": {
          "ref": "1ca90e73-845a-4e5b-8292-aa502e1a3d3d",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a58f0027-b7ce-4faf-9bd7-bfd33375cfda"
        },
        "item": {
          "id": "c3915fbc-a34c-42eb-840c-3c63d104c6d4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bc463c46-0bc8-4339-b1c1-ee8bf8d0e103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060097de-8742-48c1-8217-45748a45e323",
        "cursor": {
          "ref": "771bdad7-870f-454d-ad1e-70c798fd6cdb",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0d66544c-a745-4c88-a59b-3cb553d0a499"
        },
        "item": {
          "id": "060097de-8742-48c1-8217-45748a45e323",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "774ab137-3474-44b6-90ab-d81935392939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89d9e62-f64f-4e6f-a3e6-249a21d23ef6",
        "cursor": {
          "ref": "c370e206-141c-4496-bb30-3bd0cbd8bc27",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "efe1f99b-e6b3-401b-a760-3a5babaed508"
        },
        "item": {
          "id": "a89d9e62-f64f-4e6f-a3e6-249a21d23ef6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "efc9b366-054e-421b-88aa-3d34461aeb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a723959-0932-4820-82cf-9675c9cad928",
        "cursor": {
          "ref": "51a69cac-56b3-4fb0-a4ee-d77bdd4c2e16",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9d76a3ab-3eef-4094-8e90-3e8398342d42"
        },
        "item": {
          "id": "1a723959-0932-4820-82cf-9675c9cad928",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0ffeff9d-313d-4eda-beec-85a2cd414da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbacb14-16e8-4ad3-8282-def2975ac81c",
        "cursor": {
          "ref": "84986014-9d06-497d-9c00-ce056af9b0eb",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "587c7d29-9aee-491d-998a-5c83136dfa2e"
        },
        "item": {
          "id": "bfbacb14-16e8-4ad3-8282-def2975ac81c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "67d640f4-7f6c-481d-8708-b046c13f3f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94abd55-31d2-4697-8bc7-833f35cb8656",
        "cursor": {
          "ref": "c86d10c9-af13-4d91-89e5-b591b3e35882",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1a9f46f5-65eb-4a19-9de6-3ad4d582fa02"
        },
        "item": {
          "id": "f94abd55-31d2-4697-8bc7-833f35cb8656",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "435313f1-71b9-430b-bd44-1e93cbe0307b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823d8824-b2c8-4553-90b6-8b9142a2e51d",
        "cursor": {
          "ref": "367c13e4-f69a-48f5-85aa-340e1e85f710",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e7585bfb-27f9-45ce-9934-aeea41159af0"
        },
        "item": {
          "id": "823d8824-b2c8-4553-90b6-8b9142a2e51d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b88e73d7-21f5-4650-9635-cd087edf8ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9bed8d-2799-43b1-a781-a572575c22d9",
        "cursor": {
          "ref": "b8daef3f-01f5-49f4-9d9d-2c6b5b377ea6",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0bf60814-9266-4f6c-b708-5ef6c5a96704"
        },
        "item": {
          "id": "fb9bed8d-2799-43b1-a781-a572575c22d9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e0f93c32-574c-438b-9f1f-919fb8215620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31ae204-eaf0-4844-b097-638a826a06cd",
        "cursor": {
          "ref": "2ce23ff5-4a7e-43e1-85d0-ec7443119a6b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bfc71f43-6dd9-48ec-85fa-8cfdead2d3fd"
        },
        "item": {
          "id": "e31ae204-eaf0-4844-b097-638a826a06cd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f3aff8cc-95d3-4903-8928-aee2b03abe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cefd52-00d4-43e7-87d7-e414446898a2",
        "cursor": {
          "ref": "4c0e3f17-be64-4f74-97a7-34adb7667e6d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bd4e800b-e08a-451e-88a9-677681aab2bd"
        },
        "item": {
          "id": "18cefd52-00d4-43e7-87d7-e414446898a2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "059e5fa8-0b18-48b8-b799-0e8a98a60329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d28bd6-e7c6-42b2-9d2e-da057a8a94c0",
        "cursor": {
          "ref": "4dcce62f-cf60-47f4-97d8-2e87145a1f1d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b502d8a-4620-4adb-8f5f-9d07a141255b"
        },
        "item": {
          "id": "f0d28bd6-e7c6-42b2-9d2e-da057a8a94c0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "624b71e9-7cca-4980-9488-b0800f4023d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19a4b5b-fd8d-4afd-8d90-e53fd05fc2dd",
        "cursor": {
          "ref": "08183abd-5ce5-457b-984d-debd25d0d415",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f5160ca6-9f78-4f50-b4ff-d7287ed507c6"
        },
        "item": {
          "id": "a19a4b5b-fd8d-4afd-8d90-e53fd05fc2dd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9b3bcb03-1e09-4834-a275-791fcc3b3807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03291ca7-0af9-4f26-9e87-5042a911812f",
        "cursor": {
          "ref": "da781978-98b1-43d3-8d66-b1b465e68b81",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7585bf17-035b-449a-9e7f-536dcc95f633"
        },
        "item": {
          "id": "03291ca7-0af9-4f26-9e87-5042a911812f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0ac75794-9b94-4140-88ed-916f8e3d2511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c7870d-a55c-4811-9d1b-911c68d7fe8e",
        "cursor": {
          "ref": "ea5b90df-ed50-45db-ad98-10f2b007a27f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a97c9206-3583-4a7a-98e1-34f9e21deb6d"
        },
        "item": {
          "id": "f3c7870d-a55c-4811-9d1b-911c68d7fe8e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3b00c0b3-eb1b-4468-a300-9b15b88358fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcd37cb-90d8-49fd-80f7-63f60336963a",
        "cursor": {
          "ref": "c515b4b1-43df-474b-b6a7-25e302e03f5b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "25be908b-b178-4b46-b932-31fde70687e7"
        },
        "item": {
          "id": "cdcd37cb-90d8-49fd-80f7-63f60336963a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a056752a-7b2a-4fe4-aae2-a20baaa50f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388af10e-337a-40a3-88d9-782c01a9a348",
        "cursor": {
          "ref": "c622f198-25bf-4f76-99fe-6f04955206e7",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c481614d-e146-4608-919b-e6c3bf2372d2"
        },
        "item": {
          "id": "388af10e-337a-40a3-88d9-782c01a9a348",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "50e7d1d3-8c88-48bc-8f09-a57afd623ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f363d6-8e14-4ea4-824d-fa951bf2e155",
        "cursor": {
          "ref": "dc947399-96b7-4ac1-9641-8919580160de",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fafbd69d-078d-480f-8b7d-8911416cff9d"
        },
        "item": {
          "id": "f1f363d6-8e14-4ea4-824d-fa951bf2e155",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f3e042d4-5575-4c5f-9d5c-09e41c4ed1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5414227-ba65-40e7-bc97-f66a50e8ea0f",
        "cursor": {
          "ref": "7deb3f31-82ea-4e25-a04e-0fdabae329d5",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "30e928e5-15f3-4cf1-948c-a8f702fa7163"
        },
        "item": {
          "id": "b5414227-ba65-40e7-bc97-f66a50e8ea0f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dcd43eb9-aec6-42df-9001-6e0fc6f4a221",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6dbfbf8-51c4-4411-9652-5fb6cdd10023",
        "cursor": {
          "ref": "ad7cafd0-056d-4dde-b42f-4aca1b6be065",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5d43f193-2494-473e-a088-86d6487b7835"
        },
        "item": {
          "id": "e6dbfbf8-51c4-4411-9652-5fb6cdd10023",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "29bbd497-eed4-435f-99bb-b96dd879914a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2537eb7b-aece-44d4-9b24-015e2e526cb5",
        "cursor": {
          "ref": "20de245c-dfe7-4b4c-99c8-55385d6eac8a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "67f024d8-0635-4b73-af07-84d9b4da8416"
        },
        "item": {
          "id": "2537eb7b-aece-44d4-9b24-015e2e526cb5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "16551fed-ebdf-4470-9ea2-d9340b5eacc8",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92a4dab-df15-47f3-bdc0-48fa4e0d9db5",
        "cursor": {
          "ref": "fb0ab062-89fc-4836-ae6e-c7c531b6f03f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4423908f-970a-44cf-b64e-1793ae58f1ea"
        },
        "item": {
          "id": "c92a4dab-df15-47f3-bdc0-48fa4e0d9db5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f46269e9-77c6-46dd-b0d0-4f9bdc7582dd",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6763fb4-adfe-4e8b-8541-e771fb5e5e48",
        "cursor": {
          "ref": "bfe2cd05-91ac-499d-a94c-f0de651be19e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eb11366c-496e-445e-ab8d-c7dde71b31e5"
        },
        "item": {
          "id": "f6763fb4-adfe-4e8b-8541-e771fb5e5e48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "af7173aa-ff57-4b5e-99c3-6d8da3e1053e",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75ab60b-793e-403c-8160-cff47f99c6c1",
        "cursor": {
          "ref": "31df6fbd-088c-4f3d-aa4a-81d85e6f755a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3a374456-fbf4-4e39-a51f-7476e261d615"
        },
        "item": {
          "id": "e75ab60b-793e-403c-8160-cff47f99c6c1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7b3fb1d1-a132-4cd4-9f89-ab72799b6157",
          "status": "Created",
          "code": 201,
          "responseTime": 193,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bc591b-4ec2-467b-a4df-c5e214aee56e",
        "cursor": {
          "ref": "8d09c03c-c30c-4cfb-acbd-3423813afde5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5f83c4d9-ef9e-4acc-9868-fbc6ec35afa4"
        },
        "item": {
          "id": "53bc591b-4ec2-467b-a4df-c5e214aee56e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "336d3dc7-c27f-4f4e-90d2-49c5b5ec1eda",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-04T00:35:59.553Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-04T00:35:59.553Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ab204e8d-f4d5-48fb-982f-6e84348df4ff",
        "cursor": {
          "ref": "65019303-2198-4467-943e-9dbc40f459f5",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f43820f2-c850-456d-a7a8-ae0925202560"
        },
        "item": {
          "id": "ab204e8d-f4d5-48fb-982f-6e84348df4ff",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4419fca1-0d2b-45f6-b6b4-f047cc19c497",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73ab07f-5210-42d7-8573-3b618a894693",
        "cursor": {
          "ref": "c3674bc1-2de5-4498-8eae-fbdc6a264ec0",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ed26d5b3-7d1c-407e-8064-47a57c896d1e"
        },
        "item": {
          "id": "c73ab07f-5210-42d7-8573-3b618a894693",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d2c7427a-b9ab-4a0d-adb4-eb2543a1c710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75e2fd2-1b84-4b8a-a024-c908c9b121cb",
        "cursor": {
          "ref": "b00811e0-ed96-4136-a406-c9b7e544572f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "51f1801f-49a8-4072-8cb2-a31a1068d3db"
        },
        "item": {
          "id": "c75e2fd2-1b84-4b8a-a024-c908c9b121cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1e7df71e-2abf-440a-b114-8027be270241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2236280d-dfef-425a-9e34-cedc937a8522",
        "cursor": {
          "ref": "1409fe74-d943-4889-bf7a-a6e04c96a513",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0545c56e-65cb-40bc-9d0c-8f8ba3042df7"
        },
        "item": {
          "id": "2236280d-dfef-425a-9e34-cedc937a8522",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aaf1a014-52bf-4f02-b530-bc42ef373918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8547d19f-384f-449d-a340-21d808d46796",
        "cursor": {
          "ref": "20b2062d-c126-40e8-8ce6-732f7d65361e",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ffb786dd-9495-472d-87c6-733b0882cec5"
        },
        "item": {
          "id": "8547d19f-384f-449d-a340-21d808d46796",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0f112de1-5907-4ce9-842d-0e44859e7c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6947edea-40b4-4c39-bd30-c439e7f4fb3f",
        "cursor": {
          "ref": "efa7588d-565d-4e20-85bd-f67907669efd",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "141a8bc9-3a3b-439e-8a7b-5e14f65c0fc3"
        },
        "item": {
          "id": "6947edea-40b4-4c39-bd30-c439e7f4fb3f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ca787e82-4556-4086-a9e1-352f31ec7a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ef77e9-b642-4a90-9fdf-86ff5d65be95",
        "cursor": {
          "ref": "04a0a9ab-5515-4189-89a7-4abf5c752c91",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5ad50814-5d15-4821-bd55-03fba016ba31"
        },
        "item": {
          "id": "46ef77e9-b642-4a90-9fdf-86ff5d65be95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4933deb4-974c-450d-aad6-3188ebbd21ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b06d5c8-a196-4dc9-b5b4-98b29a9bbc2c",
        "cursor": {
          "ref": "504e4d32-ff86-479b-bd67-a60ef6d12952",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "67d742e1-cc56-4b35-9226-190ed2da6399"
        },
        "item": {
          "id": "8b06d5c8-a196-4dc9-b5b4-98b29a9bbc2c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d955516e-b111-41d2-ab4b-397072c1a7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632a9546-a03e-478c-a807-ace00282af5c",
        "cursor": {
          "ref": "1fdec75b-4153-4635-ad69-d94ac6bd1a4b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "db48be7e-9069-4c76-9adf-730b2520a286"
        },
        "item": {
          "id": "632a9546-a03e-478c-a807-ace00282af5c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "96a27d64-2e1a-4c3f-9033-3a9af802e289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b008d73b-f437-4ea4-814e-261ca09759cd",
        "cursor": {
          "ref": "9c232858-c74e-4dbd-a734-b5e93b4f32e7",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b19978b6-27af-4309-8ef7-afcb5b852444"
        },
        "item": {
          "id": "b008d73b-f437-4ea4-814e-261ca09759cd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eb03cc46-0b14-45ff-a932-870d6ef94f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcee4654-fbde-4109-b0ab-de34a3ba28cc",
        "cursor": {
          "ref": "13c429d6-d8c3-4f9d-b6e7-fd97838a0553",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f7d8418c-c0e6-4329-8cb3-477efb6d45de"
        },
        "item": {
          "id": "bcee4654-fbde-4109-b0ab-de34a3ba28cc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "41ce522f-c161-4b09-8789-722e8119177c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c237b43-838d-4d26-a22e-6fe44d14bff8",
        "cursor": {
          "ref": "effbc348-8273-42d9-9c9b-f27abc239e37",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7c891cb7-7686-44b4-932b-b0aae2911b70"
        },
        "item": {
          "id": "7c237b43-838d-4d26-a22e-6fe44d14bff8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fa5f5e55-0055-437a-80c9-891f00f7cc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe24ab4-4cc3-4fbb-9de8-8ca58f6c0b3c",
        "cursor": {
          "ref": "87ef5eaa-4ed6-491f-a65c-62f760f30fb8",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2ceb0a1d-7a57-4c1f-9e8f-1fb9ce095081"
        },
        "item": {
          "id": "cbe24ab4-4cc3-4fbb-9de8-8ca58f6c0b3c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cb3e91e4-707e-4d41-a36a-58f28ee7f559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81083bc-30af-41c1-9028-e40231b43f00",
        "cursor": {
          "ref": "08172bcb-3156-4008-ad2d-70465ff3f0cb",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ae02647e-8684-4843-bdc1-5e2b14e43311"
        },
        "item": {
          "id": "f81083bc-30af-41c1-9028-e40231b43f00",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4132d23d-c6e9-4c9b-a5fa-771709821608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e922370c-d570-4c85-b175-67a3a89bbcd9",
        "cursor": {
          "ref": "4cbd29a6-8674-433b-94a9-5ac409e5a241",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bfbf5b60-e904-4ecd-96b9-567c26f763a2"
        },
        "item": {
          "id": "e922370c-d570-4c85-b175-67a3a89bbcd9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dbed36eb-be42-4680-bc4c-4f43dea68b17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "02eafbc2-955d-4940-89fa-0a4eb918a63f",
        "cursor": {
          "ref": "e3ed153c-b604-4f37-89d1-4e0641a5b260",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1cd41165-3a3d-411d-b0aa-391654e05cc0"
        },
        "item": {
          "id": "02eafbc2-955d-4940-89fa-0a4eb918a63f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35eab400-331d-4bc1-9f64-62b9fd856748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdb02e8-5741-4586-ae6e-4927bf9bf8ad",
        "cursor": {
          "ref": "9092a095-9a3a-45f2-a8e6-da29a58ce078",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "045777f1-ea2a-434c-99fa-99f21b6059f7"
        },
        "item": {
          "id": "cfdb02e8-5741-4586-ae6e-4927bf9bf8ad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1ac8bd48-0cae-4908-88c6-ee378b1e1922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dab181-5954-47b6-9858-51aa82f4dde9",
        "cursor": {
          "ref": "cdd68590-bf4a-4bc7-a578-b669d1891a35",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "62a5d1db-0730-4499-b55e-eb0bfcedd963"
        },
        "item": {
          "id": "40dab181-5954-47b6-9858-51aa82f4dde9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0b606c11-3b42-460c-a23b-307d8c34dbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b877c10-c4b1-41c6-a7e6-ac7c7841cf72",
        "cursor": {
          "ref": "ba6f54c2-3111-48fd-855d-8f8306233335",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "30561b28-91e2-41ce-ac4b-ea8b77df8f1a"
        },
        "item": {
          "id": "7b877c10-c4b1-41c6-a7e6-ac7c7841cf72",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fd2ca4ad-1eba-4a4c-956e-2ce0920f4220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92359e50-9cb9-44f3-9f63-241e33b42c53",
        "cursor": {
          "ref": "5d1e8e6e-c2dd-4431-bbbf-9edb4874da33",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "84662e7c-7770-467d-96f7-866175a5c4ae"
        },
        "item": {
          "id": "92359e50-9cb9-44f3-9f63-241e33b42c53",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "789d7f41-b17f-4807-97dc-463971ef0147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4669cea1-b495-4240-baf5-c82d5a03ce98",
        "cursor": {
          "ref": "23eb9544-2800-4cdb-b088-521b95945a03",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38364f36-229e-421b-8e9b-5bbfce146347"
        },
        "item": {
          "id": "4669cea1-b495-4240-baf5-c82d5a03ce98",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7b57364b-cb9e-4c20-8c90-0d994c3ed289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a82fd91-1edc-4c5e-a406-cfcbccf9d97e",
        "cursor": {
          "ref": "8887783a-d096-485b-9747-8fbf8b6ccc6d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ae2a7740-02cd-4da1-ad6e-103ab84b9d2b"
        },
        "item": {
          "id": "7a82fd91-1edc-4c5e-a406-cfcbccf9d97e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9e766429-48b0-4c46-8ad9-8920096ef02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262d7401-c409-4f7e-aaf9-b069229175a5",
        "cursor": {
          "ref": "47a95b94-99a9-4c8f-bae4-2dc593e2872a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4cc879c3-8e62-4da1-956b-1d4f85cff0b4"
        },
        "item": {
          "id": "262d7401-c409-4f7e-aaf9-b069229175a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "98dae5f5-17e4-4e2e-a910-2bd46c42199d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce176a1-f2b3-4b9f-a3d1-9129799e7559",
        "cursor": {
          "ref": "b7ce32ba-cf5b-4cab-bdb3-dc9d9be8bd99",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "51963c3a-9c99-4969-aaa4-10184827ce25"
        },
        "item": {
          "id": "4ce176a1-f2b3-4b9f-a3d1-9129799e7559",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9c6bcf86-e838-4b3d-9cdd-605fcf42cc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a315afb0-c184-4e1f-ab88-46d881309fda",
        "cursor": {
          "ref": "d2a3c6f4-3023-47ae-af91-65f680d5f3e8",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6e330006-d511-470c-a2a8-fccad68ab8f6"
        },
        "item": {
          "id": "a315afb0-c184-4e1f-ab88-46d881309fda",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5069d788-5494-4782-b2e2-7131a036149c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6688ffa5-9d18-44ca-a8c3-d2c20faa192b",
        "cursor": {
          "ref": "22b2b27c-0c72-4fa2-bd0a-1f5890ceecf0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bbc7041b-b0c8-4924-aab9-17734fa19af3"
        },
        "item": {
          "id": "6688ffa5-9d18-44ca-a8c3-d2c20faa192b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a1b070e6-b58c-4c6b-8b9a-ea7c96d12394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7c4d8b-f954-4e27-9507-c2ffbd665d9f",
        "cursor": {
          "ref": "e68b9a3a-b2ab-43c2-ae6e-946ca2468974",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "48273258-73ef-4cae-b19c-ead098703f02"
        },
        "item": {
          "id": "5e7c4d8b-f954-4e27-9507-c2ffbd665d9f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bec77c64-aba6-4861-8a35-b86f806ef8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bcb8da-513b-439a-83b7-f60a37014031",
        "cursor": {
          "ref": "43badcee-7251-494c-91df-a5cf2a15dd83",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "33aa06d2-5008-4b34-bbc8-de95e1914765"
        },
        "item": {
          "id": "05bcb8da-513b-439a-83b7-f60a37014031",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "870b18fe-e332-45f7-bdf1-dc08fec8d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef33498-1300-4f25-949a-29a4ffca0a9b",
        "cursor": {
          "ref": "26791959-2be7-40eb-8e0b-c832b332745a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ab24e601-375f-430d-8b68-08db10d1099d"
        },
        "item": {
          "id": "bef33498-1300-4f25-949a-29a4ffca0a9b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c5ba7fed-f41b-4ca6-a592-1dd13d1b8f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fdf4d4-e3a8-4f0e-9e92-9146730d87e9",
        "cursor": {
          "ref": "4810ce5a-3b1c-4b4a-a4eb-89ef5598ff00",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8cef2fea-80e2-47f6-9041-ae211a73ed87"
        },
        "item": {
          "id": "27fdf4d4-e3a8-4f0e-9e92-9146730d87e9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4a501a51-4251-4934-a4d9-75d4e72714d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7c4660-2a31-43e1-84f5-ba3eeda3b474",
        "cursor": {
          "ref": "1868314e-e5f6-4230-b917-4bb2631acd7a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "26b8b4f7-fb4f-4534-b6ee-41f10a58bff7"
        },
        "item": {
          "id": "4f7c4660-2a31-43e1-84f5-ba3eeda3b474",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "66a8bc23-2629-4da4-8a70-d3a2f6ad579b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f4938b-0661-4000-9633-f4d3622f1c2c",
        "cursor": {
          "ref": "58455d7b-2ae9-47fa-bfc9-4635dc07ecfa",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ec87a592-6736-4e4f-a92e-f14a092fb6b6"
        },
        "item": {
          "id": "a2f4938b-0661-4000-9633-f4d3622f1c2c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab70b350-fd04-44b7-be6d-79feecff881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61b0179-da01-4b4e-9b17-6f1fd7b747c9",
        "cursor": {
          "ref": "bbbf1441-5d43-410a-836a-18ffaabc7067",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9ce73c90-7f4a-4e19-9340-857a08e59e45"
        },
        "item": {
          "id": "c61b0179-da01-4b4e-9b17-6f1fd7b747c9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fea28685-84df-4d5d-abec-b4ebcdbffe9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc7403d-31a6-47e0-9a47-5da816f4f480",
        "cursor": {
          "ref": "ff3656bf-2f9b-4365-8555-67bfb73fd6c7",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0380fbf0-ed1c-437b-9f3b-37286b54b122"
        },
        "item": {
          "id": "6dc7403d-31a6-47e0-9a47-5da816f4f480",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "601f8bdd-56db-4aea-a28e-d0ee0144a9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbd3d11-357c-4033-bb06-9c6138e3dece",
        "cursor": {
          "ref": "bac0ca11-c8fa-408a-9093-3a25c7e35bf1",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e723e8ec-2813-494a-a861-a57cf7cfe919"
        },
        "item": {
          "id": "bfbd3d11-357c-4033-bb06-9c6138e3dece",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "49756fdc-c876-47b9-8938-b1070a955749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa8422b-9f02-4f6b-b766-1d7e60f2ee98",
        "cursor": {
          "ref": "85e35f33-4449-4597-bc93-379790d97b3f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2e87ced1-91a8-4b78-93da-27b5c0a9b283"
        },
        "item": {
          "id": "faa8422b-9f02-4f6b-b766-1d7e60f2ee98",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "27721853-f5e2-4a2c-8491-c16a988681bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc02710-8db3-4a29-bc57-e7f24f811e0e",
        "cursor": {
          "ref": "390c21e5-3c1f-473c-b4a3-30a5a0ce9e4c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2fc3fc6d-99c0-4d91-a3e8-ad57171409ef"
        },
        "item": {
          "id": "1cc02710-8db3-4a29-bc57-e7f24f811e0e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fd46c968-b216-497f-974e-0b366956aa11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815491c9-afcc-4a25-8877-2d2a58929665",
        "cursor": {
          "ref": "74f61640-a8bb-4709-97a3-bb4477461425",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a237d4d6-e224-44fc-8b1f-0cfd4dd227e9"
        },
        "item": {
          "id": "815491c9-afcc-4a25-8877-2d2a58929665",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f5a04818-c68e-4e06-b454-0294925eefbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe75908-f4a7-43c0-a952-df53347418b1",
        "cursor": {
          "ref": "6be1367a-d94b-4228-9f71-67997cce1792",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1ea144b0-fd20-478c-966f-75a544c08b9c"
        },
        "item": {
          "id": "6fe75908-f4a7-43c0-a952-df53347418b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a518dcb6-70fd-4405-b951-be1b7c00fea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122a012d-362b-4d6d-b88a-dd0360b69435",
        "cursor": {
          "ref": "0b1b7981-0075-4680-b81d-9ca6ecb523f7",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "38208dc9-f9d9-43ac-88fb-819b63e79c83"
        },
        "item": {
          "id": "122a012d-362b-4d6d-b88a-dd0360b69435",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eb0f3882-7bcf-4ba1-980b-489855fa17a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35a0eef-7220-4cae-bd53-e722506c117f",
        "cursor": {
          "ref": "be9efd2e-0540-4b8f-aa14-812de0225df8",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "efcb1d06-4525-4e47-a602-85083139e026"
        },
        "item": {
          "id": "d35a0eef-7220-4cae-bd53-e722506c117f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "16db78cb-1fff-4865-a139-7a7bf37959e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86ccdb2-da03-4099-8dba-350b9f9a9b9c",
        "cursor": {
          "ref": "e7a9bc57-d3e7-4913-8240-9e0637bb39a9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "24931b1d-4b53-4a08-b1bb-c549b1e82dd2"
        },
        "item": {
          "id": "c86ccdb2-da03-4099-8dba-350b9f9a9b9c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6c0647ca-7326-4542-8c4e-ca24ad620d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9544b484-72ed-45e5-ab2f-c6e2de8304c9",
        "cursor": {
          "ref": "18ccd50e-61b3-4606-97f8-8c41c11f05ee",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4e3b9e16-bd8d-478e-8490-3aaf9dc95317"
        },
        "item": {
          "id": "9544b484-72ed-45e5-ab2f-c6e2de8304c9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd0587ef-3489-49c4-af91-3de6110fb809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea7a53c-340a-4c48-9fa3-68736066dd05",
        "cursor": {
          "ref": "0de82094-1f91-4278-9987-60a0053e697a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4eb11cda-211c-444b-9cfb-034d82c17b93"
        },
        "item": {
          "id": "2ea7a53c-340a-4c48-9fa3-68736066dd05",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "437a083b-d4f5-4948-b299-f417781c6c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c53436-45b6-4b6e-8328-f69d172d2fef",
        "cursor": {
          "ref": "a28caf8e-a2e6-4a37-92fd-f04409bab8c3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1b0952ef-e3aa-47bc-9d0f-2861055e12d8"
        },
        "item": {
          "id": "51c53436-45b6-4b6e-8328-f69d172d2fef",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "03c7546b-6187-4c3a-bb6b-5e21c5d3115b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "89be03d7-ffc7-41e0-b344-9614e708e9dd",
        "cursor": {
          "ref": "7c4dd663-8581-48f2-a0d2-47356c6b4f7a",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "54b906b4-42d1-4ee5-9279-d006c667b026"
        },
        "item": {
          "id": "89be03d7-ffc7-41e0-b344-9614e708e9dd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b973e268-0b53-43f3-bbca-9085583f3087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d1c090-490f-4b17-a887-049dc44023a7",
        "cursor": {
          "ref": "a70835f5-088b-4faf-b45c-f1e2c5446134",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4cc22690-8c1a-4b12-8b28-0ee073707ed4"
        },
        "item": {
          "id": "17d1c090-490f-4b17-a887-049dc44023a7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0190b61e-61f8-4cf1-8998-4e79b4bd893c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42daea73-1cc8-433f-a323-870416049268",
        "cursor": {
          "ref": "889f97cb-a99e-44b3-a508-f355e3499a8a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "81c9a26e-6575-4831-bbbf-76e96fc752c9"
        },
        "item": {
          "id": "42daea73-1cc8-433f-a323-870416049268",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6ed19ebb-eb2f-499a-9aa2-4ec0963b11ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf17ba74-96d9-474c-92ff-39b61653dab8",
        "cursor": {
          "ref": "c68c90c9-8a62-4993-b9e2-06b95a8309ad",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cc8e5c77-378a-4bec-843b-7d33450ac149"
        },
        "item": {
          "id": "cf17ba74-96d9-474c-92ff-39b61653dab8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b39980e0-bbbe-4371-bb4a-3ad82949c83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fcc5e1-d479-4190-8984-344649f5855f",
        "cursor": {
          "ref": "740269f2-69af-4c67-922a-a41c4d57960b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dd9055df-7b5a-4a53-9bf4-503347ae05ef"
        },
        "item": {
          "id": "80fcc5e1-d479-4190-8984-344649f5855f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9c72e783-72a8-4c82-86a2-6aad67f305ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d2c81b-0495-4cce-b616-472480f0e3b7",
        "cursor": {
          "ref": "2e7d57be-39b5-4384-9fd8-b9be48d1df6d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "05e462b5-fc9b-4535-b6e9-3fdcd7c73cf8"
        },
        "item": {
          "id": "a9d2c81b-0495-4cce-b616-472480f0e3b7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3a467007-a2bb-41be-bec5-76f7ce42eafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd373628-8c0d-4893-aa8f-0bb1cc5b2d22",
        "cursor": {
          "ref": "eff3dd39-7116-4c64-93b4-4f24c40cfcf1",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7d02f64b-c738-48b4-b371-5f0b4367bb72"
        },
        "item": {
          "id": "cd373628-8c0d-4893-aa8f-0bb1cc5b2d22",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ed95d7ba-7d58-46ac-b59e-e605195986c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569878df-95a3-4e5c-a1b6-73b5ad48554d",
        "cursor": {
          "ref": "157bff75-32c7-4ebe-bed4-d8851a747bb2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "68498842-20b6-4080-a264-2bfb6f00a3a1"
        },
        "item": {
          "id": "569878df-95a3-4e5c-a1b6-73b5ad48554d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7186364f-5529-4446-b8e4-b76868e9c768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0ef74a-6249-4cec-844a-f8ad345815a2",
        "cursor": {
          "ref": "b8dd6c9a-5c6c-4230-ad31-eb2fc00f8d93",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c1e9c36f-d54c-47b0-a998-1b14a835898e"
        },
        "item": {
          "id": "8a0ef74a-6249-4cec-844a-f8ad345815a2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c100ee2d-35ee-4c20-869f-d5d2865b20f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dff380-4e76-47b4-80bc-6b34ed5bb18a",
        "cursor": {
          "ref": "05764b6b-e2d8-49f4-abee-0e786d376a01",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f441f8f5-a23e-45b6-8efe-d89561c63545"
        },
        "item": {
          "id": "26dff380-4e76-47b4-80bc-6b34ed5bb18a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b21651c4-b76d-4669-a9a0-f9a61bafa551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd674ae2-f8bc-471b-b962-2cd211631866",
        "cursor": {
          "ref": "dce97066-bb8b-4c3d-a973-8f3a48630fac",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "254ee134-270b-43c7-bb1a-11de38d368cc"
        },
        "item": {
          "id": "cd674ae2-f8bc-471b-b962-2cd211631866",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "77fadc3a-848d-4e59-849f-b8c368f5d9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c26aea-74d0-4f09-b5d6-9a3ee0d0f526",
        "cursor": {
          "ref": "2f48b7a1-8df5-4be9-9290-4cbecc5dc9c1",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fc9f7ece-8732-4475-9f96-82b394054997"
        },
        "item": {
          "id": "65c26aea-74d0-4f09-b5d6-9a3ee0d0f526",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dd3b1056-5bc3-4fa3-b092-c79bdfecf8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc179dc-94c7-4397-947e-d3a8167fd85b",
        "cursor": {
          "ref": "bb70a92f-174f-44e9-976b-66e600054f41",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "14d6edf9-ef7d-47b3-a774-4ad8d6061b8a"
        },
        "item": {
          "id": "fdc179dc-94c7-4397-947e-d3a8167fd85b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e5fdb674-af17-45c4-96b6-fbc2ceac7d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dac4078-8bca-49d9-ae6f-179764daed7c",
        "cursor": {
          "ref": "eb4f3bf3-d553-4340-b98b-97e79656f2cb",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c18fd52d-6197-44bd-9a9e-aa683f54f69d"
        },
        "item": {
          "id": "9dac4078-8bca-49d9-ae6f-179764daed7c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "21819768-ed56-4758-a72c-d773d361f590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f504aa5-62ed-4435-9459-a9e1bb639b80",
        "cursor": {
          "ref": "ba272fbd-3a13-4117-8692-78ae624c071b",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7ca86e90-271b-401d-b197-50c1d835f152"
        },
        "item": {
          "id": "0f504aa5-62ed-4435-9459-a9e1bb639b80",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "76ddebf4-a51f-4084-aaf8-546240f069fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a264812-f13e-49a3-968e-e42da63c62ce",
        "cursor": {
          "ref": "4551f69f-f30e-442d-a5ac-dfad1da12e92",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3676fb1e-9959-4927-9be9-d7d136f3948d"
        },
        "item": {
          "id": "5a264812-f13e-49a3-968e-e42da63c62ce",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6bf07556-cf8b-49b7-8a25-6d4e240a723e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52489bb9-03ae-4c52-9870-fab7cd01cfdf",
        "cursor": {
          "ref": "b28a553c-695f-4457-8d02-8c1822b54004",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "91b558b9-2f3e-4a24-9e31-3a9a5a2e84c1"
        },
        "item": {
          "id": "52489bb9-03ae-4c52-9870-fab7cd01cfdf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f6d38836-6969-474b-8481-1d6bd052a276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6ce5f6-aff9-4105-ad1a-2cb46121f471",
        "cursor": {
          "ref": "cbfb0b82-6c36-42a0-a4b5-ad637b25661b",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f70a407c-d4ba-40c7-a526-7c666bd381cb"
        },
        "item": {
          "id": "0e6ce5f6-aff9-4105-ad1a-2cb46121f471",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "36643efa-1c1d-449c-a0f8-216f221a98fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d77388e-3c60-46b6-8efd-7d4dc6e6875b",
        "cursor": {
          "ref": "36e1db4c-77de-4b73-afcd-4d16ef6033b0",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "965eae95-8b7d-40cd-9797-d46b9376a7b1"
        },
        "item": {
          "id": "1d77388e-3c60-46b6-8efd-7d4dc6e6875b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5df3716d-34bd-409c-8c03-ea4bd6ac6ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143d7aa4-e8b4-4705-84d7-5a7f01cd90d8",
        "cursor": {
          "ref": "b3641074-0aa1-4f75-8ebe-d71568d0688d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4550186e-d66d-4d7f-8242-1a22c03d9a9a"
        },
        "item": {
          "id": "143d7aa4-e8b4-4705-84d7-5a7f01cd90d8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "51969ce2-8263-470d-84b2-f15ef488a182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd6ebf4-d401-4576-ae25-8b3b4ec6dd6b",
        "cursor": {
          "ref": "ace50dbf-2e53-422e-90dc-820e97b20a10",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c84fc5ae-44fc-43f3-9824-1f91ea215858"
        },
        "item": {
          "id": "6cd6ebf4-d401-4576-ae25-8b3b4ec6dd6b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "238cdc9a-53c8-4f8a-95ca-ca21693c3e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9def69-b0cd-497e-bbe3-abfb66afa264",
        "cursor": {
          "ref": "7d38df6f-1bc5-41c2-88d7-99ad058d897d",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8416291d-11bf-4727-8fd7-73a29ce0fd01"
        },
        "item": {
          "id": "6b9def69-b0cd-497e-bbe3-abfb66afa264",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "81e609cb-8510-41da-a0f3-71bdeb25043f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a722639-061a-4371-9962-cb061b681346",
        "cursor": {
          "ref": "0d2ec497-130a-40a9-b768-e323937a1ee9",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2ce70c48-942d-4e8c-9b77-57bad576588d"
        },
        "item": {
          "id": "7a722639-061a-4371-9962-cb061b681346",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5b8ef7b2-cca7-4e92-95b0-5f3fec742f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40dd673-2cd3-4cf3-88c9-a14044286def",
        "cursor": {
          "ref": "2d350120-eb88-46b3-be7f-e9f19b2a75ed",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a3f37f50-7b10-4fbc-bb00-fd43d8be1dd5"
        },
        "item": {
          "id": "c40dd673-2cd3-4cf3-88c9-a14044286def",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "74b27615-eeee-456c-bc55-0b11893786b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a81c73-5c54-44ea-a20e-1ce5249bebcf",
        "cursor": {
          "ref": "ddc1bd98-d34d-4174-90e5-f94b75396dd1",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "84d2b60e-296c-4ee5-adf6-7b5812719028"
        },
        "item": {
          "id": "01a81c73-5c54-44ea-a20e-1ce5249bebcf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1aefe01c-fbe6-406b-adab-31d0544c25bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97d32bd-7a91-4aa6-a37d-5ed5f293ac33",
        "cursor": {
          "ref": "b5affa55-3958-4b9e-b873-2ac07c1fd9e1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bffbf4ed-a5ed-4d92-b992-29baccb1ecae"
        },
        "item": {
          "id": "a97d32bd-7a91-4aa6-a37d-5ed5f293ac33",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "090703f8-aae5-4bb8-b833-5883ba8df127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bf7d05-452e-43c6-b77e-192e3eb35a2e",
        "cursor": {
          "ref": "f2489fec-54e0-45cb-a355-f6b5ed289fa0",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a7d96198-1fd6-4101-b8f8-0023b284ef71"
        },
        "item": {
          "id": "c3bf7d05-452e-43c6-b77e-192e3eb35a2e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ae297271-d504-46ef-bb6a-34988248b5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a824944-20e4-4008-8e73-5c3886742d10",
        "cursor": {
          "ref": "12352edb-7c3d-4c31-a2be-aabd82972a76",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ea5dce5b-bd7f-4085-8f5a-54fee086fb8b"
        },
        "item": {
          "id": "3a824944-20e4-4008-8e73-5c3886742d10",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "65b62cc0-7fad-4b5e-8b35-86497d03e998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd4e0b1-d5d8-4c9c-bd35-20b906b22ed3",
        "cursor": {
          "ref": "e43adc2e-ec1b-4b80-afb4-4e9dae36f9ed",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "162f1f6e-1069-472c-a1ae-02a1f096fdf8"
        },
        "item": {
          "id": "ddd4e0b1-d5d8-4c9c-bd35-20b906b22ed3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d904fe27-f4c6-45fe-98dd-cd4e119742a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f41bbbc-b527-4605-a845-9ac547d07e63",
        "cursor": {
          "ref": "32d13481-f114-4fe9-8a6f-4ea779a7bb23",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7a55a202-cf2c-46a1-bea8-11bbc31105c5"
        },
        "item": {
          "id": "8f41bbbc-b527-4605-a845-9ac547d07e63",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "eb5940fb-e0ba-4b6c-b056-c478a68f0d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "35324db2-927a-44a7-9da5-2a1f9f1f5743",
        "cursor": {
          "ref": "9bf78097-e571-43ed-b0e4-ae83f961b641",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c77c2809-7127-4b98-89a4-0789eb1e992c"
        },
        "item": {
          "id": "35324db2-927a-44a7-9da5-2a1f9f1f5743",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1b931146-e562-4756-85e9-0001a1bb1610",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4fad7c42-f3dc-49b4-a9bf-5a494a071669",
        "cursor": {
          "ref": "a126f893-60d5-4020-a451-75baf2c1d84f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a5acdb1a-f418-4783-b2ce-597251782127"
        },
        "item": {
          "id": "4fad7c42-f3dc-49b4-a9bf-5a494a071669",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5f0b8abe-f211-4d53-99be-3c7f750432ec",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e96acf0b-7fba-4f36-80f5-eb26cc7d3f11",
        "cursor": {
          "ref": "3aedc072-d736-40ed-a93a-5f3e6b92acab",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5b814596-3c12-4000-afb2-a04681c0a8f7"
        },
        "item": {
          "id": "e96acf0b-7fba-4f36-80f5-eb26cc7d3f11",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "01f00949-d0b8-4b49-a3e1-c5baf17f1b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff834a6d-c70f-40f0-bd97-f4d36e450d6c",
        "cursor": {
          "ref": "846f79d8-52c1-45fc-b57d-893c7351a223",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3ab2ae7f-d531-493e-b0b4-bad61baaac44"
        },
        "item": {
          "id": "ff834a6d-c70f-40f0-bd97-f4d36e450d6c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f0b02a53-0a60-4eb0-87f8-3e2a858f57d2",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b909ad5d-e081-46c4-9a4e-84d82edcc459",
        "cursor": {
          "ref": "440d5c14-b514-4614-b3b2-d6252151fc70",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e6cfe785-9a25-44c6-9f0c-4e559102c311"
        },
        "item": {
          "id": "b909ad5d-e081-46c4-9a4e-84d82edcc459",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2c59975a-a858-4e9c-832a-1a2dd3747ad2",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2b1d0780-0fd5-4582-9002-0b8c3019f555",
        "cursor": {
          "ref": "51881ac0-d34b-4431-b270-9929f40de27f",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6527ae91-f0a5-45e3-9677-65fb25828947"
        },
        "item": {
          "id": "2b1d0780-0fd5-4582-9002-0b8c3019f555",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c96f5ba8-d061-4188-b308-58769b604fad",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5f0028e6-765c-4bd9-8cda-9206700a5f2b",
        "cursor": {
          "ref": "d4cfecac-3c4c-4177-b699-2a569056247e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "833d1c41-798d-49bc-8c31-1505512ab10c"
        },
        "item": {
          "id": "5f0028e6-765c-4bd9-8cda-9206700a5f2b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "91592256-26a5-4025-87cb-9e7070325f86",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ec8aa06e-d975-4cb7-b00b-d63dc1b3a0f5",
        "cursor": {
          "ref": "678c1e45-4513-41bb-933d-02bdb3de5754",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "682242cf-0e12-4ab1-9651-72f3dddabf41"
        },
        "item": {
          "id": "ec8aa06e-d975-4cb7-b00b-d63dc1b3a0f5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3fd6fe80-a803-405f-9ea5-946734d3484a",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3fa520a9-9cec-47c5-b796-a7638aa082f8",
        "cursor": {
          "ref": "134f5e60-6540-4670-b0df-1d278a3502dc",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bc0dea3b-56d2-4455-a0bc-b78dca299e49"
        },
        "item": {
          "id": "3fa520a9-9cec-47c5-b796-a7638aa082f8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "49c99e61-d899-43da-9d89-d84755e2235f",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "071213ee-038a-400f-a277-96eafc02bb83",
        "cursor": {
          "ref": "e60d262e-4367-4cfe-9b4e-f384694799de",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fce0635a-54de-4974-ad50-1d720b0ac2f8"
        },
        "item": {
          "id": "071213ee-038a-400f-a277-96eafc02bb83",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "38a37b73-643d-4e88-a785-f4e931d5b454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db9dbf3-07f9-4155-9273-3ff5cbc00427",
        "cursor": {
          "ref": "5dcc9472-2207-4729-98aa-5f0bc0337156",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b7baf4a0-224f-4d12-83cb-316dc45e6d68"
        },
        "item": {
          "id": "8db9dbf3-07f9-4155-9273-3ff5cbc00427",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ca4c0b38-9bb3-4d49-97b5-4fffe7fbb2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b925628b-0512-47f8-a2dc-08a64d969089",
        "cursor": {
          "ref": "58cb87aa-5ef8-4147-a6f7-62aefbde8c6d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b5bea439-3702-4081-9ca4-b22945f96df7"
        },
        "item": {
          "id": "b925628b-0512-47f8-a2dc-08a64d969089",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "07648db3-5b48-4a02-8d73-11da575f73a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcfcc21-7b60-4101-b730-d4d489d7f0ea",
        "cursor": {
          "ref": "f2f56b38-b472-4951-82b0-6ba44b80de22",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "263f249d-267c-454f-92ad-2e8e171591c4"
        },
        "item": {
          "id": "3fcfcc21-7b60-4101-b730-d4d489d7f0ea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "17a0d6fb-fe3e-423d-9588-ab3dd0ea4b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b0fec5-ba4c-40f1-853e-69e123b5e7df",
        "cursor": {
          "ref": "3cb0912f-899f-442a-bdf2-9848eca939a3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0210af06-9b46-44a5-8b83-a0a69f305df5"
        },
        "item": {
          "id": "25b0fec5-ba4c-40f1-853e-69e123b5e7df",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39040f25-6874-40ed-9503-5057a3573c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5270c35-9d5e-4ff4-a507-f177825eba3d",
        "cursor": {
          "ref": "cabbd510-4ee6-47a6-94ef-66cdda2fdd4f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "97537e58-9faf-4081-bdbe-93844bd6cd49"
        },
        "item": {
          "id": "d5270c35-9d5e-4ff4-a507-f177825eba3d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "382b4cea-fce6-4bfc-a5c2-f298243a0df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac77d6-5de7-4d4f-9fc4-9435b2e6251a",
        "cursor": {
          "ref": "b1c3e115-f7dc-45f3-b417-958efd77e8de",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5712708b-6739-4124-9cbb-4e32b2e49d3e"
        },
        "item": {
          "id": "4bac77d6-5de7-4d4f-9fc4-9435b2e6251a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c093d414-bbbe-48bf-8d9c-759162f69856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371f1e1b-14e9-4ef7-baa9-a17054d8f7b8",
        "cursor": {
          "ref": "896d72ce-375a-45d5-a10c-129e8831c77a",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "053843a4-d4b3-4980-8cb9-bebd96ba76a4"
        },
        "item": {
          "id": "371f1e1b-14e9-4ef7-baa9-a17054d8f7b8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d80fa43b-bd1a-4f30-a5d7-8fb20661d9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f4dcb5-8b54-432a-955b-de51923aa8fe",
        "cursor": {
          "ref": "b7bd0253-8a44-4123-9a82-8dff0786b4b8",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4a835200-e5ec-4d9f-aec7-64957f790876"
        },
        "item": {
          "id": "81f4dcb5-8b54-432a-955b-de51923aa8fe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7b78553c-388e-436a-8b5e-c466335c1196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8123c79-c268-4ee4-8958-034db786d7ca",
        "cursor": {
          "ref": "3ae1a3cc-ec22-462a-8332-59f7f5124b51",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9f96bbc4-7e7f-4ee2-8f9b-3bc560645db5"
        },
        "item": {
          "id": "a8123c79-c268-4ee4-8958-034db786d7ca",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "db9500e5-bbfd-40b3-9565-88e58b77ef40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363a15de-e998-4bcc-b551-cf933969301f",
        "cursor": {
          "ref": "53ba428c-3a14-4500-8002-782d4c6bb63e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "399bd947-7b3f-4ff8-ac77-7c0d9c65f14b"
        },
        "item": {
          "id": "363a15de-e998-4bcc-b551-cf933969301f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "26144691-9b45-446c-89ea-88dd901bfc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc6431e-5cd0-4e72-b0d2-be41b84f8a1a",
        "cursor": {
          "ref": "b6cd0da4-7766-4092-b9aa-0d12e1469941",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "997f81f8-3c02-423e-975c-91fe27d13f09"
        },
        "item": {
          "id": "6cc6431e-5cd0-4e72-b0d2-be41b84f8a1a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d2302d5c-ce9b-4dd9-8b9f-e23d3faf46cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d201c8f3-5505-4e78-a910-d85063f19e31",
        "cursor": {
          "ref": "c5b6c16e-fd67-440c-b3de-8082f47e0112",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "57177ece-54d2-4e24-bcf7-35084a13b8ad"
        },
        "item": {
          "id": "d201c8f3-5505-4e78-a910-d85063f19e31",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1c824ac1-dd51-4f56-be4d-2e49fcb70e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d426b994-3e0d-4210-8fd3-10a0785f9ba5",
        "cursor": {
          "ref": "cbd7b476-d012-4091-a0a1-4490bfa2b67e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f1bbdc10-3cf9-434b-a6f8-82e7a7ba8a7c"
        },
        "item": {
          "id": "d426b994-3e0d-4210-8fd3-10a0785f9ba5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e2b0468-9a14-44c1-94aa-62d4d8adbdf8",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "541ee7ab-3026-4dde-bda4-ba5f99639aca",
        "cursor": {
          "ref": "b4b14821-e88f-45d9-9a87-d97e28633882",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "793eba60-1d93-40ae-afc2-859bc2d6432d"
        },
        "item": {
          "id": "541ee7ab-3026-4dde-bda4-ba5f99639aca",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8e2418ce-e8ee-4c22-89d9-855bda373e7a",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a0eff75b-0d1d-4276-be78-930e33d29466",
        "cursor": {
          "ref": "54b0d244-c5fc-47a6-bca0-287df25c918d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "30dd7e24-c0e6-43b6-857b-3a51e5ae5738"
        },
        "item": {
          "id": "a0eff75b-0d1d-4276-be78-930e33d29466",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "794f7b9d-cc44-49c5-b5f4-d8d8de35d771",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "614f952b-dbee-4075-8d0e-6a0faa0232df",
        "cursor": {
          "ref": "ff38c5ff-af18-4df0-b146-20c3293a34cc",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "af6040c6-9c4d-478a-b1b0-d608e27e3dcf"
        },
        "item": {
          "id": "614f952b-dbee-4075-8d0e-6a0faa0232df",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "49658263-302f-4006-9fd7-55a366b90454",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "bafb6046-7c58-4e53-a2a4-d6cad4c35b55",
        "cursor": {
          "ref": "72ee3f50-1e0f-4f71-b030-307a2ab12add",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aac5751f-2dc2-4350-81a5-0692c778d80a"
        },
        "item": {
          "id": "bafb6046-7c58-4e53-a2a4-d6cad4c35b55",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bab1c8c5-7453-429f-b61b-1a28ff1d413a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8307f4b0-725a-4cb8-880f-770ef775b4e9",
        "cursor": {
          "ref": "8fe6b60a-ae73-499e-8fd5-d82657df44fd",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "64dd5c2e-e2e4-4a7b-a4c7-8b2f1efb582c"
        },
        "item": {
          "id": "8307f4b0-725a-4cb8-880f-770ef775b4e9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a3fd6ab5-06dc-49ff-b91b-d1fe6425f8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d758ac-bae5-4a91-b9a4-528629d45d48",
        "cursor": {
          "ref": "a3f2c5b1-0740-460c-bccc-356abd9fab17",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "407a3c76-2ff8-4d19-90ed-738979b2a289"
        },
        "item": {
          "id": "92d758ac-bae5-4a91-b9a4-528629d45d48",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8ed60712-82b2-4c36-b664-a958a9adbecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fba8c4-4cb9-4729-bfd4-d96c83def0d3",
        "cursor": {
          "ref": "91f98c75-fed9-4c82-997d-39d7bc6bff45",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "248f3d0f-47ad-4f30-8ce7-229a39ed6f55"
        },
        "item": {
          "id": "29fba8c4-4cb9-4729-bfd4-d96c83def0d3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9e077f32-e3ec-45b5-8c2b-94cbf55da3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d28184b-6e7c-44a8-bc87-addb0fb47666",
        "cursor": {
          "ref": "5ae56b71-10c7-43fa-8649-18a3ba6bf680",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0c8c47b3-9069-4acf-a034-0db187b44568"
        },
        "item": {
          "id": "9d28184b-6e7c-44a8-bc87-addb0fb47666",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6848798e-2a51-459b-aec3-17dbab338e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295abdca-88ec-42f6-b96a-b6a55e1c5aae",
        "cursor": {
          "ref": "3976ff69-6c9b-4df4-91e5-20ce1b6ca44f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b1487c14-f97b-45a8-8974-b81862674f17"
        },
        "item": {
          "id": "295abdca-88ec-42f6-b96a-b6a55e1c5aae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6404b6bf-a38f-4ec9-9835-fc67053d381f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1f63b-703e-4b2d-8173-e402a27c573c",
        "cursor": {
          "ref": "b8f72a09-5fa8-4354-addc-f60d6119f4b3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8b281057-a0f3-4bc7-8502-3201ffb1bfd2"
        },
        "item": {
          "id": "3aa1f63b-703e-4b2d-8173-e402a27c573c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c00c276a-d3ce-4b24-84a1-8134e6bfb317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd5f087-0821-4239-b980-68c194f5e4ab",
        "cursor": {
          "ref": "bdcbe6af-509b-4696-bb19-b0df97500971",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b631e87d-7180-468b-a85d-d41dc2bcb53f"
        },
        "item": {
          "id": "afd5f087-0821-4239-b980-68c194f5e4ab",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d5c0446c-8444-4652-963a-d207dcb9637c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bb31e-da0d-4bdd-b62c-df531e724461",
        "cursor": {
          "ref": "5a81cd97-f78e-40ef-a8e0-50db1327a8dc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ac52db1b-fb6c-44b2-854a-d75deb412cdf"
        },
        "item": {
          "id": "407bb31e-da0d-4bdd-b62c-df531e724461",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1d336bb0-3936-4309-8c1f-cc21d2772e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4b1837-061a-44a8-a263-f13a9ac58a52",
        "cursor": {
          "ref": "081f4d51-fbfe-4e30-85df-ad9e9a1ac845",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a5eaea6e-03dd-47f1-8d8b-f233f4ef3bb8"
        },
        "item": {
          "id": "6c4b1837-061a-44a8-a263-f13a9ac58a52",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "26047be5-d009-4a38-b7ea-d30b8dda604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742ab0e2-7f74-4530-a5d6-bebe549044fe",
        "cursor": {
          "ref": "d40dcbc4-f715-4555-b07b-e670b937edc5",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b7c4c62a-bd2b-4ba3-bed6-9ba96a1c0314"
        },
        "item": {
          "id": "742ab0e2-7f74-4530-a5d6-bebe549044fe",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "612dc8d4-114d-428c-91de-3a3710774ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be4edcf-5f8e-4695-92f2-260fc233099e",
        "cursor": {
          "ref": "31a2e602-70b8-4983-9fab-0a42aab7d21e",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c6df65c9-1321-463c-b95c-e8314f6e9383"
        },
        "item": {
          "id": "0be4edcf-5f8e-4695-92f2-260fc233099e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "403bd0e5-3482-4b3e-92ef-57f3eb476a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d8bada-49a6-43ed-9e58-5df4834e1b1a",
        "cursor": {
          "ref": "a8cd3fc2-1008-4c2f-82c4-49ecc881d18a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1196c149-6315-42d8-a248-d0c2b0552855"
        },
        "item": {
          "id": "35d8bada-49a6-43ed-9e58-5df4834e1b1a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "592cbe92-612b-4685-924e-8b699e8af8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62546995-5d5a-4bc9-80fa-9ac0df6e21e4",
        "cursor": {
          "ref": "e2c2dcc2-fb3a-463f-abe4-269bee919a96",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8b89a133-13c7-4247-b636-813542c87893"
        },
        "item": {
          "id": "62546995-5d5a-4bc9-80fa-9ac0df6e21e4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce55d57d-05d8-4405-a4cf-c7a58255a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4176cdf9-b1f4-40d1-90e9-3087630808cd",
        "cursor": {
          "ref": "21a70838-2cc5-4d3d-93d7-bc99e4145a65",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "48553db3-07ed-4dd0-8cb6-44f05c15d758"
        },
        "item": {
          "id": "4176cdf9-b1f4-40d1-90e9-3087630808cd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "61170d15-a1c0-4ba4-8226-6bf48167a77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c63333d-f2af-454f-9206-9f1cf693b7a7",
        "cursor": {
          "ref": "8488afeb-6faf-4249-ac5f-480af95d6f5f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1ab80302-c498-4471-972d-f2d8176bbe98"
        },
        "item": {
          "id": "1c63333d-f2af-454f-9206-9f1cf693b7a7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8eceb180-1937-4005-9a14-a81f484c100c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f774c04-bf6f-4fc4-987c-3d31f35e8fc1",
        "cursor": {
          "ref": "f84038ab-53e1-46cb-bd97-d594b5541f00",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "26cf5ae0-1622-4031-ba61-7b8bec74a7f0"
        },
        "item": {
          "id": "3f774c04-bf6f-4fc4-987c-3d31f35e8fc1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "61b52b46-522e-494e-b7db-bf7499e27585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373503ac-aff3-447b-98a6-4c1123dae15b",
        "cursor": {
          "ref": "944a082b-b4ed-491a-a1dc-838d7f3b56b3",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "63b1eea7-6de5-4a82-b001-e6465b60fea4"
        },
        "item": {
          "id": "373503ac-aff3-447b-98a6-4c1123dae15b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "562ebd33-e8b9-4222-a6d8-e19917c3d631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84c7440-280b-4ba8-b7d0-ed495c5293df",
        "cursor": {
          "ref": "ae6b51cd-4387-4d5c-bad7-8b2820e12d19",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "aa0ec146-674c-4498-a075-f2c5b0be4650"
        },
        "item": {
          "id": "f84c7440-280b-4ba8-b7d0-ed495c5293df",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3032a89d-2fee-4d4b-8472-9a1f2225ba4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d599fb0-2cae-47b0-bfee-93869135bfdb",
        "cursor": {
          "ref": "3b02c6e7-9441-4c07-adee-e5c71c79d784",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c7f639d0-bc7e-4228-b1a9-e24bc566ea00"
        },
        "item": {
          "id": "3d599fb0-2cae-47b0-bfee-93869135bfdb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "46d98fc1-e76f-411e-be6c-99c74f8d5b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51448acf-cb4a-411e-9124-8cde8ebd71f8",
        "cursor": {
          "ref": "315dcb94-77c3-4cdc-90e0-87fc3caaf409",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "55a7a201-aa1b-4317-a81a-1619849ea4ed"
        },
        "item": {
          "id": "51448acf-cb4a-411e-9124-8cde8ebd71f8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c0124c39-4d80-4223-b0f3-39fc7959f3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511624e2-9c26-45cf-87d2-3767f67d3a7a",
        "cursor": {
          "ref": "aa60a58d-9004-422c-9dd9-1bb321c83ece",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "20ec3f76-f6a3-485c-b6b8-08c9efb1f3cc"
        },
        "item": {
          "id": "511624e2-9c26-45cf-87d2-3767f67d3a7a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a42be3b1-00d8-4853-8419-87e05050b1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70047e01-2e84-4f2a-856d-177353b7d914",
        "cursor": {
          "ref": "2fc3eff3-5f89-4368-9311-2181af6aaec0",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a72c111b-4e70-411a-893b-e974be3db976"
        },
        "item": {
          "id": "70047e01-2e84-4f2a-856d-177353b7d914",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "02c5055e-1300-4471-95ac-dca71c781bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd241b98-1928-435f-b721-388318923c01",
        "cursor": {
          "ref": "ec64fa91-c12d-4391-bf35-95539d2e9d48",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "15d9b296-baac-4f36-9859-76b458cb31db"
        },
        "item": {
          "id": "fd241b98-1928-435f-b721-388318923c01",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "98065028-0aea-4c2e-a04c-782df24428df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115d15e4-33ac-4ccc-a6e1-1eb676988dbb",
        "cursor": {
          "ref": "72bf7f9c-8f9f-4cb2-9a86-bd0fafa47135",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "12e38a2b-0dc2-460d-9c31-8d363b1544e2"
        },
        "item": {
          "id": "115d15e4-33ac-4ccc-a6e1-1eb676988dbb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "68de9523-cd69-4678-a8f4-fd3520cff985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb30e3e-1766-425b-8cec-4dd8b8f7d973",
        "cursor": {
          "ref": "d64193fd-d6d3-43e5-83dd-b9bfa5604c87",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5847989d-60a5-4111-9001-ff0d066c6463"
        },
        "item": {
          "id": "cfb30e3e-1766-425b-8cec-4dd8b8f7d973",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a19c27dc-8da7-4a19-a716-283ef4fdf1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf774f7-6676-46b0-b563-fb2f025f85cd",
        "cursor": {
          "ref": "f21651e4-2f23-4f38-bbed-ef2ec76b292c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "59909f4d-1c11-49ca-bdcb-f07ed830ae3a"
        },
        "item": {
          "id": "dcf774f7-6676-46b0-b563-fb2f025f85cd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4283583b-9466-4d45-b4fc-87b2e0f8bc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760c0176-b121-4b9a-9a41-6d40e51ad9b5",
        "cursor": {
          "ref": "df27f24f-f2e9-42ef-b9dc-026538e3aaad",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "64347b11-dc73-4e29-870b-11eb308f1775"
        },
        "item": {
          "id": "760c0176-b121-4b9a-9a41-6d40e51ad9b5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8c24fcf9-2aeb-40f7-9136-aa46bf11f502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476c2939-158a-472f-ac86-ccee2dc49360",
        "cursor": {
          "ref": "ea0b7706-95ee-4f1d-92cb-089a4c346e9a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4da1f2f5-a719-4a35-b874-e93d378d68ae"
        },
        "item": {
          "id": "476c2939-158a-472f-ac86-ccee2dc49360",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aa1746eb-be78-4ef9-9800-e04dc8c86eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c57dd7-758e-4a64-a6e3-1a6d9b8751b0",
        "cursor": {
          "ref": "2cd1111e-1d53-4ed0-89ce-328365db260d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fdf80231-47b7-43a8-a6b5-eebb4b3a6e55"
        },
        "item": {
          "id": "36c57dd7-758e-4a64-a6e3-1a6d9b8751b0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c41cc671-d9d7-4659-8d7c-5dfd0645776f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973282bb-7a12-4dd9-86f0-116203774c8b",
        "cursor": {
          "ref": "f830bdc1-e0ce-4caf-9e6d-4566a7b7f1fb",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b41f8dc-e83c-4407-aa4e-f02e8348d736"
        },
        "item": {
          "id": "973282bb-7a12-4dd9-86f0-116203774c8b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "35eacd64-a843-4386-9c3d-72af21d71d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6107d795-71fd-40c3-8e09-5eb645f1d50b",
        "cursor": {
          "ref": "f57d14de-20c8-4ba7-8b4f-3e027552e0a9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1e9a431f-6cb0-48e0-ad88-0707e2762dac"
        },
        "item": {
          "id": "6107d795-71fd-40c3-8e09-5eb645f1d50b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ea592ec0-33f6-4059-8d72-b468a23be602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fc1302-bfad-4580-afcf-4731738c903d",
        "cursor": {
          "ref": "4bce311b-40bf-49c0-b655-de54e825c386",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6f32560a-3667-408a-8dd4-641f0452a43b"
        },
        "item": {
          "id": "f1fc1302-bfad-4580-afcf-4731738c903d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b71a79b6-20eb-4c64-9d59-c00a354b5cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2f8a97-1899-4cf2-b103-b1bbbbe93b4c",
        "cursor": {
          "ref": "924998bd-1b8c-4fef-9d2e-0e3109699e2a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7e51841f-d62e-4930-b54b-1106954acf87"
        },
        "item": {
          "id": "3d2f8a97-1899-4cf2-b103-b1bbbbe93b4c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4da7d2ad-1cce-40d8-ab3b-5ff088110d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66d34c0-11aa-43dc-b035-52d57c6daa34",
        "cursor": {
          "ref": "4da496f8-d862-41d7-b9aa-e16569b060e6",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8fadf37b-2cee-4459-bd71-1a6d5966c461"
        },
        "item": {
          "id": "d66d34c0-11aa-43dc-b035-52d57c6daa34",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "103fb126-2a5d-4319-935a-211617faf754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b9ba35-67a9-4c41-8842-8175bb97278a",
        "cursor": {
          "ref": "41cda15a-41c0-41b9-9e62-00153f2dc109",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9338d7e4-e6be-46cd-b596-465cdf81a0b4"
        },
        "item": {
          "id": "e6b9ba35-67a9-4c41-8842-8175bb97278a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9dc795b7-cdc7-43b2-b117-b5e9dbc91391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46744cfd-c646-4155-8abe-2b0f2fcddec2",
        "cursor": {
          "ref": "e5540776-5e5e-40cc-a543-e26e11f0460f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9bd7e670-7a28-4ac1-9f52-1dc68b13e29d"
        },
        "item": {
          "id": "46744cfd-c646-4155-8abe-2b0f2fcddec2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7be75798-8eab-4b44-a200-570e387b1c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "cd620798-060c-414b-915f-82059cb4b182",
        "cursor": {
          "ref": "302f8107-d198-41bd-8476-df45c083c9a1",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "92b4764e-eebc-49ee-aeda-4c86ee6f3894"
        },
        "item": {
          "id": "cd620798-060c-414b-915f-82059cb4b182",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a953b30d-d6a7-4ca1-b866-cc89d8cf455d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "54851ec9-5596-4413-b388-fb90b28607df",
        "cursor": {
          "ref": "cb39567e-0645-4f4f-b920-5e40fc5c866b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d3bbe2d7-9cca-4c32-b7a9-2aa49ebed86d"
        },
        "item": {
          "id": "54851ec9-5596-4413-b388-fb90b28607df",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d86722e0-3798-4cbb-9300-d3553132d047",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5824e46-5052-4842-b859-043989f845d9",
        "cursor": {
          "ref": "630dbd58-adcc-4009-9fc6-bc1aaf4c230e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "78778264-cb56-49b7-9ed4-876ab6abe8ce"
        },
        "item": {
          "id": "f5824e46-5052-4842-b859-043989f845d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1442095d-022a-4b46-be57-2c205f71ec9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5824e46-5052-4842-b859-043989f845d9",
        "cursor": {
          "ref": "630dbd58-adcc-4009-9fc6-bc1aaf4c230e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "78778264-cb56-49b7-9ed4-876ab6abe8ce"
        },
        "item": {
          "id": "f5824e46-5052-4842-b859-043989f845d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1442095d-022a-4b46-be57-2c205f71ec9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43506914-4972-41c7-a156-0e55f58ec094",
        "cursor": {
          "ref": "c9527d21-7872-4679-b107-b0cf169e26cd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3c1361a0-4a11-4aea-af23-b41f47643710"
        },
        "item": {
          "id": "43506914-4972-41c7-a156-0e55f58ec094",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ae8d91fc-2d4f-46ec-92d7-abba228f055c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df0381e-328d-4a2c-88f9-3231d84ff5a8",
        "cursor": {
          "ref": "536f8d89-7b81-40f0-b85d-4ea03f62e838",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "37c04708-9951-4ebe-b294-97e64d6111ff"
        },
        "item": {
          "id": "0df0381e-328d-4a2c-88f9-3231d84ff5a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b4143bd1-d892-46ac-b422-7fc773566c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}